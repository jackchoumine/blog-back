{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/ocean/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/ocean/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/ocean/source/favicon1.ico","path":"favicon1.ico","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/404.styl","path":"css/404.styl","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/githubPage.jpeg","path":"images/githubPage.jpeg","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/hexo-inverted.svg","path":"images/hexo-inverted.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/hexo.svg","path":"images/hexo.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/portrait.png","path":"images/portrait.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/portrait2.jpg","path":"images/portrait2.jpg","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/portrait1.jpg","path":"images/portrait1.jpg","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/shark-inverted.svg","path":"images/shark-inverted.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/stackoverflow.svg","path":"images/stackoverflow.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/ocean.js","path":"js/ocean.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/pace.min.js","path":"js/pace.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","path":"css/feathericon/feathericon.eot","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","path":"css/feathericon/feathericon.woff","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","path":"css/feathericon/feathericon.woff2","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","path":"css/feathericon/feathericon.ttf","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","path":"images/ocean/overlay-hero.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","path":"css/feathericon/feathericon.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/forrestgump.png","path":"images/forrestgump.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","path":"images/ocean/ocean.ogv","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.png","path":"images/ocean/ocean.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.webm","path":"images/ocean/ocean.webm","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","path":"images/ocean/ocean.mp4","modified":1,"renderable":1}],"Cache":[{"_id":"themes/ocean/README.md","hash":"d04a79536c2f41b3c0c75127c4d26861b88f9897","modified":1558286291209},{"_id":"themes/ocean/_config.yml","hash":"ce946eb0f3da1ac67b514bc4795691a76b893a58","modified":1558730024391},{"_id":"source/_data/recommended_posts.json","hash":"e38ea9385d59c4cb3e1fcd9965836c6a9c96e8fa","modified":1558731031711},{"_id":"source/_drafts/html5-新增标签及新写法.md","hash":"6d1bda6c4efd20e1a2b4dc0e9965f851a8e4ce86","modified":1568467510521},{"_id":"source/_drafts/meta-标签用法总结.md","hash":"a5bf2522f477a7398ccd4b3a2e4b229f134c0d0b","modified":1568481432936},{"_id":"source/_drafts/restful-webservice实战笔记.md","hash":"55de65dd69cd4aa4c5f8dde28ad7c23bdbbd2b0b","modified":1590943123987},{"_id":"source/_drafts/如何用对html标签.md","hash":"90fe4b7233b7e84698271c8cd9f3ea0e4a4bd663","modified":1568469599047},{"_id":"source/_posts/2019年总结.md","hash":"9bcdd0dc765cf77082a20701e8e42ceb6d27213f","modified":1579620399522},{"_id":"source/_posts/CommonJS-模块和-ES6-模块在vue中混用.md","hash":"7cc0986484bb0b7a6b385537fc9c13b27a298cad","modified":1560681209557},{"_id":"source/_posts/CommonJS-规范.md","hash":"8dc898568ce80c9609c48cb38d2adb592dd17140","modified":1560680904814},{"_id":"source/_posts/Fetch-API-入门使用.md","hash":"bd4b46c35b5f66e95fb8d6cac2208df81c207381","modified":1560098495124},{"_id":"source/_posts/MIME-Type.md","hash":"f7fe0bafe1ae03e59fbe19448a6e67dcfe3e3f3f","modified":1560690747536},{"_id":"source/_posts/NPM-使用教程.md","hash":"070ace3d87478e319ba961b6e3b084addfb09ca9","modified":1558461923366},{"_id":"source/_posts/Vue-组件封装.md","hash":"36f1f68326f0b80546b67d55fecfe1fa167dd38e","modified":1559669826973},{"_id":"source/_posts/Windows7下的包管理器Chocolatey的安装及使用.md","hash":"f3d618b13ba13da279cff1eeda7286d13d18a7d8","modified":1570454199428},{"_id":"source/_posts/git-学习笔记.md","hash":"d4eed64e9ef9ebc4da6e3dae0b29ae202c70d21b","modified":1570298273614},{"_id":"source/_posts/hexo搭建博客.md","hash":"ae1272933b697740101a717fdca16374e5cd5719","modified":1570453965909},{"_id":"source/_posts/html5-websocket.md","hash":"892ee2795493bfca5aeb1aae814d8c38f3347624","modified":1560680259414},{"_id":"source/_posts/node-中的-ES-模块.md","hash":"d02917421e1d51ffaff2f97bf9d8e4262e73508f","modified":1560692311778},{"_id":"source/_posts/npm-语义化版本.md","hash":"9a5e63f6dcf2caf1e3721e0748099eb853c6d802","modified":1560693568400},{"_id":"source/_posts/vue 路由基础.md","hash":"f42b45143b232d2f6c6ee56f5b4069185d758b1a","modified":1559366625227},{"_id":"source/_posts/vue 路由进阶.md","hash":"a7703a8bd658cf71281335a36561f7960cc5cb3f","modified":1559367015541},{"_id":"source/_posts/vue-状态管理（一）.md","hash":"0e638411043d92c5045a8c5753eca03c38f3834e","modified":1558811457374},{"_id":"source/_posts/vue-状态管理（三）.md","hash":"a0f86c10af2dd2178234f3181bac4dd13e484a21","modified":1558874252973},{"_id":"source/_posts/vue-状态管理（二）.md","hash":"ce1c4635a69bc0eb6e8151ed7f942b30a77d0b9d","modified":1558868736456},{"_id":"source/_posts/web-worker-实现浏览器多线程.md","hash":"9e274c3771cf79e7db7e78d0b3a5ab69737288a2","modified":1560601258276},{"_id":"source/_posts/xhr-全面总结.md","hash":"9f12113ff1e77c3dad36f8bd27ac1dc796af7d41","modified":1560678460291},{"_id":"source/_posts/yarn-常见命令.md","hash":"01478a74d2c9c6092da0bfbfa8bed523ee49bb0e","modified":1560692004256},{"_id":"source/_posts/几种重定向.md","hash":"92a0e74ca8769472adeceb28673bd106c30971f8","modified":1560680346854},{"_id":"source/_posts/注册一个美区appleID.md","hash":"413d18f475b30698bd927903e801d0ab0dbdc161","modified":1561468614723},{"_id":"source/_posts/跨域请求.md","hash":"1c2ae098bb39ae098ff6d3526909af23b947ee64","modified":1560691145358},{"_id":"source/_posts/防抖和节流.md","hash":"fab7a152700fa2b3312e5adbe4b4a2f96ffb3ce2","modified":1561299820181},{"_id":"source/_posts/阴阳五行之来历.md","hash":"24af97174a490ca15b583b92eae3e566244bdd97","modified":1579610798510},{"_id":"themes/ocean/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1558286291210},{"_id":"themes/ocean/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1558286291211},{"_id":"themes/ocean/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1558286291212},{"_id":"themes/ocean/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1558286291212},{"_id":"themes/ocean/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1558286291213},{"_id":"themes/ocean/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1558286291213},{"_id":"themes/ocean/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1558286291214},{"_id":"themes/ocean/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1558286291216},{"_id":"themes/ocean/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1558286291217},{"_id":"themes/ocean/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1558286291217},{"_id":"themes/ocean/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1558286291218},{"_id":"themes/ocean/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1558286291234},{"_id":"themes/ocean/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1558286291235},{"_id":"themes/ocean/layout/index.ejs","hash":"26fd534ae15b80631c6dad91825ee23faae59066","modified":1558286291236},{"_id":"themes/ocean/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1558286291215},{"_id":"themes/ocean/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1558286291238},{"_id":"themes/ocean/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1558286291238},{"_id":"themes/ocean/source/404.html","hash":"632991270d65accdfc9e3d37e18b2ce107814e60","modified":1558286291243},{"_id":"themes/ocean/source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1558286291243},{"_id":"themes/ocean/source/favicon.ico","hash":"af79b1f8cd8fd2138ffd4fa14aa476a77c7fa8f1","modified":1558305537822},{"_id":"themes/ocean/layout/layout.ejs","hash":"dad11fb60307129d36c5512ceff72e878ea7afdd","modified":1558286291236},{"_id":"themes/ocean/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1558286291237},{"_id":"themes/ocean/source/favicon1.ico","hash":"d9fee79b90c221b5203b2eae6c5e8ba58fcf76bb","modified":1558305527442},{"_id":"themes/ocean/layout/_partial/after-footer.ejs","hash":"be6d37947d958ad7a79c75c456ced28fbf19b383","modified":1558286291220},{"_id":"themes/ocean/layout/_partial/archive-post.ejs","hash":"e225ae13929ea723a8f1c3f41b3fe68cd8e27a3e","modified":1558286291221},{"_id":"themes/ocean/layout/_partial/article.ejs","hash":"012972262888a606edac82a20c3cef5ede2bdcbf","modified":1558730603580},{"_id":"themes/ocean/layout/_partial/archive.ejs","hash":"1f5795f54de3c4a3fd4dcbb08d72f94b087425c3","modified":1558286291221},{"_id":"themes/ocean/layout/_partial/head.ejs","hash":"8cda718ff6565aeaaaa70e4f6a939cf6280e8956","modified":1558286291225},{"_id":"themes/ocean/layout/_partial/ocean.ejs","hash":"ea84e6d574f411da1be89e717fc8dde6e4df6462","modified":1558286291226},{"_id":"themes/ocean/layout/_partial/sidebar.ejs","hash":"74af54d6e30b4af42ba104de6192135631224d3a","modified":1558308917982},{"_id":"themes/ocean/layout/_partial/totop.ejs","hash":"3adb8c20d05ec1edcd2bf67729d9f170d99ae4b3","modified":1558286291234},{"_id":"themes/ocean/layout/_partial/footer.ejs","hash":"be1c4ff209c48b31ade9e211946683678f7706b9","modified":1558309826096},{"_id":"themes/ocean/source/css/404.styl","hash":"6a8f01e806e0ac2987c5f7c6e488f279af22f1c6","modified":1558286291245},{"_id":"themes/ocean/source/css/_extend.styl","hash":"684f572258bdca40007a23cc796db33b62b5d76e","modified":1558718635649},{"_id":"themes/ocean/source/css/_feathericon.styl","hash":"537e194b6f619d121964243bb2a05ff26d6a1574","modified":1558286291246},{"_id":"themes/ocean/source/css/_normalize.styl","hash":"df9ca719f651c45a88ab4d6afa6d29edf51aeba9","modified":1558286291248},{"_id":"themes/ocean/source/css/_mixins.styl","hash":"29a06e1724b91225e42e9c69263b921182228af7","modified":1558286291248},{"_id":"themes/ocean/source/css/_variables.styl","hash":"d32b7dfaed3ce58cb9e25c9f0ee663aa966008cb","modified":1558717961125},{"_id":"themes/ocean/source/css/style.styl","hash":"3b19d61ddbedbba23633940bfa2519d524d7f721","modified":1558728502885},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1558286291269},{"_id":"themes/ocean/source/images/favicon.ico","hash":"c5447a2f083d400ab343bacea92feed1d653a100","modified":1558305390267},{"_id":"themes/ocean/source/images/githubPage.jpeg","hash":"cea4d5b0ef3ae094790d22a0dbba765ac8f765c4","modified":1558166755962},{"_id":"themes/ocean/source/images/hexo-inverted.svg","hash":"5f3b9981523bbec59669b6ff138b1e327d17dcd6","modified":1558286291273},{"_id":"themes/ocean/source/images/hexo.svg","hash":"35df818edc1b34e4172e39d6e1989f04a4addf78","modified":1558286291274},{"_id":"themes/ocean/source/images/portrait.png","hash":"695e8f45c9350c0914bcd23c9ebd20e9bd0db04f","modified":1558305033950},{"_id":"themes/ocean/source/images/portrait2.jpg","hash":"dd8822b0181dfc4a193b3f0327eb7077210c1af7","modified":1558304763643},{"_id":"themes/ocean/source/images/portrait1.jpg","hash":"4127314c91052fb4b91b7d58a05d21638e66999c","modified":1558304758878},{"_id":"themes/ocean/source/images/shark-inverted.svg","hash":"53140244b49bc7d166c85ce2b9ccec5df01c4de0","modified":1558304855954},{"_id":"themes/ocean/source/images/stackoverflow.svg","hash":"2effc61ccd68a40b2e65dd9e39c7a79a869a3517","modified":1558305959740},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1558286291336},{"_id":"themes/ocean/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1558286291337},{"_id":"themes/ocean/source/js/ocean.js","hash":"9b627cd0a6b04dacd65caf414ad032d81146d462","modified":1558286291338},{"_id":"themes/ocean/source/js/pace.min.js","hash":"64759f14e0f92d62df57eb752f1745a16aba93ce","modified":1558286291339},{"_id":"themes/ocean/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1558286291339},{"_id":"themes/ocean/source/css/_partial/comment.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558286291252},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","hash":"3154fd527a002788848d9fec61d522048890e516","modified":1558286291270},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","hash":"e68550a39c95a6400287b3abd77f40c44f322e50","modified":1558286291337},{"_id":"themes/ocean/layout/_partial/post/albums.ejs","hash":"375f018d2c25ad199e6b7d700a12464c3871ce2b","modified":1558286291228},{"_id":"themes/ocean/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1558286291229},{"_id":"themes/ocean/layout/_partial/post/busuanzi.ejs","hash":"7172f1126aec263fc408b3bb710f3f0f6fae9063","modified":1558286291228},{"_id":"themes/ocean/layout/_partial/post/copy-right.ejs","hash":"2771eb247afc99f420fce20c4c031ceac395940a","modified":1558723059146},{"_id":"themes/ocean/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1558286291229},{"_id":"themes/ocean/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1558286291230},{"_id":"themes/ocean/layout/_partial/post/gitalk.ejs","hash":"6847735ec0397705c8125d76d6e872b1c2f36ea2","modified":1558286291230},{"_id":"themes/ocean/layout/_partial/post/recommended-post.ejs","hash":"f9a53a23c99944f167a8aabf9350e46fead0d87f","modified":1558730933810},{"_id":"themes/ocean/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1558286291231},{"_id":"themes/ocean/layout/_partial/post/reward.ejs","hash":"4a12eb3e356473dca2603ca106494002e229cb3b","modified":1558725851348},{"_id":"themes/ocean/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1558286291232},{"_id":"themes/ocean/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1558286291232},{"_id":"themes/ocean/layout/_partial/post/title.ejs","hash":"543676889bad115ca8acda7d99f8e423b9aa6be2","modified":1558286291233},{"_id":"themes/ocean/source/css/_partial/archive.styl","hash":"ed715125dbdddbd38e1592782c8a0508715f544b","modified":1558286291250},{"_id":"themes/ocean/source/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1558286291249},{"_id":"themes/ocean/source/css/_partial/article.styl","hash":"f8d4680f40811b3f2f3afa7384bf94aa60da05ad","modified":1558286291251},{"_id":"themes/ocean/source/css/_partial/articles.styl","hash":"92da71c704ae6f69704211a124bd72c23e4069a4","modified":1558286291251},{"_id":"themes/ocean/source/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1558286291253},{"_id":"themes/ocean/source/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1558286291254},{"_id":"themes/ocean/source/css/_partial/footer.styl","hash":"ee5a84861cdecbc61f63c897eb43c872e4a8c778","modified":1558286291253},{"_id":"themes/ocean/source/css/_partial/copy-right.styl","hash":"c2d19e6c801abbc0da78fd3cf8e70b49f73cd024","modified":1558722711245},{"_id":"themes/ocean/source/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1558286291255},{"_id":"themes/ocean/source/css/_partial/highlight.styl","hash":"2752fcd3da6186a187b0889367ce8793d730b06b","modified":1558464803395},{"_id":"themes/ocean/source/css/_partial/lists.styl","hash":"5db23a96d042686e51341f40da7f4d465a9847ad","modified":1558286291257},{"_id":"themes/ocean/source/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1558286291257},{"_id":"themes/ocean/source/css/_partial/navbar.styl","hash":"f203238201d1f69168ba1d73a6c08204077c7e18","modified":1558308780500},{"_id":"themes/ocean/source/css/_partial/layou.styl","hash":"c5c30693a8c0d9e61a84e49caea3fdf5efc23841","modified":1558286291256},{"_id":"themes/ocean/source/css/_partial/ocean.styl","hash":"8e668f088e4ad042019e9fffbf8d78649ec98aa2","modified":1558286291259},{"_id":"themes/ocean/source/css/_partial/pace.styl","hash":"da489a56e05903999c297c21b5c005570a2220e2","modified":1558286291260},{"_id":"themes/ocean/source/css/_partial/recommended-post.styl","hash":"92dc15d60b33ecab3506463440a1394e506249c6","modified":1558730348548},{"_id":"themes/ocean/source/css/_partial/search.styl","hash":"1070b0139c91d0def736ea182cdc884b927a9d19","modified":1558286291260},{"_id":"themes/ocean/source/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1558286291261},{"_id":"themes/ocean/source/css/_partial/totop.styl","hash":"16ff8dc49c5c64acced021c16f5f551a895ba7af","modified":1558286291261},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1558286291263},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1558286291266},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1558286291267},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1558286291265},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1558286291334},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","hash":"c868a01325d16441a50a94a13c623100a94a3a5c","modified":1558286291264},{"_id":"themes/ocean/source/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1558286291273},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","hash":"9c6b5d6b0544472cee39f5eafac2d5cbba5fd86b","modified":1558286291306},{"_id":"themes/ocean/source/images/ocean/ocean.png","hash":"8245d07f812625d19b48ad2d00f8191f2aa4d304","modified":1558286291313},{"_id":"themes/ocean/source/images/ocean/ocean.webm","hash":"65aa2b6483e0151611899e31571057334c60d9e4","modified":1558286291333},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","hash":"1e89cac2d652005d9dafd3ecb4dd460a8ff6d6af","modified":1558286291299}],"Category":[{"name":"html","_id":"ckd7cccdn0004jwrnxcu4yxim"},{"name":"vue","_id":"ckd7ccce6000cjwrnabnetspg"},{"name":"阶段性总结","_id":"ckd7ccceh000kjwrnyo7x6kb6"},{"name":"node","_id":"ckd7ccceq000qjwrn220qsnao"},{"name":"网络","_id":"ckd7cccf2000wjwrnewt9tbrb"},{"name":"版本控制","_id":"ckd7cccfm001hjwrn6dzc57om"},{"name":"前端框架","_id":"ckd7cccft001pjwrnc4nmo76h"},{"name":"开发工具","_id":"ckd7cccg1001wjwrn2b6jcbzl"},{"name":"html5","_id":"ckd7cccg80023jwrnplwambc1"},{"name":"工具使用","_id":"ckd7cccgs002xjwrnblysi2zn"},{"name":"数字生活","_id":"ckd7cccgz0037jwrn9q0f8m9f"},{"name":"概念深入","_id":"ckd7ccch3003cjwrn9epjfmdl"},{"name":"中医","_id":"ckd7ccch7003jjwrnx0b0ntuu"}],"Data":[{"_id":"recommended_posts","data":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}],"Page":[],"Post":[{"title":"html5 新增标签及新写法","_content":"\n之前对HTML5的知识只是看过了解过，并没有做相关记录。今天开始记录一下H5的相关知识。\n\n新增元素\n\n- 主体结构元素：nav、section、article、aside、time。\n- 非主体结构元素：header、hgroup、footer、address。\n\n<!--more-->\n***\n\n@[TOC]\n\n## 主体结构元素\n\n### nav \n导航部分，使用频率高：\n- 页面导航链接组；\n- 侧边栏导航\n\n```html\n<nav>\n\t<ul>\n\t\t<li><a href=\"https://baidu.com\">百度</a></li>\n\t\t<li><a href=\"https://google.com\">谷歌</a></li>\n\t</ul>\n<nav>\n```\n### section\n部分，使用频率较低：\n- 页面独立分块，往往是文章的章节；\n- 通常由内容和标题组成，没有标题和内容不推荐使用section；\n- **需要添加样式或者脚本行为时，使用div，不要使用section；**\n- 可与 article 相互嵌套。\n```html\n<section>\n\t<h1>水果<h1>\n\t<article>\n\t\t<h2>苹果<h2>\n\t\t<div>苹果是啥?<div>\n\t</article>\n\t<article>\n\t\t<h2>桔子</h2>\n\t\t<div>桔子是是啥</div>\n\t</article>\n</section>\n<article>\n\t<h1>中国人物</h1>\n\t<section>\n\t\t<h2>三国</h2>\n\t\t<p>猛将</p>\n\t</section>\n\t<section>\n\t\t<h2>两晋</h2>\n\t\t<p>猛将</p>\n\t</section>\n</article>\n```\n### article\n文章、文档，使用频率极高，强调独立性：\n- 一篇文章、一个页面、一个独立完整的内容部分；\n- 一般会带标题，并放在header中；\n- article 可相互嵌套。\n```html\n<article>\n\t<header>\n\t\t<h1>我是标题</h1>\n\t</header>\n\t<p>我是段落</p>\n\t<article>\n\t\t<div>我是内容</div>\n\t</article>\n</article>\n```\n### aside\n旁边、侧边，使用频率低：\n- 在article中使用，作为主要内容的附属信息，比如参考资料、名词解释；\n- 在article外使用，作为页面或者全局站点的附属信息，比如侧边栏、友情链接、广告等。\n\n```html\n<article>\n\t<h1>马云是谁</h1>\n\t<p>马云，男，1964年10月出生在浙江杭州，世界著名企业家……</p>\n\t<aside>\n\t\t<h1>参考：</h1>\n\t\t<p>维基百科</p>\n\t</aside>\n</article>\n```\n###  time\n时间，使用频率低：\n- 某个时刻或者日期；\n- 时刻允许带的时间差；\n- 可定义多种格式的日期和时间。\n```html\n<time datetime=\"2019-05-12\">2019年5月12日</time>\n<time datetime=\"2019-05-12T15:49\">2019年5月12日15:49</time>\n<!--Z-UTC时间-->\n<time datetime=\"2019-05-12T20:00Z\">2019年5月12日20:00</time>\n```\n\n## 非主体标签\n\n### header\n语义上看作文档的页眉，使用频率极高：\n- 具有引导和导航作用的元素，比如 h1,h2;\n- 房子整个页面或者页面的一个内容区块的标题；\n- 一个页面中没有限制header的数量。\n\n```html\n<header>\n\t<h1>我头部</h1>\n</header>\n<article>\n\t<header>\n\t\t<h1>我是文章头部</h1>\n\t</header>\n\t<p>我是身体</p>\n</article>\n```\n### hgroup\n标题组，使用频率高：\n- 作为header的子元素；\n- 使用了主标题h1和至少一个子标题才用hgroup;\n- 通常会将h1-h6分组。\n\n```html\n<article>\n\t<header>\n\t\t<hgroup>\n\t\t\t<h1>我是主标题</h1>\n\t\t\t<h2>是子标题</h2>\n\t\t\t<h3>我是子标题</h3>\n\t\t</hgroup>\n\t</header>\n\t<p>内容</p>\n</article>\n```\n\n### footer\n脚注，使用频率高：\n- 一个内容区块的脚注；\n- 通常的内容是联系信息、相关阅读、版权信息等。\n\n```html\n<article>\n\t<p>吕布惊呆了</p>\n\t<footer>\n\t\t<ul>\n\t\t\t<li>关于三国</li>\n\t\t\t<li>地图信息</li>\n\t\t</ul>\n\t</footer>\n</article>\n```\n### address\n地址信息，使用频率低，html4就有了：\n- 文档作者的联系信息；\n- 内容通常是作者、网站链接、电子邮件、地址、电话等。\n\n```html\n<address>\n\t<a href=\"\">作者：张三丰</a>\n\t<a href=\"\">地址：武当山</a>\n\t<a href=\"\">联系电话：112119</a>\n</address>\n```\n## 新写法\n文档类型定义\n作用：告诉浏览器解析文档的规范，必需的声明。\n```html\n<!DOCTYPE html>\n```\n根元素\n```html\n<html lang=\"zh-CN>\n```\n字符编码\n```html\n<meta charset=\"utf-8\">\n<!--HTML4--->\n< meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n```\njs和css可省略文档类型声明\n```html\n<link rel=\"stylesheet\" href=\"style.css\">\n<!--标准的js文件可省略type-->\n<script src=\"main.js\"></script>\n<!--HTML4-->\n<link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\">\n<script  src=\"main.js\" type=\"text/javascript\"></script>\n```\n一份html5模板\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>HTML5文档模板</title>\n</head>\n\n<body>\n  <!-- 页面头部 -->\n  <header>\n    <h1>My Site</h1>\n    <!-- 导航栏 -->\n    <nav>\n      <ul>\n        <li> ... </li>\n        <li> ... </li>\n      </ul>\n    </nav>\n  </header>\n\n  <!-- 单篇文章 -->\n  <article>\n    <header>\n      <time datetime=\"2018-12-10\">2018年12月10日</time>\n      <hgroup>\n        <h1>Hello, World!</h1>\n        <h2>hello html5</h2>\n      </hgroup>\n    </header>\n    <p>Lorem ipsum ...</p>\n    <section>\n      <p>文章的部分章节</p>\n    </section>\n  </article>\n\n  <!-- 页脚 -->\n  <footer>\n    <address>\n      <ul>\n        <li>联系电话：183151</li>\n        <li>通讯地址：中国，四川，成都，高新……</li>\n      </ul>\n      <p class=\"copyright\">Copyright &copy; 2013</p>\n    </address>\n  </footer>\n</body>\n\n</html>\n```","source":"_drafts/html5-新增标签及新写法.md","raw":"---\ntitle: html5 新增标签及新写法\ntags:\n- html5\ncategories:\n- [html]\n---\n\n之前对HTML5的知识只是看过了解过，并没有做相关记录。今天开始记录一下H5的相关知识。\n\n新增元素\n\n- 主体结构元素：nav、section、article、aside、time。\n- 非主体结构元素：header、hgroup、footer、address。\n\n<!--more-->\n***\n\n@[TOC]\n\n## 主体结构元素\n\n### nav \n导航部分，使用频率高：\n- 页面导航链接组；\n- 侧边栏导航\n\n```html\n<nav>\n\t<ul>\n\t\t<li><a href=\"https://baidu.com\">百度</a></li>\n\t\t<li><a href=\"https://google.com\">谷歌</a></li>\n\t</ul>\n<nav>\n```\n### section\n部分，使用频率较低：\n- 页面独立分块，往往是文章的章节；\n- 通常由内容和标题组成，没有标题和内容不推荐使用section；\n- **需要添加样式或者脚本行为时，使用div，不要使用section；**\n- 可与 article 相互嵌套。\n```html\n<section>\n\t<h1>水果<h1>\n\t<article>\n\t\t<h2>苹果<h2>\n\t\t<div>苹果是啥?<div>\n\t</article>\n\t<article>\n\t\t<h2>桔子</h2>\n\t\t<div>桔子是是啥</div>\n\t</article>\n</section>\n<article>\n\t<h1>中国人物</h1>\n\t<section>\n\t\t<h2>三国</h2>\n\t\t<p>猛将</p>\n\t</section>\n\t<section>\n\t\t<h2>两晋</h2>\n\t\t<p>猛将</p>\n\t</section>\n</article>\n```\n### article\n文章、文档，使用频率极高，强调独立性：\n- 一篇文章、一个页面、一个独立完整的内容部分；\n- 一般会带标题，并放在header中；\n- article 可相互嵌套。\n```html\n<article>\n\t<header>\n\t\t<h1>我是标题</h1>\n\t</header>\n\t<p>我是段落</p>\n\t<article>\n\t\t<div>我是内容</div>\n\t</article>\n</article>\n```\n### aside\n旁边、侧边，使用频率低：\n- 在article中使用，作为主要内容的附属信息，比如参考资料、名词解释；\n- 在article外使用，作为页面或者全局站点的附属信息，比如侧边栏、友情链接、广告等。\n\n```html\n<article>\n\t<h1>马云是谁</h1>\n\t<p>马云，男，1964年10月出生在浙江杭州，世界著名企业家……</p>\n\t<aside>\n\t\t<h1>参考：</h1>\n\t\t<p>维基百科</p>\n\t</aside>\n</article>\n```\n###  time\n时间，使用频率低：\n- 某个时刻或者日期；\n- 时刻允许带的时间差；\n- 可定义多种格式的日期和时间。\n```html\n<time datetime=\"2019-05-12\">2019年5月12日</time>\n<time datetime=\"2019-05-12T15:49\">2019年5月12日15:49</time>\n<!--Z-UTC时间-->\n<time datetime=\"2019-05-12T20:00Z\">2019年5月12日20:00</time>\n```\n\n## 非主体标签\n\n### header\n语义上看作文档的页眉，使用频率极高：\n- 具有引导和导航作用的元素，比如 h1,h2;\n- 房子整个页面或者页面的一个内容区块的标题；\n- 一个页面中没有限制header的数量。\n\n```html\n<header>\n\t<h1>我头部</h1>\n</header>\n<article>\n\t<header>\n\t\t<h1>我是文章头部</h1>\n\t</header>\n\t<p>我是身体</p>\n</article>\n```\n### hgroup\n标题组，使用频率高：\n- 作为header的子元素；\n- 使用了主标题h1和至少一个子标题才用hgroup;\n- 通常会将h1-h6分组。\n\n```html\n<article>\n\t<header>\n\t\t<hgroup>\n\t\t\t<h1>我是主标题</h1>\n\t\t\t<h2>是子标题</h2>\n\t\t\t<h3>我是子标题</h3>\n\t\t</hgroup>\n\t</header>\n\t<p>内容</p>\n</article>\n```\n\n### footer\n脚注，使用频率高：\n- 一个内容区块的脚注；\n- 通常的内容是联系信息、相关阅读、版权信息等。\n\n```html\n<article>\n\t<p>吕布惊呆了</p>\n\t<footer>\n\t\t<ul>\n\t\t\t<li>关于三国</li>\n\t\t\t<li>地图信息</li>\n\t\t</ul>\n\t</footer>\n</article>\n```\n### address\n地址信息，使用频率低，html4就有了：\n- 文档作者的联系信息；\n- 内容通常是作者、网站链接、电子邮件、地址、电话等。\n\n```html\n<address>\n\t<a href=\"\">作者：张三丰</a>\n\t<a href=\"\">地址：武当山</a>\n\t<a href=\"\">联系电话：112119</a>\n</address>\n```\n## 新写法\n文档类型定义\n作用：告诉浏览器解析文档的规范，必需的声明。\n```html\n<!DOCTYPE html>\n```\n根元素\n```html\n<html lang=\"zh-CN>\n```\n字符编码\n```html\n<meta charset=\"utf-8\">\n<!--HTML4--->\n< meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n```\njs和css可省略文档类型声明\n```html\n<link rel=\"stylesheet\" href=\"style.css\">\n<!--标准的js文件可省略type-->\n<script src=\"main.js\"></script>\n<!--HTML4-->\n<link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\">\n<script  src=\"main.js\" type=\"text/javascript\"></script>\n```\n一份html5模板\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>HTML5文档模板</title>\n</head>\n\n<body>\n  <!-- 页面头部 -->\n  <header>\n    <h1>My Site</h1>\n    <!-- 导航栏 -->\n    <nav>\n      <ul>\n        <li> ... </li>\n        <li> ... </li>\n      </ul>\n    </nav>\n  </header>\n\n  <!-- 单篇文章 -->\n  <article>\n    <header>\n      <time datetime=\"2018-12-10\">2018年12月10日</time>\n      <hgroup>\n        <h1>Hello, World!</h1>\n        <h2>hello html5</h2>\n      </hgroup>\n    </header>\n    <p>Lorem ipsum ...</p>\n    <section>\n      <p>文章的部分章节</p>\n    </section>\n  </article>\n\n  <!-- 页脚 -->\n  <footer>\n    <address>\n      <ul>\n        <li>联系电话：183151</li>\n        <li>通讯地址：中国，四川，成都，高新……</li>\n      </ul>\n      <p class=\"copyright\">Copyright &copy; 2013</p>\n    </address>\n  </footer>\n</body>\n\n</html>\n```","slug":"html5-新增标签及新写法","published":0,"date":"2019-09-14T13:03:53.865Z","updated":"2019-09-14T13:25:10.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccd90000jwrne09u3luh","content":"<p>之前对HTML5的知识只是看过了解过，并没有做相关记录。今天开始记录一下H5的相关知识。</p>\n<p>新增元素</p>\n<ul>\n<li>主体结构元素：nav、section、article、aside、time。</li>\n<li>非主体结构元素：header、hgroup、footer、address。</li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E4%B8%BB%E4%BD%93%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0\">主体结构元素</a>\n<ul>\n<li><a href=\"#nav\">nav</a></li>\n<li><a href=\"#section\">section</a></li>\n<li><a href=\"#article\">article</a></li>\n<li><a href=\"#aside\">aside</a></li>\n<li><a href=\"#time\">time</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%9D%9E%E4%B8%BB%E4%BD%93%E6%A0%87%E7%AD%BE\">非主体标签</a>\n<ul>\n<li><a href=\"#header\">header</a></li>\n<li><a href=\"#hgroup\">hgroup</a></li>\n<li><a href=\"#footer\">footer</a></li>\n<li><a href=\"#address\">address</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%96%B0%E5%86%99%E6%B3%95\">新写法</a></li>\n</ul>\n</p>\n<h2 id=\"主体结构元素\"><a class=\"markdownIt-Anchor\" href=\"#主体结构元素\"></a> 主体结构元素</h2>\n<h3 id=\"nav\"><a class=\"markdownIt-Anchor\" href=\"#nav\"></a> nav</h3>\n<p>导航部分，使用频率高：</p>\n<ul>\n<li>页面导航链接组；</li>\n<li>侧边栏导航</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://baidu.com\"</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://google.com\"</span>&gt;</span>谷歌<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"section\"><a class=\"markdownIt-Anchor\" href=\"#section\"></a> section</h3>\n<p>部分，使用频率较低：</p>\n<ul>\n<li>页面独立分块，往往是文章的章节；</li>\n<li>通常由内容和标题组成，没有标题和内容不推荐使用section；</li>\n<li><strong>需要添加样式或者脚本行为时，使用div，不要使用section；</strong></li>\n<li>可与 article 相互嵌套。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>水果<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>苹果<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>苹果是啥?<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>桔子<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>桔子是是啥<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>中国人物<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>三国<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>猛将<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>两晋<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>猛将<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"article\"><a class=\"markdownIt-Anchor\" href=\"#article\"></a> article</h3>\n<p>文章、文档，使用频率极高，强调独立性：</p>\n<ul>\n<li>一篇文章、一个页面、一个独立完整的内容部分；</li>\n<li>一般会带标题，并放在header中；</li>\n<li>article 可相互嵌套。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是段落<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>我是内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"aside\"><a class=\"markdownIt-Anchor\" href=\"#aside\"></a> aside</h3>\n<p>旁边、侧边，使用频率低：</p>\n<ul>\n<li>在article中使用，作为主要内容的附属信息，比如参考资料、名词解释；</li>\n<li>在article外使用，作为页面或者全局站点的附属信息，比如侧边栏、友情链接、广告等。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>马云是谁<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>马云，男，1964年10月出生在浙江杭州，世界著名企业家……<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>参考：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>维基百科<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"time\"><a class=\"markdownIt-Anchor\" href=\"#time\"></a> time</h3>\n<p>时间，使用频率低：</p>\n<ul>\n<li>某个时刻或者日期；</li>\n<li>时刻允许带的时间差；</li>\n<li>可定义多种格式的日期和时间。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span> <span class=\"attr\">datetime</span>=<span class=\"string\">\"2019-05-12\"</span>&gt;</span>2019年5月12日<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span> <span class=\"attr\">datetime</span>=<span class=\"string\">\"2019-05-12T15:49\"</span>&gt;</span>2019年5月12日15:49<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Z-UTC时间--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span> <span class=\"attr\">datetime</span>=<span class=\"string\">\"2019-05-12T20:00Z\"</span>&gt;</span>2019年5月12日20:00<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"非主体标签\"><a class=\"markdownIt-Anchor\" href=\"#非主体标签\"></a> 非主体标签</h2>\n<h3 id=\"header\"><a class=\"markdownIt-Anchor\" href=\"#header\"></a> header</h3>\n<p>语义上看作文档的页眉，使用频率极高：</p>\n<ul>\n<li>具有引导和导航作用的元素，比如 h1,h2;</li>\n<li>房子整个页面或者页面的一个内容区块的标题；</li>\n<li>一个页面中没有限制header的数量。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我头部<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是文章头部<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是身体<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"hgroup\"><a class=\"markdownIt-Anchor\" href=\"#hgroup\"></a> hgroup</h3>\n<p>标题组，使用频率高：</p>\n<ul>\n<li>作为header的子元素；</li>\n<li>使用了主标题h1和至少一个子标题才用hgroup;</li>\n<li>通常会将h1-h6分组。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">hgroup</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是主标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>是子标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>我是子标题<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">hgroup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"footer\"><a class=\"markdownIt-Anchor\" href=\"#footer\"></a> footer</h3>\n<p>脚注，使用频率高：</p>\n<ul>\n<li>一个内容区块的脚注；</li>\n<li>通常的内容是联系信息、相关阅读、版权信息等。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>吕布惊呆了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>关于三国<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>地图信息<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"address\"><a class=\"markdownIt-Anchor\" href=\"#address\"></a> address</h3>\n<p>地址信息，使用频率低，html4就有了：</p>\n<ul>\n<li>文档作者的联系信息；</li>\n<li>内容通常是作者、网站链接、电子邮件、地址、电话等。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">address</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>作者：张三丰<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>地址：武当山<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>联系电话：112119<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">address</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"新写法\"><a class=\"markdownIt-Anchor\" href=\"#新写法\"></a> 新写法</h2>\n<p>文档类型定义<br>\n作用：告诉浏览器解析文档的规范，必需的声明。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure>\n<p>根元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>字符编码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--HTML4---&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>js和css可省略文档类型声明</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--标准的js文件可省略type--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"main.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--HTML4--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>  <span class=\"attr\">src</span>=<span class=\"string\">\"main.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一份html5模板</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HTML5文档模板<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 页面头部 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>My Site<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导航栏 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 单篇文章 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">time</span> <span class=\"attr\">datetime</span>=<span class=\"string\">\"2018-12-10\"</span>&gt;</span>2018年12月10日<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">hgroup</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>hello html5<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">hgroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Lorem ipsum ...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>文章的部分章节<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 页脚 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">address</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>联系电话：183151<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>通讯地址：中国，四川，成都，高新……<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"copyright\"</span>&gt;</span>Copyright &amp;copy; 2013<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">address</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>之前对HTML5的知识只是看过了解过，并没有做相关记录。今天开始记录一下H5的相关知识。</p>\n<p>新增元素</p>\n<ul>\n<li>主体结构元素：nav、section、article、aside、time。</li>\n<li>非主体结构元素：header、hgroup、footer、address。</li>\n</ul>","more":"<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E4%B8%BB%E4%BD%93%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0\">主体结构元素</a>\n<ul>\n<li><a href=\"#nav\">nav</a></li>\n<li><a href=\"#section\">section</a></li>\n<li><a href=\"#article\">article</a></li>\n<li><a href=\"#aside\">aside</a></li>\n<li><a href=\"#time\">time</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%9D%9E%E4%B8%BB%E4%BD%93%E6%A0%87%E7%AD%BE\">非主体标签</a>\n<ul>\n<li><a href=\"#header\">header</a></li>\n<li><a href=\"#hgroup\">hgroup</a></li>\n<li><a href=\"#footer\">footer</a></li>\n<li><a href=\"#address\">address</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%96%B0%E5%86%99%E6%B3%95\">新写法</a></li>\n</ul>\n</p>\n<h2 id=\"主体结构元素\"><a class=\"markdownIt-Anchor\" href=\"#主体结构元素\"></a> 主体结构元素</h2>\n<h3 id=\"nav\"><a class=\"markdownIt-Anchor\" href=\"#nav\"></a> nav</h3>\n<p>导航部分，使用频率高：</p>\n<ul>\n<li>页面导航链接组；</li>\n<li>侧边栏导航</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://baidu.com\"</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://google.com\"</span>&gt;</span>谷歌<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"section\"><a class=\"markdownIt-Anchor\" href=\"#section\"></a> section</h3>\n<p>部分，使用频率较低：</p>\n<ul>\n<li>页面独立分块，往往是文章的章节；</li>\n<li>通常由内容和标题组成，没有标题和内容不推荐使用section；</li>\n<li><strong>需要添加样式或者脚本行为时，使用div，不要使用section；</strong></li>\n<li>可与 article 相互嵌套。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>水果<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>苹果<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>苹果是啥?<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>桔子<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>桔子是是啥<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>中国人物<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>三国<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>猛将<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>两晋<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>猛将<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"article\"><a class=\"markdownIt-Anchor\" href=\"#article\"></a> article</h3>\n<p>文章、文档，使用频率极高，强调独立性：</p>\n<ul>\n<li>一篇文章、一个页面、一个独立完整的内容部分；</li>\n<li>一般会带标题，并放在header中；</li>\n<li>article 可相互嵌套。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是段落<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>我是内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"aside\"><a class=\"markdownIt-Anchor\" href=\"#aside\"></a> aside</h3>\n<p>旁边、侧边，使用频率低：</p>\n<ul>\n<li>在article中使用，作为主要内容的附属信息，比如参考资料、名词解释；</li>\n<li>在article外使用，作为页面或者全局站点的附属信息，比如侧边栏、友情链接、广告等。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>马云是谁<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>马云，男，1964年10月出生在浙江杭州，世界著名企业家……<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>参考：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>维基百科<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"time\"><a class=\"markdownIt-Anchor\" href=\"#time\"></a> time</h3>\n<p>时间，使用频率低：</p>\n<ul>\n<li>某个时刻或者日期；</li>\n<li>时刻允许带的时间差；</li>\n<li>可定义多种格式的日期和时间。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span> <span class=\"attr\">datetime</span>=<span class=\"string\">\"2019-05-12\"</span>&gt;</span>2019年5月12日<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span> <span class=\"attr\">datetime</span>=<span class=\"string\">\"2019-05-12T15:49\"</span>&gt;</span>2019年5月12日15:49<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Z-UTC时间--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span> <span class=\"attr\">datetime</span>=<span class=\"string\">\"2019-05-12T20:00Z\"</span>&gt;</span>2019年5月12日20:00<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"非主体标签\"><a class=\"markdownIt-Anchor\" href=\"#非主体标签\"></a> 非主体标签</h2>\n<h3 id=\"header\"><a class=\"markdownIt-Anchor\" href=\"#header\"></a> header</h3>\n<p>语义上看作文档的页眉，使用频率极高：</p>\n<ul>\n<li>具有引导和导航作用的元素，比如 h1,h2;</li>\n<li>房子整个页面或者页面的一个内容区块的标题；</li>\n<li>一个页面中没有限制header的数量。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我头部<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是文章头部<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是身体<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"hgroup\"><a class=\"markdownIt-Anchor\" href=\"#hgroup\"></a> hgroup</h3>\n<p>标题组，使用频率高：</p>\n<ul>\n<li>作为header的子元素；</li>\n<li>使用了主标题h1和至少一个子标题才用hgroup;</li>\n<li>通常会将h1-h6分组。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">hgroup</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是主标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>是子标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>我是子标题<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">hgroup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"footer\"><a class=\"markdownIt-Anchor\" href=\"#footer\"></a> footer</h3>\n<p>脚注，使用频率高：</p>\n<ul>\n<li>一个内容区块的脚注；</li>\n<li>通常的内容是联系信息、相关阅读、版权信息等。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>吕布惊呆了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>关于三国<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>地图信息<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"address\"><a class=\"markdownIt-Anchor\" href=\"#address\"></a> address</h3>\n<p>地址信息，使用频率低，html4就有了：</p>\n<ul>\n<li>文档作者的联系信息；</li>\n<li>内容通常是作者、网站链接、电子邮件、地址、电话等。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">address</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>作者：张三丰<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>地址：武当山<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>联系电话：112119<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">address</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"新写法\"><a class=\"markdownIt-Anchor\" href=\"#新写法\"></a> 新写法</h2>\n<p>文档类型定义<br>\n作用：告诉浏览器解析文档的规范，必需的声明。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure>\n<p>根元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>字符编码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--HTML4---&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>js和css可省略文档类型声明</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--标准的js文件可省略type--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"main.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--HTML4--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>  <span class=\"attr\">src</span>=<span class=\"string\">\"main.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一份html5模板</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HTML5文档模板<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 页面头部 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>My Site<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导航栏 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 单篇文章 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">time</span> <span class=\"attr\">datetime</span>=<span class=\"string\">\"2018-12-10\"</span>&gt;</span>2018年12月10日<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">hgroup</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>hello html5<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">hgroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Lorem ipsum ...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>文章的部分章节<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 页脚 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">address</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>联系电话：183151<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>通讯地址：中国，四川，成都，高新……<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"copyright\"</span>&gt;</span>Copyright &amp;copy; 2013<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">address</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"meta 标签用法总结","_content":"\n一直很少关注该标签，今天就要总结一下。\n模拟HTTP响应头和指定文档元数据，这些数据是其他元素`<base><link><script><style><title>`不能指定的。meta 标签不会出现在页面上，但可以被浏览器和服务器识别。\n元数据：文档作者、描述、关键词、文档字符编码、视口大小等。\n\n<!-- more -->\n***\n\n@[TOC]\n\n## 属性\n`content、http-equiv、name、charset`。\n\n- charset：指定文档编码。比如`UTF-8`，只能有一个具有该属性的meta。\n- http-equiv：用于模拟HTTP响应头。\n- name：元数据名字。\n- content：元数据的值。\n\n## 用法\n`charset`、`http-equiv`、`name`三个属性不能同时使用。`content` 必须和 `name` 或者 `http-equiv` 配对使用。\n\n## name的取值\n|name|描述|备注|\n|:--|:---|:---|\n|application-name|web应用名字|网页不是web应用时，name不能取application-name(什么是web应用)|\n|author|文档作者||\n|description|文档描述|最多一个，有利于seo|\n|keywords|文档关键词，利于seo||\n|referrer|跳转页面的策略|content属性值对应于从当前页面跳转到其他页面时，http请求的referrer策略|\n|generator|生成文档的工具|一般不设置|\n\n以上是HTML5的标准值，还可以设置其他非标准值：\n```html\n<meta name=\"viewport\" content=\"width=device-width\">\n```\n### referrer\n|referrer|content|响应头referer|\n|:---|:----|:---|\n|no-referrer|never|删除Referer|\n|no-referrer-when-downgrade|default|如果当前页面使用的是https协议，跳转的页面使用的是http协议，则取值为空。如果当前协议与跳转页面使用的协议一致，则取值为当前页面url的协议、域名、请求参数这三个值拼成的uri|\n|unsafe-url|always|当前页面url的协议、域名、请求参数拼成的uri|\n|origin-when-cross-origin|origin-when-crossorigin|跨域时取值与Origin字段一致，不是当前页面的完整url，只是协议和域名拼成的uri|\n\n[Referrer Policy 介绍](https://imququ.com/post/referrer-policy.html)\n[关于meta的referer属性](https://951759534.github.io/2017/06/06/%E5%85%B3%E4%BA%8Emeta%E7%9A%84referer%E5%B1%9E%E6%80%A7/)\n\n### referrer VS origin  VS host VS Remote Address\n\norigin 指定请求来自哪个站点，跨域时使用：\n```js \norigin: \"\"\norigin: <scheme> \"://\" <host> [ \":\" <port> ]\n//host是域名或IP\norigin: https://developer.mozilla.org\n```\nhost 指定请求域名\nhttp1.1必须设置，http1.0 可省略。\n\n```js \nhost: <host>:<port>\nhost: developer.cdn.mozilla.net\n```\nRemote Address 是一个响应头，是服务器的`ip:port`。\nreferer 用于指定请求的源页面。\n\n## http-equiv\n\n五个取值：\n|值|描述|备注|\n|:--|:--|:--|\n|~~content-language~~|文档语言类型|使用 html的lang 代替|\n|~~content-type~~|文档编码方式|charset 代替|\n|refresh|页面自动刷新的时间间隔||\n|set-cookie|content用于设置网页cookie|HTML5不推荐使用|\n|default-style|content是文档预定义样式||\n\n\n\n例子：\n```html\n<meta http-equiv=\"refresh\" content=\"1\"> \n<!--每隔1秒刷新页面-->\n<meta http-equiv=\"refresh\" content=\"1;url=baidu.com\"> \n<!--1秒后重定向到百度-->\n<meta charset=\"utf-8\">\n```\n## 移动端常用meta\n```html\n<!DOCTYPE html> <!-- 使用 HTML5 doctype，不区分大小写 -->\n<html lang=\"zh-CN\"> <!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa -->\n<head>\n    <!-- 声明文档使用的字符编码 -->\n    <meta charset=`utf-8`>\n    <!-- 优先使用 IE 最新版本和 Chrome -->\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/>\n    <!-- 页面描述 -->\n    <meta name=\"description\" content=\"不超过150个字符\"/>\n    <!-- 页面关键词 -->\n    <meta name=\"keywords\" content=\"关键词1，关键词2\"/>\n    <!-- 网页作者 -->\n    <meta name=\"author\" content=\"name, email@gmail.com\"/>\n    <!-- 搜索引擎抓取 -->\n    <meta name=\"robots\" content=\"index,follow\"/>\n    <!-- 为移动设备添加 viewport -->\n    <meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no\">\n    <!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz -->\n \n    <!-- iOS 设备 begin -->\n    <meta name=\"apple-mobile-web-app-title\" content=\"标题\">\n    <!-- 添加到主屏后的标题（iOS 6 新增） -->\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"/>\n    <!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 -->\n \n    <meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\">\n    <!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） -->\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"/>\n    <!-- 设置苹果工具栏颜色 -->\n    <meta name=\"format-detection\" content=\"telphone=no, email=no\"/>\n    <!-- 忽略页面中的数字识别为电话，忽略email识别 -->\n    <!-- 启用360浏览器的极速模式(webkit) -->\n    <meta name=\"renderer\" content=\"webkit\">\n    <!-- 避免IE使用兼容模式 -->\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <!-- 不让百度转码 -->\n    <meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n    <!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n    <meta name=\"HandheldFriendly\" content=\"true\">\n    <!-- 微软的老式浏览器 -->\n    <meta name=\"MobileOptimized\" content=\"320\">\n    <!-- uc强制竖屏 -->\n    <meta name=\"screen-orientation\" content=\"portrait\">\n    <!-- QQ强制竖屏 -->\n    <meta name=\"x5-orientation\" content=\"portrait\">\n    <!-- UC强制全屏 -->\n    <meta name=\"full-screen\" content=\"yes\">\n    <!-- QQ强制全屏 -->\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <!-- UC应用模式 -->\n    <meta name=\"browsermode\" content=\"application\">\n    <!-- QQ应用模式 -->\n    <meta name=\"x5-page-mode\" content=\"app\">\n    <!-- windows phone 点击无高光 -->\n    <meta name=\"msapplication-tap-highlight\" content=\"no\">\n    <!-- iOS 图标 begin -->\n    <link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon-57x57-precomposed.png\"/>\n    <!-- iPhone 和 iTouch，默认 57x57 像素，必须有 -->\n    <link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/apple-touch-icon-114x114-precomposed.png\"/>\n    <!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 -->\n    <link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144-precomposed.png\"/>\n    <!-- Retina iPad，144x144 像素，可以没有，但推荐有 -->\n    <!-- iOS 图标 end -->\n \n    <!-- iOS 启动画面 begin -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"768x1004\" href=\"/splash-screen-768x1004.png\"/>\n    <!-- iPad 竖屏 768 x 1004（标准分辨率） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"1536x2008\" href=\"/splash-screen-1536x2008.png\"/>\n    <!-- iPad 竖屏 1536x2008（Retina） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"1024x748\" href=\"/Default-Portrait-1024x748.png\"/>\n    <!-- iPad 横屏 1024x748（标准分辨率） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"2048x1496\" href=\"/splash-screen-2048x1496.png\"/>\n    <!-- iPad 横屏 2048x1496（Retina） -->\n \n    <link rel=\"apple-touch-startup-image\" href=\"/splash-screen-320x480.png\"/>\n    <!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"640x960\" href=\"/splash-screen-640x960.png\"/>\n    <!-- iPhone/iPod Touch 竖屏 640x960 (Retina) -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"640x1136\" href=\"/splash-screen-640x1136.png\"/>\n    <!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) -->\n    <!-- iOS 启动画面 end -->\n \n    <!-- iOS 设备 end -->\n    <meta name=\"msapplication-TileColor\" content=\"#000\"/>\n    <!-- Windows 8 磁贴颜色 -->\n    <meta name=\"msapplication-TileImage\" content=\"icon.png\"/>\n    <!-- Windows 8 磁贴图标 -->\n \n    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"/rss.xml\"/>\n    <!-- 添加 RSS 订阅 -->\n    <link rel=\"shortcut icon\" type=\"image/ico\" href=\"/favicon.ico\"/>\n    <!-- 添加 favicon icon -->\n\n    <!-- sns 社交标签 begin -->\n    <!-- 参考微博API -->\n    <meta property=\"og:type\" content=\"类型\" />\n    <meta property=\"og:url\" content=\"URL地址\" />\n    <meta property=\"og:title\" content=\"标题\" />\n    <meta property=\"og:image\" content=\"图片\" />\n    <meta property=\"og:description\" content=\"描述\" />\n    <!-- sns 社交标签 end -->\n \n    <title>标题</title>\n</head\n```\n\n## 参考\n[Meta元素](https://www.wikiwand.com/zh/Meta%E5%85%83%E7%B4%A0)\n[HTML:5meta标签](https://flycode.co/archives/243440)\n[meta标签学习](https://blog.yanfangyao.guru/notes/20180717214533/)\n[关于meta的referer属性](https://951759534.github.io/2017/06/06/%E5%85%B3%E4%BA%8Emeta%E7%9A%84referer%E5%B1%9E%E6%80%A7/)\n[HTML元信息类标签](<https://time.geekbang.org/column/article/82711>)\n\n\n","source":"_drafts/meta-标签用法总结.md","raw":"---\ntitle: meta 标签用法总结\ntags:\n- html\ncategories:\n- [html]\n---\n\n一直很少关注该标签，今天就要总结一下。\n模拟HTTP响应头和指定文档元数据，这些数据是其他元素`<base><link><script><style><title>`不能指定的。meta 标签不会出现在页面上，但可以被浏览器和服务器识别。\n元数据：文档作者、描述、关键词、文档字符编码、视口大小等。\n\n<!-- more -->\n***\n\n@[TOC]\n\n## 属性\n`content、http-equiv、name、charset`。\n\n- charset：指定文档编码。比如`UTF-8`，只能有一个具有该属性的meta。\n- http-equiv：用于模拟HTTP响应头。\n- name：元数据名字。\n- content：元数据的值。\n\n## 用法\n`charset`、`http-equiv`、`name`三个属性不能同时使用。`content` 必须和 `name` 或者 `http-equiv` 配对使用。\n\n## name的取值\n|name|描述|备注|\n|:--|:---|:---|\n|application-name|web应用名字|网页不是web应用时，name不能取application-name(什么是web应用)|\n|author|文档作者||\n|description|文档描述|最多一个，有利于seo|\n|keywords|文档关键词，利于seo||\n|referrer|跳转页面的策略|content属性值对应于从当前页面跳转到其他页面时，http请求的referrer策略|\n|generator|生成文档的工具|一般不设置|\n\n以上是HTML5的标准值，还可以设置其他非标准值：\n```html\n<meta name=\"viewport\" content=\"width=device-width\">\n```\n### referrer\n|referrer|content|响应头referer|\n|:---|:----|:---|\n|no-referrer|never|删除Referer|\n|no-referrer-when-downgrade|default|如果当前页面使用的是https协议，跳转的页面使用的是http协议，则取值为空。如果当前协议与跳转页面使用的协议一致，则取值为当前页面url的协议、域名、请求参数这三个值拼成的uri|\n|unsafe-url|always|当前页面url的协议、域名、请求参数拼成的uri|\n|origin-when-cross-origin|origin-when-crossorigin|跨域时取值与Origin字段一致，不是当前页面的完整url，只是协议和域名拼成的uri|\n\n[Referrer Policy 介绍](https://imququ.com/post/referrer-policy.html)\n[关于meta的referer属性](https://951759534.github.io/2017/06/06/%E5%85%B3%E4%BA%8Emeta%E7%9A%84referer%E5%B1%9E%E6%80%A7/)\n\n### referrer VS origin  VS host VS Remote Address\n\norigin 指定请求来自哪个站点，跨域时使用：\n```js \norigin: \"\"\norigin: <scheme> \"://\" <host> [ \":\" <port> ]\n//host是域名或IP\norigin: https://developer.mozilla.org\n```\nhost 指定请求域名\nhttp1.1必须设置，http1.0 可省略。\n\n```js \nhost: <host>:<port>\nhost: developer.cdn.mozilla.net\n```\nRemote Address 是一个响应头，是服务器的`ip:port`。\nreferer 用于指定请求的源页面。\n\n## http-equiv\n\n五个取值：\n|值|描述|备注|\n|:--|:--|:--|\n|~~content-language~~|文档语言类型|使用 html的lang 代替|\n|~~content-type~~|文档编码方式|charset 代替|\n|refresh|页面自动刷新的时间间隔||\n|set-cookie|content用于设置网页cookie|HTML5不推荐使用|\n|default-style|content是文档预定义样式||\n\n\n\n例子：\n```html\n<meta http-equiv=\"refresh\" content=\"1\"> \n<!--每隔1秒刷新页面-->\n<meta http-equiv=\"refresh\" content=\"1;url=baidu.com\"> \n<!--1秒后重定向到百度-->\n<meta charset=\"utf-8\">\n```\n## 移动端常用meta\n```html\n<!DOCTYPE html> <!-- 使用 HTML5 doctype，不区分大小写 -->\n<html lang=\"zh-CN\"> <!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa -->\n<head>\n    <!-- 声明文档使用的字符编码 -->\n    <meta charset=`utf-8`>\n    <!-- 优先使用 IE 最新版本和 Chrome -->\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/>\n    <!-- 页面描述 -->\n    <meta name=\"description\" content=\"不超过150个字符\"/>\n    <!-- 页面关键词 -->\n    <meta name=\"keywords\" content=\"关键词1，关键词2\"/>\n    <!-- 网页作者 -->\n    <meta name=\"author\" content=\"name, email@gmail.com\"/>\n    <!-- 搜索引擎抓取 -->\n    <meta name=\"robots\" content=\"index,follow\"/>\n    <!-- 为移动设备添加 viewport -->\n    <meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no\">\n    <!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz -->\n \n    <!-- iOS 设备 begin -->\n    <meta name=\"apple-mobile-web-app-title\" content=\"标题\">\n    <!-- 添加到主屏后的标题（iOS 6 新增） -->\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"/>\n    <!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 -->\n \n    <meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\">\n    <!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） -->\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"/>\n    <!-- 设置苹果工具栏颜色 -->\n    <meta name=\"format-detection\" content=\"telphone=no, email=no\"/>\n    <!-- 忽略页面中的数字识别为电话，忽略email识别 -->\n    <!-- 启用360浏览器的极速模式(webkit) -->\n    <meta name=\"renderer\" content=\"webkit\">\n    <!-- 避免IE使用兼容模式 -->\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <!-- 不让百度转码 -->\n    <meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n    <!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n    <meta name=\"HandheldFriendly\" content=\"true\">\n    <!-- 微软的老式浏览器 -->\n    <meta name=\"MobileOptimized\" content=\"320\">\n    <!-- uc强制竖屏 -->\n    <meta name=\"screen-orientation\" content=\"portrait\">\n    <!-- QQ强制竖屏 -->\n    <meta name=\"x5-orientation\" content=\"portrait\">\n    <!-- UC强制全屏 -->\n    <meta name=\"full-screen\" content=\"yes\">\n    <!-- QQ强制全屏 -->\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <!-- UC应用模式 -->\n    <meta name=\"browsermode\" content=\"application\">\n    <!-- QQ应用模式 -->\n    <meta name=\"x5-page-mode\" content=\"app\">\n    <!-- windows phone 点击无高光 -->\n    <meta name=\"msapplication-tap-highlight\" content=\"no\">\n    <!-- iOS 图标 begin -->\n    <link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon-57x57-precomposed.png\"/>\n    <!-- iPhone 和 iTouch，默认 57x57 像素，必须有 -->\n    <link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/apple-touch-icon-114x114-precomposed.png\"/>\n    <!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 -->\n    <link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144-precomposed.png\"/>\n    <!-- Retina iPad，144x144 像素，可以没有，但推荐有 -->\n    <!-- iOS 图标 end -->\n \n    <!-- iOS 启动画面 begin -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"768x1004\" href=\"/splash-screen-768x1004.png\"/>\n    <!-- iPad 竖屏 768 x 1004（标准分辨率） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"1536x2008\" href=\"/splash-screen-1536x2008.png\"/>\n    <!-- iPad 竖屏 1536x2008（Retina） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"1024x748\" href=\"/Default-Portrait-1024x748.png\"/>\n    <!-- iPad 横屏 1024x748（标准分辨率） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"2048x1496\" href=\"/splash-screen-2048x1496.png\"/>\n    <!-- iPad 横屏 2048x1496（Retina） -->\n \n    <link rel=\"apple-touch-startup-image\" href=\"/splash-screen-320x480.png\"/>\n    <!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"640x960\" href=\"/splash-screen-640x960.png\"/>\n    <!-- iPhone/iPod Touch 竖屏 640x960 (Retina) -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"640x1136\" href=\"/splash-screen-640x1136.png\"/>\n    <!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) -->\n    <!-- iOS 启动画面 end -->\n \n    <!-- iOS 设备 end -->\n    <meta name=\"msapplication-TileColor\" content=\"#000\"/>\n    <!-- Windows 8 磁贴颜色 -->\n    <meta name=\"msapplication-TileImage\" content=\"icon.png\"/>\n    <!-- Windows 8 磁贴图标 -->\n \n    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"/rss.xml\"/>\n    <!-- 添加 RSS 订阅 -->\n    <link rel=\"shortcut icon\" type=\"image/ico\" href=\"/favicon.ico\"/>\n    <!-- 添加 favicon icon -->\n\n    <!-- sns 社交标签 begin -->\n    <!-- 参考微博API -->\n    <meta property=\"og:type\" content=\"类型\" />\n    <meta property=\"og:url\" content=\"URL地址\" />\n    <meta property=\"og:title\" content=\"标题\" />\n    <meta property=\"og:image\" content=\"图片\" />\n    <meta property=\"og:description\" content=\"描述\" />\n    <!-- sns 社交标签 end -->\n \n    <title>标题</title>\n</head\n```\n\n## 参考\n[Meta元素](https://www.wikiwand.com/zh/Meta%E5%85%83%E7%B4%A0)\n[HTML:5meta标签](https://flycode.co/archives/243440)\n[meta标签学习](https://blog.yanfangyao.guru/notes/20180717214533/)\n[关于meta的referer属性](https://951759534.github.io/2017/06/06/%E5%85%B3%E4%BA%8Emeta%E7%9A%84referer%E5%B1%9E%E6%80%A7/)\n[HTML元信息类标签](<https://time.geekbang.org/column/article/82711>)\n\n\n","slug":"meta-标签用法总结","published":0,"date":"2019-09-14T17:09:12.589Z","updated":"2019-09-14T17:17:12.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccdi0001jwrn85xr62do","content":"<p>一直很少关注该标签，今天就要总结一下。<br>\n模拟HTTP响应头和指定文档元数据，这些数据是其他元素<code>&lt;base&gt;&lt;link&gt;&lt;script&gt;&lt;style&gt;&lt;title&gt;</code>不能指定的。meta 标签不会出现在页面上，但可以被浏览器和服务器识别。<br>\n元数据：文档作者、描述、关键词、文档字符编码、视口大小等。</p>\n<a id=\"more\"></a>\n<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E5%B1%9E%E6%80%A7\">属性</a></li>\n<li><a href=\"#%E7%94%A8%E6%B3%95\">用法</a></li>\n<li><a href=\"#name%E7%9A%84%E5%8F%96%E5%80%BC\">name的取值</a>\n<ul>\n<li><a href=\"#referrer\">referrer</a></li>\n<li><a href=\"#referrer-vs-origin-vs-host-vs-remote-address\">referrer VS origin  VS host VS Remote Address</a></li>\n</ul>\n</li>\n<li><a href=\"#http-equiv\">http-equiv</a></li>\n<li><a href=\"#%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E7%94%A8meta\">移动端常用meta</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n</p>\n<h2 id=\"属性\"><a class=\"markdownIt-Anchor\" href=\"#属性\"></a> 属性</h2>\n<p><code>content、http-equiv、name、charset</code>。</p>\n<ul>\n<li>charset：指定文档编码。比如<code>UTF-8</code>，只能有一个具有该属性的meta。</li>\n<li>http-equiv：用于模拟HTTP响应头。</li>\n<li>name：元数据名字。</li>\n<li>content：元数据的值。</li>\n</ul>\n<h2 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\"></a> 用法</h2>\n<p><code>charset</code>、<code>http-equiv</code>、<code>name</code>三个属性不能同时使用。<code>content</code> 必须和 <code>name</code> 或者 <code>http-equiv</code> 配对使用。</p>\n<h2 id=\"name的取值\"><a class=\"markdownIt-Anchor\" href=\"#name的取值\"></a> name的取值</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">name</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">application-name</td>\n<td style=\"text-align:left\">web应用名字</td>\n<td style=\"text-align:left\">网页不是web应用时，name不能取application-name(什么是web应用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">author</td>\n<td style=\"text-align:left\">文档作者</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">description</td>\n<td style=\"text-align:left\">文档描述</td>\n<td style=\"text-align:left\">最多一个，有利于seo</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">keywords</td>\n<td style=\"text-align:left\">文档关键词，利于seo</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">referrer</td>\n<td style=\"text-align:left\">跳转页面的策略</td>\n<td style=\"text-align:left\">content属性值对应于从当前页面跳转到其他页面时，http请求的referrer策略</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">generator</td>\n<td style=\"text-align:left\">生成文档的工具</td>\n<td style=\"text-align:left\">一般不设置</td>\n</tr>\n</tbody>\n</table>\n<p>以上是HTML5的标准值，还可以设置其他非标准值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"referrer\"><a class=\"markdownIt-Anchor\" href=\"#referrer\"></a> referrer</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">referrer</th>\n<th style=\"text-align:left\">content</th>\n<th style=\"text-align:left\">响应头referer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">no-referrer</td>\n<td style=\"text-align:left\">never</td>\n<td style=\"text-align:left\">删除Referer</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">no-referrer-when-downgrade</td>\n<td style=\"text-align:left\">default</td>\n<td style=\"text-align:left\">如果当前页面使用的是https协议，跳转的页面使用的是http协议，则取值为空。如果当前协议与跳转页面使用的协议一致，则取值为当前页面url的协议、域名、请求参数这三个值拼成的uri</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsafe-url</td>\n<td style=\"text-align:left\">always</td>\n<td style=\"text-align:left\">当前页面url的协议、域名、请求参数拼成的uri</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">origin-when-cross-origin</td>\n<td style=\"text-align:left\">origin-when-crossorigin</td>\n<td style=\"text-align:left\">跨域时取值与Origin字段一致，不是当前页面的完整url，只是协议和域名拼成的uri</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://imququ.com/post/referrer-policy.html\" target=\"_blank\" rel=\"noopener\">Referrer Policy 介绍</a><br>\n<a href=\"https://951759534.github.io/2017/06/06/%E5%85%B3%E4%BA%8Emeta%E7%9A%84referer%E5%B1%9E%E6%80%A7/\" target=\"_blank\" rel=\"noopener\">关于meta的referer属性</a></p>\n<h3 id=\"referrer-vs-origin-vs-host-vs-remote-address\"><a class=\"markdownIt-Anchor\" href=\"#referrer-vs-origin-vs-host-vs-remote-address\"></a> referrer VS origin  VS host VS Remote Address</h3>\n<p>origin 指定请求来自哪个站点，跨域时使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">origin: <span class=\"string\">\"\"</span></span><br><span class=\"line\">origin: &lt;scheme&gt; \"://\" &lt;host&gt; [ \":\" &lt;port&gt; ]</span><br><span class=\"line\">//host是域名或IP</span><br><span class=\"line\">origin: https://developer.mozilla.org</span><br></pre></td></tr></table></figure>\n<p>host 指定请求域名<br>\nhttp1.1必须设置，http1.0 可省略。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host: &lt;host&gt;:&lt;port&gt;</span><br><span class=\"line\">host: developer.cdn.mozilla.net</span><br></pre></td></tr></table></figure>\n<p>Remote Address 是一个响应头，是服务器的<code>ip:port</code>。<br>\nreferer 用于指定请求的源页面。</p>\n<h2 id=\"http-equiv\"><a class=\"markdownIt-Anchor\" href=\"#http-equiv\"></a> http-equiv</h2>\n<p>五个取值：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><s>content-language</s></td>\n<td style=\"text-align:left\">文档语言类型</td>\n<td style=\"text-align:left\">使用 html的lang 代替</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><s>content-type</s></td>\n<td style=\"text-align:left\">文档编码方式</td>\n<td style=\"text-align:left\">charset 代替</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">refresh</td>\n<td style=\"text-align:left\">页面自动刷新的时间间隔</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">set-cookie</td>\n<td style=\"text-align:left\">content用于设置网页cookie</td>\n<td style=\"text-align:left\">HTML5不推荐使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">default-style</td>\n<td style=\"text-align:left\">content是文档预定义样式</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"1\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--每隔1秒刷新页面--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"1;url=baidu.com\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--1秒后重定向到百度--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"移动端常用meta\"><a class=\"markdownIt-Anchor\" href=\"#移动端常用meta\"></a> 移动端常用meta</h2>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span> <span class=\"comment\">&lt;!-- 使用 HTML5 doctype，不区分大小写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span> <span class=\"comment\">&lt;!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明文档使用的字符编码 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=`<span class=\"attr\">utf-8</span>`&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 页面描述 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"不超过150个字符\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 页面关键词 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"关键词1，关键词2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 网页作者 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"name, email@gmail.com\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 搜索引擎抓取 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index,follow\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 为移动设备添加 viewport --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iOS 设备 begin --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-title\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"标题\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-itunes-app\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置苹果工具栏颜色 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telphone=no, email=no\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 避免IE使用兼容模式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 不让百度转码 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Cache-Control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-siteapp\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"HandheldFriendly\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 微软的老式浏览器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MobileOptimized\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"320\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"screen-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"full-screen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-fullscreen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- UC应用模式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"browsermode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"application\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-page-mode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-tap-highlight\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iOS 图标 begin --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/apple-touch-icon-57x57-precomposed.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"114x114\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/apple-touch-icon-114x114-precomposed.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"144x144\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/apple-touch-icon-144x144-precomposed.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iOS 图标 end --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iOS 启动画面 begin --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"768x1004\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/splash-screen-768x1004.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"1536x2008\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/splash-screen-1536x2008.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"1024x748\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/Default-Portrait-1024x748.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"2048x1496\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/splash-screen-2048x1496.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/splash-screen-320x480.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"640x960\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/splash-screen-640x960.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"640x1136\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/splash-screen-640x1136.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iOS 启动画面 end --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iOS 设备 end --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-TileColor\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"#000\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Windows 8 磁贴颜色 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-TileImage\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"icon.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Windows 8 磁贴图标 --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"alternate\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"application/rss+xml\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"RSS\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/rss.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加 RSS 订阅 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/ico\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/favicon.ico\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加 favicon icon --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- sns 社交标签 begin --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 参考微博API --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">\"og:type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"类型\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">\"og:url\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"URL地址\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">\"og:title\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"标题\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">\"og:image\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"图片\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">\"og:description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"描述\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- sns 社交标签 end --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"https://www.wikiwand.com/zh/Meta%E5%85%83%E7%B4%A0\" target=\"_blank\" rel=\"noopener\">Meta元素</a><br>\n<a href=\"https://flycode.co/archives/243440\" target=\"_blank\" rel=\"noopener\">HTML:5meta标签</a><br>\n<a href=\"https://blog.yanfangyao.guru/notes/20180717214533/\" target=\"_blank\" rel=\"noopener\">meta标签学习</a><br>\n<a href=\"https://951759534.github.io/2017/06/06/%E5%85%B3%E4%BA%8Emeta%E7%9A%84referer%E5%B1%9E%E6%80%A7/\" target=\"_blank\" rel=\"noopener\">关于meta的referer属性</a><br>\n<a href=\"https://time.geekbang.org/column/article/82711\" target=\"_blank\" rel=\"noopener\">HTML元信息类标签</a></p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>一直很少关注该标签，今天就要总结一下。<br>\n模拟HTTP响应头和指定文档元数据，这些数据是其他元素<code>&lt;base&gt;&lt;link&gt;&lt;script&gt;&lt;style&gt;&lt;title&gt;</code>不能指定的。meta 标签不会出现在页面上，但可以被浏览器和服务器识别。<br>\n元数据：文档作者、描述、关键词、文档字符编码、视口大小等。</p>","more":"<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E5%B1%9E%E6%80%A7\">属性</a></li>\n<li><a href=\"#%E7%94%A8%E6%B3%95\">用法</a></li>\n<li><a href=\"#name%E7%9A%84%E5%8F%96%E5%80%BC\">name的取值</a>\n<ul>\n<li><a href=\"#referrer\">referrer</a></li>\n<li><a href=\"#referrer-vs-origin-vs-host-vs-remote-address\">referrer VS origin  VS host VS Remote Address</a></li>\n</ul>\n</li>\n<li><a href=\"#http-equiv\">http-equiv</a></li>\n<li><a href=\"#%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E7%94%A8meta\">移动端常用meta</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n</p>\n<h2 id=\"属性\"><a class=\"markdownIt-Anchor\" href=\"#属性\"></a> 属性</h2>\n<p><code>content、http-equiv、name、charset</code>。</p>\n<ul>\n<li>charset：指定文档编码。比如<code>UTF-8</code>，只能有一个具有该属性的meta。</li>\n<li>http-equiv：用于模拟HTTP响应头。</li>\n<li>name：元数据名字。</li>\n<li>content：元数据的值。</li>\n</ul>\n<h2 id=\"用法\"><a class=\"markdownIt-Anchor\" href=\"#用法\"></a> 用法</h2>\n<p><code>charset</code>、<code>http-equiv</code>、<code>name</code>三个属性不能同时使用。<code>content</code> 必须和 <code>name</code> 或者 <code>http-equiv</code> 配对使用。</p>\n<h2 id=\"name的取值\"><a class=\"markdownIt-Anchor\" href=\"#name的取值\"></a> name的取值</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">name</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">application-name</td>\n<td style=\"text-align:left\">web应用名字</td>\n<td style=\"text-align:left\">网页不是web应用时，name不能取application-name(什么是web应用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">author</td>\n<td style=\"text-align:left\">文档作者</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">description</td>\n<td style=\"text-align:left\">文档描述</td>\n<td style=\"text-align:left\">最多一个，有利于seo</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">keywords</td>\n<td style=\"text-align:left\">文档关键词，利于seo</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">referrer</td>\n<td style=\"text-align:left\">跳转页面的策略</td>\n<td style=\"text-align:left\">content属性值对应于从当前页面跳转到其他页面时，http请求的referrer策略</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">generator</td>\n<td style=\"text-align:left\">生成文档的工具</td>\n<td style=\"text-align:left\">一般不设置</td>\n</tr>\n</tbody>\n</table>\n<p>以上是HTML5的标准值，还可以设置其他非标准值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"referrer\"><a class=\"markdownIt-Anchor\" href=\"#referrer\"></a> referrer</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">referrer</th>\n<th style=\"text-align:left\">content</th>\n<th style=\"text-align:left\">响应头referer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">no-referrer</td>\n<td style=\"text-align:left\">never</td>\n<td style=\"text-align:left\">删除Referer</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">no-referrer-when-downgrade</td>\n<td style=\"text-align:left\">default</td>\n<td style=\"text-align:left\">如果当前页面使用的是https协议，跳转的页面使用的是http协议，则取值为空。如果当前协议与跳转页面使用的协议一致，则取值为当前页面url的协议、域名、请求参数这三个值拼成的uri</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsafe-url</td>\n<td style=\"text-align:left\">always</td>\n<td style=\"text-align:left\">当前页面url的协议、域名、请求参数拼成的uri</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">origin-when-cross-origin</td>\n<td style=\"text-align:left\">origin-when-crossorigin</td>\n<td style=\"text-align:left\">跨域时取值与Origin字段一致，不是当前页面的完整url，只是协议和域名拼成的uri</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://imququ.com/post/referrer-policy.html\" target=\"_blank\" rel=\"noopener\">Referrer Policy 介绍</a><br>\n<a href=\"https://951759534.github.io/2017/06/06/%E5%85%B3%E4%BA%8Emeta%E7%9A%84referer%E5%B1%9E%E6%80%A7/\" target=\"_blank\" rel=\"noopener\">关于meta的referer属性</a></p>\n<h3 id=\"referrer-vs-origin-vs-host-vs-remote-address\"><a class=\"markdownIt-Anchor\" href=\"#referrer-vs-origin-vs-host-vs-remote-address\"></a> referrer VS origin  VS host VS Remote Address</h3>\n<p>origin 指定请求来自哪个站点，跨域时使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">origin: <span class=\"string\">\"\"</span></span><br><span class=\"line\">origin: &lt;scheme&gt; \"://\" &lt;host&gt; [ \":\" &lt;port&gt; ]</span><br><span class=\"line\">//host是域名或IP</span><br><span class=\"line\">origin: https://developer.mozilla.org</span><br></pre></td></tr></table></figure>\n<p>host 指定请求域名<br>\nhttp1.1必须设置，http1.0 可省略。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host: &lt;host&gt;:&lt;port&gt;</span><br><span class=\"line\">host: developer.cdn.mozilla.net</span><br></pre></td></tr></table></figure>\n<p>Remote Address 是一个响应头，是服务器的<code>ip:port</code>。<br>\nreferer 用于指定请求的源页面。</p>\n<h2 id=\"http-equiv\"><a class=\"markdownIt-Anchor\" href=\"#http-equiv\"></a> http-equiv</h2>\n<p>五个取值：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><s>content-language</s></td>\n<td style=\"text-align:left\">文档语言类型</td>\n<td style=\"text-align:left\">使用 html的lang 代替</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><s>content-type</s></td>\n<td style=\"text-align:left\">文档编码方式</td>\n<td style=\"text-align:left\">charset 代替</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">refresh</td>\n<td style=\"text-align:left\">页面自动刷新的时间间隔</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">set-cookie</td>\n<td style=\"text-align:left\">content用于设置网页cookie</td>\n<td style=\"text-align:left\">HTML5不推荐使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">default-style</td>\n<td style=\"text-align:left\">content是文档预定义样式</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"1\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--每隔1秒刷新页面--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"1;url=baidu.com\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--1秒后重定向到百度--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"移动端常用meta\"><a class=\"markdownIt-Anchor\" href=\"#移动端常用meta\"></a> 移动端常用meta</h2>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span> <span class=\"comment\">&lt;!-- 使用 HTML5 doctype，不区分大小写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span> <span class=\"comment\">&lt;!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明文档使用的字符编码 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=`<span class=\"attr\">utf-8</span>`&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 页面描述 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"不超过150个字符\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 页面关键词 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"关键词1，关键词2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 网页作者 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"name, email@gmail.com\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 搜索引擎抓取 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index,follow\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 为移动设备添加 viewport --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iOS 设备 begin --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-title\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"标题\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-itunes-app\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置苹果工具栏颜色 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telphone=no, email=no\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 避免IE使用兼容模式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 不让百度转码 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Cache-Control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-siteapp\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"HandheldFriendly\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 微软的老式浏览器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MobileOptimized\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"320\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"screen-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"full-screen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-fullscreen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- UC应用模式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"browsermode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"application\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-page-mode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-tap-highlight\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iOS 图标 begin --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/apple-touch-icon-57x57-precomposed.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"114x114\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/apple-touch-icon-114x114-precomposed.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"144x144\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/apple-touch-icon-144x144-precomposed.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iOS 图标 end --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iOS 启动画面 begin --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"768x1004\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/splash-screen-768x1004.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"1536x2008\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/splash-screen-1536x2008.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"1024x748\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/Default-Portrait-1024x748.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"2048x1496\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/splash-screen-2048x1496.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/splash-screen-320x480.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"640x960\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/splash-screen-640x960.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-startup-image\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"640x1136\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/splash-screen-640x1136.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iOS 启动画面 end --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iOS 设备 end --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-TileColor\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"#000\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Windows 8 磁贴颜色 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-TileImage\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"icon.png\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Windows 8 磁贴图标 --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"alternate\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"application/rss+xml\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"RSS\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/rss.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加 RSS 订阅 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/ico\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/favicon.ico\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加 favicon icon --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- sns 社交标签 begin --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 参考微博API --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">\"og:type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"类型\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">\"og:url\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"URL地址\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">\"og:title\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"标题\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">\"og:image\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"图片\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">property</span>=<span class=\"string\">\"og:description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"描述\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- sns 社交标签 end --&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"https://www.wikiwand.com/zh/Meta%E5%85%83%E7%B4%A0\" target=\"_blank\" rel=\"noopener\">Meta元素</a><br>\n<a href=\"https://flycode.co/archives/243440\" target=\"_blank\" rel=\"noopener\">HTML:5meta标签</a><br>\n<a href=\"https://blog.yanfangyao.guru/notes/20180717214533/\" target=\"_blank\" rel=\"noopener\">meta标签学习</a><br>\n<a href=\"https://951759534.github.io/2017/06/06/%E5%85%B3%E4%BA%8Emeta%E7%9A%84referer%E5%B1%9E%E6%80%A7/\" target=\"_blank\" rel=\"noopener\">关于meta的referer属性</a><br>\n<a href=\"https://time.geekbang.org/column/article/82711\" target=\"_blank\" rel=\"noopener\">HTML元信息类标签</a></p>"},{"_content":"# RESTful webservice 实战笔记\n\n\n\n## 使用统一的接口\n\nHTTP 是一种应用层协议，定义在**资源**在客户端和服务器之间的转移，诸如`GET`、`POST`、`PUT`、`DELETE`等方法，是对资源的操作。HTTP 本身是具有语义的，正确使用HTTP，可使得 web api 更具有自说明性，不必或者只要提供**简要的**的文档说明，api 使用者就能知道如何使用。\n\n### 如何保持交互的可见性\n\n作为应用层协议，HTTP 的设计目标是在客户端和服务器之间保持对库、服务器、代理、缓存和其他工具的可见性。可见性很难理解，我认为定义为设备之间可互操作性更为准确，只要设备知道接口定义，设备之间就可通过HTTP 通信。那么如何确保这种可互操作性呢？要是接口按照**统一的**约定或者规范定义，那么保持这种互操作性可以实现，而基于HTTP语义的约定是最为简单的，RESTful 就是充分利用了HTTP语义的一种接口设计规范。保持可互操作性需要保持两条原则：\n\n1. **使用方法时，和其语义保持一致，并添加标头来描述请求和响应**；\n2. 正确使用**状态码**和**状态消息**，以便代理、缓存和客户端可以决定如何操作请求结果。\n\n> 在某些情况下，为了其他特定，可降低或放弃可见性，比如为了提高网络效率、客户端是否方便使用响应、缓存、等幂、安全等。\n\n在实际的接口设计中，方便客户端使用、安全、提高网络效率是降低可互操作性的原因。但是实际上，只要支持HTTP的设备，只要知道接口定义，就能相互操作，本质上的互操作性是给人看的。\n\n### 如何在服务器端实现安全和幂等的方法\n\n一个HTTP方法不会修改资源时，它就是安全的。只读操作使用安全的方法，才能保证请求安全。幂等保证客户端重复发起一个请求，和一次请求的效果一致。幂等性大多和网络或者软件故障相关。方法的幂等，可以保证在遇到软件故障时，可以发送**多次相同的请求**，而不必担心改变资源。\n\n| 方法    | 安全 | 幂等 | 操作                                   | 备注                                                         |\n| ------- | ---- | ---- | -------------------------------------- | ------------------------------------------------------------ |\n| GET     | Yes  | Yes  | 获取资源，返回 200                     | 不要在不安全不幂等的操作中使用GET，否则可能会不符合预期地改变资源。 |\n| HEAD    | Yes  | Yes  |                                        |                                                              |\n| OPTIONS | Yes  | Yes  |                                        |                                                              |\n| PUT     | No   | Yes  | 新建或者更新一个资源                   |                                                              |\n| DELETE  | No   | Yes  | 删除资源，返回 200                     | 要是实现幂等，服务器要维护资源的状态，知道资源已经被删除。否则可能会返回404。因为第二次删除资源就不存在了。实际上返回404更合理。 |\n| POST    | No   | No   | 创建多个资源或者对资源进行多种其他操作 |                                                              |\n\n####  何时使用POST\n\n- 新建资源或者修改多个资源；\n- 大数据的输入查询；\n- 其他方法都不适合，执行不安全或者非幂等的操作；\n- 提交密码、信用卡等敏感信息时必须使用POST。\n#### 如何使用POST 创建资源\n在创建资源后，返回 201，并在Location头中指定新资源的 URI。如果在响应正文中包含了新建资源的完整表述，在 Content-Location 头中包含新资源的URI。可在请求的 Slug 中指定新资源RUI的建议，服务器未必采用。\n请求得到响应，未必操作就已经完成，比如银行转账、在服务器上处理图片等比较耗时的操作。这类需要长时间才能完成的操作，返回 202 表示已经接收到请求，客户端在提交GET请求以询问操作状态时，**执行中，返回200**，响应中包含当前状态的表述，**成功。303**，提供 Location，执行新资源，**失败，200，给出失败原因**。\n其实这种做法，非常不方便客户端处理，实际设计时，都返回200，并在响应中标识是否成功。\n> 303，仅指出请求资源在Location中，并不是资源已经转移到新的URI。\n\n### 如何使用 PUT 创建资源\n只有在客户端能决定新资源的URI时才使用PUT创建资源，否则使用POST。比如存储服务器为每个客户端分配根路径，并让客户端把根路径作为文件系统的根目录，在客户端创建资源时，希望控制目录，客户端也应该控制目录。\n使用PUT创建资源时，服务器需要先客户端说明RUI是如何组织的，同时希望客户端创建资源时使用最小范围的URI。POST创建资源，服务器具有更多的控制权，更少的工作。\n\n## 识别资源\n\n### 如何从领域名词中识别资源\n\n分析用例，找到可以使用`创建`、`读取`、`更新`、`删除`动作来操作的领域名词，将这些名词识别为资源。\n\n### 如何控制资源粒度\n将资源直接映射到领域实体，会导致资源粒度很低，客户端希望更多的资源时，需要发送很多请求，导致网络效率低下和客户端难以处理响应，确定合适的资源粒度就非常关键。\n在设计资源时，结合**客户端使用是否方便**、**网络效率**来确定适合的粒度。以下因素也会影响资源粒度：\n- 是否可缓存；\n- 修改频率；\n- 可变性。\n设计粒度时，要确保更多的缓存、更低的修改频率，或者吧可变的数据分离出来。\n### 如何将资源组织成集合\n将相似的资源归为一个集合或者数组，通过GET方法来获取整个集合而不是单独获取，比如设计网站用户的好用列表，电商网站用户购物车里的商品。\n### 如何合并资源为符合资源\n将多个资源合并成一个资源会降低互操作性，但是有时候不得不组合，在代码上上表现的结果是，一个资源成为另一个资源的字段。\n比如有两个资源：\n```js\n{\n\tname:\"jack\", //一个人的资源\n\tage:24\n}\n```\n图书资源：\n```js\n{\n\tbookName:\"restful 实战\",\n\tprice:46\n}\n```\n想要获取用户最近阅读的书籍，需要发送两次请求，这样网络效率会低。\n可以书籍资源合并：\n```js\n{\n\tname:\"jack\",\n\tage:24,\n\tbooks:[]//最近阅读的书籍\n}\n```\n组合资源会导致资源重叠，组合之前，需要考虑以下问题：\n- 客户端对组合资源的请求是否很少，很少就不组合；\n- 网络开销，客户端和服务器的网络开销，服务器和其他服务器的网络开销，要说后者很大，收到客户端请求，再去其他服务器请求资源来组合，会导致客户端和服务器之间的网络开销也很多大，可以增加缓存或者现在服务器上组合好资源。\n## 设计表述\n\n客户端所关心的资源是一个抽象的实体，它是用  URI 来标识的。另一方面，表述是具体而真实的，您在客户端和服务器上针对它编写代码，进行操作。\n\n### 如何使用实体头注解表述\n\n表述不仅仅是以某种格式序列化后的数据，它是一连串字节加上用于描述那些字节的元数据。在  HTTP  中，表述元数据是由使用实体头的名值对（name-value pair）来实现的。这些实体头和应用数据本身一样重要。\n\n#### 您想知道在对服务器的请求或对客户端的响应中应该发送哪些  HTTP 头。\n- Content-Type，用于描述表述类型，包含  charset  参数或其他针对该媒体类型而定义的参数。告知接收方如何处理响应。\n- Content-Length，用于指定表述正文的字节大小。\n- Content-Language，如果您以某种语言对表述进行本地化，用该标头来指定语言。\n- Content-MD5，工具 / 软件在处理或存储表述时可能存在错误，需要提供一致性校验，用该标头来包含一个表述正文的  MD5 摘要。请注意，TCP  使用  checksum 在传输层提供一致性校验。\n- Content-Encoding，当您使用  gzip,compress 或  deflate 对表述正文进行编码时，使用该标头。\n- Last-Modified，用来说明服务器修改表述或资源的最后时间。\n\nHTTP 的设计是这样的，发送方可以用一系列名为实体头的标头来描述表述正文（也称为实体正文或消息正文）。有了这些标头，接收方可以在无须查看正文的情况下决定如何处理正文。它们还可以将解析正文所需要提前了解及猜测的内容减到最小程度。\n\nContent-Length\n这个标头最早是在  HTTP 1.0 中被引入的，接收方用它来判断自己是否从连接中读取了正确的字节数。要发送该标头，发送方需要在写正文前计算出表述的大小。HTTP 1.1 支持一种更有效的机制，名为分块转移编码（chuncked transfer encoding）这让 Content-Length 头变得有点多余。对于  POST 和  PUT 请求，就算使用了 ** Transfer-Encoding: chuncked**，也要在客户端应用程序的请求中包含  Content-Length 头。因为有些代理会拒绝没有包含这两个头的  POST 和  PUT 请求。\n\nContent-Language\n当表述针对某种语言做了本地化之后，请使用该标头，它的值是两个字母的  RFC 5646 语言标签，还可以在后面带上连字符（-）和任意两个字母的国家代码。\n比如\n```html\n<html lang=\"en-US\"> <!--美式英语-->\n<html lang=\"en-GB\"> <!--英式英语-->\n<html lang=\"zh-CN\"> <!--中国汉语，因为还有新加坡汉语-->\n```\n[更多关于网页设置语言的信息](https://www.biaodianfu.com/langtag.html)\n[完整的语言标记](http://www.loc.gov/standards/iso639-2/php/code_list.php?__cf_chl_jschl_tk__=c59b6c71bfc56434eddedcf024568f34cc8bb985-1590866144-0-AXSz2y3QWCwkfEYQaD_9OzTeVOijYE22O1jFMxNO5fvz0iWvkccWtBwwxiQbejam6id8sqXQkT4Hfro4NmtLaGOBSrVtMfEkAQ1bWuF7ET-zR-94STr8QvZx7Nebo-55j4nFEI3E2Ee6UhIhHFojT96arV8YeUBxcPmxT793E7egvk72zzyuRucAy2KCVZIMZCNZMEPtTq4i-L1pfes0dzjCO4g-6NpOQUNEFpobpue9cE5ihb9LFYLj3Vx_9bJ2h6l1A3iWEsq9iJYCqBiWN5F_Owv4cMK9u3-oF9MzFuMBerrSXGY2P5S6Hajb_13p7Q)\n Content-MD5\n接收方可以使用该标头来验证实体正文的完整性。该标头的值是表述正文的  MD5 摘要，在进行内容编码（gzip,compress  等）之后，转移编码（即  chunked）之前计算摘要值。\n因为这个标头不能保证消息没有被篡改，所以不要将它作为一种安全手段。**修改了正文的人同样可以修改标头的值。**\n在通过非可靠网络发送或接受大的表述时，这个标头非常有用。表述的发送方包含了  Content-MD5 头之后，接收方可以在解析前先验证消息的完整性。\n\nContent-Encoding\n这个标头说明了表述正文所使用的压缩类型，它的值可以是类似  gzip,compress 或  deflate 这样的字符串。\n客户端可以用  Accept-Encoding 头（详见第 7 章）来注明自己偏好的  Content-Encoding。然而，并没有一个标准的方式让客户端了解到服务器是否可以处理用给定编码压缩过的表述。除非您事先知道目标服务器支持某个特定的编码方法，否则应该避免在 HTTP 请求中使用这个标头。\n\nLast-Modified\n这个标头只用在响应上，它的值是一个时间戳，表示服务器最后修改资源表述的时间。\n\n#### 如何正确解析实体头\n当服务器或客户端接收到表述时，在处理请求前正确地解释实体头是很重要的。\nContent-Type\n当您收到一个不带  Content-Type 的表述时，避免猜测表述的类型。当客户端发送不带该标头的请求时，返回错误码 400（Bad Request）。当您从服务器接收到一个不带该标头的响应时，将其视为不正确的响应。\nContent-Length\n在没有确定接收到的表述不带  Transfer-Encoding: chunked  前，不要检查 Content-Length 头是否存在。\nContent-Encoding\n让您的网络库代码来解压那些压缩过的表述。\nContent-Language\n如果存在该标头，读取并存储它的值，记录下所使用的语言。\n\n####  如何避免字符编码不匹配\n表述的发送方和接收方之间的字符编码不匹配通常会造成数据损坏和解析错误。由于字符编码不匹配造成的错误很难发现。\n在发送表述时，如果媒体类型允许使用  charset 参数，则包含一个带字符编码值的 charset 参数，该参数值将被用于将字符转为字节。\n当您接收到一个表述，其中带有支持  charset 参数的媒体类型，在从表述正文的字节中构造字符流时，使用指定的编码。如果忽略了发送方提供的  charset 值，使用其他的值，那么应用程序很可能会把字符给解释错。\n诸如 ** application/xml**、**text/html**、**application/atom+xml** 和 **text/csv** 这样的文本和  XML 媒体类型允许您指定字符编码，通过  Content-Type 头中的  charset 参数，使用该字符编码将字符转换为实体正文中的字节。比如\n```bash\nContent-Type:application/xml;charset=UTF-8\n```\n诸如  application/xml,text/html,application/atom+xml 和 text/csv 这样的文本和  XML 媒体类型允许您指定字符编码，通过  Content-Type 头中的  charset 参数，使用该字符编码将字符转换为实体正文中的字节。\n还要避免针对  XML  格式的表述使用  text/xml  媒体类型。text/xml  的默认字符是 us-ascii，而  application/xml 使用  UTF-8。\n\n常用的标准或知名的媒体类型\n\n常用的分段媒体类型\n\n#### 如何理解服务器返回的错误？\n\n| 状态码 | 状态文本                 | 说明                                                         |\n| ------ | ------------------------ | ------------------------------------------------------------ |\n| 400    | Bad Request              | 正文不对，检查正文                                           |\n| 401    | Unauthorized             | 带有  Authorization 头的请求进行重试，其中包含身份信息       |\n| 403    | Forbidden                | 禁止客户端用这个请求方法来访问资源                           |\n| 404    | Not Found                | 资源已经不存在了                                             |\n| 413    | Request Entity Too Large | 正文里寻找关于有效长度的提示                                 |\n| 415    | Unsupported Media Type   | 请求支持的媒体类型不对                                       |\n| 500    | Internal Server Error    | 服务代码出错                                                 |\n| 503    | Service Unavailable      | 如果响应中有  Retry-After  头，在到达该时间前不要重试。这可能是整个服务器的错误，因此在客户端中要实现适当的补偿逻辑，在一段时间内避免向服务器发送请求。 |\n| 502    | Bad Gateway              | 通常不是客户端能够修复的，而是需要由途径的 Web 服务器或者代理服务器对其进行修复。 |\n\n但是这些状态码往往不够用，在设计接口时，通常都返回 200，在表述中告知是否错误。\n\n## 设计URI\n\nURI  是跨越  Web  的资源描述符，一个  URI 由以下内容组成 —— 协议（例如  http 和 https）、主机（例如  www.example.org）、端口号，后面紧跟一段或多段路径（例如 /user/1234），还有查询字符串。\n\n**URI***（统一资源标识符）*是一个指向资源的字符串。最通常用在 [URL](https://developer.mozilla.org/en-US/docs/Glossary/URL) 上来指定 Web 上资源文件的具体位置。相比之下，[URN](https://developer.mozilla.org/en-US/docs/Glossary/URN) 是在给定的命名空间用名字指向具体的资源\n\n#### 资源设计  URI 的最佳实践\n\n- 在  URI 的路径部分使用斜杠分隔符（/）来表示资源之间的层次关系。\n- 使用连字符（-）来改善长路径中名称的可读性。\n- 在  URI 的查询部分使用 “与” 符号（&）来分隔参数。\n- 在  URI 中避免出现文件扩展名（例如.php,.aspx 和.jsp）。\n- 保持URI分格的一致性，尤其是多人协作时。\n\n##  web 链接 \n\n链接提供了一种方式，可以从一个资源导航到另一个资源。但是本章的内容，实际开发想要按照 RESTful  定义接口，会非常繁琐，在返回实体中包含链接，也无实际用处。\n\n##  Atom 和 AtomPub\n\n没看到有实际作用，不记录。\n\n## 内容协商\n\n内容协商（Content Negotiation），有时也简写为  conneg，该过程用于当存在多个可用的资源表述形式时，为客户端选择一个最好的出来。内容协商常用于标明媒介类型的偏好，但它也可以用于标明本地化语言、字符编码以及压缩方面的偏好。\n\n#### 客户端如何标明内容偏好\n\n实现客户端时，一件重要的事情就是该客户端要能够向服务器标明自己的偏好和能力，包括它所能够处理的表述格式，所偏好的语言，能够识别的字符编码，以及它是否支持压缩。对于响应中的表述，即便事先知道它的格式、字符编码、语言以及压缩类型，清楚明确地标明客户端的偏好以及能力将更有助于客户端适应各种变化。\n\n在请求头中添加一个  Accept ，其值是一个偏好媒体类型的列表，以逗号分隔。根据客户端对各种媒体类型的偏好程度，可以再设定一个参数  q，默认值为 1.0，可精确到三位小数。 “*;q=0.0”，来向服务器标明自己无法处理那些没有列在  Accept 头里的媒体类型。\n\n请求中没有  Accept 头，那就使用默认格式来返回被请求资源的表述。请求中含有  Accept 头，那就解析它，并按照  q 参数降序排序媒体类型的值。然后从此列表中选择一个服务器所支持的媒体类型。在响应中要包含一个  Vary 头。\n\n如果客户端仅能处理属于某一种字符集的字符，那就增加一个 **Accept-Charset** 头，其值就是所偏好的字符集。否则，就不要添加这个头。\n\n请求中没有  Accept-Charset 头，那就以  UTF-8 对返回的表述进行编码。\n如果请求中含有  Accept-Charset 头，那就解析它，依照  q 参数对那些字符集进行排序，然后选择服务器所支持的字符编码。\n如果服务器端不支持任何所请求的字符集，并且  Accept-Charset  头中不包含 “*;q=0.0”，那么就使用  UTF-8 编码返回的表述。\n\n有这些情况中，如果媒体类型是文本的，并且允许使用  charset  参数，就在 Content-Type 头中包含  charset 参数，以标明服务器所用的字符编码。同样，在响应中也要包含一个  Vary 头。\n\n Accept-Language 头来指明表述所偏好的语言。\n\n请求中不含有  Accept-Language 头，那就在返回的表述中对所有给人阅读的文字使用默认的语言。\n如果请求中含有  Accept-Language 头，那就解析它，依照  q 参数对语言进行排序，选择列表里的第一个服务器所支持的语言。在响应中包含一个  Vary 头，详见 7.6 节。\n如果列表里的语言服务器端一个也不支持，并且  Accept-Language  头也不包含 “*;q=0.0”，那就在响应里使用默认的语言。\n\n客户端能够解压那些采用诸如  gzip,compress 或者  deflate 编码的压缩表述，就添加一个  **Accept-Encoding** 头并列出所支持的编码格式，否则就略过该标头。\n\n服务器支持压缩响应内容，那就从  Accept-Encoding 头中选择一种压缩技术。在响应中同样也要包含一个  Vary 头，详见 7.6 节。如果服务器所支持的压缩编码没有一个位于标头中，那就忽略它。对于  q 参数的处理同其他  Acceopt-* 的情况。\n如果请求中不包含  Accept-Encoding 头，就不要对表述进行压缩。\n\n```js\nAccept:application/atom+xml;q=1.0,application/xml;q=0.6,*/*;q=0.0\nAccept-Language:fr;q=1.0,en;q=0.5\nAccept-Charset:UTF-8\nAccept-Encoding:gzip\n```\n\n####   何时以及如何发送 Vary 头\n\n当服务器使用内容协商来选择表述时，根据  Accept-* 头的不同，同一个  URI 可以产生不同的表述。Vary 头告诉客户端服务器在选择表述时使用了哪些请求头。\n\n每当针对一个资源有多种形式的表述可用时，就要包含一个  Vary 头。该标头的值是一些请求头的列表，以逗号分隔，服务器在选择表述时参考了这些请求头。如果服务器还使用了除这些请求头之外的信息，例如客户端的  IP 地址、当前时间、用户个性化设置等，那就将  Vary 头的值设置为 *。\n\n服务器可以用  Vary 头来通知客户端服务器驱动内容协商的结果。Vary 头的值是一组**请求头**，而不是响应头。\n\n针对英语表述的请求：\n\n```js\nGET /status HTTP/1.1\nHost:www.example.com\nAccept-Language:en;q=1.0,*/*;q=0.0\n```\n\n响应\n\n```js\nHTTP/1.1 200 OK\nContent-Language:de\nVary:Accept-Language\n```\n\n针对法语表述的请求\n\n```js\nGET /status HTTP/1.1\nHost:www.exampe.com\nAccepet-Language:fr;q=1.0,*/*;q=1.0\n```\n\n响应：\n\n```js\nHTTP/1.1 200 OK\nContent-Language:fr\nVary:Accept-Language\n```\n\n缓存把这个标头作为缓存键的一部分，来维持表述的不同副本。客户端可以使用这个信息来获知服务器用于内容协商的标准。\n\n#### 如何处理内容协商失败\n\n知道当服务器无法提供客户端所偏好的表述时，是该提供一个默认的表述，还是该返回一个错误。\n\n服务器无法提供满足客户端偏好的表述，并且客户端明确包含了一个 “*/*;q=0.0”，那就返回状态码 **406（Not Acceptable）**，并在表述主体中包含表述的列表。\n\n请求：只接受json 格式的响应。\n\n```js\nGET /status HTTP/1.1\nHost:www.example.com\nAccept:application/json,*/*;q=0.0\n```\n\n服务器无法满足客户端的格式要求，返回 406，在表述中以JSON格式给出理由\n\n```js\n406 Not Acceptable\nContent-Type:application/json\n\n{\n    message:'This server does not support json.'\n}\n```\n\n请注意，服务器给出的错误信息本身使用了  JSON  格式。这是合理的，服务器完全可以使用常见的格式来实现错误信息。\n\n## 查询\n\n查询信息是  HTTP GET 方法的一种常见应用。查询通常涉及三个组成部分，即过滤（filtering）、排序（sorting）和投影（projection）。过滤是基于一些过滤条件选择实体的一个子集的过程。排序会影响服务器是如何排列响应中结果的。投影是选择实体中的哪些字段将被包含到结果中的过程。例如，发送到电影服务器的查询请求可能会涉及按类型过滤电影，然后根据上映日期倒序排序，最后在返回客户端的响应中只选择标题、年份以及每部电影的简单介绍。\n\n只要关注过  URI 和表述，查询设计还是相对比较简单的。客户端负责运行查询，服务器的职责包括设计  URI 来支持过滤、排序和投影，设计表述，设置合适的缓存头。\n\n####  如何针对查询设计 URI\n\n使用查询参数来设计查询是一种常用惯例，根据自己的用例，可能需要支持以下一种或全部情况的查询参数：\n● 从可用资源中选择数据\n● 指定排序条件\n● 罗列要包含在响应中的资源的字段\n\n#### 如何设计大量输入的查询\n\n使用 POST 实现查询，Content-Type application/x-www-form-urlencoded 的格式，服务器实现设计成等幂和安全的。使用POST进行查询，会丧失缓存功能。\n\n## 缓存\n\n缓存是构建于  HTTP 统一接口之上的最有用的功能之一。可以利用缓存减少终端用户感知到的延时，增加可靠性，减少带宽使用和成本，降低服务器负载。缓存无处不在，可以在服务器网络里、内容分发网络（content delivery network，简称  CDN）或是客户端网络里。\n\n通常所说的缓存可以是类似  memcached（http://memcached.org/）这样的对象缓存，或者 Squid（http://www.squid-cache.org/）和 Traffic Server（http://incubator.apache.org/projects/trafficserver.html）这样的  HTTP  缓存。 HTTP  缓存不需要客户端或服务器调用任何特殊的编程  API  来管理缓存中的数据，对象缓存需要调用特定的缓存API实现。\n\n####  如何设置过期缓存头\n\n当缓存可以在不访问源服务器时做出尽可能多的响应时，它是最高效的。设计过期缓存（Expiration Caching）就是为了降低源服务器收到的请求数量，同时减少应用程序使用的带宽。过期缓存基于  Cache-Control  和  Expires 这两个头，它们指导客户端和缓存在一段指定的时间内保存从服务器返回的表述副本。**在这个时间窗口以内，甚至超出该时间窗口，缓存可以对后续请求做出响应，无须访问服务器。**\n\n在提供表述时，包含一个  Cache-Control  头，其中带有一个与新鲜寿命（freshness lifetime）相同的  max-age 值（单位为秒）。\n\nCache-Control 是一个  HTTP 1.1 头，为了支持遗留的  HTTP 1.0 缓存，还要包含一个带过期日期时间的  Expires 头。过期时间是服务器生成表述的时间加上新鲜寿命。还要包含一个带有日期时间的  Date 头，即服务器返回响应的时间。这个标头能帮助客户端计算新鲜寿命，即为  Expires 和 Date 两值之差。\n\n不让缓存提供副本，则加上一个带  no-cache 值的  Cache-Control 头。这里还要加上  Pragma: no-cache 头来支持遗留的  HTTP 1.0 缓存。\n\n Cache-Control 的值\n\n| 值                    | 说明                                                         |      |\n| --------------------- | ------------------------------------------------------------ | ---- |\n| public                | 这是默认指令。当请求是经过身份验证的，但您仍希望共享缓存提供缓存响应时，也可以使用该指令。 |      |\n| private               | 当响应专属于某个客户端或用户时，使用该指令。出现这个指令，任意客户端缓存（例如，浏览器缓存或转发代理）都可以缓存表述，但诸如服务器缓存或网络缓存之类的共享缓存则不能进行缓存。在基于客户端或用户身份验证来提供表述的时候添加该指令。 |      |\n| no-cache 和  no-store | 通过这些指令可以避免缓存存储或提供已经缓存的响应。           |      |\n| max-age               | 该指令的值即为新鲜寿命，单位为秒。                           |      |\n| s-maxage              | 这个指令与  max-age  类似，但只对共享缓存有意义。在源服务器同时设置了 max-age 和 s-maxage 的时候，缓存会使用 s-maxage 头。实际上，单独设置 max-age 指令就足够了。 |      |\n| must-revalidate       | 缓存在提供陈旧的表述前先检查源服务器。                       |      |\n| proxy-revalidate      | 与  must-revalidate 指令类似，但它只应用于共享缓存。         |      |\n\n","source":"_drafts/restful-webservice实战笔记.md","raw":"# RESTful webservice 实战笔记\n\n\n\n## 使用统一的接口\n\nHTTP 是一种应用层协议，定义在**资源**在客户端和服务器之间的转移，诸如`GET`、`POST`、`PUT`、`DELETE`等方法，是对资源的操作。HTTP 本身是具有语义的，正确使用HTTP，可使得 web api 更具有自说明性，不必或者只要提供**简要的**的文档说明，api 使用者就能知道如何使用。\n\n### 如何保持交互的可见性\n\n作为应用层协议，HTTP 的设计目标是在客户端和服务器之间保持对库、服务器、代理、缓存和其他工具的可见性。可见性很难理解，我认为定义为设备之间可互操作性更为准确，只要设备知道接口定义，设备之间就可通过HTTP 通信。那么如何确保这种可互操作性呢？要是接口按照**统一的**约定或者规范定义，那么保持这种互操作性可以实现，而基于HTTP语义的约定是最为简单的，RESTful 就是充分利用了HTTP语义的一种接口设计规范。保持可互操作性需要保持两条原则：\n\n1. **使用方法时，和其语义保持一致，并添加标头来描述请求和响应**；\n2. 正确使用**状态码**和**状态消息**，以便代理、缓存和客户端可以决定如何操作请求结果。\n\n> 在某些情况下，为了其他特定，可降低或放弃可见性，比如为了提高网络效率、客户端是否方便使用响应、缓存、等幂、安全等。\n\n在实际的接口设计中，方便客户端使用、安全、提高网络效率是降低可互操作性的原因。但是实际上，只要支持HTTP的设备，只要知道接口定义，就能相互操作，本质上的互操作性是给人看的。\n\n### 如何在服务器端实现安全和幂等的方法\n\n一个HTTP方法不会修改资源时，它就是安全的。只读操作使用安全的方法，才能保证请求安全。幂等保证客户端重复发起一个请求，和一次请求的效果一致。幂等性大多和网络或者软件故障相关。方法的幂等，可以保证在遇到软件故障时，可以发送**多次相同的请求**，而不必担心改变资源。\n\n| 方法    | 安全 | 幂等 | 操作                                   | 备注                                                         |\n| ------- | ---- | ---- | -------------------------------------- | ------------------------------------------------------------ |\n| GET     | Yes  | Yes  | 获取资源，返回 200                     | 不要在不安全不幂等的操作中使用GET，否则可能会不符合预期地改变资源。 |\n| HEAD    | Yes  | Yes  |                                        |                                                              |\n| OPTIONS | Yes  | Yes  |                                        |                                                              |\n| PUT     | No   | Yes  | 新建或者更新一个资源                   |                                                              |\n| DELETE  | No   | Yes  | 删除资源，返回 200                     | 要是实现幂等，服务器要维护资源的状态，知道资源已经被删除。否则可能会返回404。因为第二次删除资源就不存在了。实际上返回404更合理。 |\n| POST    | No   | No   | 创建多个资源或者对资源进行多种其他操作 |                                                              |\n\n####  何时使用POST\n\n- 新建资源或者修改多个资源；\n- 大数据的输入查询；\n- 其他方法都不适合，执行不安全或者非幂等的操作；\n- 提交密码、信用卡等敏感信息时必须使用POST。\n#### 如何使用POST 创建资源\n在创建资源后，返回 201，并在Location头中指定新资源的 URI。如果在响应正文中包含了新建资源的完整表述，在 Content-Location 头中包含新资源的URI。可在请求的 Slug 中指定新资源RUI的建议，服务器未必采用。\n请求得到响应，未必操作就已经完成，比如银行转账、在服务器上处理图片等比较耗时的操作。这类需要长时间才能完成的操作，返回 202 表示已经接收到请求，客户端在提交GET请求以询问操作状态时，**执行中，返回200**，响应中包含当前状态的表述，**成功。303**，提供 Location，执行新资源，**失败，200，给出失败原因**。\n其实这种做法，非常不方便客户端处理，实际设计时，都返回200，并在响应中标识是否成功。\n> 303，仅指出请求资源在Location中，并不是资源已经转移到新的URI。\n\n### 如何使用 PUT 创建资源\n只有在客户端能决定新资源的URI时才使用PUT创建资源，否则使用POST。比如存储服务器为每个客户端分配根路径，并让客户端把根路径作为文件系统的根目录，在客户端创建资源时，希望控制目录，客户端也应该控制目录。\n使用PUT创建资源时，服务器需要先客户端说明RUI是如何组织的，同时希望客户端创建资源时使用最小范围的URI。POST创建资源，服务器具有更多的控制权，更少的工作。\n\n## 识别资源\n\n### 如何从领域名词中识别资源\n\n分析用例，找到可以使用`创建`、`读取`、`更新`、`删除`动作来操作的领域名词，将这些名词识别为资源。\n\n### 如何控制资源粒度\n将资源直接映射到领域实体，会导致资源粒度很低，客户端希望更多的资源时，需要发送很多请求，导致网络效率低下和客户端难以处理响应，确定合适的资源粒度就非常关键。\n在设计资源时，结合**客户端使用是否方便**、**网络效率**来确定适合的粒度。以下因素也会影响资源粒度：\n- 是否可缓存；\n- 修改频率；\n- 可变性。\n设计粒度时，要确保更多的缓存、更低的修改频率，或者吧可变的数据分离出来。\n### 如何将资源组织成集合\n将相似的资源归为一个集合或者数组，通过GET方法来获取整个集合而不是单独获取，比如设计网站用户的好用列表，电商网站用户购物车里的商品。\n### 如何合并资源为符合资源\n将多个资源合并成一个资源会降低互操作性，但是有时候不得不组合，在代码上上表现的结果是，一个资源成为另一个资源的字段。\n比如有两个资源：\n```js\n{\n\tname:\"jack\", //一个人的资源\n\tage:24\n}\n```\n图书资源：\n```js\n{\n\tbookName:\"restful 实战\",\n\tprice:46\n}\n```\n想要获取用户最近阅读的书籍，需要发送两次请求，这样网络效率会低。\n可以书籍资源合并：\n```js\n{\n\tname:\"jack\",\n\tage:24,\n\tbooks:[]//最近阅读的书籍\n}\n```\n组合资源会导致资源重叠，组合之前，需要考虑以下问题：\n- 客户端对组合资源的请求是否很少，很少就不组合；\n- 网络开销，客户端和服务器的网络开销，服务器和其他服务器的网络开销，要说后者很大，收到客户端请求，再去其他服务器请求资源来组合，会导致客户端和服务器之间的网络开销也很多大，可以增加缓存或者现在服务器上组合好资源。\n## 设计表述\n\n客户端所关心的资源是一个抽象的实体，它是用  URI 来标识的。另一方面，表述是具体而真实的，您在客户端和服务器上针对它编写代码，进行操作。\n\n### 如何使用实体头注解表述\n\n表述不仅仅是以某种格式序列化后的数据，它是一连串字节加上用于描述那些字节的元数据。在  HTTP  中，表述元数据是由使用实体头的名值对（name-value pair）来实现的。这些实体头和应用数据本身一样重要。\n\n#### 您想知道在对服务器的请求或对客户端的响应中应该发送哪些  HTTP 头。\n- Content-Type，用于描述表述类型，包含  charset  参数或其他针对该媒体类型而定义的参数。告知接收方如何处理响应。\n- Content-Length，用于指定表述正文的字节大小。\n- Content-Language，如果您以某种语言对表述进行本地化，用该标头来指定语言。\n- Content-MD5，工具 / 软件在处理或存储表述时可能存在错误，需要提供一致性校验，用该标头来包含一个表述正文的  MD5 摘要。请注意，TCP  使用  checksum 在传输层提供一致性校验。\n- Content-Encoding，当您使用  gzip,compress 或  deflate 对表述正文进行编码时，使用该标头。\n- Last-Modified，用来说明服务器修改表述或资源的最后时间。\n\nHTTP 的设计是这样的，发送方可以用一系列名为实体头的标头来描述表述正文（也称为实体正文或消息正文）。有了这些标头，接收方可以在无须查看正文的情况下决定如何处理正文。它们还可以将解析正文所需要提前了解及猜测的内容减到最小程度。\n\nContent-Length\n这个标头最早是在  HTTP 1.0 中被引入的，接收方用它来判断自己是否从连接中读取了正确的字节数。要发送该标头，发送方需要在写正文前计算出表述的大小。HTTP 1.1 支持一种更有效的机制，名为分块转移编码（chuncked transfer encoding）这让 Content-Length 头变得有点多余。对于  POST 和  PUT 请求，就算使用了 ** Transfer-Encoding: chuncked**，也要在客户端应用程序的请求中包含  Content-Length 头。因为有些代理会拒绝没有包含这两个头的  POST 和  PUT 请求。\n\nContent-Language\n当表述针对某种语言做了本地化之后，请使用该标头，它的值是两个字母的  RFC 5646 语言标签，还可以在后面带上连字符（-）和任意两个字母的国家代码。\n比如\n```html\n<html lang=\"en-US\"> <!--美式英语-->\n<html lang=\"en-GB\"> <!--英式英语-->\n<html lang=\"zh-CN\"> <!--中国汉语，因为还有新加坡汉语-->\n```\n[更多关于网页设置语言的信息](https://www.biaodianfu.com/langtag.html)\n[完整的语言标记](http://www.loc.gov/standards/iso639-2/php/code_list.php?__cf_chl_jschl_tk__=c59b6c71bfc56434eddedcf024568f34cc8bb985-1590866144-0-AXSz2y3QWCwkfEYQaD_9OzTeVOijYE22O1jFMxNO5fvz0iWvkccWtBwwxiQbejam6id8sqXQkT4Hfro4NmtLaGOBSrVtMfEkAQ1bWuF7ET-zR-94STr8QvZx7Nebo-55j4nFEI3E2Ee6UhIhHFojT96arV8YeUBxcPmxT793E7egvk72zzyuRucAy2KCVZIMZCNZMEPtTq4i-L1pfes0dzjCO4g-6NpOQUNEFpobpue9cE5ihb9LFYLj3Vx_9bJ2h6l1A3iWEsq9iJYCqBiWN5F_Owv4cMK9u3-oF9MzFuMBerrSXGY2P5S6Hajb_13p7Q)\n Content-MD5\n接收方可以使用该标头来验证实体正文的完整性。该标头的值是表述正文的  MD5 摘要，在进行内容编码（gzip,compress  等）之后，转移编码（即  chunked）之前计算摘要值。\n因为这个标头不能保证消息没有被篡改，所以不要将它作为一种安全手段。**修改了正文的人同样可以修改标头的值。**\n在通过非可靠网络发送或接受大的表述时，这个标头非常有用。表述的发送方包含了  Content-MD5 头之后，接收方可以在解析前先验证消息的完整性。\n\nContent-Encoding\n这个标头说明了表述正文所使用的压缩类型，它的值可以是类似  gzip,compress 或  deflate 这样的字符串。\n客户端可以用  Accept-Encoding 头（详见第 7 章）来注明自己偏好的  Content-Encoding。然而，并没有一个标准的方式让客户端了解到服务器是否可以处理用给定编码压缩过的表述。除非您事先知道目标服务器支持某个特定的编码方法，否则应该避免在 HTTP 请求中使用这个标头。\n\nLast-Modified\n这个标头只用在响应上，它的值是一个时间戳，表示服务器最后修改资源表述的时间。\n\n#### 如何正确解析实体头\n当服务器或客户端接收到表述时，在处理请求前正确地解释实体头是很重要的。\nContent-Type\n当您收到一个不带  Content-Type 的表述时，避免猜测表述的类型。当客户端发送不带该标头的请求时，返回错误码 400（Bad Request）。当您从服务器接收到一个不带该标头的响应时，将其视为不正确的响应。\nContent-Length\n在没有确定接收到的表述不带  Transfer-Encoding: chunked  前，不要检查 Content-Length 头是否存在。\nContent-Encoding\n让您的网络库代码来解压那些压缩过的表述。\nContent-Language\n如果存在该标头，读取并存储它的值，记录下所使用的语言。\n\n####  如何避免字符编码不匹配\n表述的发送方和接收方之间的字符编码不匹配通常会造成数据损坏和解析错误。由于字符编码不匹配造成的错误很难发现。\n在发送表述时，如果媒体类型允许使用  charset 参数，则包含一个带字符编码值的 charset 参数，该参数值将被用于将字符转为字节。\n当您接收到一个表述，其中带有支持  charset 参数的媒体类型，在从表述正文的字节中构造字符流时，使用指定的编码。如果忽略了发送方提供的  charset 值，使用其他的值，那么应用程序很可能会把字符给解释错。\n诸如 ** application/xml**、**text/html**、**application/atom+xml** 和 **text/csv** 这样的文本和  XML 媒体类型允许您指定字符编码，通过  Content-Type 头中的  charset 参数，使用该字符编码将字符转换为实体正文中的字节。比如\n```bash\nContent-Type:application/xml;charset=UTF-8\n```\n诸如  application/xml,text/html,application/atom+xml 和 text/csv 这样的文本和  XML 媒体类型允许您指定字符编码，通过  Content-Type 头中的  charset 参数，使用该字符编码将字符转换为实体正文中的字节。\n还要避免针对  XML  格式的表述使用  text/xml  媒体类型。text/xml  的默认字符是 us-ascii，而  application/xml 使用  UTF-8。\n\n常用的标准或知名的媒体类型\n\n常用的分段媒体类型\n\n#### 如何理解服务器返回的错误？\n\n| 状态码 | 状态文本                 | 说明                                                         |\n| ------ | ------------------------ | ------------------------------------------------------------ |\n| 400    | Bad Request              | 正文不对，检查正文                                           |\n| 401    | Unauthorized             | 带有  Authorization 头的请求进行重试，其中包含身份信息       |\n| 403    | Forbidden                | 禁止客户端用这个请求方法来访问资源                           |\n| 404    | Not Found                | 资源已经不存在了                                             |\n| 413    | Request Entity Too Large | 正文里寻找关于有效长度的提示                                 |\n| 415    | Unsupported Media Type   | 请求支持的媒体类型不对                                       |\n| 500    | Internal Server Error    | 服务代码出错                                                 |\n| 503    | Service Unavailable      | 如果响应中有  Retry-After  头，在到达该时间前不要重试。这可能是整个服务器的错误，因此在客户端中要实现适当的补偿逻辑，在一段时间内避免向服务器发送请求。 |\n| 502    | Bad Gateway              | 通常不是客户端能够修复的，而是需要由途径的 Web 服务器或者代理服务器对其进行修复。 |\n\n但是这些状态码往往不够用，在设计接口时，通常都返回 200，在表述中告知是否错误。\n\n## 设计URI\n\nURI  是跨越  Web  的资源描述符，一个  URI 由以下内容组成 —— 协议（例如  http 和 https）、主机（例如  www.example.org）、端口号，后面紧跟一段或多段路径（例如 /user/1234），还有查询字符串。\n\n**URI***（统一资源标识符）*是一个指向资源的字符串。最通常用在 [URL](https://developer.mozilla.org/en-US/docs/Glossary/URL) 上来指定 Web 上资源文件的具体位置。相比之下，[URN](https://developer.mozilla.org/en-US/docs/Glossary/URN) 是在给定的命名空间用名字指向具体的资源\n\n#### 资源设计  URI 的最佳实践\n\n- 在  URI 的路径部分使用斜杠分隔符（/）来表示资源之间的层次关系。\n- 使用连字符（-）来改善长路径中名称的可读性。\n- 在  URI 的查询部分使用 “与” 符号（&）来分隔参数。\n- 在  URI 中避免出现文件扩展名（例如.php,.aspx 和.jsp）。\n- 保持URI分格的一致性，尤其是多人协作时。\n\n##  web 链接 \n\n链接提供了一种方式，可以从一个资源导航到另一个资源。但是本章的内容，实际开发想要按照 RESTful  定义接口，会非常繁琐，在返回实体中包含链接，也无实际用处。\n\n##  Atom 和 AtomPub\n\n没看到有实际作用，不记录。\n\n## 内容协商\n\n内容协商（Content Negotiation），有时也简写为  conneg，该过程用于当存在多个可用的资源表述形式时，为客户端选择一个最好的出来。内容协商常用于标明媒介类型的偏好，但它也可以用于标明本地化语言、字符编码以及压缩方面的偏好。\n\n#### 客户端如何标明内容偏好\n\n实现客户端时，一件重要的事情就是该客户端要能够向服务器标明自己的偏好和能力，包括它所能够处理的表述格式，所偏好的语言，能够识别的字符编码，以及它是否支持压缩。对于响应中的表述，即便事先知道它的格式、字符编码、语言以及压缩类型，清楚明确地标明客户端的偏好以及能力将更有助于客户端适应各种变化。\n\n在请求头中添加一个  Accept ，其值是一个偏好媒体类型的列表，以逗号分隔。根据客户端对各种媒体类型的偏好程度，可以再设定一个参数  q，默认值为 1.0，可精确到三位小数。 “*;q=0.0”，来向服务器标明自己无法处理那些没有列在  Accept 头里的媒体类型。\n\n请求中没有  Accept 头，那就使用默认格式来返回被请求资源的表述。请求中含有  Accept 头，那就解析它，并按照  q 参数降序排序媒体类型的值。然后从此列表中选择一个服务器所支持的媒体类型。在响应中要包含一个  Vary 头。\n\n如果客户端仅能处理属于某一种字符集的字符，那就增加一个 **Accept-Charset** 头，其值就是所偏好的字符集。否则，就不要添加这个头。\n\n请求中没有  Accept-Charset 头，那就以  UTF-8 对返回的表述进行编码。\n如果请求中含有  Accept-Charset 头，那就解析它，依照  q 参数对那些字符集进行排序，然后选择服务器所支持的字符编码。\n如果服务器端不支持任何所请求的字符集，并且  Accept-Charset  头中不包含 “*;q=0.0”，那么就使用  UTF-8 编码返回的表述。\n\n有这些情况中，如果媒体类型是文本的，并且允许使用  charset  参数，就在 Content-Type 头中包含  charset 参数，以标明服务器所用的字符编码。同样，在响应中也要包含一个  Vary 头。\n\n Accept-Language 头来指明表述所偏好的语言。\n\n请求中不含有  Accept-Language 头，那就在返回的表述中对所有给人阅读的文字使用默认的语言。\n如果请求中含有  Accept-Language 头，那就解析它，依照  q 参数对语言进行排序，选择列表里的第一个服务器所支持的语言。在响应中包含一个  Vary 头，详见 7.6 节。\n如果列表里的语言服务器端一个也不支持，并且  Accept-Language  头也不包含 “*;q=0.0”，那就在响应里使用默认的语言。\n\n客户端能够解压那些采用诸如  gzip,compress 或者  deflate 编码的压缩表述，就添加一个  **Accept-Encoding** 头并列出所支持的编码格式，否则就略过该标头。\n\n服务器支持压缩响应内容，那就从  Accept-Encoding 头中选择一种压缩技术。在响应中同样也要包含一个  Vary 头，详见 7.6 节。如果服务器所支持的压缩编码没有一个位于标头中，那就忽略它。对于  q 参数的处理同其他  Acceopt-* 的情况。\n如果请求中不包含  Accept-Encoding 头，就不要对表述进行压缩。\n\n```js\nAccept:application/atom+xml;q=1.0,application/xml;q=0.6,*/*;q=0.0\nAccept-Language:fr;q=1.0,en;q=0.5\nAccept-Charset:UTF-8\nAccept-Encoding:gzip\n```\n\n####   何时以及如何发送 Vary 头\n\n当服务器使用内容协商来选择表述时，根据  Accept-* 头的不同，同一个  URI 可以产生不同的表述。Vary 头告诉客户端服务器在选择表述时使用了哪些请求头。\n\n每当针对一个资源有多种形式的表述可用时，就要包含一个  Vary 头。该标头的值是一些请求头的列表，以逗号分隔，服务器在选择表述时参考了这些请求头。如果服务器还使用了除这些请求头之外的信息，例如客户端的  IP 地址、当前时间、用户个性化设置等，那就将  Vary 头的值设置为 *。\n\n服务器可以用  Vary 头来通知客户端服务器驱动内容协商的结果。Vary 头的值是一组**请求头**，而不是响应头。\n\n针对英语表述的请求：\n\n```js\nGET /status HTTP/1.1\nHost:www.example.com\nAccept-Language:en;q=1.0,*/*;q=0.0\n```\n\n响应\n\n```js\nHTTP/1.1 200 OK\nContent-Language:de\nVary:Accept-Language\n```\n\n针对法语表述的请求\n\n```js\nGET /status HTTP/1.1\nHost:www.exampe.com\nAccepet-Language:fr;q=1.0,*/*;q=1.0\n```\n\n响应：\n\n```js\nHTTP/1.1 200 OK\nContent-Language:fr\nVary:Accept-Language\n```\n\n缓存把这个标头作为缓存键的一部分，来维持表述的不同副本。客户端可以使用这个信息来获知服务器用于内容协商的标准。\n\n#### 如何处理内容协商失败\n\n知道当服务器无法提供客户端所偏好的表述时，是该提供一个默认的表述，还是该返回一个错误。\n\n服务器无法提供满足客户端偏好的表述，并且客户端明确包含了一个 “*/*;q=0.0”，那就返回状态码 **406（Not Acceptable）**，并在表述主体中包含表述的列表。\n\n请求：只接受json 格式的响应。\n\n```js\nGET /status HTTP/1.1\nHost:www.example.com\nAccept:application/json,*/*;q=0.0\n```\n\n服务器无法满足客户端的格式要求，返回 406，在表述中以JSON格式给出理由\n\n```js\n406 Not Acceptable\nContent-Type:application/json\n\n{\n    message:'This server does not support json.'\n}\n```\n\n请注意，服务器给出的错误信息本身使用了  JSON  格式。这是合理的，服务器完全可以使用常见的格式来实现错误信息。\n\n## 查询\n\n查询信息是  HTTP GET 方法的一种常见应用。查询通常涉及三个组成部分，即过滤（filtering）、排序（sorting）和投影（projection）。过滤是基于一些过滤条件选择实体的一个子集的过程。排序会影响服务器是如何排列响应中结果的。投影是选择实体中的哪些字段将被包含到结果中的过程。例如，发送到电影服务器的查询请求可能会涉及按类型过滤电影，然后根据上映日期倒序排序，最后在返回客户端的响应中只选择标题、年份以及每部电影的简单介绍。\n\n只要关注过  URI 和表述，查询设计还是相对比较简单的。客户端负责运行查询，服务器的职责包括设计  URI 来支持过滤、排序和投影，设计表述，设置合适的缓存头。\n\n####  如何针对查询设计 URI\n\n使用查询参数来设计查询是一种常用惯例，根据自己的用例，可能需要支持以下一种或全部情况的查询参数：\n● 从可用资源中选择数据\n● 指定排序条件\n● 罗列要包含在响应中的资源的字段\n\n#### 如何设计大量输入的查询\n\n使用 POST 实现查询，Content-Type application/x-www-form-urlencoded 的格式，服务器实现设计成等幂和安全的。使用POST进行查询，会丧失缓存功能。\n\n## 缓存\n\n缓存是构建于  HTTP 统一接口之上的最有用的功能之一。可以利用缓存减少终端用户感知到的延时，增加可靠性，减少带宽使用和成本，降低服务器负载。缓存无处不在，可以在服务器网络里、内容分发网络（content delivery network，简称  CDN）或是客户端网络里。\n\n通常所说的缓存可以是类似  memcached（http://memcached.org/）这样的对象缓存，或者 Squid（http://www.squid-cache.org/）和 Traffic Server（http://incubator.apache.org/projects/trafficserver.html）这样的  HTTP  缓存。 HTTP  缓存不需要客户端或服务器调用任何特殊的编程  API  来管理缓存中的数据，对象缓存需要调用特定的缓存API实现。\n\n####  如何设置过期缓存头\n\n当缓存可以在不访问源服务器时做出尽可能多的响应时，它是最高效的。设计过期缓存（Expiration Caching）就是为了降低源服务器收到的请求数量，同时减少应用程序使用的带宽。过期缓存基于  Cache-Control  和  Expires 这两个头，它们指导客户端和缓存在一段指定的时间内保存从服务器返回的表述副本。**在这个时间窗口以内，甚至超出该时间窗口，缓存可以对后续请求做出响应，无须访问服务器。**\n\n在提供表述时，包含一个  Cache-Control  头，其中带有一个与新鲜寿命（freshness lifetime）相同的  max-age 值（单位为秒）。\n\nCache-Control 是一个  HTTP 1.1 头，为了支持遗留的  HTTP 1.0 缓存，还要包含一个带过期日期时间的  Expires 头。过期时间是服务器生成表述的时间加上新鲜寿命。还要包含一个带有日期时间的  Date 头，即服务器返回响应的时间。这个标头能帮助客户端计算新鲜寿命，即为  Expires 和 Date 两值之差。\n\n不让缓存提供副本，则加上一个带  no-cache 值的  Cache-Control 头。这里还要加上  Pragma: no-cache 头来支持遗留的  HTTP 1.0 缓存。\n\n Cache-Control 的值\n\n| 值                    | 说明                                                         |      |\n| --------------------- | ------------------------------------------------------------ | ---- |\n| public                | 这是默认指令。当请求是经过身份验证的，但您仍希望共享缓存提供缓存响应时，也可以使用该指令。 |      |\n| private               | 当响应专属于某个客户端或用户时，使用该指令。出现这个指令，任意客户端缓存（例如，浏览器缓存或转发代理）都可以缓存表述，但诸如服务器缓存或网络缓存之类的共享缓存则不能进行缓存。在基于客户端或用户身份验证来提供表述的时候添加该指令。 |      |\n| no-cache 和  no-store | 通过这些指令可以避免缓存存储或提供已经缓存的响应。           |      |\n| max-age               | 该指令的值即为新鲜寿命，单位为秒。                           |      |\n| s-maxage              | 这个指令与  max-age  类似，但只对共享缓存有意义。在源服务器同时设置了 max-age 和 s-maxage 的时候，缓存会使用 s-maxage 头。实际上，单独设置 max-age 指令就足够了。 |      |\n| must-revalidate       | 缓存在提供陈旧的表述前先检查源服务器。                       |      |\n| proxy-revalidate      | 与  must-revalidate 指令类似，但它只应用于共享缓存。         |      |\n\n","slug":"restful-webservice实战笔记","published":0,"date":"2020-05-30T10:56:37.836Z","updated":"2020-05-31T16:38:43.987Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccdm0003jwrnmns7xl4i","content":"<h1 id=\"restful-webservice-实战笔记\"><a class=\"markdownIt-Anchor\" href=\"#restful-webservice-实战笔记\"></a> RESTful webservice 实战笔记</h1>\n<h2 id=\"使用统一的接口\"><a class=\"markdownIt-Anchor\" href=\"#使用统一的接口\"></a> 使用统一的接口</h2>\n<p>HTTP 是一种应用层协议，定义在<strong>资源</strong>在客户端和服务器之间的转移，诸如<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>等方法，是对资源的操作。HTTP 本身是具有语义的，正确使用HTTP，可使得 web api 更具有自说明性，不必或者只要提供<strong>简要的</strong>的文档说明，api 使用者就能知道如何使用。</p>\n<h3 id=\"如何保持交互的可见性\"><a class=\"markdownIt-Anchor\" href=\"#如何保持交互的可见性\"></a> 如何保持交互的可见性</h3>\n<p>作为应用层协议，HTTP 的设计目标是在客户端和服务器之间保持对库、服务器、代理、缓存和其他工具的可见性。可见性很难理解，我认为定义为设备之间可互操作性更为准确，只要设备知道接口定义，设备之间就可通过HTTP 通信。那么如何确保这种可互操作性呢？要是接口按照<strong>统一的</strong>约定或者规范定义，那么保持这种互操作性可以实现，而基于HTTP语义的约定是最为简单的，RESTful 就是充分利用了HTTP语义的一种接口设计规范。保持可互操作性需要保持两条原则：</p>\n<ol>\n<li><strong>使用方法时，和其语义保持一致，并添加标头来描述请求和响应</strong>；</li>\n<li>正确使用<strong>状态码</strong>和<strong>状态消息</strong>，以便代理、缓存和客户端可以决定如何操作请求结果。</li>\n</ol>\n<blockquote>\n<p>在某些情况下，为了其他特定，可降低或放弃可见性，比如为了提高网络效率、客户端是否方便使用响应、缓存、等幂、安全等。</p>\n</blockquote>\n<p>在实际的接口设计中，方便客户端使用、安全、提高网络效率是降低可互操作性的原因。但是实际上，只要支持HTTP的设备，只要知道接口定义，就能相互操作，本质上的互操作性是给人看的。</p>\n<h3 id=\"如何在服务器端实现安全和幂等的方法\"><a class=\"markdownIt-Anchor\" href=\"#如何在服务器端实现安全和幂等的方法\"></a> 如何在服务器端实现安全和幂等的方法</h3>\n<p>一个HTTP方法不会修改资源时，它就是安全的。只读操作使用安全的方法，才能保证请求安全。幂等保证客户端重复发起一个请求，和一次请求的效果一致。幂等性大多和网络或者软件故障相关。方法的幂等，可以保证在遇到软件故障时，可以发送<strong>多次相同的请求</strong>，而不必担心改变资源。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>安全</th>\n<th>幂等</th>\n<th>操作</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>获取资源，返回 200</td>\n<td>不要在不安全不幂等的操作中使用GET，否则可能会不符合预期地改变资源。</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>Yes</td>\n<td>Yes</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>Yes</td>\n<td>Yes</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>No</td>\n<td>Yes</td>\n<td>新建或者更新一个资源</td>\n<td></td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>No</td>\n<td>Yes</td>\n<td>删除资源，返回 200</td>\n<td>要是实现幂等，服务器要维护资源的状态，知道资源已经被删除。否则可能会返回404。因为第二次删除资源就不存在了。实际上返回404更合理。</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>No</td>\n<td>No</td>\n<td>创建多个资源或者对资源进行多种其他操作</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"何时使用post\"><a class=\"markdownIt-Anchor\" href=\"#何时使用post\"></a> 何时使用POST</h4>\n<ul>\n<li>新建资源或者修改多个资源；</li>\n<li>大数据的输入查询；</li>\n<li>其他方法都不适合，执行不安全或者非幂等的操作；</li>\n<li>提交密码、信用卡等敏感信息时必须使用POST。</li>\n</ul>\n<h4 id=\"如何使用post-创建资源\"><a class=\"markdownIt-Anchor\" href=\"#如何使用post-创建资源\"></a> 如何使用POST 创建资源</h4>\n<p>在创建资源后，返回 201，并在Location头中指定新资源的 URI。如果在响应正文中包含了新建资源的完整表述，在 Content-Location 头中包含新资源的URI。可在请求的 Slug 中指定新资源RUI的建议，服务器未必采用。<br>\n请求得到响应，未必操作就已经完成，比如银行转账、在服务器上处理图片等比较耗时的操作。这类需要长时间才能完成的操作，返回 202 表示已经接收到请求，客户端在提交GET请求以询问操作状态时，<strong>执行中，返回200</strong>，响应中包含当前状态的表述，<strong>成功。303</strong>，提供 Location，执行新资源，<strong>失败，200，给出失败原因</strong>。<br>\n其实这种做法，非常不方便客户端处理，实际设计时，都返回200，并在响应中标识是否成功。</p>\n<blockquote>\n<p>303，仅指出请求资源在Location中，并不是资源已经转移到新的URI。</p>\n</blockquote>\n<h3 id=\"如何使用-put-创建资源\"><a class=\"markdownIt-Anchor\" href=\"#如何使用-put-创建资源\"></a> 如何使用 PUT 创建资源</h3>\n<p>只有在客户端能决定新资源的URI时才使用PUT创建资源，否则使用POST。比如存储服务器为每个客户端分配根路径，并让客户端把根路径作为文件系统的根目录，在客户端创建资源时，希望控制目录，客户端也应该控制目录。<br>\n使用PUT创建资源时，服务器需要先客户端说明RUI是如何组织的，同时希望客户端创建资源时使用最小范围的URI。POST创建资源，服务器具有更多的控制权，更少的工作。</p>\n<h2 id=\"识别资源\"><a class=\"markdownIt-Anchor\" href=\"#识别资源\"></a> 识别资源</h2>\n<h3 id=\"如何从领域名词中识别资源\"><a class=\"markdownIt-Anchor\" href=\"#如何从领域名词中识别资源\"></a> 如何从领域名词中识别资源</h3>\n<p>分析用例，找到可以使用<code>创建</code>、<code>读取</code>、<code>更新</code>、<code>删除</code>动作来操作的领域名词，将这些名词识别为资源。</p>\n<h3 id=\"如何控制资源粒度\"><a class=\"markdownIt-Anchor\" href=\"#如何控制资源粒度\"></a> 如何控制资源粒度</h3>\n<p>将资源直接映射到领域实体，会导致资源粒度很低，客户端希望更多的资源时，需要发送很多请求，导致网络效率低下和客户端难以处理响应，确定合适的资源粒度就非常关键。<br>\n在设计资源时，结合<strong>客户端使用是否方便</strong>、<strong>网络效率</strong>来确定适合的粒度。以下因素也会影响资源粒度：</p>\n<ul>\n<li>是否可缓存；</li>\n<li>修改频率；</li>\n<li>可变性。<br>\n设计粒度时，要确保更多的缓存、更低的修改频率，或者吧可变的数据分离出来。</li>\n</ul>\n<h3 id=\"如何将资源组织成集合\"><a class=\"markdownIt-Anchor\" href=\"#如何将资源组织成集合\"></a> 如何将资源组织成集合</h3>\n<p>将相似的资源归为一个集合或者数组，通过GET方法来获取整个集合而不是单独获取，比如设计网站用户的好用列表，电商网站用户购物车里的商品。</p>\n<h3 id=\"如何合并资源为符合资源\"><a class=\"markdownIt-Anchor\" href=\"#如何合并资源为符合资源\"></a> 如何合并资源为符合资源</h3>\n<p>将多个资源合并成一个资源会降低互操作性，但是有时候不得不组合，在代码上上表现的结果是，一个资源成为另一个资源的字段。<br>\n比如有两个资源：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname:<span class=\"string\">\"jack\"</span>, <span class=\"comment\">//一个人的资源</span></span><br><span class=\"line\">\tage:<span class=\"number\">24</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>图书资源：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tbookName:<span class=\"string\">\"restful 实战\"</span>,</span><br><span class=\"line\">\tprice:<span class=\"number\">46</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>想要获取用户最近阅读的书籍，需要发送两次请求，这样网络效率会低。<br>\n可以书籍资源合并：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname:<span class=\"string\">\"jack\"</span>,</span><br><span class=\"line\">\tage:<span class=\"number\">24</span>,</span><br><span class=\"line\">\tbooks:[]<span class=\"comment\">//最近阅读的书籍</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组合资源会导致资源重叠，组合之前，需要考虑以下问题：</p>\n<ul>\n<li>客户端对组合资源的请求是否很少，很少就不组合；</li>\n<li>网络开销，客户端和服务器的网络开销，服务器和其他服务器的网络开销，要说后者很大，收到客户端请求，再去其他服务器请求资源来组合，会导致客户端和服务器之间的网络开销也很多大，可以增加缓存或者现在服务器上组合好资源。</li>\n</ul>\n<h2 id=\"设计表述\"><a class=\"markdownIt-Anchor\" href=\"#设计表述\"></a> 设计表述</h2>\n<p>客户端所关心的资源是一个抽象的实体，它是用  URI 来标识的。另一方面，表述是具体而真实的，您在客户端和服务器上针对它编写代码，进行操作。</p>\n<h3 id=\"如何使用实体头注解表述\"><a class=\"markdownIt-Anchor\" href=\"#如何使用实体头注解表述\"></a> 如何使用实体头注解表述</h3>\n<p>表述不仅仅是以某种格式序列化后的数据，它是一连串字节加上用于描述那些字节的元数据。在  HTTP  中，表述元数据是由使用实体头的名值对（name-value pair）来实现的。这些实体头和应用数据本身一样重要。</p>\n<h4 id=\"您想知道在对服务器的请求或对客户端的响应中应该发送哪些-http-头\"><a class=\"markdownIt-Anchor\" href=\"#您想知道在对服务器的请求或对客户端的响应中应该发送哪些-http-头\"></a> 您想知道在对服务器的请求或对客户端的响应中应该发送哪些  HTTP 头。</h4>\n<ul>\n<li>Content-Type，用于描述表述类型，包含  charset  参数或其他针对该媒体类型而定义的参数。告知接收方如何处理响应。</li>\n<li>Content-Length，用于指定表述正文的字节大小。</li>\n<li>Content-Language，如果您以某种语言对表述进行本地化，用该标头来指定语言。</li>\n<li>Content-MD5，工具 / 软件在处理或存储表述时可能存在错误，需要提供一致性校验，用该标头来包含一个表述正文的  MD5 摘要。请注意，TCP  使用  checksum 在传输层提供一致性校验。</li>\n<li>Content-Encoding，当您使用  gzip,compress 或  deflate 对表述正文进行编码时，使用该标头。</li>\n<li>Last-Modified，用来说明服务器修改表述或资源的最后时间。</li>\n</ul>\n<p>HTTP 的设计是这样的，发送方可以用一系列名为实体头的标头来描述表述正文（也称为实体正文或消息正文）。有了这些标头，接收方可以在无须查看正文的情况下决定如何处理正文。它们还可以将解析正文所需要提前了解及猜测的内容减到最小程度。</p>\n<p>Content-Length<br>\n这个标头最早是在  HTTP 1.0 中被引入的，接收方用它来判断自己是否从连接中读取了正确的字节数。要发送该标头，发送方需要在写正文前计算出表述的大小。HTTP 1.1 支持一种更有效的机制，名为分块转移编码（chuncked transfer encoding）这让 Content-Length 头变得有点多余。对于  POST 和  PUT 请求，就算使用了 ** Transfer-Encoding: chuncked**，也要在客户端应用程序的请求中包含  Content-Length 头。因为有些代理会拒绝没有包含这两个头的  POST 和  PUT 请求。</p>\n<p>Content-Language<br>\n当表述针对某种语言做了本地化之后，请使用该标头，它的值是两个字母的  RFC 5646 语言标签，还可以在后面带上连字符（-）和任意两个字母的国家代码。<br>\n比如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en-US\"</span>&gt;</span> <span class=\"comment\">&lt;!--美式英语--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en-GB\"</span>&gt;</span> <span class=\"comment\">&lt;!--英式英语--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span> <span class=\"comment\">&lt;!--中国汉语，因为还有新加坡汉语--&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.biaodianfu.com/langtag.html\" target=\"_blank\" rel=\"noopener\">更多关于网页设置语言的信息</a><br>\n<a href=\"http://www.loc.gov/standards/iso639-2/php/code_list.php?__cf_chl_jschl_tk__=c59b6c71bfc56434eddedcf024568f34cc8bb985-1590866144-0-AXSz2y3QWCwkfEYQaD_9OzTeVOijYE22O1jFMxNO5fvz0iWvkccWtBwwxiQbejam6id8sqXQkT4Hfro4NmtLaGOBSrVtMfEkAQ1bWuF7ET-zR-94STr8QvZx7Nebo-55j4nFEI3E2Ee6UhIhHFojT96arV8YeUBxcPmxT793E7egvk72zzyuRucAy2KCVZIMZCNZMEPtTq4i-L1pfes0dzjCO4g-6NpOQUNEFpobpue9cE5ihb9LFYLj3Vx_9bJ2h6l1A3iWEsq9iJYCqBiWN5F_Owv4cMK9u3-oF9MzFuMBerrSXGY2P5S6Hajb_13p7Q\" target=\"_blank\" rel=\"noopener\">完整的语言标记</a><br>\nContent-MD5<br>\n接收方可以使用该标头来验证实体正文的完整性。该标头的值是表述正文的  MD5 摘要，在进行内容编码（gzip,compress  等）之后，转移编码（即  chunked）之前计算摘要值。<br>\n因为这个标头不能保证消息没有被篡改，所以不要将它作为一种安全手段。<strong>修改了正文的人同样可以修改标头的值。</strong><br>\n在通过非可靠网络发送或接受大的表述时，这个标头非常有用。表述的发送方包含了  Content-MD5 头之后，接收方可以在解析前先验证消息的完整性。</p>\n<p>Content-Encoding<br>\n这个标头说明了表述正文所使用的压缩类型，它的值可以是类似  gzip,compress 或  deflate 这样的字符串。<br>\n客户端可以用  Accept-Encoding 头（详见第 7 章）来注明自己偏好的  Content-Encoding。然而，并没有一个标准的方式让客户端了解到服务器是否可以处理用给定编码压缩过的表述。除非您事先知道目标服务器支持某个特定的编码方法，否则应该避免在 HTTP 请求中使用这个标头。</p>\n<p>Last-Modified<br>\n这个标头只用在响应上，它的值是一个时间戳，表示服务器最后修改资源表述的时间。</p>\n<h4 id=\"如何正确解析实体头\"><a class=\"markdownIt-Anchor\" href=\"#如何正确解析实体头\"></a> 如何正确解析实体头</h4>\n<p>当服务器或客户端接收到表述时，在处理请求前正确地解释实体头是很重要的。<br>\nContent-Type<br>\n当您收到一个不带  Content-Type 的表述时，避免猜测表述的类型。当客户端发送不带该标头的请求时，返回错误码 400（Bad Request）。当您从服务器接收到一个不带该标头的响应时，将其视为不正确的响应。<br>\nContent-Length<br>\n在没有确定接收到的表述不带  Transfer-Encoding: chunked  前，不要检查 Content-Length 头是否存在。<br>\nContent-Encoding<br>\n让您的网络库代码来解压那些压缩过的表述。<br>\nContent-Language<br>\n如果存在该标头，读取并存储它的值，记录下所使用的语言。</p>\n<h4 id=\"如何避免字符编码不匹配\"><a class=\"markdownIt-Anchor\" href=\"#如何避免字符编码不匹配\"></a> 如何避免字符编码不匹配</h4>\n<p>表述的发送方和接收方之间的字符编码不匹配通常会造成数据损坏和解析错误。由于字符编码不匹配造成的错误很难发现。<br>\n在发送表述时，如果媒体类型允许使用  charset 参数，则包含一个带字符编码值的 charset 参数，该参数值将被用于将字符转为字节。<br>\n当您接收到一个表述，其中带有支持  charset 参数的媒体类型，在从表述正文的字节中构造字符流时，使用指定的编码。如果忽略了发送方提供的  charset 值，使用其他的值，那么应用程序很可能会把字符给解释错。<br>\n诸如 ** application/xml**、<strong>text/html</strong>、<strong>application/atom+xml</strong> 和 <strong>text/csv</strong> 这样的文本和  XML 媒体类型允许您指定字符编码，通过  Content-Type 头中的  charset 参数，使用该字符编码将字符转换为实体正文中的字节。比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type:application/xml;charset=UTF-8</span><br></pre></td></tr></table></figure>\n<p>诸如  application/xml,text/html,application/atom+xml 和 text/csv 这样的文本和  XML 媒体类型允许您指定字符编码，通过  Content-Type 头中的  charset 参数，使用该字符编码将字符转换为实体正文中的字节。<br>\n还要避免针对  XML  格式的表述使用  text/xml  媒体类型。text/xml  的默认字符是 us-ascii，而  application/xml 使用  UTF-8。</p>\n<p>常用的标准或知名的媒体类型</p>\n<p>常用的分段媒体类型</p>\n<h4 id=\"如何理解服务器返回的错误\"><a class=\"markdownIt-Anchor\" href=\"#如何理解服务器返回的错误\"></a> 如何理解服务器返回的错误？</h4>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>状态文本</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>400</td>\n<td>Bad Request</td>\n<td>正文不对，检查正文</td>\n</tr>\n<tr>\n<td>401</td>\n<td>Unauthorized</td>\n<td>带有  Authorization 头的请求进行重试，其中包含身份信息</td>\n</tr>\n<tr>\n<td>403</td>\n<td>Forbidden</td>\n<td>禁止客户端用这个请求方法来访问资源</td>\n</tr>\n<tr>\n<td>404</td>\n<td>Not Found</td>\n<td>资源已经不存在了</td>\n</tr>\n<tr>\n<td>413</td>\n<td>Request Entity Too Large</td>\n<td>正文里寻找关于有效长度的提示</td>\n</tr>\n<tr>\n<td>415</td>\n<td>Unsupported Media Type</td>\n<td>请求支持的媒体类型不对</td>\n</tr>\n<tr>\n<td>500</td>\n<td>Internal Server Error</td>\n<td>服务代码出错</td>\n</tr>\n<tr>\n<td>503</td>\n<td>Service Unavailable</td>\n<td>如果响应中有  Retry-After  头，在到达该时间前不要重试。这可能是整个服务器的错误，因此在客户端中要实现适当的补偿逻辑，在一段时间内避免向服务器发送请求。</td>\n</tr>\n<tr>\n<td>502</td>\n<td>Bad Gateway</td>\n<td>通常不是客户端能够修复的，而是需要由途径的 Web 服务器或者代理服务器对其进行修复。</td>\n</tr>\n</tbody>\n</table>\n<p>但是这些状态码往往不够用，在设计接口时，通常都返回 200，在表述中告知是否错误。</p>\n<h2 id=\"设计uri\"><a class=\"markdownIt-Anchor\" href=\"#设计uri\"></a> 设计URI</h2>\n<p>URI  是跨越  Web  的资源描述符，一个  URI 由以下内容组成 —— 协议（例如  http 和 https）、主机（例如  <a href=\"http://www.example.org\" target=\"_blank\" rel=\"noopener\">www.example.org</a>）、端口号，后面紧跟一段或多段路径（例如 /user/1234），还有查询字符串。</p>\n<p><strong>URI</strong>*（统一资源标识符）*是一个指向资源的字符串。最通常用在 <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/URL\" target=\"_blank\" rel=\"noopener\">URL</a> 上来指定 Web 上资源文件的具体位置。相比之下，<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/URN\" target=\"_blank\" rel=\"noopener\">URN</a> 是在给定的命名空间用名字指向具体的资源</p>\n<h4 id=\"资源设计-uri-的最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#资源设计-uri-的最佳实践\"></a> 资源设计  URI 的最佳实践</h4>\n<ul>\n<li>在  URI 的路径部分使用斜杠分隔符（/）来表示资源之间的层次关系。</li>\n<li>使用连字符（-）来改善长路径中名称的可读性。</li>\n<li>在  URI 的查询部分使用 “与” 符号（&amp;）来分隔参数。</li>\n<li>在  URI 中避免出现文件扩展名（例如.php,.aspx 和.jsp）。</li>\n<li>保持URI分格的一致性，尤其是多人协作时。</li>\n</ul>\n<h2 id=\"web-链接\"><a class=\"markdownIt-Anchor\" href=\"#web-链接\"></a> web 链接</h2>\n<p>链接提供了一种方式，可以从一个资源导航到另一个资源。但是本章的内容，实际开发想要按照 RESTful  定义接口，会非常繁琐，在返回实体中包含链接，也无实际用处。</p>\n<h2 id=\"atom-和-atompub\"><a class=\"markdownIt-Anchor\" href=\"#atom-和-atompub\"></a> Atom 和 AtomPub</h2>\n<p>没看到有实际作用，不记录。</p>\n<h2 id=\"内容协商\"><a class=\"markdownIt-Anchor\" href=\"#内容协商\"></a> 内容协商</h2>\n<p>内容协商（Content Negotiation），有时也简写为  conneg，该过程用于当存在多个可用的资源表述形式时，为客户端选择一个最好的出来。内容协商常用于标明媒介类型的偏好，但它也可以用于标明本地化语言、字符编码以及压缩方面的偏好。</p>\n<h4 id=\"客户端如何标明内容偏好\"><a class=\"markdownIt-Anchor\" href=\"#客户端如何标明内容偏好\"></a> 客户端如何标明内容偏好</h4>\n<p>实现客户端时，一件重要的事情就是该客户端要能够向服务器标明自己的偏好和能力，包括它所能够处理的表述格式，所偏好的语言，能够识别的字符编码，以及它是否支持压缩。对于响应中的表述，即便事先知道它的格式、字符编码、语言以及压缩类型，清楚明确地标明客户端的偏好以及能力将更有助于客户端适应各种变化。</p>\n<p>在请求头中添加一个  Accept ，其值是一个偏好媒体类型的列表，以逗号分隔。根据客户端对各种媒体类型的偏好程度，可以再设定一个参数  q，默认值为 1.0，可精确到三位小数。 “*;q=0.0”，来向服务器标明自己无法处理那些没有列在  Accept 头里的媒体类型。</p>\n<p>请求中没有  Accept 头，那就使用默认格式来返回被请求资源的表述。请求中含有  Accept 头，那就解析它，并按照  q 参数降序排序媒体类型的值。然后从此列表中选择一个服务器所支持的媒体类型。在响应中要包含一个  Vary 头。</p>\n<p>如果客户端仅能处理属于某一种字符集的字符，那就增加一个 <strong>Accept-Charset</strong> 头，其值就是所偏好的字符集。否则，就不要添加这个头。</p>\n<p>请求中没有  Accept-Charset 头，那就以  UTF-8 对返回的表述进行编码。<br>\n如果请求中含有  Accept-Charset 头，那就解析它，依照  q 参数对那些字符集进行排序，然后选择服务器所支持的字符编码。<br>\n如果服务器端不支持任何所请求的字符集，并且  Accept-Charset  头中不包含 “*;q=0.0”，那么就使用  UTF-8 编码返回的表述。</p>\n<p>有这些情况中，如果媒体类型是文本的，并且允许使用  charset  参数，就在 Content-Type 头中包含  charset 参数，以标明服务器所用的字符编码。同样，在响应中也要包含一个  Vary 头。</p>\n<p>Accept-Language 头来指明表述所偏好的语言。</p>\n<p>请求中不含有  Accept-Language 头，那就在返回的表述中对所有给人阅读的文字使用默认的语言。<br>\n如果请求中含有  Accept-Language 头，那就解析它，依照  q 参数对语言进行排序，选择列表里的第一个服务器所支持的语言。在响应中包含一个  Vary 头，详见 7.6 节。<br>\n如果列表里的语言服务器端一个也不支持，并且  Accept-Language  头也不包含 “*;q=0.0”，那就在响应里使用默认的语言。</p>\n<p>客户端能够解压那些采用诸如  gzip,compress 或者  deflate 编码的压缩表述，就添加一个  <strong>Accept-Encoding</strong> 头并列出所支持的编码格式，否则就略过该标头。</p>\n<p>服务器支持压缩响应内容，那就从  Accept-Encoding 头中选择一种压缩技术。在响应中同样也要包含一个  Vary 头，详见 7.6 节。如果服务器所支持的压缩编码没有一个位于标头中，那就忽略它。对于  q 参数的处理同其他  Acceopt-* 的情况。<br>\n如果请求中不包含  Accept-Encoding 头，就不要对表述进行压缩。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept:application/atom+xml;q=<span class=\"number\">1.0</span>,application/xml;q=<span class=\"number\">0.6</span>,*<span class=\"comment\">/*;q=0.0</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Language:fr;q=1.0,en;q=0.5</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Charset:UTF-8</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Encoding:gzip</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"何时以及如何发送-vary-头\"><a class=\"markdownIt-Anchor\" href=\"#何时以及如何发送-vary-头\"></a> 何时以及如何发送 Vary 头</h4>\n<p>当服务器使用内容协商来选择表述时，根据  Accept-* 头的不同，同一个  URI 可以产生不同的表述。Vary 头告诉客户端服务器在选择表述时使用了哪些请求头。</p>\n<p>每当针对一个资源有多种形式的表述可用时，就要包含一个  Vary 头。该标头的值是一些请求头的列表，以逗号分隔，服务器在选择表述时参考了这些请求头。如果服务器还使用了除这些请求头之外的信息，例如客户端的  IP 地址、当前时间、用户个性化设置等，那就将  Vary 头的值设置为 *。</p>\n<p>服务器可以用  Vary 头来通知客户端服务器驱动内容协商的结果。Vary 头的值是一组<strong>请求头</strong>，而不是响应头。</p>\n<p>针对英语表述的请求：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /status HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host:www.example.com</span><br><span class=\"line\">Accept-Language:en;q=<span class=\"number\">1.0</span>,*<span class=\"comment\">/*;q=0.0</span></span><br></pre></td></tr></table></figure>\n<p>响应</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/<span class=\"number\">1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\">Content-Language:de</span><br><span class=\"line\">Vary:Accept-Language</span><br></pre></td></tr></table></figure>\n<p>针对法语表述的请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /status HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host:www.exampe.com</span><br><span class=\"line\">Accepet-Language:fr;q=<span class=\"number\">1.0</span>,*<span class=\"comment\">/*;q=1.0</span></span><br></pre></td></tr></table></figure>\n<p>响应：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/<span class=\"number\">1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\">Content-Language:fr</span><br><span class=\"line\">Vary:Accept-Language</span><br></pre></td></tr></table></figure>\n<p>缓存把这个标头作为缓存键的一部分，来维持表述的不同副本。客户端可以使用这个信息来获知服务器用于内容协商的标准。</p>\n<h4 id=\"如何处理内容协商失败\"><a class=\"markdownIt-Anchor\" href=\"#如何处理内容协商失败\"></a> 如何处理内容协商失败</h4>\n<p>知道当服务器无法提供客户端所偏好的表述时，是该提供一个默认的表述，还是该返回一个错误。</p>\n<p>服务器无法提供满足客户端偏好的表述，并且客户端明确包含了一个 “<em>/</em>;q=0.0”，那就返回状态码 <strong>406（Not Acceptable）</strong>，并在表述主体中包含表述的列表。</p>\n<p>请求：只接受json 格式的响应。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /status HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host:www.example.com</span><br><span class=\"line\">Accept:application/json,*<span class=\"comment\">/*;q=0.0</span></span><br></pre></td></tr></table></figure>\n<p>服务器无法满足客户端的格式要求，返回 406，在表述中以JSON格式给出理由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">406</span> Not Acceptable</span><br><span class=\"line\">Content-Type:application/json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    message:<span class=\"string\">'This server does not support json.'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请注意，服务器给出的错误信息本身使用了  JSON  格式。这是合理的，服务器完全可以使用常见的格式来实现错误信息。</p>\n<h2 id=\"查询\"><a class=\"markdownIt-Anchor\" href=\"#查询\"></a> 查询</h2>\n<p>查询信息是  HTTP GET 方法的一种常见应用。查询通常涉及三个组成部分，即过滤（filtering）、排序（sorting）和投影（projection）。过滤是基于一些过滤条件选择实体的一个子集的过程。排序会影响服务器是如何排列响应中结果的。投影是选择实体中的哪些字段将被包含到结果中的过程。例如，发送到电影服务器的查询请求可能会涉及按类型过滤电影，然后根据上映日期倒序排序，最后在返回客户端的响应中只选择标题、年份以及每部电影的简单介绍。</p>\n<p>只要关注过  URI 和表述，查询设计还是相对比较简单的。客户端负责运行查询，服务器的职责包括设计  URI 来支持过滤、排序和投影，设计表述，设置合适的缓存头。</p>\n<h4 id=\"如何针对查询设计-uri\"><a class=\"markdownIt-Anchor\" href=\"#如何针对查询设计-uri\"></a> 如何针对查询设计 URI</h4>\n<p>使用查询参数来设计查询是一种常用惯例，根据自己的用例，可能需要支持以下一种或全部情况的查询参数：<br>\n● 从可用资源中选择数据<br>\n● 指定排序条件<br>\n● 罗列要包含在响应中的资源的字段</p>\n<h4 id=\"如何设计大量输入的查询\"><a class=\"markdownIt-Anchor\" href=\"#如何设计大量输入的查询\"></a> 如何设计大量输入的查询</h4>\n<p>使用 POST 实现查询，Content-Type application/x-www-form-urlencoded 的格式，服务器实现设计成等幂和安全的。使用POST进行查询，会丧失缓存功能。</p>\n<h2 id=\"缓存\"><a class=\"markdownIt-Anchor\" href=\"#缓存\"></a> 缓存</h2>\n<p>缓存是构建于  HTTP 统一接口之上的最有用的功能之一。可以利用缓存减少终端用户感知到的延时，增加可靠性，减少带宽使用和成本，降低服务器负载。缓存无处不在，可以在服务器网络里、内容分发网络（content delivery network，简称  CDN）或是客户端网络里。</p>\n<p>通常所说的缓存可以是类似  memcached（<a href=\"http://memcached.org/%EF%BC%89%E8%BF%99%E6%A0%B7%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%BC%93%E5%AD%98%EF%BC%8C%E6%88%96%E8%80%85\" target=\"_blank\" rel=\"noopener\">http://memcached.org/）这样的对象缓存，或者</a> Squid（<a href=\"http://www.squid-cache.org/%EF%BC%89%E5%92%8C\" target=\"_blank\" rel=\"noopener\">http://www.squid-cache.org/）和</a> Traffic Server（<a href=\"http://incubator.apache.org/projects/trafficserver.html%EF%BC%89%E8%BF%99%E6%A0%B7%E7%9A%84\" target=\"_blank\" rel=\"noopener\">http://incubator.apache.org/projects/trafficserver.html）这样的</a>  HTTP  缓存。 HTTP  缓存不需要客户端或服务器调用任何特殊的编程  API  来管理缓存中的数据，对象缓存需要调用特定的缓存API实现。</p>\n<h4 id=\"如何设置过期缓存头\"><a class=\"markdownIt-Anchor\" href=\"#如何设置过期缓存头\"></a> 如何设置过期缓存头</h4>\n<p>当缓存可以在不访问源服务器时做出尽可能多的响应时，它是最高效的。设计过期缓存（Expiration Caching）就是为了降低源服务器收到的请求数量，同时减少应用程序使用的带宽。过期缓存基于  Cache-Control  和  Expires 这两个头，它们指导客户端和缓存在一段指定的时间内保存从服务器返回的表述副本。<strong>在这个时间窗口以内，甚至超出该时间窗口，缓存可以对后续请求做出响应，无须访问服务器。</strong></p>\n<p>在提供表述时，包含一个  Cache-Control  头，其中带有一个与新鲜寿命（freshness lifetime）相同的  max-age 值（单位为秒）。</p>\n<p>Cache-Control 是一个  HTTP 1.1 头，为了支持遗留的  HTTP 1.0 缓存，还要包含一个带过期日期时间的  Expires 头。过期时间是服务器生成表述的时间加上新鲜寿命。还要包含一个带有日期时间的  Date 头，即服务器返回响应的时间。这个标头能帮助客户端计算新鲜寿命，即为  Expires 和 Date 两值之差。</p>\n<p>不让缓存提供副本，则加上一个带  no-cache 值的  Cache-Control 头。这里还要加上  Pragma: no-cache 头来支持遗留的  HTTP 1.0 缓存。</p>\n<p>Cache-Control 的值</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>说明</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public</td>\n<td>这是默认指令。当请求是经过身份验证的，但您仍希望共享缓存提供缓存响应时，也可以使用该指令。</td>\n<td></td>\n</tr>\n<tr>\n<td>private</td>\n<td>当响应专属于某个客户端或用户时，使用该指令。出现这个指令，任意客户端缓存（例如，浏览器缓存或转发代理）都可以缓存表述，但诸如服务器缓存或网络缓存之类的共享缓存则不能进行缓存。在基于客户端或用户身份验证来提供表述的时候添加该指令。</td>\n<td></td>\n</tr>\n<tr>\n<td>no-cache 和  no-store</td>\n<td>通过这些指令可以避免缓存存储或提供已经缓存的响应。</td>\n<td></td>\n</tr>\n<tr>\n<td>max-age</td>\n<td>该指令的值即为新鲜寿命，单位为秒。</td>\n<td></td>\n</tr>\n<tr>\n<td>s-maxage</td>\n<td>这个指令与  max-age  类似，但只对共享缓存有意义。在源服务器同时设置了 max-age 和 s-maxage 的时候，缓存会使用 s-maxage 头。实际上，单独设置 max-age 指令就足够了。</td>\n<td></td>\n</tr>\n<tr>\n<td>must-revalidate</td>\n<td>缓存在提供陈旧的表述前先检查源服务器。</td>\n<td></td>\n</tr>\n<tr>\n<td>proxy-revalidate</td>\n<td>与  must-revalidate 指令类似，但它只应用于共享缓存。</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"","more":"<h1 id=\"restful-webservice-实战笔记\"><a class=\"markdownIt-Anchor\" href=\"#restful-webservice-实战笔记\"></a> RESTful webservice 实战笔记</h1>\n<h2 id=\"使用统一的接口\"><a class=\"markdownIt-Anchor\" href=\"#使用统一的接口\"></a> 使用统一的接口</h2>\n<p>HTTP 是一种应用层协议，定义在<strong>资源</strong>在客户端和服务器之间的转移，诸如<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>等方法，是对资源的操作。HTTP 本身是具有语义的，正确使用HTTP，可使得 web api 更具有自说明性，不必或者只要提供<strong>简要的</strong>的文档说明，api 使用者就能知道如何使用。</p>\n<h3 id=\"如何保持交互的可见性\"><a class=\"markdownIt-Anchor\" href=\"#如何保持交互的可见性\"></a> 如何保持交互的可见性</h3>\n<p>作为应用层协议，HTTP 的设计目标是在客户端和服务器之间保持对库、服务器、代理、缓存和其他工具的可见性。可见性很难理解，我认为定义为设备之间可互操作性更为准确，只要设备知道接口定义，设备之间就可通过HTTP 通信。那么如何确保这种可互操作性呢？要是接口按照<strong>统一的</strong>约定或者规范定义，那么保持这种互操作性可以实现，而基于HTTP语义的约定是最为简单的，RESTful 就是充分利用了HTTP语义的一种接口设计规范。保持可互操作性需要保持两条原则：</p>\n<ol>\n<li><strong>使用方法时，和其语义保持一致，并添加标头来描述请求和响应</strong>；</li>\n<li>正确使用<strong>状态码</strong>和<strong>状态消息</strong>，以便代理、缓存和客户端可以决定如何操作请求结果。</li>\n</ol>\n<blockquote>\n<p>在某些情况下，为了其他特定，可降低或放弃可见性，比如为了提高网络效率、客户端是否方便使用响应、缓存、等幂、安全等。</p>\n</blockquote>\n<p>在实际的接口设计中，方便客户端使用、安全、提高网络效率是降低可互操作性的原因。但是实际上，只要支持HTTP的设备，只要知道接口定义，就能相互操作，本质上的互操作性是给人看的。</p>\n<h3 id=\"如何在服务器端实现安全和幂等的方法\"><a class=\"markdownIt-Anchor\" href=\"#如何在服务器端实现安全和幂等的方法\"></a> 如何在服务器端实现安全和幂等的方法</h3>\n<p>一个HTTP方法不会修改资源时，它就是安全的。只读操作使用安全的方法，才能保证请求安全。幂等保证客户端重复发起一个请求，和一次请求的效果一致。幂等性大多和网络或者软件故障相关。方法的幂等，可以保证在遇到软件故障时，可以发送<strong>多次相同的请求</strong>，而不必担心改变资源。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>安全</th>\n<th>幂等</th>\n<th>操作</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>获取资源，返回 200</td>\n<td>不要在不安全不幂等的操作中使用GET，否则可能会不符合预期地改变资源。</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>Yes</td>\n<td>Yes</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>Yes</td>\n<td>Yes</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>No</td>\n<td>Yes</td>\n<td>新建或者更新一个资源</td>\n<td></td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>No</td>\n<td>Yes</td>\n<td>删除资源，返回 200</td>\n<td>要是实现幂等，服务器要维护资源的状态，知道资源已经被删除。否则可能会返回404。因为第二次删除资源就不存在了。实际上返回404更合理。</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>No</td>\n<td>No</td>\n<td>创建多个资源或者对资源进行多种其他操作</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"何时使用post\"><a class=\"markdownIt-Anchor\" href=\"#何时使用post\"></a> 何时使用POST</h4>\n<ul>\n<li>新建资源或者修改多个资源；</li>\n<li>大数据的输入查询；</li>\n<li>其他方法都不适合，执行不安全或者非幂等的操作；</li>\n<li>提交密码、信用卡等敏感信息时必须使用POST。</li>\n</ul>\n<h4 id=\"如何使用post-创建资源\"><a class=\"markdownIt-Anchor\" href=\"#如何使用post-创建资源\"></a> 如何使用POST 创建资源</h4>\n<p>在创建资源后，返回 201，并在Location头中指定新资源的 URI。如果在响应正文中包含了新建资源的完整表述，在 Content-Location 头中包含新资源的URI。可在请求的 Slug 中指定新资源RUI的建议，服务器未必采用。<br>\n请求得到响应，未必操作就已经完成，比如银行转账、在服务器上处理图片等比较耗时的操作。这类需要长时间才能完成的操作，返回 202 表示已经接收到请求，客户端在提交GET请求以询问操作状态时，<strong>执行中，返回200</strong>，响应中包含当前状态的表述，<strong>成功。303</strong>，提供 Location，执行新资源，<strong>失败，200，给出失败原因</strong>。<br>\n其实这种做法，非常不方便客户端处理，实际设计时，都返回200，并在响应中标识是否成功。</p>\n<blockquote>\n<p>303，仅指出请求资源在Location中，并不是资源已经转移到新的URI。</p>\n</blockquote>\n<h3 id=\"如何使用-put-创建资源\"><a class=\"markdownIt-Anchor\" href=\"#如何使用-put-创建资源\"></a> 如何使用 PUT 创建资源</h3>\n<p>只有在客户端能决定新资源的URI时才使用PUT创建资源，否则使用POST。比如存储服务器为每个客户端分配根路径，并让客户端把根路径作为文件系统的根目录，在客户端创建资源时，希望控制目录，客户端也应该控制目录。<br>\n使用PUT创建资源时，服务器需要先客户端说明RUI是如何组织的，同时希望客户端创建资源时使用最小范围的URI。POST创建资源，服务器具有更多的控制权，更少的工作。</p>\n<h2 id=\"识别资源\"><a class=\"markdownIt-Anchor\" href=\"#识别资源\"></a> 识别资源</h2>\n<h3 id=\"如何从领域名词中识别资源\"><a class=\"markdownIt-Anchor\" href=\"#如何从领域名词中识别资源\"></a> 如何从领域名词中识别资源</h3>\n<p>分析用例，找到可以使用<code>创建</code>、<code>读取</code>、<code>更新</code>、<code>删除</code>动作来操作的领域名词，将这些名词识别为资源。</p>\n<h3 id=\"如何控制资源粒度\"><a class=\"markdownIt-Anchor\" href=\"#如何控制资源粒度\"></a> 如何控制资源粒度</h3>\n<p>将资源直接映射到领域实体，会导致资源粒度很低，客户端希望更多的资源时，需要发送很多请求，导致网络效率低下和客户端难以处理响应，确定合适的资源粒度就非常关键。<br>\n在设计资源时，结合<strong>客户端使用是否方便</strong>、<strong>网络效率</strong>来确定适合的粒度。以下因素也会影响资源粒度：</p>\n<ul>\n<li>是否可缓存；</li>\n<li>修改频率；</li>\n<li>可变性。<br>\n设计粒度时，要确保更多的缓存、更低的修改频率，或者吧可变的数据分离出来。</li>\n</ul>\n<h3 id=\"如何将资源组织成集合\"><a class=\"markdownIt-Anchor\" href=\"#如何将资源组织成集合\"></a> 如何将资源组织成集合</h3>\n<p>将相似的资源归为一个集合或者数组，通过GET方法来获取整个集合而不是单独获取，比如设计网站用户的好用列表，电商网站用户购物车里的商品。</p>\n<h3 id=\"如何合并资源为符合资源\"><a class=\"markdownIt-Anchor\" href=\"#如何合并资源为符合资源\"></a> 如何合并资源为符合资源</h3>\n<p>将多个资源合并成一个资源会降低互操作性，但是有时候不得不组合，在代码上上表现的结果是，一个资源成为另一个资源的字段。<br>\n比如有两个资源：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname:<span class=\"string\">\"jack\"</span>, <span class=\"comment\">//一个人的资源</span></span><br><span class=\"line\">\tage:<span class=\"number\">24</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>图书资源：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tbookName:<span class=\"string\">\"restful 实战\"</span>,</span><br><span class=\"line\">\tprice:<span class=\"number\">46</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>想要获取用户最近阅读的书籍，需要发送两次请求，这样网络效率会低。<br>\n可以书籍资源合并：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname:<span class=\"string\">\"jack\"</span>,</span><br><span class=\"line\">\tage:<span class=\"number\">24</span>,</span><br><span class=\"line\">\tbooks:[]<span class=\"comment\">//最近阅读的书籍</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组合资源会导致资源重叠，组合之前，需要考虑以下问题：</p>\n<ul>\n<li>客户端对组合资源的请求是否很少，很少就不组合；</li>\n<li>网络开销，客户端和服务器的网络开销，服务器和其他服务器的网络开销，要说后者很大，收到客户端请求，再去其他服务器请求资源来组合，会导致客户端和服务器之间的网络开销也很多大，可以增加缓存或者现在服务器上组合好资源。</li>\n</ul>\n<h2 id=\"设计表述\"><a class=\"markdownIt-Anchor\" href=\"#设计表述\"></a> 设计表述</h2>\n<p>客户端所关心的资源是一个抽象的实体，它是用  URI 来标识的。另一方面，表述是具体而真实的，您在客户端和服务器上针对它编写代码，进行操作。</p>\n<h3 id=\"如何使用实体头注解表述\"><a class=\"markdownIt-Anchor\" href=\"#如何使用实体头注解表述\"></a> 如何使用实体头注解表述</h3>\n<p>表述不仅仅是以某种格式序列化后的数据，它是一连串字节加上用于描述那些字节的元数据。在  HTTP  中，表述元数据是由使用实体头的名值对（name-value pair）来实现的。这些实体头和应用数据本身一样重要。</p>\n<h4 id=\"您想知道在对服务器的请求或对客户端的响应中应该发送哪些-http-头\"><a class=\"markdownIt-Anchor\" href=\"#您想知道在对服务器的请求或对客户端的响应中应该发送哪些-http-头\"></a> 您想知道在对服务器的请求或对客户端的响应中应该发送哪些  HTTP 头。</h4>\n<ul>\n<li>Content-Type，用于描述表述类型，包含  charset  参数或其他针对该媒体类型而定义的参数。告知接收方如何处理响应。</li>\n<li>Content-Length，用于指定表述正文的字节大小。</li>\n<li>Content-Language，如果您以某种语言对表述进行本地化，用该标头来指定语言。</li>\n<li>Content-MD5，工具 / 软件在处理或存储表述时可能存在错误，需要提供一致性校验，用该标头来包含一个表述正文的  MD5 摘要。请注意，TCP  使用  checksum 在传输层提供一致性校验。</li>\n<li>Content-Encoding，当您使用  gzip,compress 或  deflate 对表述正文进行编码时，使用该标头。</li>\n<li>Last-Modified，用来说明服务器修改表述或资源的最后时间。</li>\n</ul>\n<p>HTTP 的设计是这样的，发送方可以用一系列名为实体头的标头来描述表述正文（也称为实体正文或消息正文）。有了这些标头，接收方可以在无须查看正文的情况下决定如何处理正文。它们还可以将解析正文所需要提前了解及猜测的内容减到最小程度。</p>\n<p>Content-Length<br>\n这个标头最早是在  HTTP 1.0 中被引入的，接收方用它来判断自己是否从连接中读取了正确的字节数。要发送该标头，发送方需要在写正文前计算出表述的大小。HTTP 1.1 支持一种更有效的机制，名为分块转移编码（chuncked transfer encoding）这让 Content-Length 头变得有点多余。对于  POST 和  PUT 请求，就算使用了 ** Transfer-Encoding: chuncked**，也要在客户端应用程序的请求中包含  Content-Length 头。因为有些代理会拒绝没有包含这两个头的  POST 和  PUT 请求。</p>\n<p>Content-Language<br>\n当表述针对某种语言做了本地化之后，请使用该标头，它的值是两个字母的  RFC 5646 语言标签，还可以在后面带上连字符（-）和任意两个字母的国家代码。<br>\n比如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en-US\"</span>&gt;</span> <span class=\"comment\">&lt;!--美式英语--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en-GB\"</span>&gt;</span> <span class=\"comment\">&lt;!--英式英语--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span> <span class=\"comment\">&lt;!--中国汉语，因为还有新加坡汉语--&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.biaodianfu.com/langtag.html\" target=\"_blank\" rel=\"noopener\">更多关于网页设置语言的信息</a><br>\n<a href=\"http://www.loc.gov/standards/iso639-2/php/code_list.php?__cf_chl_jschl_tk__=c59b6c71bfc56434eddedcf024568f34cc8bb985-1590866144-0-AXSz2y3QWCwkfEYQaD_9OzTeVOijYE22O1jFMxNO5fvz0iWvkccWtBwwxiQbejam6id8sqXQkT4Hfro4NmtLaGOBSrVtMfEkAQ1bWuF7ET-zR-94STr8QvZx7Nebo-55j4nFEI3E2Ee6UhIhHFojT96arV8YeUBxcPmxT793E7egvk72zzyuRucAy2KCVZIMZCNZMEPtTq4i-L1pfes0dzjCO4g-6NpOQUNEFpobpue9cE5ihb9LFYLj3Vx_9bJ2h6l1A3iWEsq9iJYCqBiWN5F_Owv4cMK9u3-oF9MzFuMBerrSXGY2P5S6Hajb_13p7Q\" target=\"_blank\" rel=\"noopener\">完整的语言标记</a><br>\nContent-MD5<br>\n接收方可以使用该标头来验证实体正文的完整性。该标头的值是表述正文的  MD5 摘要，在进行内容编码（gzip,compress  等）之后，转移编码（即  chunked）之前计算摘要值。<br>\n因为这个标头不能保证消息没有被篡改，所以不要将它作为一种安全手段。<strong>修改了正文的人同样可以修改标头的值。</strong><br>\n在通过非可靠网络发送或接受大的表述时，这个标头非常有用。表述的发送方包含了  Content-MD5 头之后，接收方可以在解析前先验证消息的完整性。</p>\n<p>Content-Encoding<br>\n这个标头说明了表述正文所使用的压缩类型，它的值可以是类似  gzip,compress 或  deflate 这样的字符串。<br>\n客户端可以用  Accept-Encoding 头（详见第 7 章）来注明自己偏好的  Content-Encoding。然而，并没有一个标准的方式让客户端了解到服务器是否可以处理用给定编码压缩过的表述。除非您事先知道目标服务器支持某个特定的编码方法，否则应该避免在 HTTP 请求中使用这个标头。</p>\n<p>Last-Modified<br>\n这个标头只用在响应上，它的值是一个时间戳，表示服务器最后修改资源表述的时间。</p>\n<h4 id=\"如何正确解析实体头\"><a class=\"markdownIt-Anchor\" href=\"#如何正确解析实体头\"></a> 如何正确解析实体头</h4>\n<p>当服务器或客户端接收到表述时，在处理请求前正确地解释实体头是很重要的。<br>\nContent-Type<br>\n当您收到一个不带  Content-Type 的表述时，避免猜测表述的类型。当客户端发送不带该标头的请求时，返回错误码 400（Bad Request）。当您从服务器接收到一个不带该标头的响应时，将其视为不正确的响应。<br>\nContent-Length<br>\n在没有确定接收到的表述不带  Transfer-Encoding: chunked  前，不要检查 Content-Length 头是否存在。<br>\nContent-Encoding<br>\n让您的网络库代码来解压那些压缩过的表述。<br>\nContent-Language<br>\n如果存在该标头，读取并存储它的值，记录下所使用的语言。</p>\n<h4 id=\"如何避免字符编码不匹配\"><a class=\"markdownIt-Anchor\" href=\"#如何避免字符编码不匹配\"></a> 如何避免字符编码不匹配</h4>\n<p>表述的发送方和接收方之间的字符编码不匹配通常会造成数据损坏和解析错误。由于字符编码不匹配造成的错误很难发现。<br>\n在发送表述时，如果媒体类型允许使用  charset 参数，则包含一个带字符编码值的 charset 参数，该参数值将被用于将字符转为字节。<br>\n当您接收到一个表述，其中带有支持  charset 参数的媒体类型，在从表述正文的字节中构造字符流时，使用指定的编码。如果忽略了发送方提供的  charset 值，使用其他的值，那么应用程序很可能会把字符给解释错。<br>\n诸如 ** application/xml**、<strong>text/html</strong>、<strong>application/atom+xml</strong> 和 <strong>text/csv</strong> 这样的文本和  XML 媒体类型允许您指定字符编码，通过  Content-Type 头中的  charset 参数，使用该字符编码将字符转换为实体正文中的字节。比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type:application/xml;charset=UTF-8</span><br></pre></td></tr></table></figure>\n<p>诸如  application/xml,text/html,application/atom+xml 和 text/csv 这样的文本和  XML 媒体类型允许您指定字符编码，通过  Content-Type 头中的  charset 参数，使用该字符编码将字符转换为实体正文中的字节。<br>\n还要避免针对  XML  格式的表述使用  text/xml  媒体类型。text/xml  的默认字符是 us-ascii，而  application/xml 使用  UTF-8。</p>\n<p>常用的标准或知名的媒体类型</p>\n<p>常用的分段媒体类型</p>\n<h4 id=\"如何理解服务器返回的错误\"><a class=\"markdownIt-Anchor\" href=\"#如何理解服务器返回的错误\"></a> 如何理解服务器返回的错误？</h4>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>状态文本</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>400</td>\n<td>Bad Request</td>\n<td>正文不对，检查正文</td>\n</tr>\n<tr>\n<td>401</td>\n<td>Unauthorized</td>\n<td>带有  Authorization 头的请求进行重试，其中包含身份信息</td>\n</tr>\n<tr>\n<td>403</td>\n<td>Forbidden</td>\n<td>禁止客户端用这个请求方法来访问资源</td>\n</tr>\n<tr>\n<td>404</td>\n<td>Not Found</td>\n<td>资源已经不存在了</td>\n</tr>\n<tr>\n<td>413</td>\n<td>Request Entity Too Large</td>\n<td>正文里寻找关于有效长度的提示</td>\n</tr>\n<tr>\n<td>415</td>\n<td>Unsupported Media Type</td>\n<td>请求支持的媒体类型不对</td>\n</tr>\n<tr>\n<td>500</td>\n<td>Internal Server Error</td>\n<td>服务代码出错</td>\n</tr>\n<tr>\n<td>503</td>\n<td>Service Unavailable</td>\n<td>如果响应中有  Retry-After  头，在到达该时间前不要重试。这可能是整个服务器的错误，因此在客户端中要实现适当的补偿逻辑，在一段时间内避免向服务器发送请求。</td>\n</tr>\n<tr>\n<td>502</td>\n<td>Bad Gateway</td>\n<td>通常不是客户端能够修复的，而是需要由途径的 Web 服务器或者代理服务器对其进行修复。</td>\n</tr>\n</tbody>\n</table>\n<p>但是这些状态码往往不够用，在设计接口时，通常都返回 200，在表述中告知是否错误。</p>\n<h2 id=\"设计uri\"><a class=\"markdownIt-Anchor\" href=\"#设计uri\"></a> 设计URI</h2>\n<p>URI  是跨越  Web  的资源描述符，一个  URI 由以下内容组成 —— 协议（例如  http 和 https）、主机（例如  <a href=\"http://www.example.org\" target=\"_blank\" rel=\"noopener\">www.example.org</a>）、端口号，后面紧跟一段或多段路径（例如 /user/1234），还有查询字符串。</p>\n<p><strong>URI</strong>*（统一资源标识符）*是一个指向资源的字符串。最通常用在 <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/URL\" target=\"_blank\" rel=\"noopener\">URL</a> 上来指定 Web 上资源文件的具体位置。相比之下，<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/URN\" target=\"_blank\" rel=\"noopener\">URN</a> 是在给定的命名空间用名字指向具体的资源</p>\n<h4 id=\"资源设计-uri-的最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#资源设计-uri-的最佳实践\"></a> 资源设计  URI 的最佳实践</h4>\n<ul>\n<li>在  URI 的路径部分使用斜杠分隔符（/）来表示资源之间的层次关系。</li>\n<li>使用连字符（-）来改善长路径中名称的可读性。</li>\n<li>在  URI 的查询部分使用 “与” 符号（&amp;）来分隔参数。</li>\n<li>在  URI 中避免出现文件扩展名（例如.php,.aspx 和.jsp）。</li>\n<li>保持URI分格的一致性，尤其是多人协作时。</li>\n</ul>\n<h2 id=\"web-链接\"><a class=\"markdownIt-Anchor\" href=\"#web-链接\"></a> web 链接</h2>\n<p>链接提供了一种方式，可以从一个资源导航到另一个资源。但是本章的内容，实际开发想要按照 RESTful  定义接口，会非常繁琐，在返回实体中包含链接，也无实际用处。</p>\n<h2 id=\"atom-和-atompub\"><a class=\"markdownIt-Anchor\" href=\"#atom-和-atompub\"></a> Atom 和 AtomPub</h2>\n<p>没看到有实际作用，不记录。</p>\n<h2 id=\"内容协商\"><a class=\"markdownIt-Anchor\" href=\"#内容协商\"></a> 内容协商</h2>\n<p>内容协商（Content Negotiation），有时也简写为  conneg，该过程用于当存在多个可用的资源表述形式时，为客户端选择一个最好的出来。内容协商常用于标明媒介类型的偏好，但它也可以用于标明本地化语言、字符编码以及压缩方面的偏好。</p>\n<h4 id=\"客户端如何标明内容偏好\"><a class=\"markdownIt-Anchor\" href=\"#客户端如何标明内容偏好\"></a> 客户端如何标明内容偏好</h4>\n<p>实现客户端时，一件重要的事情就是该客户端要能够向服务器标明自己的偏好和能力，包括它所能够处理的表述格式，所偏好的语言，能够识别的字符编码，以及它是否支持压缩。对于响应中的表述，即便事先知道它的格式、字符编码、语言以及压缩类型，清楚明确地标明客户端的偏好以及能力将更有助于客户端适应各种变化。</p>\n<p>在请求头中添加一个  Accept ，其值是一个偏好媒体类型的列表，以逗号分隔。根据客户端对各种媒体类型的偏好程度，可以再设定一个参数  q，默认值为 1.0，可精确到三位小数。 “*;q=0.0”，来向服务器标明自己无法处理那些没有列在  Accept 头里的媒体类型。</p>\n<p>请求中没有  Accept 头，那就使用默认格式来返回被请求资源的表述。请求中含有  Accept 头，那就解析它，并按照  q 参数降序排序媒体类型的值。然后从此列表中选择一个服务器所支持的媒体类型。在响应中要包含一个  Vary 头。</p>\n<p>如果客户端仅能处理属于某一种字符集的字符，那就增加一个 <strong>Accept-Charset</strong> 头，其值就是所偏好的字符集。否则，就不要添加这个头。</p>\n<p>请求中没有  Accept-Charset 头，那就以  UTF-8 对返回的表述进行编码。<br>\n如果请求中含有  Accept-Charset 头，那就解析它，依照  q 参数对那些字符集进行排序，然后选择服务器所支持的字符编码。<br>\n如果服务器端不支持任何所请求的字符集，并且  Accept-Charset  头中不包含 “*;q=0.0”，那么就使用  UTF-8 编码返回的表述。</p>\n<p>有这些情况中，如果媒体类型是文本的，并且允许使用  charset  参数，就在 Content-Type 头中包含  charset 参数，以标明服务器所用的字符编码。同样，在响应中也要包含一个  Vary 头。</p>\n<p>Accept-Language 头来指明表述所偏好的语言。</p>\n<p>请求中不含有  Accept-Language 头，那就在返回的表述中对所有给人阅读的文字使用默认的语言。<br>\n如果请求中含有  Accept-Language 头，那就解析它，依照  q 参数对语言进行排序，选择列表里的第一个服务器所支持的语言。在响应中包含一个  Vary 头，详见 7.6 节。<br>\n如果列表里的语言服务器端一个也不支持，并且  Accept-Language  头也不包含 “*;q=0.0”，那就在响应里使用默认的语言。</p>\n<p>客户端能够解压那些采用诸如  gzip,compress 或者  deflate 编码的压缩表述，就添加一个  <strong>Accept-Encoding</strong> 头并列出所支持的编码格式，否则就略过该标头。</p>\n<p>服务器支持压缩响应内容，那就从  Accept-Encoding 头中选择一种压缩技术。在响应中同样也要包含一个  Vary 头，详见 7.6 节。如果服务器所支持的压缩编码没有一个位于标头中，那就忽略它。对于  q 参数的处理同其他  Acceopt-* 的情况。<br>\n如果请求中不包含  Accept-Encoding 头，就不要对表述进行压缩。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept:application/atom+xml;q=<span class=\"number\">1.0</span>,application/xml;q=<span class=\"number\">0.6</span>,*<span class=\"comment\">/*;q=0.0</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Language:fr;q=1.0,en;q=0.5</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Charset:UTF-8</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Encoding:gzip</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"何时以及如何发送-vary-头\"><a class=\"markdownIt-Anchor\" href=\"#何时以及如何发送-vary-头\"></a> 何时以及如何发送 Vary 头</h4>\n<p>当服务器使用内容协商来选择表述时，根据  Accept-* 头的不同，同一个  URI 可以产生不同的表述。Vary 头告诉客户端服务器在选择表述时使用了哪些请求头。</p>\n<p>每当针对一个资源有多种形式的表述可用时，就要包含一个  Vary 头。该标头的值是一些请求头的列表，以逗号分隔，服务器在选择表述时参考了这些请求头。如果服务器还使用了除这些请求头之外的信息，例如客户端的  IP 地址、当前时间、用户个性化设置等，那就将  Vary 头的值设置为 *。</p>\n<p>服务器可以用  Vary 头来通知客户端服务器驱动内容协商的结果。Vary 头的值是一组<strong>请求头</strong>，而不是响应头。</p>\n<p>针对英语表述的请求：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /status HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host:www.example.com</span><br><span class=\"line\">Accept-Language:en;q=<span class=\"number\">1.0</span>,*<span class=\"comment\">/*;q=0.0</span></span><br></pre></td></tr></table></figure>\n<p>响应</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/<span class=\"number\">1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\">Content-Language:de</span><br><span class=\"line\">Vary:Accept-Language</span><br></pre></td></tr></table></figure>\n<p>针对法语表述的请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /status HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host:www.exampe.com</span><br><span class=\"line\">Accepet-Language:fr;q=<span class=\"number\">1.0</span>,*<span class=\"comment\">/*;q=1.0</span></span><br></pre></td></tr></table></figure>\n<p>响应：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/<span class=\"number\">1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\">Content-Language:fr</span><br><span class=\"line\">Vary:Accept-Language</span><br></pre></td></tr></table></figure>\n<p>缓存把这个标头作为缓存键的一部分，来维持表述的不同副本。客户端可以使用这个信息来获知服务器用于内容协商的标准。</p>\n<h4 id=\"如何处理内容协商失败\"><a class=\"markdownIt-Anchor\" href=\"#如何处理内容协商失败\"></a> 如何处理内容协商失败</h4>\n<p>知道当服务器无法提供客户端所偏好的表述时，是该提供一个默认的表述，还是该返回一个错误。</p>\n<p>服务器无法提供满足客户端偏好的表述，并且客户端明确包含了一个 “<em>/</em>;q=0.0”，那就返回状态码 <strong>406（Not Acceptable）</strong>，并在表述主体中包含表述的列表。</p>\n<p>请求：只接受json 格式的响应。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /status HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host:www.example.com</span><br><span class=\"line\">Accept:application/json,*<span class=\"comment\">/*;q=0.0</span></span><br></pre></td></tr></table></figure>\n<p>服务器无法满足客户端的格式要求，返回 406，在表述中以JSON格式给出理由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">406</span> Not Acceptable</span><br><span class=\"line\">Content-Type:application/json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    message:<span class=\"string\">'This server does not support json.'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请注意，服务器给出的错误信息本身使用了  JSON  格式。这是合理的，服务器完全可以使用常见的格式来实现错误信息。</p>\n<h2 id=\"查询\"><a class=\"markdownIt-Anchor\" href=\"#查询\"></a> 查询</h2>\n<p>查询信息是  HTTP GET 方法的一种常见应用。查询通常涉及三个组成部分，即过滤（filtering）、排序（sorting）和投影（projection）。过滤是基于一些过滤条件选择实体的一个子集的过程。排序会影响服务器是如何排列响应中结果的。投影是选择实体中的哪些字段将被包含到结果中的过程。例如，发送到电影服务器的查询请求可能会涉及按类型过滤电影，然后根据上映日期倒序排序，最后在返回客户端的响应中只选择标题、年份以及每部电影的简单介绍。</p>\n<p>只要关注过  URI 和表述，查询设计还是相对比较简单的。客户端负责运行查询，服务器的职责包括设计  URI 来支持过滤、排序和投影，设计表述，设置合适的缓存头。</p>\n<h4 id=\"如何针对查询设计-uri\"><a class=\"markdownIt-Anchor\" href=\"#如何针对查询设计-uri\"></a> 如何针对查询设计 URI</h4>\n<p>使用查询参数来设计查询是一种常用惯例，根据自己的用例，可能需要支持以下一种或全部情况的查询参数：<br>\n● 从可用资源中选择数据<br>\n● 指定排序条件<br>\n● 罗列要包含在响应中的资源的字段</p>\n<h4 id=\"如何设计大量输入的查询\"><a class=\"markdownIt-Anchor\" href=\"#如何设计大量输入的查询\"></a> 如何设计大量输入的查询</h4>\n<p>使用 POST 实现查询，Content-Type application/x-www-form-urlencoded 的格式，服务器实现设计成等幂和安全的。使用POST进行查询，会丧失缓存功能。</p>\n<h2 id=\"缓存\"><a class=\"markdownIt-Anchor\" href=\"#缓存\"></a> 缓存</h2>\n<p>缓存是构建于  HTTP 统一接口之上的最有用的功能之一。可以利用缓存减少终端用户感知到的延时，增加可靠性，减少带宽使用和成本，降低服务器负载。缓存无处不在，可以在服务器网络里、内容分发网络（content delivery network，简称  CDN）或是客户端网络里。</p>\n<p>通常所说的缓存可以是类似  memcached（<a href=\"http://memcached.org/%EF%BC%89%E8%BF%99%E6%A0%B7%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%BC%93%E5%AD%98%EF%BC%8C%E6%88%96%E8%80%85\" target=\"_blank\" rel=\"noopener\">http://memcached.org/）这样的对象缓存，或者</a> Squid（<a href=\"http://www.squid-cache.org/%EF%BC%89%E5%92%8C\" target=\"_blank\" rel=\"noopener\">http://www.squid-cache.org/）和</a> Traffic Server（<a href=\"http://incubator.apache.org/projects/trafficserver.html%EF%BC%89%E8%BF%99%E6%A0%B7%E7%9A%84\" target=\"_blank\" rel=\"noopener\">http://incubator.apache.org/projects/trafficserver.html）这样的</a>  HTTP  缓存。 HTTP  缓存不需要客户端或服务器调用任何特殊的编程  API  来管理缓存中的数据，对象缓存需要调用特定的缓存API实现。</p>\n<h4 id=\"如何设置过期缓存头\"><a class=\"markdownIt-Anchor\" href=\"#如何设置过期缓存头\"></a> 如何设置过期缓存头</h4>\n<p>当缓存可以在不访问源服务器时做出尽可能多的响应时，它是最高效的。设计过期缓存（Expiration Caching）就是为了降低源服务器收到的请求数量，同时减少应用程序使用的带宽。过期缓存基于  Cache-Control  和  Expires 这两个头，它们指导客户端和缓存在一段指定的时间内保存从服务器返回的表述副本。<strong>在这个时间窗口以内，甚至超出该时间窗口，缓存可以对后续请求做出响应，无须访问服务器。</strong></p>\n<p>在提供表述时，包含一个  Cache-Control  头，其中带有一个与新鲜寿命（freshness lifetime）相同的  max-age 值（单位为秒）。</p>\n<p>Cache-Control 是一个  HTTP 1.1 头，为了支持遗留的  HTTP 1.0 缓存，还要包含一个带过期日期时间的  Expires 头。过期时间是服务器生成表述的时间加上新鲜寿命。还要包含一个带有日期时间的  Date 头，即服务器返回响应的时间。这个标头能帮助客户端计算新鲜寿命，即为  Expires 和 Date 两值之差。</p>\n<p>不让缓存提供副本，则加上一个带  no-cache 值的  Cache-Control 头。这里还要加上  Pragma: no-cache 头来支持遗留的  HTTP 1.0 缓存。</p>\n<p>Cache-Control 的值</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>说明</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public</td>\n<td>这是默认指令。当请求是经过身份验证的，但您仍希望共享缓存提供缓存响应时，也可以使用该指令。</td>\n<td></td>\n</tr>\n<tr>\n<td>private</td>\n<td>当响应专属于某个客户端或用户时，使用该指令。出现这个指令，任意客户端缓存（例如，浏览器缓存或转发代理）都可以缓存表述，但诸如服务器缓存或网络缓存之类的共享缓存则不能进行缓存。在基于客户端或用户身份验证来提供表述的时候添加该指令。</td>\n<td></td>\n</tr>\n<tr>\n<td>no-cache 和  no-store</td>\n<td>通过这些指令可以避免缓存存储或提供已经缓存的响应。</td>\n<td></td>\n</tr>\n<tr>\n<td>max-age</td>\n<td>该指令的值即为新鲜寿命，单位为秒。</td>\n<td></td>\n</tr>\n<tr>\n<td>s-maxage</td>\n<td>这个指令与  max-age  类似，但只对共享缓存有意义。在源服务器同时设置了 max-age 和 s-maxage 的时候，缓存会使用 s-maxage 头。实际上，单独设置 max-age 指令就足够了。</td>\n<td></td>\n</tr>\n<tr>\n<td>must-revalidate</td>\n<td>缓存在提供陈旧的表述前先检查源服务器。</td>\n<td></td>\n</tr>\n<tr>\n<td>proxy-revalidate</td>\n<td>与  must-revalidate 指令类似，但它只应用于共享缓存。</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"如何用对html标签","_content":"\nhtml 标签具有语义化，用对比不用好，不用比乱用好。用对的好处：\n\n- 对机器友好：利于搜索引擎检索外，还能给读屏软件提供方便，使得残障人士更好地使用；\n- 对人友好：文档结构清晰，增加可读性，方便团队合作和维护；\n- 对自然语言的补充。\n\n<!--more-->\n***\n@[TOC]\n\n## 写语义化的标签应注意什么？\n\n1. 尽量少用没有语义的标签`div`和`span`;\n2. 不用纯样式标签，比如`b`、`font`等，`strong`默认加粗，`em`是斜体。\n3. 使用表格时，标题使用`caption`，表头`thead`，主体`tbody`，尾部使用`tfoot`;\n4. 表单域使用`fieldset`包裹，并用`legend`说明表单用途，`input`和`label`配合使用。\n\n## 常见的语义化标签\n\n- hN，标题标签，重要性依次降低，一个页面往往只允许一个`h1`，但是`h1`可嵌套在`article`内使用；多个`section`嵌套`h1`，会降级；\n- p 段落，默认上下有间距；\n- `ul`、`ol`、`li`类表元素；\n\n## 常见的容易用混的标签\n\n|            | em   | i    | strong | b    |\n| ---------- | ---- | ---- | ------ | ---- |\n| 是否有语义 | 重读 | 无   | 强调   | 无   |\n| 样式       | 斜体 | 斜体 | 加粗   | 加粗 |\n|            |      |      |        |      |\n\n## 参考\n- [对HTML语义化的一些理解和记录](https://juejin.im/post/5ae029bcf265da0b7155f15d)\n\n- [HTML em tag](https://www.w3docs.com/learn-html/html-em-tag.html)","source":"_drafts/如何用对html标签.md","raw":"---\ntitle: 如何用对html标签\ntags:\n- html\ncategories:\n- [html]\n---\n\nhtml 标签具有语义化，用对比不用好，不用比乱用好。用对的好处：\n\n- 对机器友好：利于搜索引擎检索外，还能给读屏软件提供方便，使得残障人士更好地使用；\n- 对人友好：文档结构清晰，增加可读性，方便团队合作和维护；\n- 对自然语言的补充。\n\n<!--more-->\n***\n@[TOC]\n\n## 写语义化的标签应注意什么？\n\n1. 尽量少用没有语义的标签`div`和`span`;\n2. 不用纯样式标签，比如`b`、`font`等，`strong`默认加粗，`em`是斜体。\n3. 使用表格时，标题使用`caption`，表头`thead`，主体`tbody`，尾部使用`tfoot`;\n4. 表单域使用`fieldset`包裹，并用`legend`说明表单用途，`input`和`label`配合使用。\n\n## 常见的语义化标签\n\n- hN，标题标签，重要性依次降低，一个页面往往只允许一个`h1`，但是`h1`可嵌套在`article`内使用；多个`section`嵌套`h1`，会降级；\n- p 段落，默认上下有间距；\n- `ul`、`ol`、`li`类表元素；\n\n## 常见的容易用混的标签\n\n|            | em   | i    | strong | b    |\n| ---------- | ---- | ---- | ------ | ---- |\n| 是否有语义 | 重读 | 无   | 强调   | 无   |\n| 样式       | 斜体 | 斜体 | 加粗   | 加粗 |\n|            |      |      |        |      |\n\n## 参考\n- [对HTML语义化的一些理解和记录](https://juejin.im/post/5ae029bcf265da0b7155f15d)\n\n- [HTML em tag](https://www.w3docs.com/learn-html/html-em-tag.html)","slug":"如何用对html标签","published":0,"date":"2019-09-14T13:55:09.610Z","updated":"2019-09-14T13:59:59.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccdp0005jwrndu5cpa9h","content":"<p>html 标签具有语义化，用对比不用好，不用比乱用好。用对的好处：</p>\n<ul>\n<li>对机器友好：利于搜索引擎检索外，还能给读屏软件提供方便，使得残障人士更好地使用；</li>\n<li>对人友好：文档结构清晰，增加可读性，方便团队合作和维护；</li>\n<li>对自然语言的补充。</li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E5%86%99%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E6%A0%87%E7%AD%BE%E5%BA%94%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88\">写语义化的标签应注意什么？</a></li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE\">常见的语义化标签</a></li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AE%B9%E6%98%93%E7%94%A8%E6%B7%B7%E7%9A%84%E6%A0%87%E7%AD%BE\">常见的容易用混的标签</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n</p>\n<h2 id=\"写语义化的标签应注意什么\"><a class=\"markdownIt-Anchor\" href=\"#写语义化的标签应注意什么\"></a> 写语义化的标签应注意什么？</h2>\n<ol>\n<li>尽量少用没有语义的标签<code>div</code>和<code>span</code>;</li>\n<li>不用纯样式标签，比如<code>b</code>、<code>font</code>等，<code>strong</code>默认加粗，<code>em</code>是斜体。</li>\n<li>使用表格时，标题使用<code>caption</code>，表头<code>thead</code>，主体<code>tbody</code>，尾部使用<code>tfoot</code>;</li>\n<li>表单域使用<code>fieldset</code>包裹，并用<code>legend</code>说明表单用途，<code>input</code>和<code>label</code>配合使用。</li>\n</ol>\n<h2 id=\"常见的语义化标签\"><a class=\"markdownIt-Anchor\" href=\"#常见的语义化标签\"></a> 常见的语义化标签</h2>\n<ul>\n<li>hN，标题标签，重要性依次降低，一个页面往往只允许一个<code>h1</code>，但是<code>h1</code>可嵌套在<code>article</code>内使用；多个<code>section</code>嵌套<code>h1</code>，会降级；</li>\n<li>p 段落，默认上下有间距；</li>\n<li><code>ul</code>、<code>ol</code>、<code>li</code>类表元素；</li>\n</ul>\n<h2 id=\"常见的容易用混的标签\"><a class=\"markdownIt-Anchor\" href=\"#常见的容易用混的标签\"></a> 常见的容易用混的标签</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>em</th>\n<th>i</th>\n<th>strong</th>\n<th>b</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否有语义</td>\n<td>重读</td>\n<td>无</td>\n<td>强调</td>\n<td>无</td>\n</tr>\n<tr>\n<td>样式</td>\n<td>斜体</td>\n<td>斜体</td>\n<td>加粗</td>\n<td>加粗</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li>\n<p><a href=\"https://juejin.im/post/5ae029bcf265da0b7155f15d\" target=\"_blank\" rel=\"noopener\">对HTML语义化的一些理解和记录</a></p>\n</li>\n<li>\n<p><a href=\"https://www.w3docs.com/learn-html/html-em-tag.html\" target=\"_blank\" rel=\"noopener\">HTML em tag</a></p>\n</li>\n</ul>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>html 标签具有语义化，用对比不用好，不用比乱用好。用对的好处：</p>\n<ul>\n<li>对机器友好：利于搜索引擎检索外，还能给读屏软件提供方便，使得残障人士更好地使用；</li>\n<li>对人友好：文档结构清晰，增加可读性，方便团队合作和维护；</li>\n<li>对自然语言的补充。</li>\n</ul>","more":"<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E5%86%99%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E6%A0%87%E7%AD%BE%E5%BA%94%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88\">写语义化的标签应注意什么？</a></li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE\">常见的语义化标签</a></li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AE%B9%E6%98%93%E7%94%A8%E6%B7%B7%E7%9A%84%E6%A0%87%E7%AD%BE\">常见的容易用混的标签</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n</p>\n<h2 id=\"写语义化的标签应注意什么\"><a class=\"markdownIt-Anchor\" href=\"#写语义化的标签应注意什么\"></a> 写语义化的标签应注意什么？</h2>\n<ol>\n<li>尽量少用没有语义的标签<code>div</code>和<code>span</code>;</li>\n<li>不用纯样式标签，比如<code>b</code>、<code>font</code>等，<code>strong</code>默认加粗，<code>em</code>是斜体。</li>\n<li>使用表格时，标题使用<code>caption</code>，表头<code>thead</code>，主体<code>tbody</code>，尾部使用<code>tfoot</code>;</li>\n<li>表单域使用<code>fieldset</code>包裹，并用<code>legend</code>说明表单用途，<code>input</code>和<code>label</code>配合使用。</li>\n</ol>\n<h2 id=\"常见的语义化标签\"><a class=\"markdownIt-Anchor\" href=\"#常见的语义化标签\"></a> 常见的语义化标签</h2>\n<ul>\n<li>hN，标题标签，重要性依次降低，一个页面往往只允许一个<code>h1</code>，但是<code>h1</code>可嵌套在<code>article</code>内使用；多个<code>section</code>嵌套<code>h1</code>，会降级；</li>\n<li>p 段落，默认上下有间距；</li>\n<li><code>ul</code>、<code>ol</code>、<code>li</code>类表元素；</li>\n</ul>\n<h2 id=\"常见的容易用混的标签\"><a class=\"markdownIt-Anchor\" href=\"#常见的容易用混的标签\"></a> 常见的容易用混的标签</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>em</th>\n<th>i</th>\n<th>strong</th>\n<th>b</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否有语义</td>\n<td>重读</td>\n<td>无</td>\n<td>强调</td>\n<td>无</td>\n</tr>\n<tr>\n<td>样式</td>\n<td>斜体</td>\n<td>斜体</td>\n<td>加粗</td>\n<td>加粗</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li>\n<p><a href=\"https://juejin.im/post/5ae029bcf265da0b7155f15d\" target=\"_blank\" rel=\"noopener\">对HTML语义化的一些理解和记录</a></p>\n</li>\n<li>\n<p><a href=\"https://www.w3docs.com/learn-html/html-em-tag.html\" target=\"_blank\" rel=\"noopener\">HTML em tag</a></p>\n</li>\n</ul>"},{"title":"CommonJS 模块和 ES6 模块在vue中混用","date":"2019-06-16T10:31:48.000Z","_content":"commonJS 和 ES6 模块在 Vue 中混用 引发的问题。\n\n<!--more-->\n\n## 具体情况\n\n|引入|导出|是否可行|说明|\n|---|---|---|---|\n|require|module.exports|×|报错：TypeError: Cannot assign to read only property 'exports' of object '#<Object>'|\n|require|export|√||\n|**import**|**export**|**√**|**推荐使用**|\n|import|module.exports|×|报错：同上|\n\n目前 node 还不支持 ES6 模块，需要用 webpack 统一模块化方案。**require**、**module.exports** 是 CommonJS 的引入导出模块方案，却不同在同一个文件内使用，这点很让人费解。\n\n**注意**：目前 node 的模块化方案，只有 CommonJS，require 和 module.exports 是可以混用的。","source":"_posts/CommonJS-模块和-ES6-模块在vue中混用.md","raw":"---\ntitle: CommonJS 模块和 ES6 模块在vue中混用\ndate: 2019-06-16 18:31:48\ntags:\n- vue\n- es6\ncategories:\n- [vue]\n---\ncommonJS 和 ES6 模块在 Vue 中混用 引发的问题。\n\n<!--more-->\n\n## 具体情况\n\n|引入|导出|是否可行|说明|\n|---|---|---|---|\n|require|module.exports|×|报错：TypeError: Cannot assign to read only property 'exports' of object '#<Object>'|\n|require|export|√||\n|**import**|**export**|**√**|**推荐使用**|\n|import|module.exports|×|报错：同上|\n\n目前 node 还不支持 ES6 模块，需要用 webpack 统一模块化方案。**require**、**module.exports** 是 CommonJS 的引入导出模块方案，却不同在同一个文件内使用，这点很让人费解。\n\n**注意**：目前 node 的模块化方案，只有 CommonJS，require 和 module.exports 是可以混用的。","slug":"CommonJS-模块和-ES6-模块在vue中混用","published":1,"updated":"2019-06-16T10:33:29.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccdr0006jwrn8ea2cvke","content":"<p>commonJS 和 ES6 模块在 Vue 中混用 引发的问题。</p>\n<a id=\"more\"></a>\n<h2 id=\"具体情况\"><a class=\"markdownIt-Anchor\" href=\"#具体情况\"></a> 具体情况</h2>\n<table>\n<thead>\n<tr>\n<th>引入</th>\n<th>导出</th>\n<th>是否可行</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>require</td>\n<td>module.exports</td>\n<td>×</td>\n<td>报错：TypeError: Cannot assign to read only property ‘exports’ of object ‘#<object>’</object></td>\n</tr>\n<tr>\n<td>require</td>\n<td>export</td>\n<td>√</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>import</strong></td>\n<td><strong>export</strong></td>\n<td><strong>√</strong></td>\n<td><strong>推荐使用</strong></td>\n</tr>\n<tr>\n<td>import</td>\n<td>module.exports</td>\n<td>×</td>\n<td>报错：同上</td>\n</tr>\n</tbody>\n</table>\n<p>目前 node 还不支持 ES6 模块，需要用 webpack 统一模块化方案。<strong>require</strong>、<strong>module.exports</strong> 是 CommonJS 的引入导出模块方案，却不同在同一个文件内使用，这点很让人费解。</p>\n<p><strong>注意</strong>：目前 node 的模块化方案，只有 CommonJS，require 和 module.exports 是可以混用的。</p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>commonJS 和 ES6 模块在 Vue 中混用 引发的问题。</p>","more":"<h2 id=\"具体情况\"><a class=\"markdownIt-Anchor\" href=\"#具体情况\"></a> 具体情况</h2>\n<table>\n<thead>\n<tr>\n<th>引入</th>\n<th>导出</th>\n<th>是否可行</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>require</td>\n<td>module.exports</td>\n<td>×</td>\n<td>报错：TypeError: Cannot assign to read only property ‘exports’ of object ‘#<object>’</object></td>\n</tr>\n<tr>\n<td>require</td>\n<td>export</td>\n<td>√</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>import</strong></td>\n<td><strong>export</strong></td>\n<td><strong>√</strong></td>\n<td><strong>推荐使用</strong></td>\n</tr>\n<tr>\n<td>import</td>\n<td>module.exports</td>\n<td>×</td>\n<td>报错：同上</td>\n</tr>\n</tbody>\n</table>\n<p>目前 node 还不支持 ES6 模块，需要用 webpack 统一模块化方案。<strong>require</strong>、<strong>module.exports</strong> 是 CommonJS 的引入导出模块方案，却不同在同一个文件内使用，这点很让人费解。</p>\n<p><strong>注意</strong>：目前 node 的模块化方案，只有 CommonJS，require 和 module.exports 是可以混用的。</p>"},{"title":"2019年总结","date":"2020-01-21T12:44:59.000Z","_content":"\n2019年过去，今年第一次跳槽，也完成了一些其他事情，想写一年的总结，记录当前的想法。\n<!--more-->\n***\n\n@[TOC]\n\n**我完成了哪些事情**\n\n2019年我完成了一些对我来说，比较大的事情吧：\n\n- 第一次跳槽\n- 查询了信用报告\n- 做了一个手术\n- 了解中医和现代医学\n- 对弟弟在高三退学，感到失望\n\n## 第一次跳槽\n\n毕业就进入长虹工作，感觉长虹在管理上还是挺好的，虽然算是国企，也没有感受到人家说的国企的官僚主义啊、人浮于事啊什么的，也许是我太小虾米或者待的时间才两年吧。感觉在管理上挺好的，偶尔周末加班，没有996，领导也好，有事找领导也是很快找到，就是工资没有外面有竞争者力，然后7月份就离职了。这个月本来要发季度奖的，然后离职就没有了，当时没有考虑到这个问题，但是又预约了一个手术，不想让更多人知道，奖金没有也离职了。看来以后离职要选恰当的时机，不然可能该得的福利，企业不会给你。长虹的缺点是，薪资低，亲戚说我读了大学还蹲在电子厂，还那么点工资，就千方百计催我考公务员，跳槽后薪水涨了，极少提公务员了。\n\n在长虹工作，只有我一个人写前端，前期使用**jQuery**、**BS**等传统技术开发，同时维护老系统，需求不复杂，开发起来挺好的，高效，再者这些技术后台同事比较了解一些，有个吧需求，他们也能够实现。后来使用`vue`开发新的项目，就只有我一个人弄了，没人懂前端框架。vue 使用丝滑，纯数据驱动，高效，复杂的需求比`jQuery`容易实现多了。前后端分离开发，混合部署，隐约感觉我们的开发流程很有问题，比较容易扯皮，和网上流行的分离开发、持续部署等开发流程感觉还差很多，但是我们都不没有这种开发模式的经验，再加上我的 vue 经验少，每次和后台对接，都扯皮啊，后台在绵阳，沟通起来，太难了。完成了第一期，然后发现第二期和第一期关系不太大，没有需求文档，比较难以明确，甚至接口文档也不完善。后台写的接口文档，也毫无章法，不具备语义，后来我使用 **RESTful**,写了文档，有一个大概的共识，才开始写代码。\n\n悲剧的是，后来长虹优化人员，后台项目让成都同事接手，才发现使用的技术太陈旧了，难以调试和阅读，后台了解需求什么的，又扯皮了几天。经过20多天，总算达到测试状态了，打通了和电视端的功能。\n\n在长虹工作两年，也随便做了一些和智能家居相关的项目，对智能家居和语音交互等有点点感性的认识，还处在探索阶段，像智能手机一样达到很好的体验，市场认可，还要不少时间吧，未来凡是通电的，都会通网，交互方式也会改变。\n\n找工作时，面了一些公司，都会问你对 996 的看法，赶项目进度啥的，看来加班是普遍的情况，我之前还以为能遇到一些加班不那么严重的公司。而且，给的待遇没有达到期望，所以拒了。也面蚂蚁金服，面试比较接地气，没玩什么虚的，技术没到期望，over 了。第一次跳槽，发现外包公司很多啊，各种给打电话，而且待遇还可以，比要你996，待遇还不满意的小团队公司好些，就冲着工资去面试了几个。最后入职一家离我很近，不要搬家的，在业务方的开发流程、工具的都做得不错的公司。入职后，发现这样的开发流程比在长虹要舒服得多，他们的工具链做得很完善，文档、代码规范啥的，做得挺好的，也有在百度、阿里、IBM工作过的大佬评审代码。\n\n第一次跳槽，感觉学历还是那么重要啊，很多职位要求985、211的。学历就这样了，只能加强一下技术深度什么的了。\n\n## 查询了信用报告\n\n因为想看看用了网贷的表弟的信用报告，就去学习查询了一下自己的信用报告，信用良好，在支付宝的借贷记录都在里面了，有空专门写一下。\n\n## 手术\n\n~~离职也是因为一个手术的原因，所以没有提前找下家。离职后待业两个月，做了手术再去找的工作。第一次做这么大手术，担心出什么意外可咋整，而且几乎没告诉任何人。没想到，手术很快，医生技术不错，术后没有不适，很快好了。~~\n\n## 了解中医\n\n因为`谭秦东事件`，注意到中药。之前我从来没思考过中药到底有没有效果，或者如何判断药物有无效果的问题，然后顺便了解中医和现代医学，惊讶地发现中医理论和风水理论有交集，太荒谬了，接着又看了中医争议的百年历史，了解一些我们国家现代医药的发展现状。2020年了，还用这些伪科学或者不科学的医学来治病，难怪现代医药发展慢，算时代的悲哀。\n\n了解中医，会随着了解很多问题，比如我们的民族文化中的糟粕，我们的教育，国人的科学素养，儒家思想的禁锢等。中医使我第一次比较认真得思考世界观、人生观、科学、宗教等之前没特别关注过的，因为中医和我读了这么多年的“科学”非常冲突，起码中医理论和科学是格格不入的，理清楚中医和文化、中医和儒家、中医理论的起源等才会明白中医为何如何荒谬且崇古不变。\n\n## 弟弟高三退学\n\n高三退学，太不明智了。不好好学习，沉迷直播，以为能赚大钱了，还自我感觉良好了。让其好好学习，别搞什么音乐，因为那条路他难以走通，却不听，说什么牛顿、爱因斯坦当时xxx的，学历有什么重要的，我学历比马云高，没马云赚钱什么的，感觉好无知，完全不是一个高三学生说的。在他看来，读书完全是为了赚钱，被那点直播赚的零花钱蒙蔽了双眼，任何人的话都听不进去。\n\n深入思考这些问题，发现这和我家的家庭教育很相关，父母从来没有告诉过孩子读书为了什么，在教育孩子方面，他们是无能为力的，甚至很多做法是错误的。后来一联想她姐说北大的垃圾，我考一本垃圾，一个高三学生，还觉得北大垃圾，妈妈没感到震惊，反而护短，因此弟弟也这样，一点也不奇怪了。后来高考，她只能读专科，还是不好的专科，还想复读，后来还是去了，又想退学啥的，父母能让她折腾的机会不多了，我也不会对她说什么，反正我即使能读一本，现在无房无车，还是垃圾。现在她读专科，看她还能不能腆着大脸说别人垃圾。我12岁才和他们生活，父母对我的影响比较小。童年也比小的兄妹要艰苦一点，因此，就非常渴望读书，读书也还算努力，曾经立志做孙逸仙那样的人。小时候的玩伴都在初中或者小学辍学了，而我侥幸能上完大学。大学后发现孙逸仙真特么不好当，放弃幻想，做一个咸鱼算了。\n\n## 总结\n\n今年总体比较满意。以后继续加强学习，要出去多走走，练习一下摄影。然后继续了解中医，希望更多的人能来关注和了解中医和现代医学，不会被中医的阴阳虚实，正气淫气忽悠住。\n\n\n\n","source":"_posts/2019年总结.md","raw":"---\ntitle: 2019年总结\ndate: 2020-01-21 20:44:59\ntags:\n- 工作\ncategories:\n- [阶段性总结]\n---\n\n2019年过去，今年第一次跳槽，也完成了一些其他事情，想写一年的总结，记录当前的想法。\n<!--more-->\n***\n\n@[TOC]\n\n**我完成了哪些事情**\n\n2019年我完成了一些对我来说，比较大的事情吧：\n\n- 第一次跳槽\n- 查询了信用报告\n- 做了一个手术\n- 了解中医和现代医学\n- 对弟弟在高三退学，感到失望\n\n## 第一次跳槽\n\n毕业就进入长虹工作，感觉长虹在管理上还是挺好的，虽然算是国企，也没有感受到人家说的国企的官僚主义啊、人浮于事啊什么的，也许是我太小虾米或者待的时间才两年吧。感觉在管理上挺好的，偶尔周末加班，没有996，领导也好，有事找领导也是很快找到，就是工资没有外面有竞争者力，然后7月份就离职了。这个月本来要发季度奖的，然后离职就没有了，当时没有考虑到这个问题，但是又预约了一个手术，不想让更多人知道，奖金没有也离职了。看来以后离职要选恰当的时机，不然可能该得的福利，企业不会给你。长虹的缺点是，薪资低，亲戚说我读了大学还蹲在电子厂，还那么点工资，就千方百计催我考公务员，跳槽后薪水涨了，极少提公务员了。\n\n在长虹工作，只有我一个人写前端，前期使用**jQuery**、**BS**等传统技术开发，同时维护老系统，需求不复杂，开发起来挺好的，高效，再者这些技术后台同事比较了解一些，有个吧需求，他们也能够实现。后来使用`vue`开发新的项目，就只有我一个人弄了，没人懂前端框架。vue 使用丝滑，纯数据驱动，高效，复杂的需求比`jQuery`容易实现多了。前后端分离开发，混合部署，隐约感觉我们的开发流程很有问题，比较容易扯皮，和网上流行的分离开发、持续部署等开发流程感觉还差很多，但是我们都不没有这种开发模式的经验，再加上我的 vue 经验少，每次和后台对接，都扯皮啊，后台在绵阳，沟通起来，太难了。完成了第一期，然后发现第二期和第一期关系不太大，没有需求文档，比较难以明确，甚至接口文档也不完善。后台写的接口文档，也毫无章法，不具备语义，后来我使用 **RESTful**,写了文档，有一个大概的共识，才开始写代码。\n\n悲剧的是，后来长虹优化人员，后台项目让成都同事接手，才发现使用的技术太陈旧了，难以调试和阅读，后台了解需求什么的，又扯皮了几天。经过20多天，总算达到测试状态了，打通了和电视端的功能。\n\n在长虹工作两年，也随便做了一些和智能家居相关的项目，对智能家居和语音交互等有点点感性的认识，还处在探索阶段，像智能手机一样达到很好的体验，市场认可，还要不少时间吧，未来凡是通电的，都会通网，交互方式也会改变。\n\n找工作时，面了一些公司，都会问你对 996 的看法，赶项目进度啥的，看来加班是普遍的情况，我之前还以为能遇到一些加班不那么严重的公司。而且，给的待遇没有达到期望，所以拒了。也面蚂蚁金服，面试比较接地气，没玩什么虚的，技术没到期望，over 了。第一次跳槽，发现外包公司很多啊，各种给打电话，而且待遇还可以，比要你996，待遇还不满意的小团队公司好些，就冲着工资去面试了几个。最后入职一家离我很近，不要搬家的，在业务方的开发流程、工具的都做得不错的公司。入职后，发现这样的开发流程比在长虹要舒服得多，他们的工具链做得很完善，文档、代码规范啥的，做得挺好的，也有在百度、阿里、IBM工作过的大佬评审代码。\n\n第一次跳槽，感觉学历还是那么重要啊，很多职位要求985、211的。学历就这样了，只能加强一下技术深度什么的了。\n\n## 查询了信用报告\n\n因为想看看用了网贷的表弟的信用报告，就去学习查询了一下自己的信用报告，信用良好，在支付宝的借贷记录都在里面了，有空专门写一下。\n\n## 手术\n\n~~离职也是因为一个手术的原因，所以没有提前找下家。离职后待业两个月，做了手术再去找的工作。第一次做这么大手术，担心出什么意外可咋整，而且几乎没告诉任何人。没想到，手术很快，医生技术不错，术后没有不适，很快好了。~~\n\n## 了解中医\n\n因为`谭秦东事件`，注意到中药。之前我从来没思考过中药到底有没有效果，或者如何判断药物有无效果的问题，然后顺便了解中医和现代医学，惊讶地发现中医理论和风水理论有交集，太荒谬了，接着又看了中医争议的百年历史，了解一些我们国家现代医药的发展现状。2020年了，还用这些伪科学或者不科学的医学来治病，难怪现代医药发展慢，算时代的悲哀。\n\n了解中医，会随着了解很多问题，比如我们的民族文化中的糟粕，我们的教育，国人的科学素养，儒家思想的禁锢等。中医使我第一次比较认真得思考世界观、人生观、科学、宗教等之前没特别关注过的，因为中医和我读了这么多年的“科学”非常冲突，起码中医理论和科学是格格不入的，理清楚中医和文化、中医和儒家、中医理论的起源等才会明白中医为何如何荒谬且崇古不变。\n\n## 弟弟高三退学\n\n高三退学，太不明智了。不好好学习，沉迷直播，以为能赚大钱了，还自我感觉良好了。让其好好学习，别搞什么音乐，因为那条路他难以走通，却不听，说什么牛顿、爱因斯坦当时xxx的，学历有什么重要的，我学历比马云高，没马云赚钱什么的，感觉好无知，完全不是一个高三学生说的。在他看来，读书完全是为了赚钱，被那点直播赚的零花钱蒙蔽了双眼，任何人的话都听不进去。\n\n深入思考这些问题，发现这和我家的家庭教育很相关，父母从来没有告诉过孩子读书为了什么，在教育孩子方面，他们是无能为力的，甚至很多做法是错误的。后来一联想她姐说北大的垃圾，我考一本垃圾，一个高三学生，还觉得北大垃圾，妈妈没感到震惊，反而护短，因此弟弟也这样，一点也不奇怪了。后来高考，她只能读专科，还是不好的专科，还想复读，后来还是去了，又想退学啥的，父母能让她折腾的机会不多了，我也不会对她说什么，反正我即使能读一本，现在无房无车，还是垃圾。现在她读专科，看她还能不能腆着大脸说别人垃圾。我12岁才和他们生活，父母对我的影响比较小。童年也比小的兄妹要艰苦一点，因此，就非常渴望读书，读书也还算努力，曾经立志做孙逸仙那样的人。小时候的玩伴都在初中或者小学辍学了，而我侥幸能上完大学。大学后发现孙逸仙真特么不好当，放弃幻想，做一个咸鱼算了。\n\n## 总结\n\n今年总体比较满意。以后继续加强学习，要出去多走走，练习一下摄影。然后继续了解中医，希望更多的人能来关注和了解中医和现代医学，不会被中医的阴阳虚实，正气淫气忽悠住。\n\n\n\n","slug":"2019年总结","published":1,"updated":"2020-01-21T15:26:39.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccdx000ajwrn2aleedag","content":"<p>2019年过去，今年第一次跳槽，也完成了一些其他事情，想写一年的总结，记录当前的想法。</p>\n<a id=\"more\"></a>\n<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%B7%B3%E6%A7%BD\">第一次跳槽</a></li>\n<li><a href=\"#%E6%9F%A5%E8%AF%A2%E4%BA%86%E4%BF%A1%E7%94%A8%E6%8A%A5%E5%91%8A\">查询了信用报告</a></li>\n<li><a href=\"#%E6%89%8B%E6%9C%AF\">手术</a></li>\n<li><a href=\"#%E4%BA%86%E8%A7%A3%E4%B8%AD%E5%8C%BB\">了解中医</a></li>\n<li><a href=\"#%E5%BC%9F%E5%BC%9F%E9%AB%98%E4%B8%89%E9%80%80%E5%AD%A6\">弟弟高三退学</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n</p>\n<p><strong>我完成了哪些事情</strong></p>\n<p>2019年我完成了一些对我来说，比较大的事情吧：</p>\n<ul>\n<li>第一次跳槽</li>\n<li>查询了信用报告</li>\n<li>做了一个手术</li>\n<li>了解中医和现代医学</li>\n<li>对弟弟在高三退学，感到失望</li>\n</ul>\n<h2 id=\"第一次跳槽\"><a class=\"markdownIt-Anchor\" href=\"#第一次跳槽\"></a> 第一次跳槽</h2>\n<p>毕业就进入长虹工作，感觉长虹在管理上还是挺好的，虽然算是国企，也没有感受到人家说的国企的官僚主义啊、人浮于事啊什么的，也许是我太小虾米或者待的时间才两年吧。感觉在管理上挺好的，偶尔周末加班，没有996，领导也好，有事找领导也是很快找到，就是工资没有外面有竞争者力，然后7月份就离职了。这个月本来要发季度奖的，然后离职就没有了，当时没有考虑到这个问题，但是又预约了一个手术，不想让更多人知道，奖金没有也离职了。看来以后离职要选恰当的时机，不然可能该得的福利，企业不会给你。长虹的缺点是，薪资低，亲戚说我读了大学还蹲在电子厂，还那么点工资，就千方百计催我考公务员，跳槽后薪水涨了，极少提公务员了。</p>\n<p>在长虹工作，只有我一个人写前端，前期使用<strong>jQuery</strong>、<strong>BS</strong>等传统技术开发，同时维护老系统，需求不复杂，开发起来挺好的，高效，再者这些技术后台同事比较了解一些，有个吧需求，他们也能够实现。后来使用<code>vue</code>开发新的项目，就只有我一个人弄了，没人懂前端框架。vue 使用丝滑，纯数据驱动，高效，复杂的需求比<code>jQuery</code>容易实现多了。前后端分离开发，混合部署，隐约感觉我们的开发流程很有问题，比较容易扯皮，和网上流行的分离开发、持续部署等开发流程感觉还差很多，但是我们都不没有这种开发模式的经验，再加上我的 vue 经验少，每次和后台对接，都扯皮啊，后台在绵阳，沟通起来，太难了。完成了第一期，然后发现第二期和第一期关系不太大，没有需求文档，比较难以明确，甚至接口文档也不完善。后台写的接口文档，也毫无章法，不具备语义，后来我使用 <strong>RESTful</strong>,写了文档，有一个大概的共识，才开始写代码。</p>\n<p>悲剧的是，后来长虹优化人员，后台项目让成都同事接手，才发现使用的技术太陈旧了，难以调试和阅读，后台了解需求什么的，又扯皮了几天。经过20多天，总算达到测试状态了，打通了和电视端的功能。</p>\n<p>在长虹工作两年，也随便做了一些和智能家居相关的项目，对智能家居和语音交互等有点点感性的认识，还处在探索阶段，像智能手机一样达到很好的体验，市场认可，还要不少时间吧，未来凡是通电的，都会通网，交互方式也会改变。</p>\n<p>找工作时，面了一些公司，都会问你对 996 的看法，赶项目进度啥的，看来加班是普遍的情况，我之前还以为能遇到一些加班不那么严重的公司。而且，给的待遇没有达到期望，所以拒了。也面蚂蚁金服，面试比较接地气，没玩什么虚的，技术没到期望，over 了。第一次跳槽，发现外包公司很多啊，各种给打电话，而且待遇还可以，比要你996，待遇还不满意的小团队公司好些，就冲着工资去面试了几个。最后入职一家离我很近，不要搬家的，在业务方的开发流程、工具的都做得不错的公司。入职后，发现这样的开发流程比在长虹要舒服得多，他们的工具链做得很完善，文档、代码规范啥的，做得挺好的，也有在百度、阿里、IBM工作过的大佬评审代码。</p>\n<p>第一次跳槽，感觉学历还是那么重要啊，很多职位要求985、211的。学历就这样了，只能加强一下技术深度什么的了。</p>\n<h2 id=\"查询了信用报告\"><a class=\"markdownIt-Anchor\" href=\"#查询了信用报告\"></a> 查询了信用报告</h2>\n<p>因为想看看用了网贷的表弟的信用报告，就去学习查询了一下自己的信用报告，信用良好，在支付宝的借贷记录都在里面了，有空专门写一下。</p>\n<h2 id=\"手术\"><a class=\"markdownIt-Anchor\" href=\"#手术\"></a> 手术</h2>\n<p><s>离职也是因为一个手术的原因，所以没有提前找下家。离职后待业两个月，做了手术再去找的工作。第一次做这么大手术，担心出什么意外可咋整，而且几乎没告诉任何人。没想到，手术很快，医生技术不错，术后没有不适，很快好了。</s></p>\n<h2 id=\"了解中医\"><a class=\"markdownIt-Anchor\" href=\"#了解中医\"></a> 了解中医</h2>\n<p>因为<code>谭秦东事件</code>，注意到中药。之前我从来没思考过中药到底有没有效果，或者如何判断药物有无效果的问题，然后顺便了解中医和现代医学，惊讶地发现中医理论和风水理论有交集，太荒谬了，接着又看了中医争议的百年历史，了解一些我们国家现代医药的发展现状。2020年了，还用这些伪科学或者不科学的医学来治病，难怪现代医药发展慢，算时代的悲哀。</p>\n<p>了解中医，会随着了解很多问题，比如我们的民族文化中的糟粕，我们的教育，国人的科学素养，儒家思想的禁锢等。中医使我第一次比较认真得思考世界观、人生观、科学、宗教等之前没特别关注过的，因为中医和我读了这么多年的“科学”非常冲突，起码中医理论和科学是格格不入的，理清楚中医和文化、中医和儒家、中医理论的起源等才会明白中医为何如何荒谬且崇古不变。</p>\n<h2 id=\"弟弟高三退学\"><a class=\"markdownIt-Anchor\" href=\"#弟弟高三退学\"></a> 弟弟高三退学</h2>\n<p>高三退学，太不明智了。不好好学习，沉迷直播，以为能赚大钱了，还自我感觉良好了。让其好好学习，别搞什么音乐，因为那条路他难以走通，却不听，说什么牛顿、爱因斯坦当时xxx的，学历有什么重要的，我学历比马云高，没马云赚钱什么的，感觉好无知，完全不是一个高三学生说的。在他看来，读书完全是为了赚钱，被那点直播赚的零花钱蒙蔽了双眼，任何人的话都听不进去。</p>\n<p>深入思考这些问题，发现这和我家的家庭教育很相关，父母从来没有告诉过孩子读书为了什么，在教育孩子方面，他们是无能为力的，甚至很多做法是错误的。后来一联想她姐说北大的垃圾，我考一本垃圾，一个高三学生，还觉得北大垃圾，妈妈没感到震惊，反而护短，因此弟弟也这样，一点也不奇怪了。后来高考，她只能读专科，还是不好的专科，还想复读，后来还是去了，又想退学啥的，父母能让她折腾的机会不多了，我也不会对她说什么，反正我即使能读一本，现在无房无车，还是垃圾。现在她读专科，看她还能不能腆着大脸说别人垃圾。我12岁才和他们生活，父母对我的影响比较小。童年也比小的兄妹要艰苦一点，因此，就非常渴望读书，读书也还算努力，曾经立志做孙逸仙那样的人。小时候的玩伴都在初中或者小学辍学了，而我侥幸能上完大学。大学后发现孙逸仙真特么不好当，放弃幻想，做一个咸鱼算了。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>今年总体比较满意。以后继续加强学习，要出去多走走，练习一下摄影。然后继续了解中医，希望更多的人能来关注和了解中医和现代医学，不会被中医的阴阳虚实，正气淫气忽悠住。</p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>2019年过去，今年第一次跳槽，也完成了一些其他事情，想写一年的总结，记录当前的想法。</p>","more":"<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%B7%B3%E6%A7%BD\">第一次跳槽</a></li>\n<li><a href=\"#%E6%9F%A5%E8%AF%A2%E4%BA%86%E4%BF%A1%E7%94%A8%E6%8A%A5%E5%91%8A\">查询了信用报告</a></li>\n<li><a href=\"#%E6%89%8B%E6%9C%AF\">手术</a></li>\n<li><a href=\"#%E4%BA%86%E8%A7%A3%E4%B8%AD%E5%8C%BB\">了解中医</a></li>\n<li><a href=\"#%E5%BC%9F%E5%BC%9F%E9%AB%98%E4%B8%89%E9%80%80%E5%AD%A6\">弟弟高三退学</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n</p>\n<p><strong>我完成了哪些事情</strong></p>\n<p>2019年我完成了一些对我来说，比较大的事情吧：</p>\n<ul>\n<li>第一次跳槽</li>\n<li>查询了信用报告</li>\n<li>做了一个手术</li>\n<li>了解中医和现代医学</li>\n<li>对弟弟在高三退学，感到失望</li>\n</ul>\n<h2 id=\"第一次跳槽\"><a class=\"markdownIt-Anchor\" href=\"#第一次跳槽\"></a> 第一次跳槽</h2>\n<p>毕业就进入长虹工作，感觉长虹在管理上还是挺好的，虽然算是国企，也没有感受到人家说的国企的官僚主义啊、人浮于事啊什么的，也许是我太小虾米或者待的时间才两年吧。感觉在管理上挺好的，偶尔周末加班，没有996，领导也好，有事找领导也是很快找到，就是工资没有外面有竞争者力，然后7月份就离职了。这个月本来要发季度奖的，然后离职就没有了，当时没有考虑到这个问题，但是又预约了一个手术，不想让更多人知道，奖金没有也离职了。看来以后离职要选恰当的时机，不然可能该得的福利，企业不会给你。长虹的缺点是，薪资低，亲戚说我读了大学还蹲在电子厂，还那么点工资，就千方百计催我考公务员，跳槽后薪水涨了，极少提公务员了。</p>\n<p>在长虹工作，只有我一个人写前端，前期使用<strong>jQuery</strong>、<strong>BS</strong>等传统技术开发，同时维护老系统，需求不复杂，开发起来挺好的，高效，再者这些技术后台同事比较了解一些，有个吧需求，他们也能够实现。后来使用<code>vue</code>开发新的项目，就只有我一个人弄了，没人懂前端框架。vue 使用丝滑，纯数据驱动，高效，复杂的需求比<code>jQuery</code>容易实现多了。前后端分离开发，混合部署，隐约感觉我们的开发流程很有问题，比较容易扯皮，和网上流行的分离开发、持续部署等开发流程感觉还差很多，但是我们都不没有这种开发模式的经验，再加上我的 vue 经验少，每次和后台对接，都扯皮啊，后台在绵阳，沟通起来，太难了。完成了第一期，然后发现第二期和第一期关系不太大，没有需求文档，比较难以明确，甚至接口文档也不完善。后台写的接口文档，也毫无章法，不具备语义，后来我使用 <strong>RESTful</strong>,写了文档，有一个大概的共识，才开始写代码。</p>\n<p>悲剧的是，后来长虹优化人员，后台项目让成都同事接手，才发现使用的技术太陈旧了，难以调试和阅读，后台了解需求什么的，又扯皮了几天。经过20多天，总算达到测试状态了，打通了和电视端的功能。</p>\n<p>在长虹工作两年，也随便做了一些和智能家居相关的项目，对智能家居和语音交互等有点点感性的认识，还处在探索阶段，像智能手机一样达到很好的体验，市场认可，还要不少时间吧，未来凡是通电的，都会通网，交互方式也会改变。</p>\n<p>找工作时，面了一些公司，都会问你对 996 的看法，赶项目进度啥的，看来加班是普遍的情况，我之前还以为能遇到一些加班不那么严重的公司。而且，给的待遇没有达到期望，所以拒了。也面蚂蚁金服，面试比较接地气，没玩什么虚的，技术没到期望，over 了。第一次跳槽，发现外包公司很多啊，各种给打电话，而且待遇还可以，比要你996，待遇还不满意的小团队公司好些，就冲着工资去面试了几个。最后入职一家离我很近，不要搬家的，在业务方的开发流程、工具的都做得不错的公司。入职后，发现这样的开发流程比在长虹要舒服得多，他们的工具链做得很完善，文档、代码规范啥的，做得挺好的，也有在百度、阿里、IBM工作过的大佬评审代码。</p>\n<p>第一次跳槽，感觉学历还是那么重要啊，很多职位要求985、211的。学历就这样了，只能加强一下技术深度什么的了。</p>\n<h2 id=\"查询了信用报告\"><a class=\"markdownIt-Anchor\" href=\"#查询了信用报告\"></a> 查询了信用报告</h2>\n<p>因为想看看用了网贷的表弟的信用报告，就去学习查询了一下自己的信用报告，信用良好，在支付宝的借贷记录都在里面了，有空专门写一下。</p>\n<h2 id=\"手术\"><a class=\"markdownIt-Anchor\" href=\"#手术\"></a> 手术</h2>\n<p><s>离职也是因为一个手术的原因，所以没有提前找下家。离职后待业两个月，做了手术再去找的工作。第一次做这么大手术，担心出什么意外可咋整，而且几乎没告诉任何人。没想到，手术很快，医生技术不错，术后没有不适，很快好了。</s></p>\n<h2 id=\"了解中医\"><a class=\"markdownIt-Anchor\" href=\"#了解中医\"></a> 了解中医</h2>\n<p>因为<code>谭秦东事件</code>，注意到中药。之前我从来没思考过中药到底有没有效果，或者如何判断药物有无效果的问题，然后顺便了解中医和现代医学，惊讶地发现中医理论和风水理论有交集，太荒谬了，接着又看了中医争议的百年历史，了解一些我们国家现代医药的发展现状。2020年了，还用这些伪科学或者不科学的医学来治病，难怪现代医药发展慢，算时代的悲哀。</p>\n<p>了解中医，会随着了解很多问题，比如我们的民族文化中的糟粕，我们的教育，国人的科学素养，儒家思想的禁锢等。中医使我第一次比较认真得思考世界观、人生观、科学、宗教等之前没特别关注过的，因为中医和我读了这么多年的“科学”非常冲突，起码中医理论和科学是格格不入的，理清楚中医和文化、中医和儒家、中医理论的起源等才会明白中医为何如何荒谬且崇古不变。</p>\n<h2 id=\"弟弟高三退学\"><a class=\"markdownIt-Anchor\" href=\"#弟弟高三退学\"></a> 弟弟高三退学</h2>\n<p>高三退学，太不明智了。不好好学习，沉迷直播，以为能赚大钱了，还自我感觉良好了。让其好好学习，别搞什么音乐，因为那条路他难以走通，却不听，说什么牛顿、爱因斯坦当时xxx的，学历有什么重要的，我学历比马云高，没马云赚钱什么的，感觉好无知，完全不是一个高三学生说的。在他看来，读书完全是为了赚钱，被那点直播赚的零花钱蒙蔽了双眼，任何人的话都听不进去。</p>\n<p>深入思考这些问题，发现这和我家的家庭教育很相关，父母从来没有告诉过孩子读书为了什么，在教育孩子方面，他们是无能为力的，甚至很多做法是错误的。后来一联想她姐说北大的垃圾，我考一本垃圾，一个高三学生，还觉得北大垃圾，妈妈没感到震惊，反而护短，因此弟弟也这样，一点也不奇怪了。后来高考，她只能读专科，还是不好的专科，还想复读，后来还是去了，又想退学啥的，父母能让她折腾的机会不多了，我也不会对她说什么，反正我即使能读一本，现在无房无车，还是垃圾。现在她读专科，看她还能不能腆着大脸说别人垃圾。我12岁才和他们生活，父母对我的影响比较小。童年也比小的兄妹要艰苦一点，因此，就非常渴望读书，读书也还算努力，曾经立志做孙逸仙那样的人。小时候的玩伴都在初中或者小学辍学了，而我侥幸能上完大学。大学后发现孙逸仙真特么不好当，放弃幻想，做一个咸鱼算了。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>今年总体比较满意。以后继续加强学习，要出去多走走，练习一下摄影。然后继续了解中医，希望更多的人能来关注和了解中医和现代医学，不会被中医的阴阳虚实，正气淫气忽悠住。</p>"},{"title":"CommonJS 规范","date":"2019-06-16T10:24:30.000Z","_content":"\n为了开发大型复杂应用、代码便于管理，制定了不同的 JS 代码模块化规范。\n- CommonJS：node 的模块化实现了 CommonJS 规范，`同步加载`。\n- AMD ：异步模块定义规范，`异步加载`，是 RequireJS 在推广过程中对模块定义的规范产出，推崇依赖前置；\n- ES6：ES6 模块化的设计思想是尽量静态化，编译时就能确定模块依赖关系；\n- CMD : 是 SeaJS 在推广时对模块定义的规范化产出，推崇依赖就近；\n- UMD : 兼容 AMD 和 CommonJS 的规范化的同时，还兼容全局引用的方式。\n\nCommonJS 规范希望JS代码能在任何地方运行，具备开发大型应用的能力，node 的模块化采用 CommonJS 规范实现。\n\n<!--more-->\n\n[TOC]\n\n## 模块实例\n\n**一个文件就是一个模块**，有自己的作用域。文件中的变量、函数、类都是私有的，其他文件不可见。\n\n每个模块内部，`module`变量代表当前模块。这是一个对象，`exports` 属性对导入模块的接口，`require`一个模块，就是加载`exports`属性。\n```js \n// example.js\nlet x = 5;\nlet addX = value => value + x;\nmodule.exports.x = x;\nmodule.exports.addX = addX;\n```\n```js\n//test.js\nlet example = require('./example');\nconsole.log(example);//{}\nconsole.log(example.x);//5\nlet result = example.addX(3);\nconsole.log(result);//8\n```\nCommonJS 模块特点：\n> 1. 所有代码都运行在模块的作用域内，不会污染全局作用域；\n> 2. 模块可多次加载，但是只会在第一次加载时运行一次，以后加载从**缓存**中读取。不想要运行该模块，必须清除缓存；\n> 3. 按照代码出现的顺序加载。\n\n## module 对象\n\nnode 内部提供了 Module 构建函数。所有模块都是Module 的实例。\n```js\nfunction Module(id,parent){\n\tthis.id = id;\n\tthis.exports = {};\n\tthis.parent = parent;\n\t// ...\n}\n```\n `module` 的属性：\n > id : 模块识别符，带有**绝对路径**的模块文件名；\n > filename: 模块文件名，带有绝对路径；\n > loaded : 布尔值，模块是否加载完成；\n > parent ： module 对象，引用本模块的模块；\n > children : module 数组， 本模块引用的其他模块；\n > exports ：对象，本模块的导出值是其属性。\n\n没被其他模块引用的模块通常是程序入口，此时 `parent` 属性是为 `null`，可根据该特性判断是否为程序入口。\n```js\nif (!module.parent) {\n    // ran with `node something.js`\n    app.listen(8088, function() {\n        console.log('app listening on port 8088');\n    })\n} else {\n    // used with `require('/.something.js')`\n    module.exports = app;\n}\n```\n## exports 变量\n\n为了方便，node 为每个模块提供了 exports 变量，指向 `module.exports`，即\n```js\nlet exports = module.exports\n```\n可向 `exports`对象加添加属性和方法。\n```js\nexports.area = function(r){\n\treturn Math.PI*r*r;\n}\n```\n>**不能直接将exports变量指向一个值，因为这样等于切断了exports = module.exports的联系**\n\n一个模块的对外接口，是一个单一的值（**一个函数**或者**一个变量**），`不能使用` `exports` 输出，**只能使用`module.exports`输出**。\n——————————————————————————————————————\n**在`exports`上添加属性，再导出，导出的是一个对象。**\n `exports.prop = value` 等同于 `module.exports = {prop:value}`\n```js\n//example.1.js 在exports添加属性\nlet print = (value) =>console.log(value);\nexports.print = print;\n```\n```js\n//example.2.js 将单一的值赋值给 module.exports\nlet print = (value) => console.log(value);\nmodule.exports = print;\n```\n```js\n//example.3.js 将单一的值赋值给\nlet print = (value) => console.log(value);\nexports = print;\n```\n```js\n//test.js\nlet example1 = require('./example.1');\nlet example2 = require('./example.2');\nlet example3 = require('./example.3');\nconsole.log(example1);// { print: [Function: print] }\nconsole.log(example2);// [Function:print]\nconsole.log(example3);// {} 给 exports 赋值只能导出空对象\n```\n为了简化，只用 `module.exports`导出值。\n## require 命令\n\n`require`的基本功能是：**读取**并**执行**一个模块，返回该模块的 `exports`对象，可用解构赋值的方式提取部分属性，没有发现模块，报错。\n### 加载规则\n\n1. 参数以 `/`开头，加载绝对路径下的模块；\n2. 参数以 `./`开头，加载当前目录下的模块；\n3. 不以 `./`或 `/`开头，加载核心模块或依次在各级 `node_modules`目录的查找；\n4. 想得到包含文件名的完整路径，使用 `require.resolve()`。\n\n### 目录的加载规则\n\n通常把相关文件放在一个目录下，便于组织。这时最好为目录设置一个`入口文件`，`require`方法能根据这个文件，加载整个目录。\n在目录中设置一个 `package.json`，写入 `main`字段。\npackage.json 文件由 `npm init`命令生成，`npm init -y` 可不用一一回答询问，直接采用默认值，再手动修改。\n```json\n//package.json\n{\n\"name\":\"some-library\",\n\"main\":\"./lib/some-library.js\"\n}\n```\n`require`发现参数为一个目录，会先查找该目录下的 `package.json`文件，加载 `main`字段指定的入口文件。没有 `main`字段或者没有`package.json`文件，则加载该目录下的 `index.js`文件或者`index.node`。\n### node 模块分类\n\n- 核心模块，内置在 node 内部的，直接引用即可。\n- 第三方模块\n  - 用 npm 下载，安装到程序目录的 `node_modules`文件夹中；\n  - 模块加载时，会先在核心模块中搜索，再到程序的`node_modules`文件夹中搜索。\n\n- 文件模块\n- 文件夹模块\n  按照目录加载机制加载。\n\n### 模块的缓存\n\n第一次加载，以后从缓存中读取`module.exports`属性。\n所有模块的缓存都保存在 `require.cache`中。\n删除模块缓存：\n```js\n// 删除指定模块缓存\ndelete require.cache(moduleName)\n// 删除所有模块缓存\nObject.keys(require.cache).forEach(key=>{delete require.cache[key]\n})\n```\n### require.main \n\n`main`属性，可用来判断是直接执行还是调用执行。直接执行：\n`node module.js`，require.main属性指向模块本身。\n```js\n//直接执行 表达式为 true\nrequire.main === module\n```\n通过 `require`加载模块执行，上面的表达式为`false`\n## 模块加载机制\n\n模块一旦输出值，模块内部的变化，影响不到这个输出值。\n```js\n// lib.js\nlet counter = 3;\nlet incCounter = () => {\n    counter++\n    console.log('模块内部',counter);\n}\nconsole.log('lib', require.main === module);// 被require 执行，输出 false\nmodule.exports = {\n    counter,\n    incCounter,\n}\n```\n```js\n// test.1.js\nlet counter = require('./lib').counter\nlet incCounter = require('./lib').incCounter\nconsole.log('模块外部', counter);//3 \nincCounter();// 模块内部的值改变为 4 \nconsole.log('模块外部', counter);//外部的值 还是为3 \nconsole.log('test', require.main === module);\n// 直接执行，输出 true\n```\n最后输出：\n```bash\nlib false\n模块外部 3\n模块内部 4\n模块外部 3\ntest true\n```\n## 参考文章\n\n[CommonJS规范](https://javascript.ruanyifeng.com/nodejs/module.html)\n[前端模块化（一）nodeJS中的CommonJS规范](https://juejin.im/entry/5b2afc3551882574e321dcf1)","source":"_posts/CommonJS-规范.md","raw":"---\ntitle: CommonJS 规范\ndate: 2019-06-16 18:24:30\ntags:\n- 模块化\n- commonJS\ncategories:\n- [node]\n---\n\n为了开发大型复杂应用、代码便于管理，制定了不同的 JS 代码模块化规范。\n- CommonJS：node 的模块化实现了 CommonJS 规范，`同步加载`。\n- AMD ：异步模块定义规范，`异步加载`，是 RequireJS 在推广过程中对模块定义的规范产出，推崇依赖前置；\n- ES6：ES6 模块化的设计思想是尽量静态化，编译时就能确定模块依赖关系；\n- CMD : 是 SeaJS 在推广时对模块定义的规范化产出，推崇依赖就近；\n- UMD : 兼容 AMD 和 CommonJS 的规范化的同时，还兼容全局引用的方式。\n\nCommonJS 规范希望JS代码能在任何地方运行，具备开发大型应用的能力，node 的模块化采用 CommonJS 规范实现。\n\n<!--more-->\n\n[TOC]\n\n## 模块实例\n\n**一个文件就是一个模块**，有自己的作用域。文件中的变量、函数、类都是私有的，其他文件不可见。\n\n每个模块内部，`module`变量代表当前模块。这是一个对象，`exports` 属性对导入模块的接口，`require`一个模块，就是加载`exports`属性。\n```js \n// example.js\nlet x = 5;\nlet addX = value => value + x;\nmodule.exports.x = x;\nmodule.exports.addX = addX;\n```\n```js\n//test.js\nlet example = require('./example');\nconsole.log(example);//{}\nconsole.log(example.x);//5\nlet result = example.addX(3);\nconsole.log(result);//8\n```\nCommonJS 模块特点：\n> 1. 所有代码都运行在模块的作用域内，不会污染全局作用域；\n> 2. 模块可多次加载，但是只会在第一次加载时运行一次，以后加载从**缓存**中读取。不想要运行该模块，必须清除缓存；\n> 3. 按照代码出现的顺序加载。\n\n## module 对象\n\nnode 内部提供了 Module 构建函数。所有模块都是Module 的实例。\n```js\nfunction Module(id,parent){\n\tthis.id = id;\n\tthis.exports = {};\n\tthis.parent = parent;\n\t// ...\n}\n```\n `module` 的属性：\n > id : 模块识别符，带有**绝对路径**的模块文件名；\n > filename: 模块文件名，带有绝对路径；\n > loaded : 布尔值，模块是否加载完成；\n > parent ： module 对象，引用本模块的模块；\n > children : module 数组， 本模块引用的其他模块；\n > exports ：对象，本模块的导出值是其属性。\n\n没被其他模块引用的模块通常是程序入口，此时 `parent` 属性是为 `null`，可根据该特性判断是否为程序入口。\n```js\nif (!module.parent) {\n    // ran with `node something.js`\n    app.listen(8088, function() {\n        console.log('app listening on port 8088');\n    })\n} else {\n    // used with `require('/.something.js')`\n    module.exports = app;\n}\n```\n## exports 变量\n\n为了方便，node 为每个模块提供了 exports 变量，指向 `module.exports`，即\n```js\nlet exports = module.exports\n```\n可向 `exports`对象加添加属性和方法。\n```js\nexports.area = function(r){\n\treturn Math.PI*r*r;\n}\n```\n>**不能直接将exports变量指向一个值，因为这样等于切断了exports = module.exports的联系**\n\n一个模块的对外接口，是一个单一的值（**一个函数**或者**一个变量**），`不能使用` `exports` 输出，**只能使用`module.exports`输出**。\n——————————————————————————————————————\n**在`exports`上添加属性，再导出，导出的是一个对象。**\n `exports.prop = value` 等同于 `module.exports = {prop:value}`\n```js\n//example.1.js 在exports添加属性\nlet print = (value) =>console.log(value);\nexports.print = print;\n```\n```js\n//example.2.js 将单一的值赋值给 module.exports\nlet print = (value) => console.log(value);\nmodule.exports = print;\n```\n```js\n//example.3.js 将单一的值赋值给\nlet print = (value) => console.log(value);\nexports = print;\n```\n```js\n//test.js\nlet example1 = require('./example.1');\nlet example2 = require('./example.2');\nlet example3 = require('./example.3');\nconsole.log(example1);// { print: [Function: print] }\nconsole.log(example2);// [Function:print]\nconsole.log(example3);// {} 给 exports 赋值只能导出空对象\n```\n为了简化，只用 `module.exports`导出值。\n## require 命令\n\n`require`的基本功能是：**读取**并**执行**一个模块，返回该模块的 `exports`对象，可用解构赋值的方式提取部分属性，没有发现模块，报错。\n### 加载规则\n\n1. 参数以 `/`开头，加载绝对路径下的模块；\n2. 参数以 `./`开头，加载当前目录下的模块；\n3. 不以 `./`或 `/`开头，加载核心模块或依次在各级 `node_modules`目录的查找；\n4. 想得到包含文件名的完整路径，使用 `require.resolve()`。\n\n### 目录的加载规则\n\n通常把相关文件放在一个目录下，便于组织。这时最好为目录设置一个`入口文件`，`require`方法能根据这个文件，加载整个目录。\n在目录中设置一个 `package.json`，写入 `main`字段。\npackage.json 文件由 `npm init`命令生成，`npm init -y` 可不用一一回答询问，直接采用默认值，再手动修改。\n```json\n//package.json\n{\n\"name\":\"some-library\",\n\"main\":\"./lib/some-library.js\"\n}\n```\n`require`发现参数为一个目录，会先查找该目录下的 `package.json`文件，加载 `main`字段指定的入口文件。没有 `main`字段或者没有`package.json`文件，则加载该目录下的 `index.js`文件或者`index.node`。\n### node 模块分类\n\n- 核心模块，内置在 node 内部的，直接引用即可。\n- 第三方模块\n  - 用 npm 下载，安装到程序目录的 `node_modules`文件夹中；\n  - 模块加载时，会先在核心模块中搜索，再到程序的`node_modules`文件夹中搜索。\n\n- 文件模块\n- 文件夹模块\n  按照目录加载机制加载。\n\n### 模块的缓存\n\n第一次加载，以后从缓存中读取`module.exports`属性。\n所有模块的缓存都保存在 `require.cache`中。\n删除模块缓存：\n```js\n// 删除指定模块缓存\ndelete require.cache(moduleName)\n// 删除所有模块缓存\nObject.keys(require.cache).forEach(key=>{delete require.cache[key]\n})\n```\n### require.main \n\n`main`属性，可用来判断是直接执行还是调用执行。直接执行：\n`node module.js`，require.main属性指向模块本身。\n```js\n//直接执行 表达式为 true\nrequire.main === module\n```\n通过 `require`加载模块执行，上面的表达式为`false`\n## 模块加载机制\n\n模块一旦输出值，模块内部的变化，影响不到这个输出值。\n```js\n// lib.js\nlet counter = 3;\nlet incCounter = () => {\n    counter++\n    console.log('模块内部',counter);\n}\nconsole.log('lib', require.main === module);// 被require 执行，输出 false\nmodule.exports = {\n    counter,\n    incCounter,\n}\n```\n```js\n// test.1.js\nlet counter = require('./lib').counter\nlet incCounter = require('./lib').incCounter\nconsole.log('模块外部', counter);//3 \nincCounter();// 模块内部的值改变为 4 \nconsole.log('模块外部', counter);//外部的值 还是为3 \nconsole.log('test', require.main === module);\n// 直接执行，输出 true\n```\n最后输出：\n```bash\nlib false\n模块外部 3\n模块内部 4\n模块外部 3\ntest true\n```\n## 参考文章\n\n[CommonJS规范](https://javascript.ruanyifeng.com/nodejs/module.html)\n[前端模块化（一）nodeJS中的CommonJS规范](https://juejin.im/entry/5b2afc3551882574e321dcf1)","slug":"CommonJS-规范","published":1,"updated":"2019-06-16T10:28:24.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7ccce5000bjwrn9hpx5p6b","content":"<p>为了开发大型复杂应用、代码便于管理，制定了不同的 JS 代码模块化规范。</p>\n<ul>\n<li>CommonJS：node 的模块化实现了 CommonJS 规范，<code>同步加载</code>。</li>\n<li>AMD ：异步模块定义规范，<code>异步加载</code>，是 RequireJS 在推广过程中对模块定义的规范产出，推崇依赖前置；</li>\n<li>ES6：ES6 模块化的设计思想是尽量静态化，编译时就能确定模块依赖关系；</li>\n<li>CMD : 是 SeaJS 在推广时对模块定义的规范化产出，推崇依赖就近；</li>\n<li>UMD : 兼容 AMD 和 CommonJS 的规范化的同时，还兼容全局引用的方式。</li>\n</ul>\n<p>CommonJS 规范希望JS代码能在任何地方运行，具备开发大型应用的能力，node 的模块化采用 CommonJS 规范实现。</p>\n<a id=\"more\"></a>\n<p>[TOC]</p>\n<h2 id=\"模块实例\"><a class=\"markdownIt-Anchor\" href=\"#模块实例\"></a> 模块实例</h2>\n<p><strong>一个文件就是一个模块</strong>，有自己的作用域。文件中的变量、函数、类都是私有的，其他文件不可见。</p>\n<p>每个模块内部，<code>module</code>变量代表当前模块。这是一个对象，<code>exports</code> 属性对导入模块的接口，<code>require</code>一个模块，就是加载<code>exports</code>属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> addX = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value + x;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.x = x;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.addX = addX;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> example = <span class=\"built_in\">require</span>(<span class=\"string\">'./example'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example);<span class=\"comment\">//&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example.x);<span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = example.addX(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);<span class=\"comment\">//8</span></span><br></pre></td></tr></table></figure>\n<p>CommonJS 模块特点：</p>\n<blockquote>\n<ol>\n<li>所有代码都运行在模块的作用域内，不会污染全局作用域；</li>\n<li>模块可多次加载，但是只会在第一次加载时运行一次，以后加载从<strong>缓存</strong>中读取。不想要运行该模块，必须清除缓存；</li>\n<li>按照代码出现的顺序加载。</li>\n</ol>\n</blockquote>\n<h2 id=\"module-对象\"><a class=\"markdownIt-Anchor\" href=\"#module-对象\"></a> module 对象</h2>\n<p>node 内部提供了 Module 构建函数。所有模块都是Module 的实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Module</span>(<span class=\"params\">id,parent</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.exports = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.parent = parent;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>module</code> 的属性：</p>\n<blockquote>\n<p>id : 模块识别符，带有<strong>绝对路径</strong>的模块文件名；<br>\nfilename: 模块文件名，带有绝对路径；<br>\nloaded : 布尔值，模块是否加载完成；<br>\nparent ： module 对象，引用本模块的模块；<br>\nchildren : module 数组， 本模块引用的其他模块；<br>\nexports ：对象，本模块的导出值是其属性。</p>\n</blockquote>\n<p>没被其他模块引用的模块通常是程序入口，此时 <code>parent</code> 属性是为 <code>null</code>，可根据该特性判断是否为程序入口。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">module</span>.parent) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ran with `node something.js`</span></span><br><span class=\"line\">    app.listen(<span class=\"number\">8088</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'app listening on port 8088'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// used with `require('/.something.js')`</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = app;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"exports-变量\"><a class=\"markdownIt-Anchor\" href=\"#exports-变量\"></a> exports 变量</h2>\n<p>为了方便，node 为每个模块提供了 exports 变量，指向 <code>module.exports</code>，即</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> exports = <span class=\"built_in\">module</span>.exports</span><br></pre></td></tr></table></figure>\n<p>可向 <code>exports</code>对象加添加属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.area = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI*r*r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>不能直接将exports变量指向一个值，因为这样等于切断了exports = module.exports的联系</strong></p>\n</blockquote>\n<p>一个模块的对外接口，是一个单一的值（<strong>一个函数</strong>或者<strong>一个变量</strong>），<code>不能使用</code> <code>exports</code> 输出，<strong>只能使用<code>module.exports</code>输出</strong>。<br>\n——————————————————————————————————————<br>\n<strong>在<code>exports</code>上添加属性，再导出，导出的是一个对象。</strong><br>\n<code>exports.prop = value</code> 等同于 <code>module.exports = {prop:value}</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//example.1.js 在exports添加属性</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> print = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span><span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">exports.print = print;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//example.2.js 将单一的值赋值给 module.exports</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> print = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = print;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//example.3.js 将单一的值赋值给</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> print = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">exports = print;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> example1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./example.1'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> example2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./example.2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> example3 = <span class=\"built_in\">require</span>(<span class=\"string\">'./example.3'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example1);<span class=\"comment\">// &#123; print: [Function: print] &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example2);<span class=\"comment\">// [Function:print]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example3);<span class=\"comment\">// &#123;&#125; 给 exports 赋值只能导出空对象</span></span><br></pre></td></tr></table></figure>\n<p>为了简化，只用 <code>module.exports</code>导出值。</p>\n<h2 id=\"require-命令\"><a class=\"markdownIt-Anchor\" href=\"#require-命令\"></a> require 命令</h2>\n<p><code>require</code>的基本功能是：<strong>读取</strong>并<strong>执行</strong>一个模块，返回该模块的 <code>exports</code>对象，可用解构赋值的方式提取部分属性，没有发现模块，报错。</p>\n<h3 id=\"加载规则\"><a class=\"markdownIt-Anchor\" href=\"#加载规则\"></a> 加载规则</h3>\n<ol>\n<li>参数以 <code>/</code>开头，加载绝对路径下的模块；</li>\n<li>参数以 <code>./</code>开头，加载当前目录下的模块；</li>\n<li>不以 <code>./</code>或 <code>/</code>开头，加载核心模块或依次在各级 <code>node_modules</code>目录的查找；</li>\n<li>想得到包含文件名的完整路径，使用 <code>require.resolve()</code>。</li>\n</ol>\n<h3 id=\"目录的加载规则\"><a class=\"markdownIt-Anchor\" href=\"#目录的加载规则\"></a> 目录的加载规则</h3>\n<p>通常把相关文件放在一个目录下，便于组织。这时最好为目录设置一个<code>入口文件</code>，<code>require</code>方法能根据这个文件，加载整个目录。<br>\n在目录中设置一个 <code>package.json</code>，写入 <code>main</code>字段。<br>\npackage.json 文件由 <code>npm init</code>命令生成，<code>npm init -y</code> 可不用一一回答询问，直接采用默认值，再手动修改。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"name\"</span>:<span class=\"string\">\"some-library\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"main\"</span>:<span class=\"string\">\"./lib/some-library.js\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>require</code>发现参数为一个目录，会先查找该目录下的 <code>package.json</code>文件，加载 <code>main</code>字段指定的入口文件。没有 <code>main</code>字段或者没有<code>package.json</code>文件，则加载该目录下的 <code>index.js</code>文件或者<code>index.node</code>。</p>\n<h3 id=\"node-模块分类\"><a class=\"markdownIt-Anchor\" href=\"#node-模块分类\"></a> node 模块分类</h3>\n<ul>\n<li>\n<p>核心模块，内置在 node 内部的，直接引用即可。</p>\n</li>\n<li>\n<p>第三方模块</p>\n<ul>\n<li>用 npm 下载，安装到程序目录的 <code>node_modules</code>文件夹中；</li>\n<li>模块加载时，会先在核心模块中搜索，再到程序的<code>node_modules</code>文件夹中搜索。</li>\n</ul>\n</li>\n<li>\n<p>文件模块</p>\n</li>\n<li>\n<p>文件夹模块<br>\n按照目录加载机制加载。</p>\n</li>\n</ul>\n<h3 id=\"模块的缓存\"><a class=\"markdownIt-Anchor\" href=\"#模块的缓存\"></a> 模块的缓存</h3>\n<p>第一次加载，以后从缓存中读取<code>module.exports</code>属性。<br>\n所有模块的缓存都保存在 <code>require.cache</code>中。<br>\n删除模块缓存：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除指定模块缓存</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"built_in\">require</span>.cache(moduleName)</span><br><span class=\"line\"><span class=\"comment\">// 删除所有模块缓存</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(<span class=\"built_in\">require</span>.cache).forEach(<span class=\"function\"><span class=\"params\">key</span>=&gt;</span>&#123;<span class=\"keyword\">delete</span> <span class=\"built_in\">require</span>.cache[key]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"requiremain\"><a class=\"markdownIt-Anchor\" href=\"#requiremain\"></a> require.main</h3>\n<p><code>main</code>属性，可用来判断是直接执行还是调用执行。直接执行：<br>\n<code>node module.js</code>，require.main属性指向模块本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接执行 表达式为 true</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>.main === <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure>\n<p>通过 <code>require</code>加载模块执行，上面的表达式为<code>false</code></p>\n<h2 id=\"模块加载机制\"><a class=\"markdownIt-Anchor\" href=\"#模块加载机制\"></a> 模块加载机制</h2>\n<p>模块一旦输出值，模块内部的变化，影响不到这个输出值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> incCounter = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    counter++</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'模块内部'</span>,counter);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'lib'</span>, <span class=\"built_in\">require</span>.main === <span class=\"built_in\">module</span>);<span class=\"comment\">// 被require 执行，输出 false</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    counter,</span><br><span class=\"line\">    incCounter,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.1.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"built_in\">require</span>(<span class=\"string\">'./lib'</span>).counter</span><br><span class=\"line\"><span class=\"keyword\">let</span> incCounter = <span class=\"built_in\">require</span>(<span class=\"string\">'./lib'</span>).incCounter</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'模块外部'</span>, counter);<span class=\"comment\">//3 </span></span><br><span class=\"line\">incCounter();<span class=\"comment\">// 模块内部的值改变为 4 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'模块外部'</span>, counter);<span class=\"comment\">//外部的值 还是为3 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>, <span class=\"built_in\">require</span>.main === <span class=\"built_in\">module</span>);</span><br><span class=\"line\"><span class=\"comment\">// 直接执行，输出 true</span></span><br></pre></td></tr></table></figure>\n<p>最后输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lib <span class=\"literal\">false</span></span><br><span class=\"line\">模块外部 3</span><br><span class=\"line\">模块内部 4</span><br><span class=\"line\">模块外部 3</span><br><span class=\"line\"><span class=\"built_in\">test</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a class=\"markdownIt-Anchor\" href=\"#参考文章\"></a> 参考文章</h2>\n<p><a href=\"https://javascript.ruanyifeng.com/nodejs/module.html\" target=\"_blank\" rel=\"noopener\">CommonJS规范</a><br>\n<a href=\"https://juejin.im/entry/5b2afc3551882574e321dcf1\" target=\"_blank\" rel=\"noopener\">前端模块化（一）nodeJS中的CommonJS规范</a></p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>为了开发大型复杂应用、代码便于管理，制定了不同的 JS 代码模块化规范。</p>\n<ul>\n<li>CommonJS：node 的模块化实现了 CommonJS 规范，<code>同步加载</code>。</li>\n<li>AMD ：异步模块定义规范，<code>异步加载</code>，是 RequireJS 在推广过程中对模块定义的规范产出，推崇依赖前置；</li>\n<li>ES6：ES6 模块化的设计思想是尽量静态化，编译时就能确定模块依赖关系；</li>\n<li>CMD : 是 SeaJS 在推广时对模块定义的规范化产出，推崇依赖就近；</li>\n<li>UMD : 兼容 AMD 和 CommonJS 的规范化的同时，还兼容全局引用的方式。</li>\n</ul>\n<p>CommonJS 规范希望JS代码能在任何地方运行，具备开发大型应用的能力，node 的模块化采用 CommonJS 规范实现。</p>","more":"<p>[TOC]</p>\n<h2 id=\"模块实例\"><a class=\"markdownIt-Anchor\" href=\"#模块实例\"></a> 模块实例</h2>\n<p><strong>一个文件就是一个模块</strong>，有自己的作用域。文件中的变量、函数、类都是私有的，其他文件不可见。</p>\n<p>每个模块内部，<code>module</code>变量代表当前模块。这是一个对象，<code>exports</code> 属性对导入模块的接口，<code>require</code>一个模块，就是加载<code>exports</code>属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> addX = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value + x;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.x = x;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.addX = addX;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> example = <span class=\"built_in\">require</span>(<span class=\"string\">'./example'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example);<span class=\"comment\">//&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example.x);<span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = example.addX(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);<span class=\"comment\">//8</span></span><br></pre></td></tr></table></figure>\n<p>CommonJS 模块特点：</p>\n<blockquote>\n<ol>\n<li>所有代码都运行在模块的作用域内，不会污染全局作用域；</li>\n<li>模块可多次加载，但是只会在第一次加载时运行一次，以后加载从<strong>缓存</strong>中读取。不想要运行该模块，必须清除缓存；</li>\n<li>按照代码出现的顺序加载。</li>\n</ol>\n</blockquote>\n<h2 id=\"module-对象\"><a class=\"markdownIt-Anchor\" href=\"#module-对象\"></a> module 对象</h2>\n<p>node 内部提供了 Module 构建函数。所有模块都是Module 的实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Module</span>(<span class=\"params\">id,parent</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.exports = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.parent = parent;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>module</code> 的属性：</p>\n<blockquote>\n<p>id : 模块识别符，带有<strong>绝对路径</strong>的模块文件名；<br>\nfilename: 模块文件名，带有绝对路径；<br>\nloaded : 布尔值，模块是否加载完成；<br>\nparent ： module 对象，引用本模块的模块；<br>\nchildren : module 数组， 本模块引用的其他模块；<br>\nexports ：对象，本模块的导出值是其属性。</p>\n</blockquote>\n<p>没被其他模块引用的模块通常是程序入口，此时 <code>parent</code> 属性是为 <code>null</code>，可根据该特性判断是否为程序入口。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">module</span>.parent) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ran with `node something.js`</span></span><br><span class=\"line\">    app.listen(<span class=\"number\">8088</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'app listening on port 8088'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// used with `require('/.something.js')`</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = app;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"exports-变量\"><a class=\"markdownIt-Anchor\" href=\"#exports-变量\"></a> exports 变量</h2>\n<p>为了方便，node 为每个模块提供了 exports 变量，指向 <code>module.exports</code>，即</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> exports = <span class=\"built_in\">module</span>.exports</span><br></pre></td></tr></table></figure>\n<p>可向 <code>exports</code>对象加添加属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.area = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI*r*r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>不能直接将exports变量指向一个值，因为这样等于切断了exports = module.exports的联系</strong></p>\n</blockquote>\n<p>一个模块的对外接口，是一个单一的值（<strong>一个函数</strong>或者<strong>一个变量</strong>），<code>不能使用</code> <code>exports</code> 输出，<strong>只能使用<code>module.exports</code>输出</strong>。<br>\n——————————————————————————————————————<br>\n<strong>在<code>exports</code>上添加属性，再导出，导出的是一个对象。</strong><br>\n<code>exports.prop = value</code> 等同于 <code>module.exports = {prop:value}</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//example.1.js 在exports添加属性</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> print = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span><span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">exports.print = print;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//example.2.js 将单一的值赋值给 module.exports</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> print = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = print;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//example.3.js 将单一的值赋值给</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> print = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">exports = print;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> example1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./example.1'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> example2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./example.2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> example3 = <span class=\"built_in\">require</span>(<span class=\"string\">'./example.3'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example1);<span class=\"comment\">// &#123; print: [Function: print] &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example2);<span class=\"comment\">// [Function:print]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(example3);<span class=\"comment\">// &#123;&#125; 给 exports 赋值只能导出空对象</span></span><br></pre></td></tr></table></figure>\n<p>为了简化，只用 <code>module.exports</code>导出值。</p>\n<h2 id=\"require-命令\"><a class=\"markdownIt-Anchor\" href=\"#require-命令\"></a> require 命令</h2>\n<p><code>require</code>的基本功能是：<strong>读取</strong>并<strong>执行</strong>一个模块，返回该模块的 <code>exports</code>对象，可用解构赋值的方式提取部分属性，没有发现模块，报错。</p>\n<h3 id=\"加载规则\"><a class=\"markdownIt-Anchor\" href=\"#加载规则\"></a> 加载规则</h3>\n<ol>\n<li>参数以 <code>/</code>开头，加载绝对路径下的模块；</li>\n<li>参数以 <code>./</code>开头，加载当前目录下的模块；</li>\n<li>不以 <code>./</code>或 <code>/</code>开头，加载核心模块或依次在各级 <code>node_modules</code>目录的查找；</li>\n<li>想得到包含文件名的完整路径，使用 <code>require.resolve()</code>。</li>\n</ol>\n<h3 id=\"目录的加载规则\"><a class=\"markdownIt-Anchor\" href=\"#目录的加载规则\"></a> 目录的加载规则</h3>\n<p>通常把相关文件放在一个目录下，便于组织。这时最好为目录设置一个<code>入口文件</code>，<code>require</code>方法能根据这个文件，加载整个目录。<br>\n在目录中设置一个 <code>package.json</code>，写入 <code>main</code>字段。<br>\npackage.json 文件由 <code>npm init</code>命令生成，<code>npm init -y</code> 可不用一一回答询问，直接采用默认值，再手动修改。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"name\"</span>:<span class=\"string\">\"some-library\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"main\"</span>:<span class=\"string\">\"./lib/some-library.js\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>require</code>发现参数为一个目录，会先查找该目录下的 <code>package.json</code>文件，加载 <code>main</code>字段指定的入口文件。没有 <code>main</code>字段或者没有<code>package.json</code>文件，则加载该目录下的 <code>index.js</code>文件或者<code>index.node</code>。</p>\n<h3 id=\"node-模块分类\"><a class=\"markdownIt-Anchor\" href=\"#node-模块分类\"></a> node 模块分类</h3>\n<ul>\n<li>\n<p>核心模块，内置在 node 内部的，直接引用即可。</p>\n</li>\n<li>\n<p>第三方模块</p>\n<ul>\n<li>用 npm 下载，安装到程序目录的 <code>node_modules</code>文件夹中；</li>\n<li>模块加载时，会先在核心模块中搜索，再到程序的<code>node_modules</code>文件夹中搜索。</li>\n</ul>\n</li>\n<li>\n<p>文件模块</p>\n</li>\n<li>\n<p>文件夹模块<br>\n按照目录加载机制加载。</p>\n</li>\n</ul>\n<h3 id=\"模块的缓存\"><a class=\"markdownIt-Anchor\" href=\"#模块的缓存\"></a> 模块的缓存</h3>\n<p>第一次加载，以后从缓存中读取<code>module.exports</code>属性。<br>\n所有模块的缓存都保存在 <code>require.cache</code>中。<br>\n删除模块缓存：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除指定模块缓存</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"built_in\">require</span>.cache(moduleName)</span><br><span class=\"line\"><span class=\"comment\">// 删除所有模块缓存</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(<span class=\"built_in\">require</span>.cache).forEach(<span class=\"function\"><span class=\"params\">key</span>=&gt;</span>&#123;<span class=\"keyword\">delete</span> <span class=\"built_in\">require</span>.cache[key]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"requiremain\"><a class=\"markdownIt-Anchor\" href=\"#requiremain\"></a> require.main</h3>\n<p><code>main</code>属性，可用来判断是直接执行还是调用执行。直接执行：<br>\n<code>node module.js</code>，require.main属性指向模块本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接执行 表达式为 true</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>.main === <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure>\n<p>通过 <code>require</code>加载模块执行，上面的表达式为<code>false</code></p>\n<h2 id=\"模块加载机制\"><a class=\"markdownIt-Anchor\" href=\"#模块加载机制\"></a> 模块加载机制</h2>\n<p>模块一旦输出值，模块内部的变化，影响不到这个输出值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> incCounter = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    counter++</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'模块内部'</span>,counter);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'lib'</span>, <span class=\"built_in\">require</span>.main === <span class=\"built_in\">module</span>);<span class=\"comment\">// 被require 执行，输出 false</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    counter,</span><br><span class=\"line\">    incCounter,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.1.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"built_in\">require</span>(<span class=\"string\">'./lib'</span>).counter</span><br><span class=\"line\"><span class=\"keyword\">let</span> incCounter = <span class=\"built_in\">require</span>(<span class=\"string\">'./lib'</span>).incCounter</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'模块外部'</span>, counter);<span class=\"comment\">//3 </span></span><br><span class=\"line\">incCounter();<span class=\"comment\">// 模块内部的值改变为 4 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'模块外部'</span>, counter);<span class=\"comment\">//外部的值 还是为3 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>, <span class=\"built_in\">require</span>.main === <span class=\"built_in\">module</span>);</span><br><span class=\"line\"><span class=\"comment\">// 直接执行，输出 true</span></span><br></pre></td></tr></table></figure>\n<p>最后输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lib <span class=\"literal\">false</span></span><br><span class=\"line\">模块外部 3</span><br><span class=\"line\">模块内部 4</span><br><span class=\"line\">模块外部 3</span><br><span class=\"line\"><span class=\"built_in\">test</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a class=\"markdownIt-Anchor\" href=\"#参考文章\"></a> 参考文章</h2>\n<p><a href=\"https://javascript.ruanyifeng.com/nodejs/module.html\" target=\"_blank\" rel=\"noopener\">CommonJS规范</a><br>\n<a href=\"https://juejin.im/entry/5b2afc3551882574e321dcf1\" target=\"_blank\" rel=\"noopener\">前端模块化（一）nodeJS中的CommonJS规范</a></p>"},{"title":"Fetch API 入门使用","date":"2019-06-09T10:30:47.000Z","_content":"html5 引入了新的网络请求接口`Fetch API`，原生支持Promise，可配合 async/await 语法使用。\n\n<!--more-->\n\n## Fetch 实例\n\n使用 fetch 用户数据列表。\n```js\nfetch('/users')\n.then(res=>res.json())//服务器返回的是json\n.then(user=>{console.log(user);})\n.catch(error=>{console.log(error);})\n```\nasync/await 语法\n```js\nasync function getUsers() {\n  try {\n    let res = await fetch('/users');\n    let users = await res.json();\n    console.log(users)\n  } catch (error) {\n   console.log(error)\n  }\n}\n```\nfetch 返回的不是真正需要的数据，而是一个 `Promise`，所有还需要使用它提供的方法进一步获取想要的数据。\n\n##  具体用法\n\n两种调用方式：\n```js\nfetch(url,options)\nfetch(req,options)\n```\n推荐使用第一种，一眼就可以看到url,更加直观。\n\noptions 是一个对象，可设置以下字段：\n- method：请求方法，默认GET;\n- headers：请头信息，可以是简单的对象，也可以是 `Headers` 的实例；\n- body：发送数据。`Blod`、`bufferSource`、`FormData`、`URLSearchParams`、`USVstring`，GET、HEAD 没有body；\n- mode：请求模式。\n  - cors：跨域请求；\n  - no-cors：只允许使用`GET`、`HEAD`、`POST`;\n  - same-origin：同源请求；\n  - navigate：支持页面导航（不太明白）。\n- credentials：是否发送 `cookies`：\n  - omit：不发送，默认；\n  - same-origin：同源发送；\n  - include：发送。\n- cache：缓存策略：\n  - default：请求之前检查缓存；\n  - no-cache：有缓存，发送一个查询请求，缓存失效，再发送正常请求；\n  - no-store：不检查缓存，直接请求；\n  - reload：忽略缓存，拿到响应后，更新缓存；\n  - force-cache：强制读取缓存，缓存过期，再发送正常请求；\n  - only-if-cached：读取缓存，过期就报网络错误。 mode 设置为 `same-origin` 时有效。\n- redirect：重定向时的处理方法：\n  - follow：跟随；\n  - error：报错；\n  - manual：用户手动跟随。\n- integrity：包含一个验证资源完整性的字符串。\n\n## Headers \n\nHeaders 用于构造请求头信息，构造函数接收一个对象，对象的`key-value`就是请求头的信息。\n\n```js\nlet headers = new Headers(\n  {\n    'content-type':'text/plain',\n    'content-length':data.toString().length\n  }\n);\nheaders.append('X-Custom-header','AnotherValue');//追加\nheaders.has('content-type');//true 查询\nheaders.get('content-type');//'text/plain' 获取\n// headers.getAll('content-type');//['text/plain'] getAll 被移除了\nheaders.delete('content-type');//删除\nheaders.set('content-type','json');//重写\n```\n\n## Request\n\n请求对象。可以新建一个，也可以从已有的对象中继承。\n\n```js\nlet Url = '/users';\nlet req = new Request(Url,{method:'GET',headers})\n// 扩展 request\nlet postReq= new Requset(req,{method:'POST'})\n```\n\n## Response\n\nResponse 实例是 fertch 处理完 promise 之后的返回的。也可以手动创建，在`servoceWorkers` 中才真实有用。\n```js\nlet res = new Response(body,init)\n```\nbody 可以是`Bolb`、`BufferSource`、`FormData`、`URLSearchParams`、`USVString` 这些值。\n\ninit 是一个对象，可包含以下字段：\n- status：响应状态码；\n- statusText：状态文本；\n- headers：头部信息，普通对象或Headers 的实例。\n\nresponse 的实例还有一些可读属性：\n- ok：请求是否成功，状态码为 2xx 都为 `true` ；\n- status：状态码；\n- statusText：状态文本；\n- bodyUesed：响应数据是否被用过；\n- headers：头部信息；\n- url：响应地址；\n- type：响应类型：\n  - basic：同源；\n  - cors：跨域；\n  - error：出错；\n  - opaque：Request mode 设置为 `no-cors` 的响应。\n\nresponse 有一些方法来 reslove 响应信息。\n- json，解析响应信息为对象，resolve promise；\n- text，…………字符串…………；\n- bolb，转化响应Bold，resolve;\n- formData,………………；\n- arrayBuffer，…………。\n\n## Fetch Vs AJAX\n\n- 响应状态为404或5xx，都resolve，但是 `ok` 为false。只有当网络故障或者请求被阻止了，才会 `reject`；\n- 默认情况不发送不接收cookies，需要设置；\n- POST 的数据需要转为JSON;\n- 不能设置超时和取消请求，可以通过`Promise.race`，了模拟两者；\n- 文件上传和下载获取不到进度，可使用 response.body 是可读流，具有`getReader`，可根据这个来获取下载进度。；\n- 不能直接获取到响应数据，需要调用响应方法，resolve 一下；\n\n## 总结\n\n- Fetch API 很底层，使用起来并不丝滑；\n- Fetch 错误处理有点复杂；\n- Fetch 不支持取消和超时设置；\n- 上传和下载进度没有，使用可读流来获取，复杂性突然升高了。\n\n还是使用原生的 xhr 和 axios 库来的爽快。\n\n## 参考\n\n- [Fetch: Download progress](https://javascript.info/fetch-progress)\n- [Fetch: Abort](https://javascript.info/fetch-abort)\n- [了解 Fetch API](https://aotu.io/notes/2017/04/10/fetch-API/index.html)\n- [Fetch进阶指南](http://louiszhai.github.io/2016/11/02/fetch/)","source":"_posts/Fetch-API-入门使用.md","raw":"---\ntitle: Fetch API 入门使用\ndate: 2019-06-09 18:30:47\ntags:\n- fetch\n- html5\ncategories:\n- [网络]\n- [html5]\n---\nhtml5 引入了新的网络请求接口`Fetch API`，原生支持Promise，可配合 async/await 语法使用。\n\n<!--more-->\n\n## Fetch 实例\n\n使用 fetch 用户数据列表。\n```js\nfetch('/users')\n.then(res=>res.json())//服务器返回的是json\n.then(user=>{console.log(user);})\n.catch(error=>{console.log(error);})\n```\nasync/await 语法\n```js\nasync function getUsers() {\n  try {\n    let res = await fetch('/users');\n    let users = await res.json();\n    console.log(users)\n  } catch (error) {\n   console.log(error)\n  }\n}\n```\nfetch 返回的不是真正需要的数据，而是一个 `Promise`，所有还需要使用它提供的方法进一步获取想要的数据。\n\n##  具体用法\n\n两种调用方式：\n```js\nfetch(url,options)\nfetch(req,options)\n```\n推荐使用第一种，一眼就可以看到url,更加直观。\n\noptions 是一个对象，可设置以下字段：\n- method：请求方法，默认GET;\n- headers：请头信息，可以是简单的对象，也可以是 `Headers` 的实例；\n- body：发送数据。`Blod`、`bufferSource`、`FormData`、`URLSearchParams`、`USVstring`，GET、HEAD 没有body；\n- mode：请求模式。\n  - cors：跨域请求；\n  - no-cors：只允许使用`GET`、`HEAD`、`POST`;\n  - same-origin：同源请求；\n  - navigate：支持页面导航（不太明白）。\n- credentials：是否发送 `cookies`：\n  - omit：不发送，默认；\n  - same-origin：同源发送；\n  - include：发送。\n- cache：缓存策略：\n  - default：请求之前检查缓存；\n  - no-cache：有缓存，发送一个查询请求，缓存失效，再发送正常请求；\n  - no-store：不检查缓存，直接请求；\n  - reload：忽略缓存，拿到响应后，更新缓存；\n  - force-cache：强制读取缓存，缓存过期，再发送正常请求；\n  - only-if-cached：读取缓存，过期就报网络错误。 mode 设置为 `same-origin` 时有效。\n- redirect：重定向时的处理方法：\n  - follow：跟随；\n  - error：报错；\n  - manual：用户手动跟随。\n- integrity：包含一个验证资源完整性的字符串。\n\n## Headers \n\nHeaders 用于构造请求头信息，构造函数接收一个对象，对象的`key-value`就是请求头的信息。\n\n```js\nlet headers = new Headers(\n  {\n    'content-type':'text/plain',\n    'content-length':data.toString().length\n  }\n);\nheaders.append('X-Custom-header','AnotherValue');//追加\nheaders.has('content-type');//true 查询\nheaders.get('content-type');//'text/plain' 获取\n// headers.getAll('content-type');//['text/plain'] getAll 被移除了\nheaders.delete('content-type');//删除\nheaders.set('content-type','json');//重写\n```\n\n## Request\n\n请求对象。可以新建一个，也可以从已有的对象中继承。\n\n```js\nlet Url = '/users';\nlet req = new Request(Url,{method:'GET',headers})\n// 扩展 request\nlet postReq= new Requset(req,{method:'POST'})\n```\n\n## Response\n\nResponse 实例是 fertch 处理完 promise 之后的返回的。也可以手动创建，在`servoceWorkers` 中才真实有用。\n```js\nlet res = new Response(body,init)\n```\nbody 可以是`Bolb`、`BufferSource`、`FormData`、`URLSearchParams`、`USVString` 这些值。\n\ninit 是一个对象，可包含以下字段：\n- status：响应状态码；\n- statusText：状态文本；\n- headers：头部信息，普通对象或Headers 的实例。\n\nresponse 的实例还有一些可读属性：\n- ok：请求是否成功，状态码为 2xx 都为 `true` ；\n- status：状态码；\n- statusText：状态文本；\n- bodyUesed：响应数据是否被用过；\n- headers：头部信息；\n- url：响应地址；\n- type：响应类型：\n  - basic：同源；\n  - cors：跨域；\n  - error：出错；\n  - opaque：Request mode 设置为 `no-cors` 的响应。\n\nresponse 有一些方法来 reslove 响应信息。\n- json，解析响应信息为对象，resolve promise；\n- text，…………字符串…………；\n- bolb，转化响应Bold，resolve;\n- formData,………………；\n- arrayBuffer，…………。\n\n## Fetch Vs AJAX\n\n- 响应状态为404或5xx，都resolve，但是 `ok` 为false。只有当网络故障或者请求被阻止了，才会 `reject`；\n- 默认情况不发送不接收cookies，需要设置；\n- POST 的数据需要转为JSON;\n- 不能设置超时和取消请求，可以通过`Promise.race`，了模拟两者；\n- 文件上传和下载获取不到进度，可使用 response.body 是可读流，具有`getReader`，可根据这个来获取下载进度。；\n- 不能直接获取到响应数据，需要调用响应方法，resolve 一下；\n\n## 总结\n\n- Fetch API 很底层，使用起来并不丝滑；\n- Fetch 错误处理有点复杂；\n- Fetch 不支持取消和超时设置；\n- 上传和下载进度没有，使用可读流来获取，复杂性突然升高了。\n\n还是使用原生的 xhr 和 axios 库来的爽快。\n\n## 参考\n\n- [Fetch: Download progress](https://javascript.info/fetch-progress)\n- [Fetch: Abort](https://javascript.info/fetch-abort)\n- [了解 Fetch API](https://aotu.io/notes/2017/04/10/fetch-API/index.html)\n- [Fetch进阶指南](http://louiszhai.github.io/2016/11/02/fetch/)","slug":"Fetch-API-入门使用","published":1,"updated":"2019-06-09T16:41:35.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7ccce8000ejwrn8pndqjbz","content":"<p>html5 引入了新的网络请求接口<code>Fetch API</code>，原生支持Promise，可配合 async/await 语法使用。</p>\n<a id=\"more\"></a>\n<h2 id=\"fetch-实例\"><a class=\"markdownIt-Anchor\" href=\"#fetch-实例\"></a> Fetch 实例</h2>\n<p>使用 fetch 用户数据列表。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">'/users'</span>)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json())<span class=\"comment\">//服务器返回的是json</span></span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">user</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(user);&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(error);&#125;)</span><br></pre></td></tr></table></figure>\n<p>async/await 语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUsers</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'/users'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> users = <span class=\"keyword\">await</span> res.json();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(users)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>fetch 返回的不是真正需要的数据，而是一个 <code>Promise</code>，所有还需要使用它提供的方法进一步获取想要的数据。</p>\n<h2 id=\"具体用法\"><a class=\"markdownIt-Anchor\" href=\"#具体用法\"></a> 具体用法</h2>\n<p>两种调用方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url,options)</span><br><span class=\"line\">fetch(req,options)</span><br></pre></td></tr></table></figure>\n<p>推荐使用第一种，一眼就可以看到url,更加直观。</p>\n<p>options 是一个对象，可设置以下字段：</p>\n<ul>\n<li>method：请求方法，默认GET;</li>\n<li>headers：请头信息，可以是简单的对象，也可以是 <code>Headers</code> 的实例；</li>\n<li>body：发送数据。<code>Blod</code>、<code>bufferSource</code>、<code>FormData</code>、<code>URLSearchParams</code>、<code>USVstring</code>，GET、HEAD 没有body；</li>\n<li>mode：请求模式。\n<ul>\n<li>cors：跨域请求；</li>\n<li>no-cors：只允许使用<code>GET</code>、<code>HEAD</code>、<code>POST</code>;</li>\n<li>same-origin：同源请求；</li>\n<li>navigate：支持页面导航（不太明白）。</li>\n</ul>\n</li>\n<li>credentials：是否发送 <code>cookies</code>：\n<ul>\n<li>omit：不发送，默认；</li>\n<li>same-origin：同源发送；</li>\n<li>include：发送。</li>\n</ul>\n</li>\n<li>cache：缓存策略：\n<ul>\n<li>default：请求之前检查缓存；</li>\n<li>no-cache：有缓存，发送一个查询请求，缓存失效，再发送正常请求；</li>\n<li>no-store：不检查缓存，直接请求；</li>\n<li>reload：忽略缓存，拿到响应后，更新缓存；</li>\n<li>force-cache：强制读取缓存，缓存过期，再发送正常请求；</li>\n<li>only-if-cached：读取缓存，过期就报网络错误。 mode 设置为 <code>same-origin</code> 时有效。</li>\n</ul>\n</li>\n<li>redirect：重定向时的处理方法：\n<ul>\n<li>follow：跟随；</li>\n<li>error：报错；</li>\n<li>manual：用户手动跟随。</li>\n</ul>\n</li>\n<li>integrity：包含一个验证资源完整性的字符串。</li>\n</ul>\n<h2 id=\"headers\"><a class=\"markdownIt-Anchor\" href=\"#headers\"></a> Headers</h2>\n<p>Headers 用于构造请求头信息，构造函数接收一个对象，对象的<code>key-value</code>就是请求头的信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> headers = <span class=\"keyword\">new</span> Headers(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">'content-type'</span>:<span class=\"string\">'text/plain'</span>,</span><br><span class=\"line\">    <span class=\"string\">'content-length'</span>:data.toString().length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">headers.append(<span class=\"string\">'X-Custom-header'</span>,<span class=\"string\">'AnotherValue'</span>);<span class=\"comment\">//追加</span></span><br><span class=\"line\">headers.has(<span class=\"string\">'content-type'</span>);<span class=\"comment\">//true 查询</span></span><br><span class=\"line\">headers.get(<span class=\"string\">'content-type'</span>);<span class=\"comment\">//'text/plain' 获取</span></span><br><span class=\"line\"><span class=\"comment\">// headers.getAll('content-type');//['text/plain'] getAll 被移除了</span></span><br><span class=\"line\">headers.delete(<span class=\"string\">'content-type'</span>);<span class=\"comment\">//删除</span></span><br><span class=\"line\">headers.set(<span class=\"string\">'content-type'</span>,<span class=\"string\">'json'</span>);<span class=\"comment\">//重写</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"request\"><a class=\"markdownIt-Anchor\" href=\"#request\"></a> Request</h2>\n<p>请求对象。可以新建一个，也可以从已有的对象中继承。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Url = <span class=\"string\">'/users'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> req = <span class=\"keyword\">new</span> Request(Url,&#123;<span class=\"attr\">method</span>:<span class=\"string\">'GET'</span>,headers&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 扩展 request</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> postReq= <span class=\"keyword\">new</span> Requset(req,&#123;<span class=\"attr\">method</span>:<span class=\"string\">'POST'</span>&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"response\"><a class=\"markdownIt-Anchor\" href=\"#response\"></a> Response</h2>\n<p>Response 实例是 fertch 处理完 promise 之后的返回的。也可以手动创建，在<code>servoceWorkers</code> 中才真实有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = <span class=\"keyword\">new</span> Response(body,init)</span><br></pre></td></tr></table></figure>\n<p>body 可以是<code>Bolb</code>、<code>BufferSource</code>、<code>FormData</code>、<code>URLSearchParams</code>、<code>USVString</code> 这些值。</p>\n<p>init 是一个对象，可包含以下字段：</p>\n<ul>\n<li>status：响应状态码；</li>\n<li>statusText：状态文本；</li>\n<li>headers：头部信息，普通对象或Headers 的实例。</li>\n</ul>\n<p>response 的实例还有一些可读属性：</p>\n<ul>\n<li>ok：请求是否成功，状态码为 2xx 都为 <code>true</code> ；</li>\n<li>status：状态码；</li>\n<li>statusText：状态文本；</li>\n<li>bodyUesed：响应数据是否被用过；</li>\n<li>headers：头部信息；</li>\n<li>url：响应地址；</li>\n<li>type：响应类型：\n<ul>\n<li>basic：同源；</li>\n<li>cors：跨域；</li>\n<li>error：出错；</li>\n<li>opaque：Request mode 设置为 <code>no-cors</code> 的响应。</li>\n</ul>\n</li>\n</ul>\n<p>response 有一些方法来 reslove 响应信息。</p>\n<ul>\n<li>json，解析响应信息为对象，resolve promise；</li>\n<li>text，…………字符串…………；</li>\n<li>bolb，转化响应Bold，resolve;</li>\n<li>formData,………………；</li>\n<li>arrayBuffer，…………。</li>\n</ul>\n<h2 id=\"fetch-vs-ajax\"><a class=\"markdownIt-Anchor\" href=\"#fetch-vs-ajax\"></a> Fetch Vs AJAX</h2>\n<ul>\n<li>响应状态为404或5xx，都resolve，但是 <code>ok</code> 为false。只有当网络故障或者请求被阻止了，才会 <code>reject</code>；</li>\n<li>默认情况不发送不接收cookies，需要设置；</li>\n<li>POST 的数据需要转为JSON;</li>\n<li>不能设置超时和取消请求，可以通过<code>Promise.race</code>，了模拟两者；</li>\n<li>文件上传和下载获取不到进度，可使用 response.body 是可读流，具有<code>getReader</code>，可根据这个来获取下载进度。；</li>\n<li>不能直接获取到响应数据，需要调用响应方法，resolve 一下；</li>\n</ul>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<ul>\n<li>Fetch API 很底层，使用起来并不丝滑；</li>\n<li>Fetch 错误处理有点复杂；</li>\n<li>Fetch 不支持取消和超时设置；</li>\n<li>上传和下载进度没有，使用可读流来获取，复杂性突然升高了。</li>\n</ul>\n<p>还是使用原生的 xhr 和 axios 库来的爽快。</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://javascript.info/fetch-progress\" target=\"_blank\" rel=\"noopener\">Fetch: Download progress</a></li>\n<li><a href=\"https://javascript.info/fetch-abort\" target=\"_blank\" rel=\"noopener\">Fetch: Abort</a></li>\n<li><a href=\"https://aotu.io/notes/2017/04/10/fetch-API/index.html\" target=\"_blank\" rel=\"noopener\">了解 Fetch API</a></li>\n<li><a href=\"http://louiszhai.github.io/2016/11/02/fetch/\" target=\"_blank\" rel=\"noopener\">Fetch进阶指南</a></li>\n</ul>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>html5 引入了新的网络请求接口<code>Fetch API</code>，原生支持Promise，可配合 async/await 语法使用。</p>","more":"<h2 id=\"fetch-实例\"><a class=\"markdownIt-Anchor\" href=\"#fetch-实例\"></a> Fetch 实例</h2>\n<p>使用 fetch 用户数据列表。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">'/users'</span>)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json())<span class=\"comment\">//服务器返回的是json</span></span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">user</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(user);&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(error);&#125;)</span><br></pre></td></tr></table></figure>\n<p>async/await 语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUsers</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'/users'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> users = <span class=\"keyword\">await</span> res.json();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(users)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>fetch 返回的不是真正需要的数据，而是一个 <code>Promise</code>，所有还需要使用它提供的方法进一步获取想要的数据。</p>\n<h2 id=\"具体用法\"><a class=\"markdownIt-Anchor\" href=\"#具体用法\"></a> 具体用法</h2>\n<p>两种调用方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url,options)</span><br><span class=\"line\">fetch(req,options)</span><br></pre></td></tr></table></figure>\n<p>推荐使用第一种，一眼就可以看到url,更加直观。</p>\n<p>options 是一个对象，可设置以下字段：</p>\n<ul>\n<li>method：请求方法，默认GET;</li>\n<li>headers：请头信息，可以是简单的对象，也可以是 <code>Headers</code> 的实例；</li>\n<li>body：发送数据。<code>Blod</code>、<code>bufferSource</code>、<code>FormData</code>、<code>URLSearchParams</code>、<code>USVstring</code>，GET、HEAD 没有body；</li>\n<li>mode：请求模式。\n<ul>\n<li>cors：跨域请求；</li>\n<li>no-cors：只允许使用<code>GET</code>、<code>HEAD</code>、<code>POST</code>;</li>\n<li>same-origin：同源请求；</li>\n<li>navigate：支持页面导航（不太明白）。</li>\n</ul>\n</li>\n<li>credentials：是否发送 <code>cookies</code>：\n<ul>\n<li>omit：不发送，默认；</li>\n<li>same-origin：同源发送；</li>\n<li>include：发送。</li>\n</ul>\n</li>\n<li>cache：缓存策略：\n<ul>\n<li>default：请求之前检查缓存；</li>\n<li>no-cache：有缓存，发送一个查询请求，缓存失效，再发送正常请求；</li>\n<li>no-store：不检查缓存，直接请求；</li>\n<li>reload：忽略缓存，拿到响应后，更新缓存；</li>\n<li>force-cache：强制读取缓存，缓存过期，再发送正常请求；</li>\n<li>only-if-cached：读取缓存，过期就报网络错误。 mode 设置为 <code>same-origin</code> 时有效。</li>\n</ul>\n</li>\n<li>redirect：重定向时的处理方法：\n<ul>\n<li>follow：跟随；</li>\n<li>error：报错；</li>\n<li>manual：用户手动跟随。</li>\n</ul>\n</li>\n<li>integrity：包含一个验证资源完整性的字符串。</li>\n</ul>\n<h2 id=\"headers\"><a class=\"markdownIt-Anchor\" href=\"#headers\"></a> Headers</h2>\n<p>Headers 用于构造请求头信息，构造函数接收一个对象，对象的<code>key-value</code>就是请求头的信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> headers = <span class=\"keyword\">new</span> Headers(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">'content-type'</span>:<span class=\"string\">'text/plain'</span>,</span><br><span class=\"line\">    <span class=\"string\">'content-length'</span>:data.toString().length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">headers.append(<span class=\"string\">'X-Custom-header'</span>,<span class=\"string\">'AnotherValue'</span>);<span class=\"comment\">//追加</span></span><br><span class=\"line\">headers.has(<span class=\"string\">'content-type'</span>);<span class=\"comment\">//true 查询</span></span><br><span class=\"line\">headers.get(<span class=\"string\">'content-type'</span>);<span class=\"comment\">//'text/plain' 获取</span></span><br><span class=\"line\"><span class=\"comment\">// headers.getAll('content-type');//['text/plain'] getAll 被移除了</span></span><br><span class=\"line\">headers.delete(<span class=\"string\">'content-type'</span>);<span class=\"comment\">//删除</span></span><br><span class=\"line\">headers.set(<span class=\"string\">'content-type'</span>,<span class=\"string\">'json'</span>);<span class=\"comment\">//重写</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"request\"><a class=\"markdownIt-Anchor\" href=\"#request\"></a> Request</h2>\n<p>请求对象。可以新建一个，也可以从已有的对象中继承。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Url = <span class=\"string\">'/users'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> req = <span class=\"keyword\">new</span> Request(Url,&#123;<span class=\"attr\">method</span>:<span class=\"string\">'GET'</span>,headers&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 扩展 request</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> postReq= <span class=\"keyword\">new</span> Requset(req,&#123;<span class=\"attr\">method</span>:<span class=\"string\">'POST'</span>&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"response\"><a class=\"markdownIt-Anchor\" href=\"#response\"></a> Response</h2>\n<p>Response 实例是 fertch 处理完 promise 之后的返回的。也可以手动创建，在<code>servoceWorkers</code> 中才真实有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> res = <span class=\"keyword\">new</span> Response(body,init)</span><br></pre></td></tr></table></figure>\n<p>body 可以是<code>Bolb</code>、<code>BufferSource</code>、<code>FormData</code>、<code>URLSearchParams</code>、<code>USVString</code> 这些值。</p>\n<p>init 是一个对象，可包含以下字段：</p>\n<ul>\n<li>status：响应状态码；</li>\n<li>statusText：状态文本；</li>\n<li>headers：头部信息，普通对象或Headers 的实例。</li>\n</ul>\n<p>response 的实例还有一些可读属性：</p>\n<ul>\n<li>ok：请求是否成功，状态码为 2xx 都为 <code>true</code> ；</li>\n<li>status：状态码；</li>\n<li>statusText：状态文本；</li>\n<li>bodyUesed：响应数据是否被用过；</li>\n<li>headers：头部信息；</li>\n<li>url：响应地址；</li>\n<li>type：响应类型：\n<ul>\n<li>basic：同源；</li>\n<li>cors：跨域；</li>\n<li>error：出错；</li>\n<li>opaque：Request mode 设置为 <code>no-cors</code> 的响应。</li>\n</ul>\n</li>\n</ul>\n<p>response 有一些方法来 reslove 响应信息。</p>\n<ul>\n<li>json，解析响应信息为对象，resolve promise；</li>\n<li>text，…………字符串…………；</li>\n<li>bolb，转化响应Bold，resolve;</li>\n<li>formData,………………；</li>\n<li>arrayBuffer，…………。</li>\n</ul>\n<h2 id=\"fetch-vs-ajax\"><a class=\"markdownIt-Anchor\" href=\"#fetch-vs-ajax\"></a> Fetch Vs AJAX</h2>\n<ul>\n<li>响应状态为404或5xx，都resolve，但是 <code>ok</code> 为false。只有当网络故障或者请求被阻止了，才会 <code>reject</code>；</li>\n<li>默认情况不发送不接收cookies，需要设置；</li>\n<li>POST 的数据需要转为JSON;</li>\n<li>不能设置超时和取消请求，可以通过<code>Promise.race</code>，了模拟两者；</li>\n<li>文件上传和下载获取不到进度，可使用 response.body 是可读流，具有<code>getReader</code>，可根据这个来获取下载进度。；</li>\n<li>不能直接获取到响应数据，需要调用响应方法，resolve 一下；</li>\n</ul>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<ul>\n<li>Fetch API 很底层，使用起来并不丝滑；</li>\n<li>Fetch 错误处理有点复杂；</li>\n<li>Fetch 不支持取消和超时设置；</li>\n<li>上传和下载进度没有，使用可读流来获取，复杂性突然升高了。</li>\n</ul>\n<p>还是使用原生的 xhr 和 axios 库来的爽快。</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://javascript.info/fetch-progress\" target=\"_blank\" rel=\"noopener\">Fetch: Download progress</a></li>\n<li><a href=\"https://javascript.info/fetch-abort\" target=\"_blank\" rel=\"noopener\">Fetch: Abort</a></li>\n<li><a href=\"https://aotu.io/notes/2017/04/10/fetch-API/index.html\" target=\"_blank\" rel=\"noopener\">了解 Fetch API</a></li>\n<li><a href=\"http://louiszhai.github.io/2016/11/02/fetch/\" target=\"_blank\" rel=\"noopener\">Fetch进阶指南</a></li>\n</ul>"},{"title":"MIME Type","date":"2019-06-16T13:06:07.000Z","_content":"MIME（Multipurpose Internet Mail Extensions）网络多用途邮件扩展，告知某种扩展名的文件用特定软件打开或处理，也叫 Media Type（Internet Media Type）媒体类型，浏览器从 HTTP 消息头字段 Content-Type 得知资源类型，从而能正确处理网络中传递的资源，实际上媒体类型就是指定`content-type`的值。\n用 /  区分类型和子类型，类型指定多个类型，子类型更加明确的指定类型。不区分大小写，惯例用小写。\n\n<!--more-->\n\n## 常见的媒体类型：\n\n- <span style=\"color:blue\">text/html：HTML 格式</span>\n- <span style=\"color:blue\">text/plain：普通文本</span>\n- text/xml : XML 格式\n- image/gif : gif 图片\n- image/jpg : jpg 图片\n- image/png : png 图片\n## 以 application 开头的媒体类型\n\n-  <span style=\"color:blue\">application/json ：JSON格式数据</span>\n-  <span style=\"color:blue\">application/x-www-form-urlencoded：form 表单默认以 `key1=val1&key2=val2` 的格式发送数据到服务器（表单默认提交的数据格式），并对key和value进行url编码\"</span>\n- application/pdf：pdf 格式\n- application/msword ： Word文档格式\n- application/octet-stream ： 二进制流数据（如常见的文件下载）\n- application/xml ： XML数据格式\n- application/atom+xml ：Atom XML 聚合格式\n- application/xhtml+xml  ：XHTML 格式\n- application/xml : XML 数据格式\n\n##上传文件\n\n- <span style=\"color:blue\">multipart/form-data : 在表单中提交文件 enctype=\"multipart/form-data\"</span> 。也可传输`key=value` 数据，性能损耗大，不推荐。\n\n>蓝色更为常用","source":"_posts/MIME-Type.md","raw":"---\ntitle: MIME Type\ndate: 2019-06-16 21:06:07\ntags:\n- http\ncategories:\n- [网络]\n---\nMIME（Multipurpose Internet Mail Extensions）网络多用途邮件扩展，告知某种扩展名的文件用特定软件打开或处理，也叫 Media Type（Internet Media Type）媒体类型，浏览器从 HTTP 消息头字段 Content-Type 得知资源类型，从而能正确处理网络中传递的资源，实际上媒体类型就是指定`content-type`的值。\n用 /  区分类型和子类型，类型指定多个类型，子类型更加明确的指定类型。不区分大小写，惯例用小写。\n\n<!--more-->\n\n## 常见的媒体类型：\n\n- <span style=\"color:blue\">text/html：HTML 格式</span>\n- <span style=\"color:blue\">text/plain：普通文本</span>\n- text/xml : XML 格式\n- image/gif : gif 图片\n- image/jpg : jpg 图片\n- image/png : png 图片\n## 以 application 开头的媒体类型\n\n-  <span style=\"color:blue\">application/json ：JSON格式数据</span>\n-  <span style=\"color:blue\">application/x-www-form-urlencoded：form 表单默认以 `key1=val1&key2=val2` 的格式发送数据到服务器（表单默认提交的数据格式），并对key和value进行url编码\"</span>\n- application/pdf：pdf 格式\n- application/msword ： Word文档格式\n- application/octet-stream ： 二进制流数据（如常见的文件下载）\n- application/xml ： XML数据格式\n- application/atom+xml ：Atom XML 聚合格式\n- application/xhtml+xml  ：XHTML 格式\n- application/xml : XML 数据格式\n\n##上传文件\n\n- <span style=\"color:blue\">multipart/form-data : 在表单中提交文件 enctype=\"multipart/form-data\"</span> 。也可传输`key=value` 数据，性能损耗大，不推荐。\n\n>蓝色更为常用","slug":"MIME-Type","published":1,"updated":"2019-06-16T13:12:27.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7ccceb000hjwrnyczpk94v","content":"<p>MIME（Multipurpose Internet Mail Extensions）网络多用途邮件扩展，告知某种扩展名的文件用特定软件打开或处理，也叫 Media Type（Internet Media Type）媒体类型，浏览器从 HTTP 消息头字段 Content-Type 得知资源类型，从而能正确处理网络中传递的资源，实际上媒体类型就是指定<code>content-type</code>的值。<br>\n用 /  区分类型和子类型，类型指定多个类型，子类型更加明确的指定类型。不区分大小写，惯例用小写。</p>\n<a id=\"more\"></a>\n<h2 id=\"常见的媒体类型\"><a class=\"markdownIt-Anchor\" href=\"#常见的媒体类型\"></a> 常见的媒体类型：</h2>\n<ul>\n<li><span style=\"color:blue\">text/html：HTML 格式</span></li>\n<li><span style=\"color:blue\">text/plain：普通文本</span></li>\n<li>text/xml : XML 格式</li>\n<li>image/gif : gif 图片</li>\n<li>image/jpg : jpg 图片</li>\n<li>image/png : png 图片</li>\n</ul>\n<h2 id=\"以-application-开头的媒体类型\"><a class=\"markdownIt-Anchor\" href=\"#以-application-开头的媒体类型\"></a> 以 application 开头的媒体类型</h2>\n<ul>\n<li><span style=\"color:blue\">application/json ：JSON格式数据</span></li>\n<li><span style=\"color:blue\">application/x-www-form-urlencoded：form 表单默认以 <code>key1=val1&amp;key2=val2</code> 的格式发送数据到服务器（表单默认提交的数据格式），并对key和value进行url编码&quot;</span></li>\n<li>application/pdf：pdf 格式</li>\n<li>application/msword ： Word文档格式</li>\n<li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li>\n<li>application/xml ： XML数据格式</li>\n<li>application/atom+xml ：Atom XML 聚合格式</li>\n<li>application/xhtml+xml  ：XHTML 格式</li>\n<li>application/xml : XML 数据格式</li>\n</ul>\n<p>##上传文件</p>\n<ul>\n<li><span style=\"color:blue\">multipart/form-data : 在表单中提交文件 enctype=“multipart/form-data”</span> 。也可传输<code>key=value</code> 数据，性能损耗大，不推荐。</li>\n</ul>\n<blockquote>\n<p>蓝色更为常用</p>\n</blockquote>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>MIME（Multipurpose Internet Mail Extensions）网络多用途邮件扩展，告知某种扩展名的文件用特定软件打开或处理，也叫 Media Type（Internet Media Type）媒体类型，浏览器从 HTTP 消息头字段 Content-Type 得知资源类型，从而能正确处理网络中传递的资源，实际上媒体类型就是指定<code>content-type</code>的值。<br>\n用 /  区分类型和子类型，类型指定多个类型，子类型更加明确的指定类型。不区分大小写，惯例用小写。</p>","more":"<h2 id=\"常见的媒体类型\"><a class=\"markdownIt-Anchor\" href=\"#常见的媒体类型\"></a> 常见的媒体类型：</h2>\n<ul>\n<li><span style=\"color:blue\">text/html：HTML 格式</span></li>\n<li><span style=\"color:blue\">text/plain：普通文本</span></li>\n<li>text/xml : XML 格式</li>\n<li>image/gif : gif 图片</li>\n<li>image/jpg : jpg 图片</li>\n<li>image/png : png 图片</li>\n</ul>\n<h2 id=\"以-application-开头的媒体类型\"><a class=\"markdownIt-Anchor\" href=\"#以-application-开头的媒体类型\"></a> 以 application 开头的媒体类型</h2>\n<ul>\n<li><span style=\"color:blue\">application/json ：JSON格式数据</span></li>\n<li><span style=\"color:blue\">application/x-www-form-urlencoded：form 表单默认以 <code>key1=val1&amp;key2=val2</code> 的格式发送数据到服务器（表单默认提交的数据格式），并对key和value进行url编码&quot;</span></li>\n<li>application/pdf：pdf 格式</li>\n<li>application/msword ： Word文档格式</li>\n<li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li>\n<li>application/xml ： XML数据格式</li>\n<li>application/atom+xml ：Atom XML 聚合格式</li>\n<li>application/xhtml+xml  ：XHTML 格式</li>\n<li>application/xml : XML 数据格式</li>\n</ul>\n<p>##上传文件</p>\n<ul>\n<li><span style=\"color:blue\">multipart/form-data : 在表单中提交文件 enctype=“multipart/form-data”</span> 。也可传输<code>key=value</code> 数据，性能损耗大，不推荐。</li>\n</ul>\n<blockquote>\n<p>蓝色更为常用</p>\n</blockquote>"},{"title":"NPM 使用教程","date":"2019-05-18T08:18:12.000Z","git_issue_id":1,"_content":"​    npm 是[npm包托管组织](https://www.npmjs.com/)开发的 node 包管理工具，使用它可下载、卸载、更新、发布 npm 包，从而实现代码的共享和复用，node 开发必须掌握，前端工程化基于 node，因此，npm 技能是前端必须知道的。安装了 node，npm就集成在里面了，无需另外安装。\n<!--more-->\n\n## NPM 是什么\n\nnpm (**node packge manager**) ，node 包管理工具，主要功能就是管理node包：安装、卸载、更新、查看、搜索、发布等。\nnpm 的背后，有一个 couchdb（一个json数据库或者非关系型数据库）,详细记录了每个包的信息：作者、版本、依赖、授权信息等。\nnpm的重要作用：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，专注功能开发，建立了一个node生态圈，实现node`代码共享、复用`。\n[NPM官网](https://npmjs.org)\n```bash\nnpm install npm@latest -g #更新 npm\nnpm help # 帮助命令\nnpm <command> -h #某条命令的用法\nnpm -v #版本信息\nnpm -l #常用命令信息\nnpm config list #npm  配置信息\nnpm config list -l # 默认配置信息列表\nnpm init #初始化 package.json文件\nnpm init -y #初始化 package.json 跳过询问\nnpm init --yes\nnpm ls # 查看当前包的依赖\n```\n依赖名称注意事项：\n- 不与 node 核心模块同名；\n- 不得使用 js 或者 node\n- name 会成为url、命令行、或者一个文件夹的名，非法url字符不允许，不以`_`或`.`开头\n- 不得含有大写字母\n\n配置相关：\n```bash\nnpm config set key value\nnpm config get key\nnpm config get prefix # 查看npm安装前缀\nnpm config get cache # npm 缓存目录\n```\n## NPM能做什么\n\n### 安装模式\n\n**本地安装 vs  全局安装**\n`本地安装`：package会下载到`当前目录`的`node_modules`文件夹内，只能在当前目录下使用，一个项目使用到的依赖，采用本地安装。\n`全局安装`：package会被下载到特定的`系统目录`的`node_modules`文件夹内，在所有目录下都能使用。在安装命令行后加`-g`选项，表示全局安装。工具包、很多项目都可能使用的包，全局安装。\n全局模式和本地模式的比较：\n\n|模式|通过require 获取|注册环境变量path|\n|:----------:|:-----:|:---:|\n|本地模式|是|否|\n|全局模式|否|是|\n\n**查看安装目录**：\n```bash \nnpm root \nnpm root -g\n```\n### 语义化版本\n\n[更好的使用NPM][10]\n[NPM 使用技巧][11]\n[yarn 使用][12]\n\n### 依赖锁文件\n\n[NPM中的package锁](https://blog.cuiyongjian.com/engineering/lock-in-npm/)\n\n### 安装\n\n主要关注安装的版本号和安装成哪个依赖项目（开发依赖、运行时依赖（线上依赖）、可选依赖等）。\n\nnpm 会先检查是否安装了该模块，已经安装，则更新版本。\n```bash\nnpm i # 安装 package.json 所有依赖（开发依赖、运行时依赖、对等依赖等）\nnpm i -E packageName # 安装精确版本 推荐用法\nnpm i packegeName # 默认安装成产品依赖最新版本\nnpm i packageName1 packageName2 # 安装多个依赖\nnpm install packageName # 保存在 dependencies\nnpm i getHub-rpo #从github 仓库安装包\n# 查看当前目录有哪些文件 类似 Linux 的 ls\ndir \n```\n强制安装：\n```bash\nnpm i packageName -f #不检查是否安装，直接安装\n```\n可指定安装版本和使用的范围\n```bash\nnpm i packeageName@x.y.z -D # 安装该模块的x.y.z版本为开发依赖\nnpm i packageName@~x.y.z # 安装该版本的近似版本\nnpm i packageName@^x.y.z # 安装兼容版本\nnpm i packageName@x.y.x # 不提供z版本号，安装最新的 x.y 版本\nnpm i packageName # 安装最新版本\n```\n**在本地安装的同时，将依赖包的信息（要求的名称和版本）写入package.json中是很重要的！**\n```bash\nnpm install packageName #安装后默认写入package.json中 dependencies 中\nnpm i packageName --no-save # 安装依赖，但不写入package.json\nnpm install packageName --save #安装好后写入package.json的 dependencies中（生产环境依赖）\nnpm install packageName -S #安装好后写入package.json的dependencies中（生产环境依赖）\nnpm install packageName -D #安装好后写入package.json的devDependencies中（开发环境依赖）\nnpm install packageName --save-dev #安装好后写入package.json的devDependencies中（开发环境依赖）\n```\n一个模块要么是开发依赖，要么是产品依赖，不可能同时是两种依赖。\n在 `package.json`内部声明需要安装的模块。然后 `npm i`可以安装。\n### 卸载\n\n```bash\nnpm rm packageName #同时删除 package.json 中的 dependencies或devDependencies 的依赖信息\nnpm rm packageName --no-save # 删除依赖，但是不删除 package.json 文件中依赖的信息\nnpm un packageName\nnpm uninstall packageName\n```\n还可指定卸载的版本。\n### 查看过时的依赖\n\n```bash\nnpm outdated # 会列出过时的依赖\n```\n### 更新\n\n```bash\nnpm update packageName\n# 可指定更新到某一特定版本\n# 会先检查远程版本，远程版本较新，则安装。\n```\n### 查看模块依赖\n\n```bash\n#参看模块依赖\nnpm ls --depth 0 \n# 或者\nnpm list --depth=n\n# --depth n 输出依赖的树形结构的层级深度\n# 0 不显示依赖 1 显示一级依赖\n# 查看特定模块\nnpm ls packageName\npackageName -v # 依赖版本号\n```\n### 修复安全问题\n\n要求 npm@6.x 以后的版本\n```bash\nnpm audit # 显示安全问题\nnpm aduti fix # 修复安全问题\nnpm aduti fix -f # 强制修复\n```\n更多信息：\n[What is npm audit fix???][13]\n[Auditing package dependencies for security vulnerabilities][14]\n### 模块信息\n\n```bash\nnpm info packageName\n# 输出的信息是一个 json格式的，比 package.json 描述文件提供更多的信息。\nnpm view packageName\nnpm view packageName engines # 模块需要的 node 版本\nnpm list packageName version # 当前项目总用到的模块的版本\nnpm v packageName \nnpm show packageName\nnpm show packageName versions # 查看所有发布的版本\nnpm show pacheageName version #查看最新版本\nnpm show packageName time #各个版本发布的时间\n```\n### 查看依赖文档\n\n```bash\nnpm docs  packageName # 会在浏览器里打开依赖文档\n```\n\n### 查看依赖 bug\n\n```bash \nnpm bugs packageName # 会打开 bugs 页面\n```\n\n### 搜索模块\n\n记不住依赖确切名字是搜索。\n```bash\nnpm find packageName # 查找模块报错 ，可能是源不对。改为官方源。\nnpm s packageName\nnpm search packageName\n```\n\n### npm 源管理\n\n安装 `nrm`模块来管理 npm 源，方便。\n```bash\nnrm -h # nrm 命令帮助信息\nnrm ls # 所有registries\nnrm use regNmae # 使用某个reg 源\n```\n其他源管理方法：\n```bash\nnpm config set registry url # 将 url 设置为 npm 源\n```\n\n### npm 缓存管理\n\n使用 npm 缓存，可提升安装速度，因为 npm 会把你安装过的模块缓存下来，下次安装先读缓存，**缓存功能是默认关闭的**。\n```bash\nnpm config set cache path -g #path 是绝对路径，这样就开启缓存了\nnpm cache clean #清除缓存\n```\n\n## 问题\n\n1. package.json 的`name`为`webpack`，在尝试安装webpack 时报错。\n```bash\nnpm ERR! Refusing to install package with name \"webpack\" under a package\nnpm ERR! also called \"webpack\". Did you name your project the same\nnpm ERR! as the dependency you're installing?\n```\n后查阅资料，得知npm会拒绝安装与本地包相同名字的包，因为这样可能是依赖查找算法无限循环。修改package.json 的name属性即可。所以给项目起名字时记得取一个特殊的名字，以免与你将要安装的包冲突。\n\n2. 引入 npm 是大小写弄错，会报以下警告：\n```bash\nThere are multiple modules with names that only differ in casing.\nThis can lead to unexpected behavior when compiling on a filesystem with other case-semantic.\nUse equal casing. Compare these module identifiers:\n```\n有多个模块名字相同，但是名字大小写不同。在同一个问价系统中使用，可能会导致不可预期的行为。\n\n### 配置 script 命令\n\n在 package.json 文件的 `script`字段里，可设置 npm 运行脚本的命令。\n```js\n\"script\": {\n    \"start\": \"node ./bin/www\",\n    \"test\": \"node ./test.js\"\n    \"dev\": \"nodemon ./bin/www\"\n}\n```\n执行命令：\n```bash\nnpm run start # 会执行 node ./bin/www\nnpm run dev # 执行 nodemon ./bin/www\n# start 和 test 比较特殊，可不加 run start 和 test 本身是 npm 命令\nnpm start\nnpm test\nnpm t # 和 npm test 相同\n```\n### npm i package_name  <options\\> 命令选项\n\n-v: --version\n-h, -?, --help, -H: --usage `帮助信息`\n-s, --silent: --loglevel silent\n-q, --quiet: --loglevel warn\n-d: --loglevel info\n-dd, --verbose: --loglevel verbose\n-ddd: --loglevel silly\n-g: --global `全局命令`\n-C: --prefix\n-l: --long\n-m: --message\n-p, --porcelain: --parseable\n-reg: --registry\n-f: --force `强制执行`\n-desc: --description\n-S --save `生产依赖`\n-P: --save-prod `生产依赖`\n-D: --save-dev `开发依赖`\n-O: --save-optional `可选依赖`\n-B: --save-bundle\n-E: --save-exact `精确安装指定模块版本`\n-y: --yes `使用默认值`\n-n: --yes false\nll and la commands: ls --long\n\n### 更多命苦\n\n[npm cli commomd](https://docs.npmjs.com/cli-documentation/)\n\n[1]: https://yarnpkg.com/lang/zh-hans/docs/dependency-versions/\n[2]: https://semver.npmjs.com/\n[3]: https://semver.org/lang/zh-TW/\n[9]: https://www.cnblogs.com/Wayou/p/semver.html\n[10]: https://www.css88.com/archives/10418\n[11]: https://www.css88.com/archives/10401\n[12]: https://yarnpkg.com/zh-Hans/\n[13]: https://medium.com/codebrace/what-is-npm-audit-fix-bf1d7efefff7\n[14]: https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities","source":"_posts/NPM-使用教程.md","raw":"---\ntitle: NPM 使用教程\ndate: 2019-05-18 16:18:12\ngit_issue_id: 1\ntags:\n- npm\n- node\ncategories:\n- [node]\n---\n​    npm 是[npm包托管组织](https://www.npmjs.com/)开发的 node 包管理工具，使用它可下载、卸载、更新、发布 npm 包，从而实现代码的共享和复用，node 开发必须掌握，前端工程化基于 node，因此，npm 技能是前端必须知道的。安装了 node，npm就集成在里面了，无需另外安装。\n<!--more-->\n\n## NPM 是什么\n\nnpm (**node packge manager**) ，node 包管理工具，主要功能就是管理node包：安装、卸载、更新、查看、搜索、发布等。\nnpm 的背后，有一个 couchdb（一个json数据库或者非关系型数据库）,详细记录了每个包的信息：作者、版本、依赖、授权信息等。\nnpm的重要作用：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，专注功能开发，建立了一个node生态圈，实现node`代码共享、复用`。\n[NPM官网](https://npmjs.org)\n```bash\nnpm install npm@latest -g #更新 npm\nnpm help # 帮助命令\nnpm <command> -h #某条命令的用法\nnpm -v #版本信息\nnpm -l #常用命令信息\nnpm config list #npm  配置信息\nnpm config list -l # 默认配置信息列表\nnpm init #初始化 package.json文件\nnpm init -y #初始化 package.json 跳过询问\nnpm init --yes\nnpm ls # 查看当前包的依赖\n```\n依赖名称注意事项：\n- 不与 node 核心模块同名；\n- 不得使用 js 或者 node\n- name 会成为url、命令行、或者一个文件夹的名，非法url字符不允许，不以`_`或`.`开头\n- 不得含有大写字母\n\n配置相关：\n```bash\nnpm config set key value\nnpm config get key\nnpm config get prefix # 查看npm安装前缀\nnpm config get cache # npm 缓存目录\n```\n## NPM能做什么\n\n### 安装模式\n\n**本地安装 vs  全局安装**\n`本地安装`：package会下载到`当前目录`的`node_modules`文件夹内，只能在当前目录下使用，一个项目使用到的依赖，采用本地安装。\n`全局安装`：package会被下载到特定的`系统目录`的`node_modules`文件夹内，在所有目录下都能使用。在安装命令行后加`-g`选项，表示全局安装。工具包、很多项目都可能使用的包，全局安装。\n全局模式和本地模式的比较：\n\n|模式|通过require 获取|注册环境变量path|\n|:----------:|:-----:|:---:|\n|本地模式|是|否|\n|全局模式|否|是|\n\n**查看安装目录**：\n```bash \nnpm root \nnpm root -g\n```\n### 语义化版本\n\n[更好的使用NPM][10]\n[NPM 使用技巧][11]\n[yarn 使用][12]\n\n### 依赖锁文件\n\n[NPM中的package锁](https://blog.cuiyongjian.com/engineering/lock-in-npm/)\n\n### 安装\n\n主要关注安装的版本号和安装成哪个依赖项目（开发依赖、运行时依赖（线上依赖）、可选依赖等）。\n\nnpm 会先检查是否安装了该模块，已经安装，则更新版本。\n```bash\nnpm i # 安装 package.json 所有依赖（开发依赖、运行时依赖、对等依赖等）\nnpm i -E packageName # 安装精确版本 推荐用法\nnpm i packegeName # 默认安装成产品依赖最新版本\nnpm i packageName1 packageName2 # 安装多个依赖\nnpm install packageName # 保存在 dependencies\nnpm i getHub-rpo #从github 仓库安装包\n# 查看当前目录有哪些文件 类似 Linux 的 ls\ndir \n```\n强制安装：\n```bash\nnpm i packageName -f #不检查是否安装，直接安装\n```\n可指定安装版本和使用的范围\n```bash\nnpm i packeageName@x.y.z -D # 安装该模块的x.y.z版本为开发依赖\nnpm i packageName@~x.y.z # 安装该版本的近似版本\nnpm i packageName@^x.y.z # 安装兼容版本\nnpm i packageName@x.y.x # 不提供z版本号，安装最新的 x.y 版本\nnpm i packageName # 安装最新版本\n```\n**在本地安装的同时，将依赖包的信息（要求的名称和版本）写入package.json中是很重要的！**\n```bash\nnpm install packageName #安装后默认写入package.json中 dependencies 中\nnpm i packageName --no-save # 安装依赖，但不写入package.json\nnpm install packageName --save #安装好后写入package.json的 dependencies中（生产环境依赖）\nnpm install packageName -S #安装好后写入package.json的dependencies中（生产环境依赖）\nnpm install packageName -D #安装好后写入package.json的devDependencies中（开发环境依赖）\nnpm install packageName --save-dev #安装好后写入package.json的devDependencies中（开发环境依赖）\n```\n一个模块要么是开发依赖，要么是产品依赖，不可能同时是两种依赖。\n在 `package.json`内部声明需要安装的模块。然后 `npm i`可以安装。\n### 卸载\n\n```bash\nnpm rm packageName #同时删除 package.json 中的 dependencies或devDependencies 的依赖信息\nnpm rm packageName --no-save # 删除依赖，但是不删除 package.json 文件中依赖的信息\nnpm un packageName\nnpm uninstall packageName\n```\n还可指定卸载的版本。\n### 查看过时的依赖\n\n```bash\nnpm outdated # 会列出过时的依赖\n```\n### 更新\n\n```bash\nnpm update packageName\n# 可指定更新到某一特定版本\n# 会先检查远程版本，远程版本较新，则安装。\n```\n### 查看模块依赖\n\n```bash\n#参看模块依赖\nnpm ls --depth 0 \n# 或者\nnpm list --depth=n\n# --depth n 输出依赖的树形结构的层级深度\n# 0 不显示依赖 1 显示一级依赖\n# 查看特定模块\nnpm ls packageName\npackageName -v # 依赖版本号\n```\n### 修复安全问题\n\n要求 npm@6.x 以后的版本\n```bash\nnpm audit # 显示安全问题\nnpm aduti fix # 修复安全问题\nnpm aduti fix -f # 强制修复\n```\n更多信息：\n[What is npm audit fix???][13]\n[Auditing package dependencies for security vulnerabilities][14]\n### 模块信息\n\n```bash\nnpm info packageName\n# 输出的信息是一个 json格式的，比 package.json 描述文件提供更多的信息。\nnpm view packageName\nnpm view packageName engines # 模块需要的 node 版本\nnpm list packageName version # 当前项目总用到的模块的版本\nnpm v packageName \nnpm show packageName\nnpm show packageName versions # 查看所有发布的版本\nnpm show pacheageName version #查看最新版本\nnpm show packageName time #各个版本发布的时间\n```\n### 查看依赖文档\n\n```bash\nnpm docs  packageName # 会在浏览器里打开依赖文档\n```\n\n### 查看依赖 bug\n\n```bash \nnpm bugs packageName # 会打开 bugs 页面\n```\n\n### 搜索模块\n\n记不住依赖确切名字是搜索。\n```bash\nnpm find packageName # 查找模块报错 ，可能是源不对。改为官方源。\nnpm s packageName\nnpm search packageName\n```\n\n### npm 源管理\n\n安装 `nrm`模块来管理 npm 源，方便。\n```bash\nnrm -h # nrm 命令帮助信息\nnrm ls # 所有registries\nnrm use regNmae # 使用某个reg 源\n```\n其他源管理方法：\n```bash\nnpm config set registry url # 将 url 设置为 npm 源\n```\n\n### npm 缓存管理\n\n使用 npm 缓存，可提升安装速度，因为 npm 会把你安装过的模块缓存下来，下次安装先读缓存，**缓存功能是默认关闭的**。\n```bash\nnpm config set cache path -g #path 是绝对路径，这样就开启缓存了\nnpm cache clean #清除缓存\n```\n\n## 问题\n\n1. package.json 的`name`为`webpack`，在尝试安装webpack 时报错。\n```bash\nnpm ERR! Refusing to install package with name \"webpack\" under a package\nnpm ERR! also called \"webpack\". Did you name your project the same\nnpm ERR! as the dependency you're installing?\n```\n后查阅资料，得知npm会拒绝安装与本地包相同名字的包，因为这样可能是依赖查找算法无限循环。修改package.json 的name属性即可。所以给项目起名字时记得取一个特殊的名字，以免与你将要安装的包冲突。\n\n2. 引入 npm 是大小写弄错，会报以下警告：\n```bash\nThere are multiple modules with names that only differ in casing.\nThis can lead to unexpected behavior when compiling on a filesystem with other case-semantic.\nUse equal casing. Compare these module identifiers:\n```\n有多个模块名字相同，但是名字大小写不同。在同一个问价系统中使用，可能会导致不可预期的行为。\n\n### 配置 script 命令\n\n在 package.json 文件的 `script`字段里，可设置 npm 运行脚本的命令。\n```js\n\"script\": {\n    \"start\": \"node ./bin/www\",\n    \"test\": \"node ./test.js\"\n    \"dev\": \"nodemon ./bin/www\"\n}\n```\n执行命令：\n```bash\nnpm run start # 会执行 node ./bin/www\nnpm run dev # 执行 nodemon ./bin/www\n# start 和 test 比较特殊，可不加 run start 和 test 本身是 npm 命令\nnpm start\nnpm test\nnpm t # 和 npm test 相同\n```\n### npm i package_name  <options\\> 命令选项\n\n-v: --version\n-h, -?, --help, -H: --usage `帮助信息`\n-s, --silent: --loglevel silent\n-q, --quiet: --loglevel warn\n-d: --loglevel info\n-dd, --verbose: --loglevel verbose\n-ddd: --loglevel silly\n-g: --global `全局命令`\n-C: --prefix\n-l: --long\n-m: --message\n-p, --porcelain: --parseable\n-reg: --registry\n-f: --force `强制执行`\n-desc: --description\n-S --save `生产依赖`\n-P: --save-prod `生产依赖`\n-D: --save-dev `开发依赖`\n-O: --save-optional `可选依赖`\n-B: --save-bundle\n-E: --save-exact `精确安装指定模块版本`\n-y: --yes `使用默认值`\n-n: --yes false\nll and la commands: ls --long\n\n### 更多命苦\n\n[npm cli commomd](https://docs.npmjs.com/cli-documentation/)\n\n[1]: https://yarnpkg.com/lang/zh-hans/docs/dependency-versions/\n[2]: https://semver.npmjs.com/\n[3]: https://semver.org/lang/zh-TW/\n[9]: https://www.cnblogs.com/Wayou/p/semver.html\n[10]: https://www.css88.com/archives/10418\n[11]: https://www.css88.com/archives/10401\n[12]: https://yarnpkg.com/zh-Hans/\n[13]: https://medium.com/codebrace/what-is-npm-audit-fix-bf1d7efefff7\n[14]: https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities","slug":"NPM-使用教程","published":1,"updated":"2019-05-21T18:05:23.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccej000ljwrnopdx4y42","content":"<p>​    npm 是<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">npm包托管组织</a>开发的 node 包管理工具，使用它可下载、卸载、更新、发布 npm 包，从而实现代码的共享和复用，node 开发必须掌握，前端工程化基于 node，因此，npm 技能是前端必须知道的。安装了 node，npm就集成在里面了，无需另外安装。</p>\n<a id=\"more\"></a>\n<h2 id=\"npm-是什么\"><a class=\"markdownIt-Anchor\" href=\"#npm-是什么\"></a> NPM 是什么</h2>\n<p>npm (<strong>node packge manager</strong>) ，node 包管理工具，主要功能就是管理node包：安装、卸载、更新、查看、搜索、发布等。<br>\nnpm 的背后，有一个 couchdb（一个json数据库或者非关系型数据库）,详细记录了每个包的信息：作者、版本、依赖、授权信息等。<br>\nnpm的重要作用：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，专注功能开发，建立了一个node生态圈，实现node<code>代码共享、复用</code>。<br>\n<a href=\"https://npmjs.org\" target=\"_blank\" rel=\"noopener\">NPM官网</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install npm@latest -g <span class=\"comment\">#更新 npm</span></span><br><span class=\"line\">npm <span class=\"built_in\">help</span> <span class=\"comment\"># 帮助命令</span></span><br><span class=\"line\">npm &lt;<span class=\"built_in\">command</span>&gt; -h <span class=\"comment\">#某条命令的用法</span></span><br><span class=\"line\">npm -v <span class=\"comment\">#版本信息</span></span><br><span class=\"line\">npm -l <span class=\"comment\">#常用命令信息</span></span><br><span class=\"line\">npm config list <span class=\"comment\">#npm  配置信息</span></span><br><span class=\"line\">npm config list -l <span class=\"comment\"># 默认配置信息列表</span></span><br><span class=\"line\">npm init <span class=\"comment\">#初始化 package.json文件</span></span><br><span class=\"line\">npm init -y <span class=\"comment\">#初始化 package.json 跳过询问</span></span><br><span class=\"line\">npm init --yes</span><br><span class=\"line\">npm ls <span class=\"comment\"># 查看当前包的依赖</span></span><br></pre></td></tr></table></figure>\n<p>依赖名称注意事项：</p>\n<ul>\n<li>不与 node 核心模块同名；</li>\n<li>不得使用 js 或者 node</li>\n<li>name 会成为url、命令行、或者一个文件夹的名，非法url字符不允许，不以<code>_</code>或<code>.</code>开头</li>\n<li>不得含有大写字母</li>\n</ul>\n<p>配置相关：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> key value</span><br><span class=\"line\">npm config get key</span><br><span class=\"line\">npm config get prefix <span class=\"comment\"># 查看npm安装前缀</span></span><br><span class=\"line\">npm config get cache <span class=\"comment\"># npm 缓存目录</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"npm能做什么\"><a class=\"markdownIt-Anchor\" href=\"#npm能做什么\"></a> NPM能做什么</h2>\n<h3 id=\"安装模式\"><a class=\"markdownIt-Anchor\" href=\"#安装模式\"></a> 安装模式</h3>\n<p><strong>本地安装 vs  全局安装</strong><br>\n<code>本地安装</code>：package会下载到<code>当前目录</code>的<code>node_modules</code>文件夹内，只能在当前目录下使用，一个项目使用到的依赖，采用本地安装。<br>\n<code>全局安装</code>：package会被下载到特定的<code>系统目录</code>的<code>node_modules</code>文件夹内，在所有目录下都能使用。在安装命令行后加<code>-g</code>选项，表示全局安装。工具包、很多项目都可能使用的包，全局安装。<br>\n全局模式和本地模式的比较：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:center\">通过require 获取</th>\n<th style=\"text-align:center\">注册环境变量path</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">本地模式</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全局模式</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n</tbody>\n</table>\n<p><strong>查看安装目录</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm root </span><br><span class=\"line\">npm root -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"语义化版本\"><a class=\"markdownIt-Anchor\" href=\"#语义化版本\"></a> 语义化版本</h3>\n<p><a href=\"https://www.css88.com/archives/10418\" target=\"_blank\" rel=\"noopener\">更好的使用NPM</a><br>\n<a href=\"https://www.css88.com/archives/10401\" target=\"_blank\" rel=\"noopener\">NPM 使用技巧</a><br>\n<a href=\"https://yarnpkg.com/zh-Hans/\" target=\"_blank\" rel=\"noopener\">yarn 使用</a></p>\n<h3 id=\"依赖锁文件\"><a class=\"markdownIt-Anchor\" href=\"#依赖锁文件\"></a> 依赖锁文件</h3>\n<p><a href=\"https://blog.cuiyongjian.com/engineering/lock-in-npm/\" target=\"_blank\" rel=\"noopener\">NPM中的package锁</a></p>\n<h3 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h3>\n<p>主要关注安装的版本号和安装成哪个依赖项目（开发依赖、运行时依赖（线上依赖）、可选依赖等）。</p>\n<p>npm 会先检查是否安装了该模块，已经安装，则更新版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i <span class=\"comment\"># 安装 package.json 所有依赖（开发依赖、运行时依赖、对等依赖等）</span></span><br><span class=\"line\">npm i -E packageName <span class=\"comment\"># 安装精确版本 推荐用法</span></span><br><span class=\"line\">npm i packegeName <span class=\"comment\"># 默认安装成产品依赖最新版本</span></span><br><span class=\"line\">npm i packageName1 packageName2 <span class=\"comment\"># 安装多个依赖</span></span><br><span class=\"line\">npm install packageName <span class=\"comment\"># 保存在 dependencies</span></span><br><span class=\"line\">npm i getHub-rpo <span class=\"comment\">#从github 仓库安装包</span></span><br><span class=\"line\"><span class=\"comment\"># 查看当前目录有哪些文件 类似 Linux 的 ls</span></span><br><span class=\"line\">dir</span><br></pre></td></tr></table></figure>\n<p>强制安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i packageName -f <span class=\"comment\">#不检查是否安装，直接安装</span></span><br></pre></td></tr></table></figure>\n<p>可指定安装版本和使用的范围</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i packeageName@x.y.z -D <span class=\"comment\"># 安装该模块的x.y.z版本为开发依赖</span></span><br><span class=\"line\">npm i packageName@~x.y.z <span class=\"comment\"># 安装该版本的近似版本</span></span><br><span class=\"line\">npm i packageName@^x.y.z <span class=\"comment\"># 安装兼容版本</span></span><br><span class=\"line\">npm i packageName@x.y.x <span class=\"comment\"># 不提供z版本号，安装最新的 x.y 版本</span></span><br><span class=\"line\">npm i packageName <span class=\"comment\"># 安装最新版本</span></span><br></pre></td></tr></table></figure>\n<p><strong>在本地安装的同时，将依赖包的信息（要求的名称和版本）写入package.json中是很重要的！</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packageName <span class=\"comment\">#安装后默认写入package.json中 dependencies 中</span></span><br><span class=\"line\">npm i packageName --no-save <span class=\"comment\"># 安装依赖，但不写入package.json</span></span><br><span class=\"line\">npm install packageName --save <span class=\"comment\">#安装好后写入package.json的 dependencies中（生产环境依赖）</span></span><br><span class=\"line\">npm install packageName -S <span class=\"comment\">#安装好后写入package.json的dependencies中（生产环境依赖）</span></span><br><span class=\"line\">npm install packageName -D <span class=\"comment\">#安装好后写入package.json的devDependencies中（开发环境依赖）</span></span><br><span class=\"line\">npm install packageName --save-dev <span class=\"comment\">#安装好后写入package.json的devDependencies中（开发环境依赖）</span></span><br></pre></td></tr></table></figure>\n<p>一个模块要么是开发依赖，要么是产品依赖，不可能同时是两种依赖。<br>\n在 <code>package.json</code>内部声明需要安装的模块。然后 <code>npm i</code>可以安装。</p>\n<h3 id=\"卸载\"><a class=\"markdownIt-Anchor\" href=\"#卸载\"></a> 卸载</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rm packageName <span class=\"comment\">#同时删除 package.json 中的 dependencies或devDependencies 的依赖信息</span></span><br><span class=\"line\">npm rm packageName --no-save <span class=\"comment\"># 删除依赖，但是不删除 package.json 文件中依赖的信息</span></span><br><span class=\"line\">npm un packageName</span><br><span class=\"line\">npm uninstall packageName</span><br></pre></td></tr></table></figure>\n<p>还可指定卸载的版本。</p>\n<h3 id=\"查看过时的依赖\"><a class=\"markdownIt-Anchor\" href=\"#查看过时的依赖\"></a> 查看过时的依赖</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm outdated <span class=\"comment\"># 会列出过时的依赖</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"更新\"><a class=\"markdownIt-Anchor\" href=\"#更新\"></a> 更新</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update packageName</span><br><span class=\"line\"><span class=\"comment\"># 可指定更新到某一特定版本</span></span><br><span class=\"line\"><span class=\"comment\"># 会先检查远程版本，远程版本较新，则安装。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看模块依赖\"><a class=\"markdownIt-Anchor\" href=\"#查看模块依赖\"></a> 查看模块依赖</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#参看模块依赖</span></span><br><span class=\"line\">npm ls --depth 0 </span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">npm list --depth=n</span><br><span class=\"line\"><span class=\"comment\"># --depth n 输出依赖的树形结构的层级深度</span></span><br><span class=\"line\"><span class=\"comment\"># 0 不显示依赖 1 显示一级依赖</span></span><br><span class=\"line\"><span class=\"comment\"># 查看特定模块</span></span><br><span class=\"line\">npm ls packageName</span><br><span class=\"line\">packageName -v <span class=\"comment\"># 依赖版本号</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修复安全问题\"><a class=\"markdownIt-Anchor\" href=\"#修复安全问题\"></a> 修复安全问题</h3>\n<p>要求 npm@6.x 以后的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm audit <span class=\"comment\"># 显示安全问题</span></span><br><span class=\"line\">npm aduti fix <span class=\"comment\"># 修复安全问题</span></span><br><span class=\"line\">npm aduti fix -f <span class=\"comment\"># 强制修复</span></span><br></pre></td></tr></table></figure>\n<p>更多信息：<br>\n<a href=\"https://medium.com/codebrace/what-is-npm-audit-fix-bf1d7efefff7\" target=\"_blank\" rel=\"noopener\">What is npm audit fix???</a><br>\n<a href=\"https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities\" target=\"_blank\" rel=\"noopener\">Auditing package dependencies for security vulnerabilities</a></p>\n<h3 id=\"模块信息\"><a class=\"markdownIt-Anchor\" href=\"#模块信息\"></a> 模块信息</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info packageName</span><br><span class=\"line\"><span class=\"comment\"># 输出的信息是一个 json格式的，比 package.json 描述文件提供更多的信息。</span></span><br><span class=\"line\">npm view packageName</span><br><span class=\"line\">npm view packageName engines <span class=\"comment\"># 模块需要的 node 版本</span></span><br><span class=\"line\">npm list packageName version <span class=\"comment\"># 当前项目总用到的模块的版本</span></span><br><span class=\"line\">npm v packageName </span><br><span class=\"line\">npm show packageName</span><br><span class=\"line\">npm show packageName versions <span class=\"comment\"># 查看所有发布的版本</span></span><br><span class=\"line\">npm show pacheageName version <span class=\"comment\">#查看最新版本</span></span><br><span class=\"line\">npm show packageName time <span class=\"comment\">#各个版本发布的时间</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看依赖文档\"><a class=\"markdownIt-Anchor\" href=\"#查看依赖文档\"></a> 查看依赖文档</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm docs  packageName <span class=\"comment\"># 会在浏览器里打开依赖文档</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看依赖-bug\"><a class=\"markdownIt-Anchor\" href=\"#查看依赖-bug\"></a> 查看依赖 bug</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm bugs packageName <span class=\"comment\"># 会打开 bugs 页面</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"搜索模块\"><a class=\"markdownIt-Anchor\" href=\"#搜索模块\"></a> 搜索模块</h3>\n<p>记不住依赖确切名字是搜索。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm find packageName <span class=\"comment\"># 查找模块报错 ，可能是源不对。改为官方源。</span></span><br><span class=\"line\">npm s packageName</span><br><span class=\"line\">npm search packageName</span><br></pre></td></tr></table></figure>\n<h3 id=\"npm-源管理\"><a class=\"markdownIt-Anchor\" href=\"#npm-源管理\"></a> npm 源管理</h3>\n<p>安装 <code>nrm</code>模块来管理 npm 源，方便。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm -h <span class=\"comment\"># nrm 命令帮助信息</span></span><br><span class=\"line\">nrm ls <span class=\"comment\"># 所有registries</span></span><br><span class=\"line\">nrm use regNmae <span class=\"comment\"># 使用某个reg 源</span></span><br></pre></td></tr></table></figure>\n<p>其他源管理方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry url <span class=\"comment\"># 将 url 设置为 npm 源</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"npm-缓存管理\"><a class=\"markdownIt-Anchor\" href=\"#npm-缓存管理\"></a> npm 缓存管理</h3>\n<p>使用 npm 缓存，可提升安装速度，因为 npm 会把你安装过的模块缓存下来，下次安装先读缓存，<strong>缓存功能是默认关闭的</strong>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> cache path -g <span class=\"comment\">#path 是绝对路径，这样就开启缓存了</span></span><br><span class=\"line\">npm cache clean <span class=\"comment\">#清除缓存</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\"></a> 问题</h2>\n<ol>\n<li>package.json 的<code>name</code>为<code>webpack</code>，在尝试安装webpack 时报错。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! Refusing to install package with name <span class=\"string\">\"webpack\"</span> under a package</span><br><span class=\"line\">npm ERR! also called <span class=\"string\">\"webpack\"</span>. Did you name your project the same</span><br><span class=\"line\">npm ERR! as the dependency you<span class=\"string\">'re installing?</span></span><br></pre></td></tr></table></figure>\n<p>后查阅资料，得知npm会拒绝安装与本地包相同名字的包，因为这样可能是依赖查找算法无限循环。修改package.json 的name属性即可。所以给项目起名字时记得取一个特殊的名字，以免与你将要安装的包冲突。</p>\n<ol start=\"2\">\n<li>引入 npm 是大小写弄错，会报以下警告：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">There are multiple modules with names that only differ <span class=\"keyword\">in</span> casing.</span><br><span class=\"line\">This can lead to unexpected behavior when compiling on a filesystem with other <span class=\"keyword\">case</span>-semantic.</span><br><span class=\"line\">Use equal casing. Compare these module identifiers:</span><br></pre></td></tr></table></figure>\n<p>有多个模块名字相同，但是名字大小写不同。在同一个问价系统中使用，可能会导致不可预期的行为。</p>\n<h3 id=\"配置-script-命令\"><a class=\"markdownIt-Anchor\" href=\"#配置-script-命令\"></a> 配置 script 命令</h3>\n<p>在 package.json 文件的 <code>script</code>字段里，可设置 npm 运行脚本的命令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"script\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"node ./bin/www\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"node ./test.js\"</span></span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"nodemon ./bin/www\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run start <span class=\"comment\"># 会执行 node ./bin/www</span></span><br><span class=\"line\">npm run dev <span class=\"comment\"># 执行 nodemon ./bin/www</span></span><br><span class=\"line\"><span class=\"comment\"># start 和 test 比较特殊，可不加 run start 和 test 本身是 npm 命令</span></span><br><span class=\"line\">npm start</span><br><span class=\"line\">npm <span class=\"built_in\">test</span></span><br><span class=\"line\">npm t <span class=\"comment\"># 和 npm test 相同</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"npm-i-package_name-options-命令选项\"><a class=\"markdownIt-Anchor\" href=\"#npm-i-package_name-options-命令选项\"></a> npm i package_name  &lt;options&gt; 命令选项</h3>\n<p>-v: --version<br>\n-h, -?, --help, -H: --usage <code>帮助信息</code><br>\n-s, --silent: --loglevel silent<br>\n-q, --quiet: --loglevel warn<br>\n-d: --loglevel info<br>\n-dd, --verbose: --loglevel verbose<br>\n-ddd: --loglevel silly<br>\n-g: --global <code>全局命令</code><br>\n-C: --prefix<br>\n-l: --long<br>\n-m: --message<br>\n-p, --porcelain: --parseable<br>\n-reg: --registry<br>\n-f: --force <code>强制执行</code><br>\n-desc: --description<br>\n-S --save <code>生产依赖</code><br>\n-P: --save-prod <code>生产依赖</code><br>\n-D: --save-dev <code>开发依赖</code><br>\n-O: --save-optional <code>可选依赖</code><br>\n-B: --save-bundle<br>\n-E: --save-exact <code>精确安装指定模块版本</code><br>\n-y: --yes <code>使用默认值</code><br>\n-n: --yes false<br>\nll and la commands: ls --long</p>\n<h3 id=\"更多命苦\"><a class=\"markdownIt-Anchor\" href=\"#更多命苦\"></a> 更多命苦</h3>\n<p><a href=\"https://docs.npmjs.com/cli-documentation/\" target=\"_blank\" rel=\"noopener\">npm cli commomd</a></p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>​    npm 是<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">npm包托管组织</a>开发的 node 包管理工具，使用它可下载、卸载、更新、发布 npm 包，从而实现代码的共享和复用，node 开发必须掌握，前端工程化基于 node，因此，npm 技能是前端必须知道的。安装了 node，npm就集成在里面了，无需另外安装。</p>","more":"<h2 id=\"npm-是什么\"><a class=\"markdownIt-Anchor\" href=\"#npm-是什么\"></a> NPM 是什么</h2>\n<p>npm (<strong>node packge manager</strong>) ，node 包管理工具，主要功能就是管理node包：安装、卸载、更新、查看、搜索、发布等。<br>\nnpm 的背后，有一个 couchdb（一个json数据库或者非关系型数据库）,详细记录了每个包的信息：作者、版本、依赖、授权信息等。<br>\nnpm的重要作用：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，专注功能开发，建立了一个node生态圈，实现node<code>代码共享、复用</code>。<br>\n<a href=\"https://npmjs.org\" target=\"_blank\" rel=\"noopener\">NPM官网</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install npm@latest -g <span class=\"comment\">#更新 npm</span></span><br><span class=\"line\">npm <span class=\"built_in\">help</span> <span class=\"comment\"># 帮助命令</span></span><br><span class=\"line\">npm &lt;<span class=\"built_in\">command</span>&gt; -h <span class=\"comment\">#某条命令的用法</span></span><br><span class=\"line\">npm -v <span class=\"comment\">#版本信息</span></span><br><span class=\"line\">npm -l <span class=\"comment\">#常用命令信息</span></span><br><span class=\"line\">npm config list <span class=\"comment\">#npm  配置信息</span></span><br><span class=\"line\">npm config list -l <span class=\"comment\"># 默认配置信息列表</span></span><br><span class=\"line\">npm init <span class=\"comment\">#初始化 package.json文件</span></span><br><span class=\"line\">npm init -y <span class=\"comment\">#初始化 package.json 跳过询问</span></span><br><span class=\"line\">npm init --yes</span><br><span class=\"line\">npm ls <span class=\"comment\"># 查看当前包的依赖</span></span><br></pre></td></tr></table></figure>\n<p>依赖名称注意事项：</p>\n<ul>\n<li>不与 node 核心模块同名；</li>\n<li>不得使用 js 或者 node</li>\n<li>name 会成为url、命令行、或者一个文件夹的名，非法url字符不允许，不以<code>_</code>或<code>.</code>开头</li>\n<li>不得含有大写字母</li>\n</ul>\n<p>配置相关：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> key value</span><br><span class=\"line\">npm config get key</span><br><span class=\"line\">npm config get prefix <span class=\"comment\"># 查看npm安装前缀</span></span><br><span class=\"line\">npm config get cache <span class=\"comment\"># npm 缓存目录</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"npm能做什么\"><a class=\"markdownIt-Anchor\" href=\"#npm能做什么\"></a> NPM能做什么</h2>\n<h3 id=\"安装模式\"><a class=\"markdownIt-Anchor\" href=\"#安装模式\"></a> 安装模式</h3>\n<p><strong>本地安装 vs  全局安装</strong><br>\n<code>本地安装</code>：package会下载到<code>当前目录</code>的<code>node_modules</code>文件夹内，只能在当前目录下使用，一个项目使用到的依赖，采用本地安装。<br>\n<code>全局安装</code>：package会被下载到特定的<code>系统目录</code>的<code>node_modules</code>文件夹内，在所有目录下都能使用。在安装命令行后加<code>-g</code>选项，表示全局安装。工具包、很多项目都可能使用的包，全局安装。<br>\n全局模式和本地模式的比较：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:center\">通过require 获取</th>\n<th style=\"text-align:center\">注册环境变量path</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">本地模式</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全局模式</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n</tbody>\n</table>\n<p><strong>查看安装目录</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm root </span><br><span class=\"line\">npm root -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"语义化版本\"><a class=\"markdownIt-Anchor\" href=\"#语义化版本\"></a> 语义化版本</h3>\n<p><a href=\"https://www.css88.com/archives/10418\" target=\"_blank\" rel=\"noopener\">更好的使用NPM</a><br>\n<a href=\"https://www.css88.com/archives/10401\" target=\"_blank\" rel=\"noopener\">NPM 使用技巧</a><br>\n<a href=\"https://yarnpkg.com/zh-Hans/\" target=\"_blank\" rel=\"noopener\">yarn 使用</a></p>\n<h3 id=\"依赖锁文件\"><a class=\"markdownIt-Anchor\" href=\"#依赖锁文件\"></a> 依赖锁文件</h3>\n<p><a href=\"https://blog.cuiyongjian.com/engineering/lock-in-npm/\" target=\"_blank\" rel=\"noopener\">NPM中的package锁</a></p>\n<h3 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h3>\n<p>主要关注安装的版本号和安装成哪个依赖项目（开发依赖、运行时依赖（线上依赖）、可选依赖等）。</p>\n<p>npm 会先检查是否安装了该模块，已经安装，则更新版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i <span class=\"comment\"># 安装 package.json 所有依赖（开发依赖、运行时依赖、对等依赖等）</span></span><br><span class=\"line\">npm i -E packageName <span class=\"comment\"># 安装精确版本 推荐用法</span></span><br><span class=\"line\">npm i packegeName <span class=\"comment\"># 默认安装成产品依赖最新版本</span></span><br><span class=\"line\">npm i packageName1 packageName2 <span class=\"comment\"># 安装多个依赖</span></span><br><span class=\"line\">npm install packageName <span class=\"comment\"># 保存在 dependencies</span></span><br><span class=\"line\">npm i getHub-rpo <span class=\"comment\">#从github 仓库安装包</span></span><br><span class=\"line\"><span class=\"comment\"># 查看当前目录有哪些文件 类似 Linux 的 ls</span></span><br><span class=\"line\">dir</span><br></pre></td></tr></table></figure>\n<p>强制安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i packageName -f <span class=\"comment\">#不检查是否安装，直接安装</span></span><br></pre></td></tr></table></figure>\n<p>可指定安装版本和使用的范围</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i packeageName@x.y.z -D <span class=\"comment\"># 安装该模块的x.y.z版本为开发依赖</span></span><br><span class=\"line\">npm i packageName@~x.y.z <span class=\"comment\"># 安装该版本的近似版本</span></span><br><span class=\"line\">npm i packageName@^x.y.z <span class=\"comment\"># 安装兼容版本</span></span><br><span class=\"line\">npm i packageName@x.y.x <span class=\"comment\"># 不提供z版本号，安装最新的 x.y 版本</span></span><br><span class=\"line\">npm i packageName <span class=\"comment\"># 安装最新版本</span></span><br></pre></td></tr></table></figure>\n<p><strong>在本地安装的同时，将依赖包的信息（要求的名称和版本）写入package.json中是很重要的！</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packageName <span class=\"comment\">#安装后默认写入package.json中 dependencies 中</span></span><br><span class=\"line\">npm i packageName --no-save <span class=\"comment\"># 安装依赖，但不写入package.json</span></span><br><span class=\"line\">npm install packageName --save <span class=\"comment\">#安装好后写入package.json的 dependencies中（生产环境依赖）</span></span><br><span class=\"line\">npm install packageName -S <span class=\"comment\">#安装好后写入package.json的dependencies中（生产环境依赖）</span></span><br><span class=\"line\">npm install packageName -D <span class=\"comment\">#安装好后写入package.json的devDependencies中（开发环境依赖）</span></span><br><span class=\"line\">npm install packageName --save-dev <span class=\"comment\">#安装好后写入package.json的devDependencies中（开发环境依赖）</span></span><br></pre></td></tr></table></figure>\n<p>一个模块要么是开发依赖，要么是产品依赖，不可能同时是两种依赖。<br>\n在 <code>package.json</code>内部声明需要安装的模块。然后 <code>npm i</code>可以安装。</p>\n<h3 id=\"卸载\"><a class=\"markdownIt-Anchor\" href=\"#卸载\"></a> 卸载</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rm packageName <span class=\"comment\">#同时删除 package.json 中的 dependencies或devDependencies 的依赖信息</span></span><br><span class=\"line\">npm rm packageName --no-save <span class=\"comment\"># 删除依赖，但是不删除 package.json 文件中依赖的信息</span></span><br><span class=\"line\">npm un packageName</span><br><span class=\"line\">npm uninstall packageName</span><br></pre></td></tr></table></figure>\n<p>还可指定卸载的版本。</p>\n<h3 id=\"查看过时的依赖\"><a class=\"markdownIt-Anchor\" href=\"#查看过时的依赖\"></a> 查看过时的依赖</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm outdated <span class=\"comment\"># 会列出过时的依赖</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"更新\"><a class=\"markdownIt-Anchor\" href=\"#更新\"></a> 更新</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update packageName</span><br><span class=\"line\"><span class=\"comment\"># 可指定更新到某一特定版本</span></span><br><span class=\"line\"><span class=\"comment\"># 会先检查远程版本，远程版本较新，则安装。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看模块依赖\"><a class=\"markdownIt-Anchor\" href=\"#查看模块依赖\"></a> 查看模块依赖</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#参看模块依赖</span></span><br><span class=\"line\">npm ls --depth 0 </span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">npm list --depth=n</span><br><span class=\"line\"><span class=\"comment\"># --depth n 输出依赖的树形结构的层级深度</span></span><br><span class=\"line\"><span class=\"comment\"># 0 不显示依赖 1 显示一级依赖</span></span><br><span class=\"line\"><span class=\"comment\"># 查看特定模块</span></span><br><span class=\"line\">npm ls packageName</span><br><span class=\"line\">packageName -v <span class=\"comment\"># 依赖版本号</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修复安全问题\"><a class=\"markdownIt-Anchor\" href=\"#修复安全问题\"></a> 修复安全问题</h3>\n<p>要求 npm@6.x 以后的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm audit <span class=\"comment\"># 显示安全问题</span></span><br><span class=\"line\">npm aduti fix <span class=\"comment\"># 修复安全问题</span></span><br><span class=\"line\">npm aduti fix -f <span class=\"comment\"># 强制修复</span></span><br></pre></td></tr></table></figure>\n<p>更多信息：<br>\n<a href=\"https://medium.com/codebrace/what-is-npm-audit-fix-bf1d7efefff7\" target=\"_blank\" rel=\"noopener\">What is npm audit fix???</a><br>\n<a href=\"https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities\" target=\"_blank\" rel=\"noopener\">Auditing package dependencies for security vulnerabilities</a></p>\n<h3 id=\"模块信息\"><a class=\"markdownIt-Anchor\" href=\"#模块信息\"></a> 模块信息</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info packageName</span><br><span class=\"line\"><span class=\"comment\"># 输出的信息是一个 json格式的，比 package.json 描述文件提供更多的信息。</span></span><br><span class=\"line\">npm view packageName</span><br><span class=\"line\">npm view packageName engines <span class=\"comment\"># 模块需要的 node 版本</span></span><br><span class=\"line\">npm list packageName version <span class=\"comment\"># 当前项目总用到的模块的版本</span></span><br><span class=\"line\">npm v packageName </span><br><span class=\"line\">npm show packageName</span><br><span class=\"line\">npm show packageName versions <span class=\"comment\"># 查看所有发布的版本</span></span><br><span class=\"line\">npm show pacheageName version <span class=\"comment\">#查看最新版本</span></span><br><span class=\"line\">npm show packageName time <span class=\"comment\">#各个版本发布的时间</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看依赖文档\"><a class=\"markdownIt-Anchor\" href=\"#查看依赖文档\"></a> 查看依赖文档</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm docs  packageName <span class=\"comment\"># 会在浏览器里打开依赖文档</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看依赖-bug\"><a class=\"markdownIt-Anchor\" href=\"#查看依赖-bug\"></a> 查看依赖 bug</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm bugs packageName <span class=\"comment\"># 会打开 bugs 页面</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"搜索模块\"><a class=\"markdownIt-Anchor\" href=\"#搜索模块\"></a> 搜索模块</h3>\n<p>记不住依赖确切名字是搜索。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm find packageName <span class=\"comment\"># 查找模块报错 ，可能是源不对。改为官方源。</span></span><br><span class=\"line\">npm s packageName</span><br><span class=\"line\">npm search packageName</span><br></pre></td></tr></table></figure>\n<h3 id=\"npm-源管理\"><a class=\"markdownIt-Anchor\" href=\"#npm-源管理\"></a> npm 源管理</h3>\n<p>安装 <code>nrm</code>模块来管理 npm 源，方便。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm -h <span class=\"comment\"># nrm 命令帮助信息</span></span><br><span class=\"line\">nrm ls <span class=\"comment\"># 所有registries</span></span><br><span class=\"line\">nrm use regNmae <span class=\"comment\"># 使用某个reg 源</span></span><br></pre></td></tr></table></figure>\n<p>其他源管理方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry url <span class=\"comment\"># 将 url 设置为 npm 源</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"npm-缓存管理\"><a class=\"markdownIt-Anchor\" href=\"#npm-缓存管理\"></a> npm 缓存管理</h3>\n<p>使用 npm 缓存，可提升安装速度，因为 npm 会把你安装过的模块缓存下来，下次安装先读缓存，<strong>缓存功能是默认关闭的</strong>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> cache path -g <span class=\"comment\">#path 是绝对路径，这样就开启缓存了</span></span><br><span class=\"line\">npm cache clean <span class=\"comment\">#清除缓存</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\"></a> 问题</h2>\n<ol>\n<li>package.json 的<code>name</code>为<code>webpack</code>，在尝试安装webpack 时报错。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! Refusing to install package with name <span class=\"string\">\"webpack\"</span> under a package</span><br><span class=\"line\">npm ERR! also called <span class=\"string\">\"webpack\"</span>. Did you name your project the same</span><br><span class=\"line\">npm ERR! as the dependency you<span class=\"string\">'re installing?</span></span><br></pre></td></tr></table></figure>\n<p>后查阅资料，得知npm会拒绝安装与本地包相同名字的包，因为这样可能是依赖查找算法无限循环。修改package.json 的name属性即可。所以给项目起名字时记得取一个特殊的名字，以免与你将要安装的包冲突。</p>\n<ol start=\"2\">\n<li>引入 npm 是大小写弄错，会报以下警告：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">There are multiple modules with names that only differ <span class=\"keyword\">in</span> casing.</span><br><span class=\"line\">This can lead to unexpected behavior when compiling on a filesystem with other <span class=\"keyword\">case</span>-semantic.</span><br><span class=\"line\">Use equal casing. Compare these module identifiers:</span><br></pre></td></tr></table></figure>\n<p>有多个模块名字相同，但是名字大小写不同。在同一个问价系统中使用，可能会导致不可预期的行为。</p>\n<h3 id=\"配置-script-命令\"><a class=\"markdownIt-Anchor\" href=\"#配置-script-命令\"></a> 配置 script 命令</h3>\n<p>在 package.json 文件的 <code>script</code>字段里，可设置 npm 运行脚本的命令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"script\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"node ./bin/www\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"node ./test.js\"</span></span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"nodemon ./bin/www\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run start <span class=\"comment\"># 会执行 node ./bin/www</span></span><br><span class=\"line\">npm run dev <span class=\"comment\"># 执行 nodemon ./bin/www</span></span><br><span class=\"line\"><span class=\"comment\"># start 和 test 比较特殊，可不加 run start 和 test 本身是 npm 命令</span></span><br><span class=\"line\">npm start</span><br><span class=\"line\">npm <span class=\"built_in\">test</span></span><br><span class=\"line\">npm t <span class=\"comment\"># 和 npm test 相同</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"npm-i-package_name-options-命令选项\"><a class=\"markdownIt-Anchor\" href=\"#npm-i-package_name-options-命令选项\"></a> npm i package_name  &lt;options&gt; 命令选项</h3>\n<p>-v: --version<br>\n-h, -?, --help, -H: --usage <code>帮助信息</code><br>\n-s, --silent: --loglevel silent<br>\n-q, --quiet: --loglevel warn<br>\n-d: --loglevel info<br>\n-dd, --verbose: --loglevel verbose<br>\n-ddd: --loglevel silly<br>\n-g: --global <code>全局命令</code><br>\n-C: --prefix<br>\n-l: --long<br>\n-m: --message<br>\n-p, --porcelain: --parseable<br>\n-reg: --registry<br>\n-f: --force <code>强制执行</code><br>\n-desc: --description<br>\n-S --save <code>生产依赖</code><br>\n-P: --save-prod <code>生产依赖</code><br>\n-D: --save-dev <code>开发依赖</code><br>\n-O: --save-optional <code>可选依赖</code><br>\n-B: --save-bundle<br>\n-E: --save-exact <code>精确安装指定模块版本</code><br>\n-y: --yes <code>使用默认值</code><br>\n-n: --yes false<br>\nll and la commands: ls --long</p>\n<h3 id=\"更多命苦\"><a class=\"markdownIt-Anchor\" href=\"#更多命苦\"></a> 更多命苦</h3>\n<p><a href=\"https://docs.npmjs.com/cli-documentation/\" target=\"_blank\" rel=\"noopener\">npm cli commomd</a></p>"},{"title":"Vue 组件封装","date":"2019-06-04T17:30:29.000Z","_content":"\n项目中没有从零开始封装一个组件，本文记录一下 Vue 组件封装的基本实践和一些组件的相关知识。主要涉及以下知识点：\n\n- 封装一个组件的代码组织形式；\n- vue 组件的三大核心：\n  - 属性（props、data）;\n  - 事件\n  - 插槽\n- 样式\n- 其他一些杂项\n  - $nextTick 函数的使用\n  - 获取 DOM 元素及在父级组件中执行子组件方法\n\n使用第三方计数库 [countup.js](https://inorganik.github.io/countUp.js/) 创建一个 `count-to` 组件对以上知识进行总结。\n<!-- more -->\n\n## 文件组织形式\n\n在组件文件夹 `component` 下创建一个与组件名相同的文件，文件夹内必须有 `index.js`,并将组件导入到该文件中，这样方便我们引用组件。\n\n`count-to` 文件夹内：\n\n```js\n//index.js\nimport CountTo from './count-to.vue'\nexport default CountTo\n```\n使用组件时，只需这样引入：\n\n```js\nimport CountTo from  \"_c/count-to\";// _c 是组件存放路径\n```\n\n## Vue 组件的三大核心\n\n### 属性（props、data 和样式）\n\nprops 定义了组件`可配置`的数据，确定的组件的核心功能。封装组件时，props 推荐写成对象形式，方便对数据进行验证，提高了代码健壮性也能明确如何使用。\n\n常见的检查类型：`Number`、`String`、`Boolean`、`Array`、`Object`、`Date`、`Function`、`Symbol`、`构造函数`。`null|undefined` 会通过所有类型。\n\n还可以自定义验证函数，指定是否必须和默认值。\n\n```js\nprops:{\n\t// 多个可能的类型\n  propB: [String, Number],\n\t// 必填的字符串\n  propC: {\n    type: String,\n    required: true\n  },\n  // 带有默认值的数字\n  propD: {\n    type: Number,\n    default: 100\n  },\n  // 带有默认值的对象\n  propE: {\n    type: Object,\n    // 对象或数组默认值必须从一个工厂函数获取\n    default: function () {\n      return { message: 'hello' }\n    }\n  },\n  // 自定义验证函数\n  propF: {\n    validator: function (value) {\n      // 这个值必须匹配下列字符串中的一个\n      return ['success', 'warning', 'danger'].indexOf(value) !== -1\n    }\n  }\n}\n```\n通过阅读 [countUP文档](https://github.com/inorganik/CountUp.js)，了解到构造函数`CountUp` 的参数\n```js\nCountUp(eleDOM,startValue,endValue,decimals,duration,options);// eleDOM 是数值显示的元素；endValue 是数值的最终值，这两个参数必须的。\n```\n组件代码如下：\n```html\n<template>\n  <div>\n    <span :id=\"eleId\"></span>\n  </div>\n</template>\n<script>\nimport CountUp from \"countup\";\nexport default {\n  name: \"CountTo\",\n  props: {\n    /**\n     * @description 起始值\n     */\n    startValue: {\n      type: Number,\n      default: 0\n    },\n\n    /**\n     * @description 终止值\n     */\n    endValue: {\n      type: Number,\n      required: true\n    },\n    /**\n     * @description 小数点后保留几位小数（精度）\n     */\n    decimals: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 渐变时长(秒)\n     */\n    duration: {\n      type: Number,\n      default: 1\n    },\n    /**\n     *@description 变速效果\n     */\n    useEasing: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     *@description 分组\n     */\n    useGrouping: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     *@description 分组符号 2,2234\n     */\n    separator: {\n      type: String,\n      default: \",\"\n    },\n    /**\n     *@description 整数小数分隔符 34.56\n     */\n    decimal: {\n      type: String,\n      default: \".\"\n    },\n    /**\n     * @description  动画延迟（秒）\n     */\n    delay: {\n      type: Number,\n      default: 0\n    },\n  },\n  data() {\n    return {};\n  },\n  computed: {\n    eleId() {\n      //使用 this.uid 生成全局唯一id\n      return `count_up_uid${this._uid}`;\n    },\n  },\n  mounted() {\n    //TODO: this.$nextTick\n    this.$nextTick(() => {\n      let options = {\n        useEasing: this.useEasing,\n        useGrouping: this.useGrouping,\n        separator: this.separator,\n        decimal: this.decimal\n      };\n      this.counter = new CountUp(\n        this.eleId,\n        this.startValue,\n        this.endValue,\n        this.decimals,\n        this.duration,\n        options\n      );\n    });\n  }\n};\n</script>\n```\n代码说明：\n`this._uid` 用于生成`组件内唯一`的id值，可用作元素的id，值是递增的。\n`this.$nextTick` 函数接收一个回调函数作为参数，回调函数会在 `DOM更新` 之后执行，如果某些操作必须在DOM更新之后，可将这些操作作为其参数。\n\n计数组件的基本功能就满足了。\n\n这样使用组件：\n```html\n<template>\n\t<div>\n\t\t<count-to :end-value=\"endValue\" :decimals=\"decimals\" :duration=\"5\" title=\"这个会挂载到组件根元素上\">\n\t\t</count-to>\n\t</div>\n</template>\n<script>\n\timport CountTo from '_c/count-to'\n\texport default {\n\t\tname: 'count_to',\n\t\tcomponents: {\n\t\t\tCountTo\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tendValue: 4000,\n\t\t\t\tdecimals: 2,\n\t\t\t\tclassName: '',\n\t\t\t}\n\t\t},\n\t}\n</script>\n```\n```html\n<count-to :end-value=\"endValue\" :decimals=\"decimals\" :duration=\"5\"></count-to>\n```\nprop 的命名：\n\n组件中使用`小驼峰`命名，传递值是使用`-`。\n\n关于 props 传递静态值：\n\n不使用 `v-bind` 指令`:`传递的是静态值，是一个字符串字常量，而不是变量，而使用`:`指令传递的值，是有类型的。`:duration=\"5\"` 传递是 数值 5，`duration=\"5\"` 传递字符串`5`。\n`duration=\"true\"` 传递的是字符串`true` 而不是 Boolean 值真值。\n\n默认值：\n\n传递是引用类型的值（对象和数组），默认值需要使用一个工厂函数返回一个引用类型的值。\n\ninheritAttrs：\n\n如果传递一个组件中没有声明的属性，该属性会挂载都组件元素上，可在组件中将`inheritAttrs` 设置为 `false` 取消这一行为。上面的 `title` 属性会挂载到组件的 `div` 上。该属性不应 style 和 calss 的传递。\n\n```html\n<count-to title=\"会挂载到组件的根元素上\" test=\"test\" :end-value=\"endValue\" :decimals=\"decimals\" :duration=\"5\">\t</count-to>\n```\ntitle 会成为`count-to` 组件的根元素的属性：\n```html\n<div title=\"这是标题\" test=\"测试\">\n\t<span id=\"count_up_uid14\" >10,000.00</span>\n</div>\n```\n\\$attrs 接收没有声明的属性\n\ntitle 和 test 属性没有在组件中声明，依然可以在组件中使用 `attrs` 接收到些属性：\n`<span>没有props接收的父组件数据：{{$attrs}}</span><br/>`\n\n最后的结果：\n```html\n<div title=\"这是标题\" test=\"测试\">\n\t<span>没有props接收的父组件数据：{\n\t\t\"title\": \"这是标题\",\n\t\t\"test\": \"测试\"\n\t}</span><br>\n\t<span id=\"count_up_uid14\">10,000.00</span>\n</div>\n```\ninheritAttrs: false 和 $attrs 结合使用：\n\n**有了 inheritAttrs: false 和 $attrs，你就可以手动决定这些特性会被赋予哪个元素，而不需要声明变量接收**。\n\n{% raw %}\n<p class=\"codepen\" data-height=\"551\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"JackZhouMine\" data-slug-hash=\"yWZdRv\" style=\"height: 551px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"$attrs使用\">\n  <span>See the Pen <a href=\"https://codepen.io/JackZhouMine/pen/yWZdRv/\">\n  $attrs使用</a> by JackZhouMine (<a href=\"https://codepen.io/JackZhouMine\">@JackZhouMine</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n{% endraw %}\n\n#### data vs props\n\nprops 从父级组件入，传入的值由父级组件维护，不允许在子组件中**直接操作**,是否必需和数据类型都是确定的，我们不能改变。\n\ndata 是组件内部维护的状态，组件可直接操作，可随时改变值、类型等。\n\n相同点：都是组件的属性，改变两者都会响应到模板上。\n\n#### 打破 props 单向数据流\n\nVue 不允许在子组件中**直接操作** props ,否则会报错，因为父组件和子组件都可直接操作 props，会使得 props 的管理变得混乱。可通过一些间接的方式操作 props:\n\n1. 将 props 赋值给 data ，然后操作 data;\n2. 在计算属性中返回 props;\n\n以上两种方式，修改后的值，是不能会响应到父组件的，想要在父级组件中也看到修改，需要用到下面的方式：\n\n3. .sync 和 \\$emit 结合\n\n传递props 时加上 `.sync` 修饰符，在子组件内部使用 `$emit` 更新 props。\n\n使用 `.sync` 需要注意：\n - 不能和表达式一起使用：`v-bind:title.sync=\"doc.title + '!'\"`;\n - 不能传递对象字面量：`v-bind.sync=\"{ title: doc.title }\"`。\n\n4. 传递引用类型的 props \n\n传递数组和对象，在子组件中修改他们，会直接反应到父组件上。\n\n### 事件\n\n传统的web开发使用事件驱动：\n- 查询节点→绑定事件监听；\n- 用在页面上触发事件→执行监听器，修改DOM,反馈到页面上；\n  这种模式开发效率低成本高。\n\nVue 的核心思想是数据驱动，视图由数据决定。MVVM 架构的页面变化流程：\n\nView(用户操作) → 执行 DOMlistenrs (ViewModel) → Data 改变 （Model）→ View 改变。\n\n组件和绑定原生事件和自定义事件，绑定原生事件时，需要添加`native`修饰符。\n\n可以在组件的原生事件处理器中触发一个自定义事件，就能在父级组件中监听该事件，执行相关操作。\n\n在 `count-to` 声明一个 `changeValue` 事件：\n\n增加一个按钮：\n```html\n<button @click=\"add\">+</button>\n```\n在事件处理器`add`中触发一个自定义事件：\n```js\nadd() {\n\tthis.$emit(\"changeValue\", Math.random() * 100);\n}\n```\n`$emit` 的第一个参数是事件名称，第二个参数是传递到该事件监听器的参数。\n\n在组件上监听 `changValue`:\n```html\n<template>\n\t<div>\n\t\t<count-to :end-value=\"endValue\" :decimals=\"decimals\" :duration=\"5\" @changeValue=\"changeValue\">\n\t\t</count-to>\n\t</div>\n</template>\n<script>\n\timport CountTo from '_c/count-to'\n\texport default {\n\t\tname: 'count_to',\n\t\tcomponents: {\n\t\t\tCountTo\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tendValue: 4000,\n\t\t\t\tdecimals: 2,\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tchangeValue(value) {\n\t\t\t\tthis.endValue += value\n\t\t\t}\n\t\t},\n\t}\n</script>\n```\n自定义一个更新结束事件：\n```html\n<script>\nimport CountUp from \"countup\";\nexport default {\n  name: \"CountTo\",\n  methods: {\n    getCount() {\n      //使用 id 获取 DOM\n      let span = document.getElementById(this.eleId);\n      let currentValue = Number.parseFloat(span.innerText.split(\",\").join(\"\"));\n      return currentValue.toFixed(this.decimals);\n    },\n    emitEnd() {\n      this.$emit(\"on-end\", this.getCount());\n      // this.$emit('on-end', this.endValue) 使用 endValue 不是 库处理后的值，所有使用 DOM 元素获取更新后的值\n    },\n  },\n  // 监听 props 属性的变化\n  watch: {\n    endValue(newValue) {\n      //update 是库的方法\n      this.counter.update(newValue);\n      setTimeout(() => {\n        this.emitEnd();\n      }, this.duration * 1000 + 2);\n    }\n  }\n};\n</script>\n```\n在组件上使用监听`on-end`:\n```html\n<template>\n\t<div>\n\t\t<count-to :end-value=\"endValue\" :decimals=\"decimals\" :duration=\"5\" @on-end=\"endUp\">\n\t\t</count-to>\n\t</div>\n</template>\n<script>\n\timport CountTo from '_c/count-to'\n\texport default {\n\t\tname: 'count_to',\n\t\tcomponents: {\n\t\t\tCountTo\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tendValue: 4000,\n\t\t\t\tdecimals: 2,\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\t// 更新接收后，会触发自定义事件，然后执行该函数\n\t\t\tendUp(value) {\n\t\t\t\tconsole.log('endValue => ', value);\n\t\t\t},\n\t\t},\n\t}\n</script>\n```\n#### 表单修饰符\n\n- lazy ： 在`change`事件同步数据；\n- trim ： 删除首尾空格；\n- number ：只能输入数字；\n\n#### 事件修饰符\n- stop：阻止冒泡；\n- prevent :阻止默认行为；\n```html\n<!-- 阻止单击事件继续传播 -->\n<a v-on :click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on :submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联 -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n```\n\n### 插槽\n\nprops 传递普通的数据类型，插槽提供了`传递 HTML 代码`的方式，父组件中给的插槽内容，会被放置到子组件的指定为位置。\n\n父组件决定是否显示插槽和怎样显示，子组件决定插槽显示的位置。\n\n三种插槽：\n- 匿名插槽；\n- 命名插槽；\n- 作用域插槽。\n\n我们现在想要在 数值左边显示一个从父级组件传递到组件中的文字提示，数值右边显示人民币符号。\n\n可使用插槽接收文字提示和人民币符号：\n```html\n<template>\n  <div>\n\t<!-- 匿名插槽 找不到放置的位置，就放在这里-->\n    <slot></slot>\n    <span :id=\"eleId\"></span>\n    <slot name=\"right\"></slot>\n\t\t<!-- 命名插槽-->\n  </div>\n</template>\n```\n在父级组件传递插槽内容：\n```html\n<template>\n\t<div>\n\t\t<count-to :end-value=\"endValue\" :decimals=\"decimals\" :duration=\"5\">\n\t\t\t<span>金额：</span>\n\t\t\t<span slot=\"right\"> ￥</span>\n\t\t</count-to>\n\t</div>\n</template>\n```\n最后的html是这样的：\n```html\n<div>\n\t<span>金额：</span>\n\t<span id=\"count_up_uid13\" >4,000.00</span>\n\t<span> ￥</span>\n</div>\n```\n不传递插槽内容时，可以在组件中设置一个默认的插槽内容：\n```html\n<template>\n  <div>\n    <slot>奖金额度：</slot>\n    <span :id=\"eleId\"></span>\n    <slot name=\"right\"> ￥</slot>\n  </div>\n</template>\n```\n父级组件的作用域和子组件的作用是独立的，在父级组件的插槽内容中，获取不到子组件的数据。\n```html\n<template>\n\t<div>\n\t\t<count-to :end-value=\"endValue\" :decimals=\"parentDecimals\" :duration=\"5\">\n\t\t\t<span>精确到几位小数：{{parentDecimals}}</span>\n\t\t\t<span slot=\"right\">{{decimals}}</span>\n\t\t</count-to>\n\t</div>\n</template>\n```\n`parentDecimals` 是父级组件中的属性，插槽内容属于父级作用域，可获取父级的数据；\n`decimals` 是子级组件中的属性，插槽内容属于父级作用域，获取不到值；\n\n想要在父级插槽内容中获取子组件的数据，就需要用到作用域插槽。\n\n现在想要把数值前面的文字从父级组件传递到子组件，并且还要传递文字的颜色：\n```js\ntext: {\n\tname: \"本月工资\",\n\tcolor: \"#F4D03F\"\n},\n```\n子组件这样定义：\n```html\n<template>\n  <div>\n\t\t<!--向父级组件传递text 并起了名字-->\n    <slot v-bind=\"text\" name=\"left\">奖金额度：</slot>\n    <span :id=\"eleId\" ref=\"number\"></span>\n    <slot name=\"right\"> 元</slot>\n  </div>\n</template>\n<script>\nimport CountUp from \"countup\";\nexport default {\n  name: \"CountTo\",\n  props: {\n\t//增加 prop \n\ttext:{\n\t\ttype:Object,\n\t\tdefault:()=>{}\n\t},\n  }\n};\n</script>\n```\n这样使用组件：\n\n```html\n<template>\n  <div>\n    <count-to\n      :end-value=\"endValue\"\n      :decimals=\"decimals\"\n      :duration=\"5\"\n      :text=\"text\"\n    >\n      <template slot-scope=\"data\" slot=\"left\">\n        <span :style=\"{color:data.color}\">{{data.name}}：</span>\n      </template>\n      <span slot=\"right\">￥</span>\n    </count-to>\n  </div>\n</template>\n<script>\nimport CountTo from \"_c/count-to\";\nexport default {\n  name: \"count_to\",\n  components: {\n    CountTo\n  },\n  data() {\n    return {\n      text: {\n        name: \"本月工资\",\n        color: \"#F4D03F\"\n      },\n      endValue: 4000,\n      decimals: 2,\n    };\n  }\n};\n</script>\n```\n`<slot v-bind=\"text\">奖金额度：</slot>`，向父级组件传递数据；\n`slot-scope=\"data\"` 用来接收插槽传递到父组件的数据；\n\n#### 新指令 v-slot\n\n在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 v-slot 指令)。它取代了 slot 和 slot-scope 。\n\n子组件：\n```html\n<template>\n  <div>\n\t\t<!-- 向父级组件传递 textFromChild -->\n    <slot :textFromChild=\"text\" name=\"left\">奖金额度：</slot>\n    <span :id=\"eleId\" ref=\"number\"></span>\n    <slot name=\"right\"> 元</slot>\n  </div>\n</template>\n<script>\nimport CountUp from \"countup\";\nexport default {\n  name: \"CountTo\",\n  props: {\n\t//增加 prop \n\ttext:{\n\t\ttype:Object,\n\t\tdefault:()=>{}\n\t},\n  }\n};\n</script>\n```\n这样使用组件：\n```html\n<template>\n  <div>\n    <count-to\n      :end-value=\"endValue\"\n      :decimals=\"decimals\"\n      :duration=\"5\"\n      :text=\"text\"\n    >\n      <template v-slot:left=\"{textFromChild}\">\n        <span :style=\"{color:textFromChild.color}\">{{textFromChild.name}}：</span>\n      </template>\n      <span slot=\"right\">￥</span>\n    </count-to>\n  </div>\n</template>\n```\n子组件传递过来的变量被放置在一个对象中，使用解构赋值的方式提取出来。\n```html\n<template v-slot:left=\"{textFromChild}\">\n  <span :style=\"{color:textFromChild.color}\">{{textFromChild.name}}：</span>\n</template>\n```\n`v-slot` 指令后跟一个 slot 的名字，插槽具有名字时，可简写为`#`。\n```html\n<template #left=\"{textFromChild}\">\n  <span :style=\"{color:textFromChild.color}\">{{textFromChild.name}}：</span>\n</template>\n```\n不管有几个插槽，都把插槽内容放置在 `template` 中是很好的做法。\n\n## 其他杂项\n\n### 组件生成 id\n\n使用`this_uid`其他字母，可成组件内唯一的id。\n`count-to`组件中，我们使用计算属性，设置 span 的 id。\n```js\neleId() {\n      //使用 this.uid 生成全局唯一id\n      return `count_up_uid${this._uid}`;\n    },\n```\n在组件内部，可以通过 id 或者 class 等获取到 dom，但是不推荐这么做。可通过`ref` 属性，获取到`DOM`，更加简洁，并且可以直接通过`ref` 获取组件或者`DOM`元素。\n\n在下面的函数中获取DOM：\n```js\n    getCount() {\n      // TODO: 获取 DOM\n      //使用 ref 属性获取 DOM 元素\n      // console.log(this.$refs.number.innerText)\n      // return this.$refs.number.innerText\n\n      //使用 id 获取 DOM\n      let span = document.getElementById(this.eleId);\n      let currentValue = Number.parseFloat(span.innerText.split(\",\").join(\"\"));\n      return currentValue.toFixed(this.decimals);\n    },\n```\n\n### $nextTick 函数的使用\n\n`this.$nextTick` 接收一个回调函数作为参数，参数会在 Vue 完成DOM 更新后立即调用。如果某些操作是依赖DOM更新后的，可以把这些操作放在回调函数里执行。\n\n- 在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。\n- mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted。\n\n`Vue.$nexttick` 全局的，`this.$nexttick` 是局部的。\n\n```js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: '123'\n  }\n})\nvm.message = 'new message' // 更改数据\nvm.$el.textContent === 'new message' // false  此时DOM还没渲染\nVue.nextTick(function () {\n  vm.$el.textContent === 'new message' // true\n})\n```\nVue DOM 的更新是异步的，数据变化后，组件不会立即渲染，而是在事件队列刷新时，在下一个事件循环 `tick` 中渲染。\n\n`$nexttick` 返回一个 Promise，可使用 `await` 关键词调用。\n```js\nmethods: {\n  updateMessage: async function () {\n    this.message = '已更新'\n    console.log(this.$el.textContent) // => '未更新'\n    await this.$nextTick()\n    console.log(this.$el.textContent) // => '已更新'\n  }\n}\n```\n### 在父级组件中调用子组件的方法\n\n有时候需要再父级组件中调用子组件的方法。可以在使用组件时指定 `ref` ，然后使用 `ref` 调用。\n比如调用组件的暂停方法，使得数据变化暂停。\n\n在组件中定义暂停方法：\n```html\n<template>\n  <div>\n    <slot :textFromChild=\"text\" name=\"left\">奖金额度：</slot>\n    <span :id=\"eleId\" ref=\"number\" :class=\"countClass\"></span>\n    <slot name=\"right\"> 元</slot>\n  </div>\n</template>\n<script>\nimport CountUp from \"countup\";\nexport default {\n  name: \"CountTo\",\n  data() {\n    return {};\n  },\n  methods: {\n    //TODO:  在父级组件中使用封装组件内部的方法\n    // 在父级组件中调用该方法，实现暂停\n    pause() {\n      this.counter.pauseResume();\n    }\n  }\n};\n</script>\n```\n在父组件中使用调用组件暂停方法。\n```html\n<template>\n  <div>\n    <count-to\n      :end-value=\"endValue\"\n      :decimals=\"decimals\"\n      :duration=\"5\"\n      ref=\"countTo\" \n    >\n\t\t<!-- 指定 ref -->\n      <template #left=\"{textFromChild}\">\n        <span :style=\"{color:textFromChild.color}\">{{textFromChild.name}}：</span>\n      </template>\n      <span slot=\"right\">￥</span>\n    </count-to>\n\t\t<button @click=\"pasue\">暂停</button>\n  </div>\n</template>\n<script>\nimport CountTo from \"_c/count-to\";\nexport default {\n  name: \"count_to\",\n  components: {\n    CountTo\n  },\n  data() {\n    return {\n      endValue: 4000,\n      decimals: 2,\n    };\n  },\n  methods: {\n    pasue() {\n\t\t\t// 使用 refs 访问组件，然后调用器方法\n      this.$refs.countTo.pause();\n    }\n  }\n};\n</script>\n```\n## 样式\n\n组件使用样式，用三种方式：\n- 外部样式；\n- 内部样式；\n- 通过 props 传入 类名，以指定使用内部样式中的哪个类名。\n\n外部样式两种方法引入：\n在 `script` 标签中引入和在 `style` 标签中引入。\n\n```html\n<template>\n  <div>\n    <slot :textFromChild=\"text\" name=\"left\">奖金额度：</slot>\n\t<!-- 将 props 中的类绑定到 class 上 -->\n    <span :id=\"eleId\" ref=\"number\" :class=\"countClass\"></span>\n    <slot name=\"right\"> 元</slot>\n  </div>\n</template>\n<script>\n//引入样式方法一：\n// import './count-to.css'\nimport CountUp from \"countup\";\nexport default {\n  name: \"CountTo\",\n  inheritAttrs: true, //不让父作用域的属性挂载到组件的根元素上\n  props: {\n    /**\n     * @description  自定义样式类名\n     */\n    className: {\n      type: String,\n      default: \"\"\n    }\n  }\n};\n</script>\n<style lang=\"css\">\n/* 引入样式方法二 */\n/* @import './count-to.css' */\n/*  内部样式 */\n.count-to-number {\n  color: red;\n  font-size: 30px;\n}\n</style>\n```\n通过 props 传递类名，实际是在父级组件中指定使用内部样式中的哪个类。\n\n通过 `style` 也可以应用样式到组件上。\n\n\n## 总结\n\n封装一个组件 props  和  data 决定了组件的核心功能，插槽用于向组件传递 html 标签，使得组件更加具有扩展性。通过事件我们可以对组件进行某些操作。改天分析一个第三方组件，好好体会一下这些概念。\n\n## 参考\n- [详解vue组件三大核心概念](https://mp.weixin.qq.com/s?__biz=Mzg5ODA5NTM1Mw==&mid=2247483942&idx=1&sn=bb123cb4d34f94f79881f0fa226da26b&chksm=c06683b0f7110aa6baf6e8ab59870a10fbf9a07083910054a25e67e50d306985103570d88ca2&mpshare=1&scene=24&srcid=&key=ae82afc765e556e1414e399de49e6bc8869fd285d0066971f5cc9b598ff7de811cb0d815acce725f87095b807115ec769907ccf0085d396ef53cc02e077effe6860c3ee0bd74fdf19ca63f73b15a6ba4&ascene=14&uin=MTMzNjE2MjkyMg%3D%3D&devicetype=Windows+7&version=62060833&lang=zh_CN&pass_ticket=ErOTla1jgsmijn6aCklGP3WGqdRSH9bBBL5cgmhDAhNizyP7X0BxM9stZwgKIQOG)\n- [简单理解Vue中的nextTick](https://juejin.im/post/5a6fdb846fb9a01cc0268618)\n- [vue.nextTick 的原理和用途](https://segmentfault.com/a/1190000012861862)\n- [nextTick](https://ustbhuangyi.github.io/vue-analysis/reactive/next-tick.html#js-%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6)\n- [What the Tick is Vue.nextTick?](https://vuejsdevelopers.com/2019/01/22/vue-what-is-next-tick/)\n- [vue 文档Prop](https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81)","source":"_posts/Vue-组件封装.md","raw":"---\ntitle: Vue 组件封装\ndate: 2019-06-05 01:30:29\ntags:\n- vue\n- 前端框架\ncategories:\n- [vue]\n- [前端框架]\n\n---\n\n项目中没有从零开始封装一个组件，本文记录一下 Vue 组件封装的基本实践和一些组件的相关知识。主要涉及以下知识点：\n\n- 封装一个组件的代码组织形式；\n- vue 组件的三大核心：\n  - 属性（props、data）;\n  - 事件\n  - 插槽\n- 样式\n- 其他一些杂项\n  - $nextTick 函数的使用\n  - 获取 DOM 元素及在父级组件中执行子组件方法\n\n使用第三方计数库 [countup.js](https://inorganik.github.io/countUp.js/) 创建一个 `count-to` 组件对以上知识进行总结。\n<!-- more -->\n\n## 文件组织形式\n\n在组件文件夹 `component` 下创建一个与组件名相同的文件，文件夹内必须有 `index.js`,并将组件导入到该文件中，这样方便我们引用组件。\n\n`count-to` 文件夹内：\n\n```js\n//index.js\nimport CountTo from './count-to.vue'\nexport default CountTo\n```\n使用组件时，只需这样引入：\n\n```js\nimport CountTo from  \"_c/count-to\";// _c 是组件存放路径\n```\n\n## Vue 组件的三大核心\n\n### 属性（props、data 和样式）\n\nprops 定义了组件`可配置`的数据，确定的组件的核心功能。封装组件时，props 推荐写成对象形式，方便对数据进行验证，提高了代码健壮性也能明确如何使用。\n\n常见的检查类型：`Number`、`String`、`Boolean`、`Array`、`Object`、`Date`、`Function`、`Symbol`、`构造函数`。`null|undefined` 会通过所有类型。\n\n还可以自定义验证函数，指定是否必须和默认值。\n\n```js\nprops:{\n\t// 多个可能的类型\n  propB: [String, Number],\n\t// 必填的字符串\n  propC: {\n    type: String,\n    required: true\n  },\n  // 带有默认值的数字\n  propD: {\n    type: Number,\n    default: 100\n  },\n  // 带有默认值的对象\n  propE: {\n    type: Object,\n    // 对象或数组默认值必须从一个工厂函数获取\n    default: function () {\n      return { message: 'hello' }\n    }\n  },\n  // 自定义验证函数\n  propF: {\n    validator: function (value) {\n      // 这个值必须匹配下列字符串中的一个\n      return ['success', 'warning', 'danger'].indexOf(value) !== -1\n    }\n  }\n}\n```\n通过阅读 [countUP文档](https://github.com/inorganik/CountUp.js)，了解到构造函数`CountUp` 的参数\n```js\nCountUp(eleDOM,startValue,endValue,decimals,duration,options);// eleDOM 是数值显示的元素；endValue 是数值的最终值，这两个参数必须的。\n```\n组件代码如下：\n```html\n<template>\n  <div>\n    <span :id=\"eleId\"></span>\n  </div>\n</template>\n<script>\nimport CountUp from \"countup\";\nexport default {\n  name: \"CountTo\",\n  props: {\n    /**\n     * @description 起始值\n     */\n    startValue: {\n      type: Number,\n      default: 0\n    },\n\n    /**\n     * @description 终止值\n     */\n    endValue: {\n      type: Number,\n      required: true\n    },\n    /**\n     * @description 小数点后保留几位小数（精度）\n     */\n    decimals: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 渐变时长(秒)\n     */\n    duration: {\n      type: Number,\n      default: 1\n    },\n    /**\n     *@description 变速效果\n     */\n    useEasing: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     *@description 分组\n     */\n    useGrouping: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     *@description 分组符号 2,2234\n     */\n    separator: {\n      type: String,\n      default: \",\"\n    },\n    /**\n     *@description 整数小数分隔符 34.56\n     */\n    decimal: {\n      type: String,\n      default: \".\"\n    },\n    /**\n     * @description  动画延迟（秒）\n     */\n    delay: {\n      type: Number,\n      default: 0\n    },\n  },\n  data() {\n    return {};\n  },\n  computed: {\n    eleId() {\n      //使用 this.uid 生成全局唯一id\n      return `count_up_uid${this._uid}`;\n    },\n  },\n  mounted() {\n    //TODO: this.$nextTick\n    this.$nextTick(() => {\n      let options = {\n        useEasing: this.useEasing,\n        useGrouping: this.useGrouping,\n        separator: this.separator,\n        decimal: this.decimal\n      };\n      this.counter = new CountUp(\n        this.eleId,\n        this.startValue,\n        this.endValue,\n        this.decimals,\n        this.duration,\n        options\n      );\n    });\n  }\n};\n</script>\n```\n代码说明：\n`this._uid` 用于生成`组件内唯一`的id值，可用作元素的id，值是递增的。\n`this.$nextTick` 函数接收一个回调函数作为参数，回调函数会在 `DOM更新` 之后执行，如果某些操作必须在DOM更新之后，可将这些操作作为其参数。\n\n计数组件的基本功能就满足了。\n\n这样使用组件：\n```html\n<template>\n\t<div>\n\t\t<count-to :end-value=\"endValue\" :decimals=\"decimals\" :duration=\"5\" title=\"这个会挂载到组件根元素上\">\n\t\t</count-to>\n\t</div>\n</template>\n<script>\n\timport CountTo from '_c/count-to'\n\texport default {\n\t\tname: 'count_to',\n\t\tcomponents: {\n\t\t\tCountTo\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tendValue: 4000,\n\t\t\t\tdecimals: 2,\n\t\t\t\tclassName: '',\n\t\t\t}\n\t\t},\n\t}\n</script>\n```\n```html\n<count-to :end-value=\"endValue\" :decimals=\"decimals\" :duration=\"5\"></count-to>\n```\nprop 的命名：\n\n组件中使用`小驼峰`命名，传递值是使用`-`。\n\n关于 props 传递静态值：\n\n不使用 `v-bind` 指令`:`传递的是静态值，是一个字符串字常量，而不是变量，而使用`:`指令传递的值，是有类型的。`:duration=\"5\"` 传递是 数值 5，`duration=\"5\"` 传递字符串`5`。\n`duration=\"true\"` 传递的是字符串`true` 而不是 Boolean 值真值。\n\n默认值：\n\n传递是引用类型的值（对象和数组），默认值需要使用一个工厂函数返回一个引用类型的值。\n\ninheritAttrs：\n\n如果传递一个组件中没有声明的属性，该属性会挂载都组件元素上，可在组件中将`inheritAttrs` 设置为 `false` 取消这一行为。上面的 `title` 属性会挂载到组件的 `div` 上。该属性不应 style 和 calss 的传递。\n\n```html\n<count-to title=\"会挂载到组件的根元素上\" test=\"test\" :end-value=\"endValue\" :decimals=\"decimals\" :duration=\"5\">\t</count-to>\n```\ntitle 会成为`count-to` 组件的根元素的属性：\n```html\n<div title=\"这是标题\" test=\"测试\">\n\t<span id=\"count_up_uid14\" >10,000.00</span>\n</div>\n```\n\\$attrs 接收没有声明的属性\n\ntitle 和 test 属性没有在组件中声明，依然可以在组件中使用 `attrs` 接收到些属性：\n`<span>没有props接收的父组件数据：{{$attrs}}</span><br/>`\n\n最后的结果：\n```html\n<div title=\"这是标题\" test=\"测试\">\n\t<span>没有props接收的父组件数据：{\n\t\t\"title\": \"这是标题\",\n\t\t\"test\": \"测试\"\n\t}</span><br>\n\t<span id=\"count_up_uid14\">10,000.00</span>\n</div>\n```\ninheritAttrs: false 和 $attrs 结合使用：\n\n**有了 inheritAttrs: false 和 $attrs，你就可以手动决定这些特性会被赋予哪个元素，而不需要声明变量接收**。\n\n{% raw %}\n<p class=\"codepen\" data-height=\"551\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"JackZhouMine\" data-slug-hash=\"yWZdRv\" style=\"height: 551px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"$attrs使用\">\n  <span>See the Pen <a href=\"https://codepen.io/JackZhouMine/pen/yWZdRv/\">\n  $attrs使用</a> by JackZhouMine (<a href=\"https://codepen.io/JackZhouMine\">@JackZhouMine</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n{% endraw %}\n\n#### data vs props\n\nprops 从父级组件入，传入的值由父级组件维护，不允许在子组件中**直接操作**,是否必需和数据类型都是确定的，我们不能改变。\n\ndata 是组件内部维护的状态，组件可直接操作，可随时改变值、类型等。\n\n相同点：都是组件的属性，改变两者都会响应到模板上。\n\n#### 打破 props 单向数据流\n\nVue 不允许在子组件中**直接操作** props ,否则会报错，因为父组件和子组件都可直接操作 props，会使得 props 的管理变得混乱。可通过一些间接的方式操作 props:\n\n1. 将 props 赋值给 data ，然后操作 data;\n2. 在计算属性中返回 props;\n\n以上两种方式，修改后的值，是不能会响应到父组件的，想要在父级组件中也看到修改，需要用到下面的方式：\n\n3. .sync 和 \\$emit 结合\n\n传递props 时加上 `.sync` 修饰符，在子组件内部使用 `$emit` 更新 props。\n\n使用 `.sync` 需要注意：\n - 不能和表达式一起使用：`v-bind:title.sync=\"doc.title + '!'\"`;\n - 不能传递对象字面量：`v-bind.sync=\"{ title: doc.title }\"`。\n\n4. 传递引用类型的 props \n\n传递数组和对象，在子组件中修改他们，会直接反应到父组件上。\n\n### 事件\n\n传统的web开发使用事件驱动：\n- 查询节点→绑定事件监听；\n- 用在页面上触发事件→执行监听器，修改DOM,反馈到页面上；\n  这种模式开发效率低成本高。\n\nVue 的核心思想是数据驱动，视图由数据决定。MVVM 架构的页面变化流程：\n\nView(用户操作) → 执行 DOMlistenrs (ViewModel) → Data 改变 （Model）→ View 改变。\n\n组件和绑定原生事件和自定义事件，绑定原生事件时，需要添加`native`修饰符。\n\n可以在组件的原生事件处理器中触发一个自定义事件，就能在父级组件中监听该事件，执行相关操作。\n\n在 `count-to` 声明一个 `changeValue` 事件：\n\n增加一个按钮：\n```html\n<button @click=\"add\">+</button>\n```\n在事件处理器`add`中触发一个自定义事件：\n```js\nadd() {\n\tthis.$emit(\"changeValue\", Math.random() * 100);\n}\n```\n`$emit` 的第一个参数是事件名称，第二个参数是传递到该事件监听器的参数。\n\n在组件上监听 `changValue`:\n```html\n<template>\n\t<div>\n\t\t<count-to :end-value=\"endValue\" :decimals=\"decimals\" :duration=\"5\" @changeValue=\"changeValue\">\n\t\t</count-to>\n\t</div>\n</template>\n<script>\n\timport CountTo from '_c/count-to'\n\texport default {\n\t\tname: 'count_to',\n\t\tcomponents: {\n\t\t\tCountTo\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tendValue: 4000,\n\t\t\t\tdecimals: 2,\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tchangeValue(value) {\n\t\t\t\tthis.endValue += value\n\t\t\t}\n\t\t},\n\t}\n</script>\n```\n自定义一个更新结束事件：\n```html\n<script>\nimport CountUp from \"countup\";\nexport default {\n  name: \"CountTo\",\n  methods: {\n    getCount() {\n      //使用 id 获取 DOM\n      let span = document.getElementById(this.eleId);\n      let currentValue = Number.parseFloat(span.innerText.split(\",\").join(\"\"));\n      return currentValue.toFixed(this.decimals);\n    },\n    emitEnd() {\n      this.$emit(\"on-end\", this.getCount());\n      // this.$emit('on-end', this.endValue) 使用 endValue 不是 库处理后的值，所有使用 DOM 元素获取更新后的值\n    },\n  },\n  // 监听 props 属性的变化\n  watch: {\n    endValue(newValue) {\n      //update 是库的方法\n      this.counter.update(newValue);\n      setTimeout(() => {\n        this.emitEnd();\n      }, this.duration * 1000 + 2);\n    }\n  }\n};\n</script>\n```\n在组件上使用监听`on-end`:\n```html\n<template>\n\t<div>\n\t\t<count-to :end-value=\"endValue\" :decimals=\"decimals\" :duration=\"5\" @on-end=\"endUp\">\n\t\t</count-to>\n\t</div>\n</template>\n<script>\n\timport CountTo from '_c/count-to'\n\texport default {\n\t\tname: 'count_to',\n\t\tcomponents: {\n\t\t\tCountTo\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tendValue: 4000,\n\t\t\t\tdecimals: 2,\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\t// 更新接收后，会触发自定义事件，然后执行该函数\n\t\t\tendUp(value) {\n\t\t\t\tconsole.log('endValue => ', value);\n\t\t\t},\n\t\t},\n\t}\n</script>\n```\n#### 表单修饰符\n\n- lazy ： 在`change`事件同步数据；\n- trim ： 删除首尾空格；\n- number ：只能输入数字；\n\n#### 事件修饰符\n- stop：阻止冒泡；\n- prevent :阻止默认行为；\n```html\n<!-- 阻止单击事件继续传播 -->\n<a v-on :click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on :submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联 -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n```\n\n### 插槽\n\nprops 传递普通的数据类型，插槽提供了`传递 HTML 代码`的方式，父组件中给的插槽内容，会被放置到子组件的指定为位置。\n\n父组件决定是否显示插槽和怎样显示，子组件决定插槽显示的位置。\n\n三种插槽：\n- 匿名插槽；\n- 命名插槽；\n- 作用域插槽。\n\n我们现在想要在 数值左边显示一个从父级组件传递到组件中的文字提示，数值右边显示人民币符号。\n\n可使用插槽接收文字提示和人民币符号：\n```html\n<template>\n  <div>\n\t<!-- 匿名插槽 找不到放置的位置，就放在这里-->\n    <slot></slot>\n    <span :id=\"eleId\"></span>\n    <slot name=\"right\"></slot>\n\t\t<!-- 命名插槽-->\n  </div>\n</template>\n```\n在父级组件传递插槽内容：\n```html\n<template>\n\t<div>\n\t\t<count-to :end-value=\"endValue\" :decimals=\"decimals\" :duration=\"5\">\n\t\t\t<span>金额：</span>\n\t\t\t<span slot=\"right\"> ￥</span>\n\t\t</count-to>\n\t</div>\n</template>\n```\n最后的html是这样的：\n```html\n<div>\n\t<span>金额：</span>\n\t<span id=\"count_up_uid13\" >4,000.00</span>\n\t<span> ￥</span>\n</div>\n```\n不传递插槽内容时，可以在组件中设置一个默认的插槽内容：\n```html\n<template>\n  <div>\n    <slot>奖金额度：</slot>\n    <span :id=\"eleId\"></span>\n    <slot name=\"right\"> ￥</slot>\n  </div>\n</template>\n```\n父级组件的作用域和子组件的作用是独立的，在父级组件的插槽内容中，获取不到子组件的数据。\n```html\n<template>\n\t<div>\n\t\t<count-to :end-value=\"endValue\" :decimals=\"parentDecimals\" :duration=\"5\">\n\t\t\t<span>精确到几位小数：{{parentDecimals}}</span>\n\t\t\t<span slot=\"right\">{{decimals}}</span>\n\t\t</count-to>\n\t</div>\n</template>\n```\n`parentDecimals` 是父级组件中的属性，插槽内容属于父级作用域，可获取父级的数据；\n`decimals` 是子级组件中的属性，插槽内容属于父级作用域，获取不到值；\n\n想要在父级插槽内容中获取子组件的数据，就需要用到作用域插槽。\n\n现在想要把数值前面的文字从父级组件传递到子组件，并且还要传递文字的颜色：\n```js\ntext: {\n\tname: \"本月工资\",\n\tcolor: \"#F4D03F\"\n},\n```\n子组件这样定义：\n```html\n<template>\n  <div>\n\t\t<!--向父级组件传递text 并起了名字-->\n    <slot v-bind=\"text\" name=\"left\">奖金额度：</slot>\n    <span :id=\"eleId\" ref=\"number\"></span>\n    <slot name=\"right\"> 元</slot>\n  </div>\n</template>\n<script>\nimport CountUp from \"countup\";\nexport default {\n  name: \"CountTo\",\n  props: {\n\t//增加 prop \n\ttext:{\n\t\ttype:Object,\n\t\tdefault:()=>{}\n\t},\n  }\n};\n</script>\n```\n这样使用组件：\n\n```html\n<template>\n  <div>\n    <count-to\n      :end-value=\"endValue\"\n      :decimals=\"decimals\"\n      :duration=\"5\"\n      :text=\"text\"\n    >\n      <template slot-scope=\"data\" slot=\"left\">\n        <span :style=\"{color:data.color}\">{{data.name}}：</span>\n      </template>\n      <span slot=\"right\">￥</span>\n    </count-to>\n  </div>\n</template>\n<script>\nimport CountTo from \"_c/count-to\";\nexport default {\n  name: \"count_to\",\n  components: {\n    CountTo\n  },\n  data() {\n    return {\n      text: {\n        name: \"本月工资\",\n        color: \"#F4D03F\"\n      },\n      endValue: 4000,\n      decimals: 2,\n    };\n  }\n};\n</script>\n```\n`<slot v-bind=\"text\">奖金额度：</slot>`，向父级组件传递数据；\n`slot-scope=\"data\"` 用来接收插槽传递到父组件的数据；\n\n#### 新指令 v-slot\n\n在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 v-slot 指令)。它取代了 slot 和 slot-scope 。\n\n子组件：\n```html\n<template>\n  <div>\n\t\t<!-- 向父级组件传递 textFromChild -->\n    <slot :textFromChild=\"text\" name=\"left\">奖金额度：</slot>\n    <span :id=\"eleId\" ref=\"number\"></span>\n    <slot name=\"right\"> 元</slot>\n  </div>\n</template>\n<script>\nimport CountUp from \"countup\";\nexport default {\n  name: \"CountTo\",\n  props: {\n\t//增加 prop \n\ttext:{\n\t\ttype:Object,\n\t\tdefault:()=>{}\n\t},\n  }\n};\n</script>\n```\n这样使用组件：\n```html\n<template>\n  <div>\n    <count-to\n      :end-value=\"endValue\"\n      :decimals=\"decimals\"\n      :duration=\"5\"\n      :text=\"text\"\n    >\n      <template v-slot:left=\"{textFromChild}\">\n        <span :style=\"{color:textFromChild.color}\">{{textFromChild.name}}：</span>\n      </template>\n      <span slot=\"right\">￥</span>\n    </count-to>\n  </div>\n</template>\n```\n子组件传递过来的变量被放置在一个对象中，使用解构赋值的方式提取出来。\n```html\n<template v-slot:left=\"{textFromChild}\">\n  <span :style=\"{color:textFromChild.color}\">{{textFromChild.name}}：</span>\n</template>\n```\n`v-slot` 指令后跟一个 slot 的名字，插槽具有名字时，可简写为`#`。\n```html\n<template #left=\"{textFromChild}\">\n  <span :style=\"{color:textFromChild.color}\">{{textFromChild.name}}：</span>\n</template>\n```\n不管有几个插槽，都把插槽内容放置在 `template` 中是很好的做法。\n\n## 其他杂项\n\n### 组件生成 id\n\n使用`this_uid`其他字母，可成组件内唯一的id。\n`count-to`组件中，我们使用计算属性，设置 span 的 id。\n```js\neleId() {\n      //使用 this.uid 生成全局唯一id\n      return `count_up_uid${this._uid}`;\n    },\n```\n在组件内部，可以通过 id 或者 class 等获取到 dom，但是不推荐这么做。可通过`ref` 属性，获取到`DOM`，更加简洁，并且可以直接通过`ref` 获取组件或者`DOM`元素。\n\n在下面的函数中获取DOM：\n```js\n    getCount() {\n      // TODO: 获取 DOM\n      //使用 ref 属性获取 DOM 元素\n      // console.log(this.$refs.number.innerText)\n      // return this.$refs.number.innerText\n\n      //使用 id 获取 DOM\n      let span = document.getElementById(this.eleId);\n      let currentValue = Number.parseFloat(span.innerText.split(\",\").join(\"\"));\n      return currentValue.toFixed(this.decimals);\n    },\n```\n\n### $nextTick 函数的使用\n\n`this.$nextTick` 接收一个回调函数作为参数，参数会在 Vue 完成DOM 更新后立即调用。如果某些操作是依赖DOM更新后的，可以把这些操作放在回调函数里执行。\n\n- 在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。\n- mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted。\n\n`Vue.$nexttick` 全局的，`this.$nexttick` 是局部的。\n\n```js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: '123'\n  }\n})\nvm.message = 'new message' // 更改数据\nvm.$el.textContent === 'new message' // false  此时DOM还没渲染\nVue.nextTick(function () {\n  vm.$el.textContent === 'new message' // true\n})\n```\nVue DOM 的更新是异步的，数据变化后，组件不会立即渲染，而是在事件队列刷新时，在下一个事件循环 `tick` 中渲染。\n\n`$nexttick` 返回一个 Promise，可使用 `await` 关键词调用。\n```js\nmethods: {\n  updateMessage: async function () {\n    this.message = '已更新'\n    console.log(this.$el.textContent) // => '未更新'\n    await this.$nextTick()\n    console.log(this.$el.textContent) // => '已更新'\n  }\n}\n```\n### 在父级组件中调用子组件的方法\n\n有时候需要再父级组件中调用子组件的方法。可以在使用组件时指定 `ref` ，然后使用 `ref` 调用。\n比如调用组件的暂停方法，使得数据变化暂停。\n\n在组件中定义暂停方法：\n```html\n<template>\n  <div>\n    <slot :textFromChild=\"text\" name=\"left\">奖金额度：</slot>\n    <span :id=\"eleId\" ref=\"number\" :class=\"countClass\"></span>\n    <slot name=\"right\"> 元</slot>\n  </div>\n</template>\n<script>\nimport CountUp from \"countup\";\nexport default {\n  name: \"CountTo\",\n  data() {\n    return {};\n  },\n  methods: {\n    //TODO:  在父级组件中使用封装组件内部的方法\n    // 在父级组件中调用该方法，实现暂停\n    pause() {\n      this.counter.pauseResume();\n    }\n  }\n};\n</script>\n```\n在父组件中使用调用组件暂停方法。\n```html\n<template>\n  <div>\n    <count-to\n      :end-value=\"endValue\"\n      :decimals=\"decimals\"\n      :duration=\"5\"\n      ref=\"countTo\" \n    >\n\t\t<!-- 指定 ref -->\n      <template #left=\"{textFromChild}\">\n        <span :style=\"{color:textFromChild.color}\">{{textFromChild.name}}：</span>\n      </template>\n      <span slot=\"right\">￥</span>\n    </count-to>\n\t\t<button @click=\"pasue\">暂停</button>\n  </div>\n</template>\n<script>\nimport CountTo from \"_c/count-to\";\nexport default {\n  name: \"count_to\",\n  components: {\n    CountTo\n  },\n  data() {\n    return {\n      endValue: 4000,\n      decimals: 2,\n    };\n  },\n  methods: {\n    pasue() {\n\t\t\t// 使用 refs 访问组件，然后调用器方法\n      this.$refs.countTo.pause();\n    }\n  }\n};\n</script>\n```\n## 样式\n\n组件使用样式，用三种方式：\n- 外部样式；\n- 内部样式；\n- 通过 props 传入 类名，以指定使用内部样式中的哪个类名。\n\n外部样式两种方法引入：\n在 `script` 标签中引入和在 `style` 标签中引入。\n\n```html\n<template>\n  <div>\n    <slot :textFromChild=\"text\" name=\"left\">奖金额度：</slot>\n\t<!-- 将 props 中的类绑定到 class 上 -->\n    <span :id=\"eleId\" ref=\"number\" :class=\"countClass\"></span>\n    <slot name=\"right\"> 元</slot>\n  </div>\n</template>\n<script>\n//引入样式方法一：\n// import './count-to.css'\nimport CountUp from \"countup\";\nexport default {\n  name: \"CountTo\",\n  inheritAttrs: true, //不让父作用域的属性挂载到组件的根元素上\n  props: {\n    /**\n     * @description  自定义样式类名\n     */\n    className: {\n      type: String,\n      default: \"\"\n    }\n  }\n};\n</script>\n<style lang=\"css\">\n/* 引入样式方法二 */\n/* @import './count-to.css' */\n/*  内部样式 */\n.count-to-number {\n  color: red;\n  font-size: 30px;\n}\n</style>\n```\n通过 props 传递类名，实际是在父级组件中指定使用内部样式中的哪个类。\n\n通过 `style` 也可以应用样式到组件上。\n\n\n## 总结\n\n封装一个组件 props  和  data 决定了组件的核心功能，插槽用于向组件传递 html 标签，使得组件更加具有扩展性。通过事件我们可以对组件进行某些操作。改天分析一个第三方组件，好好体会一下这些概念。\n\n## 参考\n- [详解vue组件三大核心概念](https://mp.weixin.qq.com/s?__biz=Mzg5ODA5NTM1Mw==&mid=2247483942&idx=1&sn=bb123cb4d34f94f79881f0fa226da26b&chksm=c06683b0f7110aa6baf6e8ab59870a10fbf9a07083910054a25e67e50d306985103570d88ca2&mpshare=1&scene=24&srcid=&key=ae82afc765e556e1414e399de49e6bc8869fd285d0066971f5cc9b598ff7de811cb0d815acce725f87095b807115ec769907ccf0085d396ef53cc02e077effe6860c3ee0bd74fdf19ca63f73b15a6ba4&ascene=14&uin=MTMzNjE2MjkyMg%3D%3D&devicetype=Windows+7&version=62060833&lang=zh_CN&pass_ticket=ErOTla1jgsmijn6aCklGP3WGqdRSH9bBBL5cgmhDAhNizyP7X0BxM9stZwgKIQOG)\n- [简单理解Vue中的nextTick](https://juejin.im/post/5a6fdb846fb9a01cc0268618)\n- [vue.nextTick 的原理和用途](https://segmentfault.com/a/1190000012861862)\n- [nextTick](https://ustbhuangyi.github.io/vue-analysis/reactive/next-tick.html#js-%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6)\n- [What the Tick is Vue.nextTick?](https://vuejsdevelopers.com/2019/01/22/vue-what-is-next-tick/)\n- [vue 文档Prop](https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81)","slug":"Vue-组件封装","published":1,"updated":"2019-06-04T17:37:06.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7ccceo000ojwrnvv1o6vv1","content":"<p>项目中没有从零开始封装一个组件，本文记录一下 Vue 组件封装的基本实践和一些组件的相关知识。主要涉及以下知识点：</p>\n<ul>\n<li>封装一个组件的代码组织形式；</li>\n<li>vue 组件的三大核心：\n<ul>\n<li>属性（props、data）;</li>\n<li>事件</li>\n<li>插槽</li>\n</ul>\n</li>\n<li>样式</li>\n<li>其他一些杂项\n<ul>\n<li>$nextTick 函数的使用</li>\n<li>获取 DOM 元素及在父级组件中执行子组件方法</li>\n</ul>\n</li>\n</ul>\n<p>使用第三方计数库 <a href=\"https://inorganik.github.io/countUp.js/\" target=\"_blank\" rel=\"noopener\">countup.js</a> 创建一个 <code>count-to</code> 组件对以上知识进行总结。</p>\n<a id=\"more\"></a>\n<h2 id=\"文件组织形式\"><a class=\"markdownIt-Anchor\" href=\"#文件组织形式\"></a> 文件组织形式</h2>\n<p>在组件文件夹 <code>component</code> 下创建一个与组件名相同的文件，文件夹内必须有 <code>index.js</code>,并将组件导入到该文件中，这样方便我们引用组件。</p>\n<p><code>count-to</code> 文件夹内：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span> <span class=\"string\">'./count-to.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> CountTo</span><br></pre></td></tr></table></figure>\n<p>使用组件时，只需这样引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span>  <span class=\"string\">\"_c/count-to\"</span>;<span class=\"comment\">// _c 是组件存放路径</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"vue-组件的三大核心\"><a class=\"markdownIt-Anchor\" href=\"#vue-组件的三大核心\"></a> Vue 组件的三大核心</h2>\n<h3 id=\"属性props-data-和样式\"><a class=\"markdownIt-Anchor\" href=\"#属性props-data-和样式\"></a> 属性（props、data 和样式）</h3>\n<p>props 定义了组件<code>可配置</code>的数据，确定的组件的核心功能。封装组件时，props 推荐写成对象形式，方便对数据进行验证，提高了代码健壮性也能明确如何使用。</p>\n<p>常见的检查类型：<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Array</code>、<code>Object</code>、<code>Date</code>、<code>Function</code>、<code>Symbol</code>、<code>构造函数</code>。<code>null|undefined</code> 会通过所有类型。</p>\n<p>还可以自定义验证函数，指定是否必须和默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props:&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 多个可能的类型</span></span><br><span class=\"line\">  propB: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span><br><span class=\"line\">\t<span class=\"comment\">// 必填的字符串</span></span><br><span class=\"line\">  propC: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 带有默认值的数字</span></span><br><span class=\"line\">  propD: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 带有默认值的对象</span></span><br><span class=\"line\">  propE: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">'hello'</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 自定义验证函数</span></span><br><span class=\"line\">  propF: &#123;</span><br><span class=\"line\">    validator: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这个值必须匹配下列字符串中的一个</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> [<span class=\"string\">'success'</span>, <span class=\"string\">'warning'</span>, <span class=\"string\">'danger'</span>].indexOf(value) !== <span class=\"number\">-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过阅读 <a href=\"https://github.com/inorganik/CountUp.js\" target=\"_blank\" rel=\"noopener\">countUP文档</a>，了解到构造函数<code>CountUp</code> 的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CountUp(eleDOM,startValue,endValue,decimals,duration,options);<span class=\"comment\">// eleDOM 是数值显示的元素；endValue 是数值的最终值，这两个参数必须的。</span></span><br></pre></td></tr></table></figure>\n<p>组件代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountUp <span class=\"keyword\">from</span> <span class=\"string\">\"countup\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"CountTo\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  props: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     * @description 起始值</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    startValue: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Number</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     * @description 终止值</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    endValue: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Number</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      required: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     * @description 小数点后保留几位小数（精度）</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    decimals: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Number</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     * @description 渐变时长(秒)</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    duration: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Number</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     *@description 变速效果</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    useEasing: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Boolean</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     *@description 分组</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    useGrouping: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Boolean</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     *@description 分组符号 2,2234</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    separator: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"string\">\",\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     *@description 整数小数分隔符 34.56</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    decimal: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"string\">\".\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     * @description  动画延迟（秒）</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    delay: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Number</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    eleId() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">//使用 this.uid 生成全局唯一id</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"string\">`count_up_uid<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>._uid&#125;</span>`</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  mounted() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span> this.$nextTick</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> options = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        useEasing: <span class=\"keyword\">this</span>.useEasing,</span></span><br><span class=\"line\"><span class=\"actionscript\">        useGrouping: <span class=\"keyword\">this</span>.useGrouping,</span></span><br><span class=\"line\"><span class=\"actionscript\">        separator: <span class=\"keyword\">this</span>.separator,</span></span><br><span class=\"line\"><span class=\"actionscript\">        decimal: <span class=\"keyword\">this</span>.decimal</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.counter = <span class=\"keyword\">new</span> CountUp(</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.eleId,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.startValue,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.endValue,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.decimals,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.duration,</span></span><br><span class=\"line\"><span class=\"undefined\">        options</span></span><br><span class=\"line\"><span class=\"undefined\">      );</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码说明：<br>\n<code>this._uid</code> 用于生成<code>组件内唯一</code>的id值，可用作元素的id，值是递增的。<br>\n<code>this.$nextTick</code> 函数接收一个回调函数作为参数，回调函数会在 <code>DOM更新</code> 之后执行，如果某些操作必须在DOM更新之后，可将这些操作作为其参数。</p>\n<p>计数组件的基本功能就满足了。</p>\n<p>这样使用组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"这个会挂载到组件根元素上\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span> <span class=\"string\">'_c/count-to'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'count_to'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomponents: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tCountTo</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tendValue: 4000,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tdecimals: 2,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tclassName: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>prop 的命名：</p>\n<p>组件中使用<code>小驼峰</code>命名，传递值是使用<code>-</code>。</p>\n<p>关于 props 传递静态值：</p>\n<p>不使用 <code>v-bind</code> 指令<code>:</code>传递的是静态值，是一个字符串字常量，而不是变量，而使用<code>:</code>指令传递的值，是有类型的。<code>:duration=&quot;5&quot;</code> 传递是 数值 5，<code>duration=&quot;5&quot;</code> 传递字符串<code>5</code>。<br>\n<code>duration=&quot;true&quot;</code> 传递的是字符串<code>true</code> 而不是 Boolean 值真值。</p>\n<p>默认值：</p>\n<p>传递是引用类型的值（对象和数组），默认值需要使用一个工厂函数返回一个引用类型的值。</p>\n<p>inheritAttrs：</p>\n<p>如果传递一个组件中没有声明的属性，该属性会挂载都组件元素上，可在组件中将<code>inheritAttrs</code> 设置为 <code>false</code> 取消这一行为。上面的 <code>title</code> 属性会挂载到组件的 <code>div</code> 上。该属性不应 style 和 calss 的传递。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">title</span>=<span class=\"string\">\"会挂载到组件的根元素上\"</span> <span class=\"attr\">test</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span>&gt;</span>\t<span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>title 会成为<code>count-to</code> 组件的根元素的属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">title</span>=<span class=\"string\">\"这是标题\"</span> <span class=\"attr\">test</span>=<span class=\"string\">\"测试\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"count_up_uid14\"</span> &gt;</span>10,000.00<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>$attrs 接收没有声明的属性</p>\n<p>title 和 test 属性没有在组件中声明，依然可以在组件中使用 <code>attrs</code> 接收到些属性：<br>\n<code>&lt;span&gt;没有props接收的父组件数据：&lt;/span&gt;&lt;br/&gt;</code></p>\n<p>最后的结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">title</span>=<span class=\"string\">\"这是标题\"</span> <span class=\"attr\">test</span>=<span class=\"string\">\"测试\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>没有props接收的父组件数据：&#123;</span><br><span class=\"line\">\t\t\"title\": \"这是标题\",</span><br><span class=\"line\">\t\t\"test\": \"测试\"</span><br><span class=\"line\">\t&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"count_up_uid14\"</span>&gt;</span>10,000.00<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>inheritAttrs: false 和 $attrs 结合使用：</p>\n<p><strong>有了 inheritAttrs: false 和 $attrs，你就可以手动决定这些特性会被赋予哪个元素，而不需要声明变量接收</strong>。</p>\n\n<p class=\"codepen\" data-height=\"551\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"JackZhouMine\" data-slug-hash=\"yWZdRv\" style=\"height: 551px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"$attrs使用\">\n  <span>See the Pen <a href=\"https://codepen.io/JackZhouMine/pen/yWZdRv/\" target=\"_blank\" rel=\"noopener\">\n  $attrs使用</a> by JackZhouMine (<a href=\"https://codepen.io/JackZhouMine\" target=\"_blank\" rel=\"noopener\">@JackZhouMine</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h4 id=\"data-vs-props\"><a class=\"markdownIt-Anchor\" href=\"#data-vs-props\"></a> data vs props</h4>\n<p>props 从父级组件入，传入的值由父级组件维护，不允许在子组件中<strong>直接操作</strong>,是否必需和数据类型都是确定的，我们不能改变。</p>\n<p>data 是组件内部维护的状态，组件可直接操作，可随时改变值、类型等。</p>\n<p>相同点：都是组件的属性，改变两者都会响应到模板上。</p>\n<h4 id=\"打破-props-单向数据流\"><a class=\"markdownIt-Anchor\" href=\"#打破-props-单向数据流\"></a> 打破 props 单向数据流</h4>\n<p>Vue 不允许在子组件中<strong>直接操作</strong> props ,否则会报错，因为父组件和子组件都可直接操作 props，会使得 props 的管理变得混乱。可通过一些间接的方式操作 props:</p>\n<ol>\n<li>将 props 赋值给 data ，然后操作 data;</li>\n<li>在计算属性中返回 props;</li>\n</ol>\n<p>以上两种方式，修改后的值，是不能会响应到父组件的，想要在父级组件中也看到修改，需要用到下面的方式：</p>\n<ol start=\"3\">\n<li>.sync 和 $emit 结合</li>\n</ol>\n<p>传递props 时加上 <code>.sync</code> 修饰符，在子组件内部使用 <code>$emit</code> 更新 props。</p>\n<p>使用 <code>.sync</code> 需要注意：</p>\n<ul>\n<li>不能和表达式一起使用：<code>v-bind:title.sync=&quot;doc.title + '!'&quot;</code>;</li>\n<li>不能传递对象字面量：<code>v-bind.sync=&quot;{ title: doc.title }&quot;</code>。</li>\n</ul>\n<ol start=\"4\">\n<li>传递引用类型的 props</li>\n</ol>\n<p>传递数组和对象，在子组件中修改他们，会直接反应到父组件上。</p>\n<h3 id=\"事件\"><a class=\"markdownIt-Anchor\" href=\"#事件\"></a> 事件</h3>\n<p>传统的web开发使用事件驱动：</p>\n<ul>\n<li>查询节点→绑定事件监听；</li>\n<li>用在页面上触发事件→执行监听器，修改DOM,反馈到页面上；<br>\n这种模式开发效率低成本高。</li>\n</ul>\n<p>Vue 的核心思想是数据驱动，视图由数据决定。MVVM 架构的页面变化流程：</p>\n<p>View(用户操作) → 执行 DOMlistenrs (ViewModel) → Data 改变 （Model）→ View 改变。</p>\n<p>组件和绑定原生事件和自定义事件，绑定原生事件时，需要添加<code>native</code>修饰符。</p>\n<p>可以在组件的原生事件处理器中触发一个自定义事件，就能在父级组件中监听该事件，执行相关操作。</p>\n<p>在 <code>count-to</code> 声明一个 <code>changeValue</code> 事件：</p>\n<p>增加一个按钮：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"add\"</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在事件处理器<code>add</code>中触发一个自定义事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">\"changeValue\"</span>, <span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>$emit</code> 的第一个参数是事件名称，第二个参数是传递到该事件监听器的参数。</p>\n<p>在组件上监听 <code>changValue</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span> @<span class=\"attr\">changeValue</span>=<span class=\"string\">\"changeValue\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span> <span class=\"string\">'_c/count-to'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'count_to'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomponents: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tCountTo</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tendValue: 4000,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tdecimals: 2,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchangeValue(value) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.endValue += value</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>自定义一个更新结束事件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountUp <span class=\"keyword\">from</span> <span class=\"string\">\"countup\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"CountTo\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    getCount() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">//使用 id 获取 DOM</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> span = <span class=\"built_in\">document</span>.getElementById(<span class=\"keyword\">this</span>.eleId);</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> currentValue = <span class=\"built_in\">Number</span>.parseFloat(span.innerText.split(<span class=\"string\">\",\"</span>).join(<span class=\"string\">\"\"</span>));</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> currentValue.toFixed(<span class=\"keyword\">this</span>.decimals);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    emitEnd() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">\"on-end\"</span>, <span class=\"keyword\">this</span>.getCount());</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">// this.$emit('on-end', this.endValue) 使用 endValue 不是 库处理后的值，所有使用 DOM 元素获取更新后的值</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 监听 props 属性的变化</span></span></span><br><span class=\"line\"><span class=\"undefined\">  watch: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    endValue(newValue) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">//update 是库的方法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.counter.update(newValue);</span></span><br><span class=\"line\"><span class=\"javascript\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.emitEnd();</span></span><br><span class=\"line\"><span class=\"actionscript\">      &#125;, <span class=\"keyword\">this</span>.duration * <span class=\"number\">1000</span> + <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在组件上使用监听<code>on-end</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span> @<span class=\"attr\">on-end</span>=<span class=\"string\">\"endUp\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span> <span class=\"string\">'_c/count-to'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'count_to'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomponents: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tCountTo</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tendValue: 4000,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tdecimals: 2,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">// 更新接收后，会触发自定义事件，然后执行该函数</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tendUp(value) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'endValue =&gt; '</span>, value);</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"表单修饰符\"><a class=\"markdownIt-Anchor\" href=\"#表单修饰符\"></a> 表单修饰符</h4>\n<ul>\n<li>lazy ： 在<code>change</code>事件同步数据；</li>\n<li>trim ： 删除首尾空格；</li>\n<li>number ：只能输入数字；</li>\n</ul>\n<h4 id=\"事件修饰符\"><a class=\"markdownIt-Anchor\" href=\"#事件修饰符\"></a> 事件修饰符</h4>\n<ul>\n<li>stop：阻止冒泡；</li>\n<li>prevent :阻止默认行为；</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on</span> <span class=\"attr\">:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on</span> <span class=\"attr\">:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"插槽\"><a class=\"markdownIt-Anchor\" href=\"#插槽\"></a> 插槽</h3>\n<p>props 传递普通的数据类型，插槽提供了<code>传递 HTML 代码</code>的方式，父组件中给的插槽内容，会被放置到子组件的指定为位置。</p>\n<p>父组件决定是否显示插槽和怎样显示，子组件决定插槽显示的位置。</p>\n<p>三种插槽：</p>\n<ul>\n<li>匿名插槽；</li>\n<li>命名插槽；</li>\n<li>作用域插槽。</li>\n</ul>\n<p>我们现在想要在 数值左边显示一个从父级组件传递到组件中的文字提示，数值右边显示人民币符号。</p>\n<p>可使用插槽接收文字提示和人民币符号：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 匿名插槽 找不到放置的位置，就放在这里--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 命名插槽--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在父级组件传递插槽内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>金额：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"right\"</span>&gt;</span> ￥<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最后的html是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>金额：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"count_up_uid13\"</span> &gt;</span>4,000.00<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> ￥<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>不传递插槽内容时，可以在组件中设置一个默认的插槽内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>奖金额度：<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span>&gt;</span> ￥<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>父级组件的作用域和子组件的作用是独立的，在父级组件的插槽内容中，获取不到子组件的数据。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"parentDecimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>精确到几位小数：&#123;&#123;parentDecimals&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"right\"</span>&gt;</span>&#123;&#123;decimals&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>parentDecimals</code> 是父级组件中的属性，插槽内容属于父级作用域，可获取父级的数据；<br>\n<code>decimals</code> 是子级组件中的属性，插槽内容属于父级作用域，获取不到值；</p>\n<p>想要在父级插槽内容中获取子组件的数据，就需要用到作用域插槽。</p>\n<p>现在想要把数值前面的文字从父级组件传递到子组件，并且还要传递文字的颜色：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text: &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">\"本月工资\"</span>,</span><br><span class=\"line\">\tcolor: <span class=\"string\">\"#F4D03F\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>子组件这样定义：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--向父级组件传递text 并起了名字--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"left\"</span>&gt;</span>奖金额度：<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"number\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span>&gt;</span> 元<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountUp <span class=\"keyword\">from</span> <span class=\"string\">\"countup\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"CountTo\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  props: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"comment\">//增加 prop </span></span></span><br><span class=\"line\"><span class=\"undefined\">\ttext:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\ttype:<span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">default</span>:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样使用组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">count-to</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:text</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">\"data\"</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"left\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123;color:data.color&#125;\"</span>&gt;</span>&#123;&#123;data.name&#125;&#125;：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"right\"</span>&gt;</span>￥<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span> <span class=\"string\">\"_c/count-to\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"count_to\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    CountTo</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      text: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        name: <span class=\"string\">\"本月工资\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        color: <span class=\"string\">\"#F4D03F\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      endValue: 4000,</span></span><br><span class=\"line\"><span class=\"undefined\">      decimals: 2,</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;slot v-bind=&quot;text&quot;&gt;奖金额度：&lt;/slot&gt;</code>，向父级组件传递数据；<br>\n<code>slot-scope=&quot;data&quot;</code> 用来接收插槽传递到父组件的数据；</p>\n<h4 id=\"新指令-v-slot\"><a class=\"markdownIt-Anchor\" href=\"#新指令-v-slot\"></a> 新指令 v-slot</h4>\n<p>在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 v-slot 指令)。它取代了 slot 和 slot-scope 。</p>\n<p>子组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 向父级组件传递 textFromChild --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:textFromChild</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"left\"</span>&gt;</span>奖金额度：<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"number\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span>&gt;</span> 元<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountUp <span class=\"keyword\">from</span> <span class=\"string\">\"countup\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"CountTo\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  props: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"comment\">//增加 prop </span></span></span><br><span class=\"line\"><span class=\"undefined\">\ttext:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\ttype:<span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">default</span>:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样使用组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">count-to</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:text</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:left</span>=<span class=\"string\">\"&#123;textFromChild&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123;color:textFromChild.color&#125;\"</span>&gt;</span>&#123;&#123;textFromChild.name&#125;&#125;：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"right\"</span>&gt;</span>￥<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>子组件传递过来的变量被放置在一个对象中，使用解构赋值的方式提取出来。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:left</span>=<span class=\"string\">\"&#123;textFromChild&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123;color:textFromChild.color&#125;\"</span>&gt;</span>&#123;&#123;textFromChild.name&#125;&#125;：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-slot</code> 指令后跟一个 slot 的名字，插槽具有名字时，可简写为<code>#</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">left</span>=<span class=\"string\">\"&#123;textFromChild&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123;color:textFromChild.color&#125;\"</span>&gt;</span>&#123;&#123;textFromChild.name&#125;&#125;：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>不管有几个插槽，都把插槽内容放置在 <code>template</code> 中是很好的做法。</p>\n<h2 id=\"其他杂项\"><a class=\"markdownIt-Anchor\" href=\"#其他杂项\"></a> 其他杂项</h2>\n<h3 id=\"组件生成-id\"><a class=\"markdownIt-Anchor\" href=\"#组件生成-id\"></a> 组件生成 id</h3>\n<p>使用<code>this_uid</code>其他字母，可成组件内唯一的id。<br>\n<code>count-to</code>组件中，我们使用计算属性，设置 span 的 id。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eleId() &#123;</span><br><span class=\"line\">      <span class=\"comment\">//使用 this.uid 生成全局唯一id</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`count_up_uid<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>._uid&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<p>在组件内部，可以通过 id 或者 class 等获取到 dom，但是不推荐这么做。可通过<code>ref</code> 属性，获取到<code>DOM</code>，更加简洁，并且可以直接通过<code>ref</code> 获取组件或者<code>DOM</code>元素。</p>\n<p>在下面的函数中获取DOM：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCount() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 获取 DOM</span></span><br><span class=\"line\">  <span class=\"comment\">//使用 ref 属性获取 DOM 元素</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(this.$refs.number.innerText)</span></span><br><span class=\"line\">  <span class=\"comment\">// return this.$refs.number.innerText</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//使用 id 获取 DOM</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> span = <span class=\"built_in\">document</span>.getElementById(<span class=\"keyword\">this</span>.eleId);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentValue = <span class=\"built_in\">Number</span>.parseFloat(span.innerText.split(<span class=\"string\">\",\"</span>).join(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentValue.toFixed(<span class=\"keyword\">this</span>.decimals);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"nexttick-函数的使用\"><a class=\"markdownIt-Anchor\" href=\"#nexttick-函数的使用\"></a> $nextTick 函数的使用</h3>\n<p><code>this.$nextTick</code> 接收一个回调函数作为参数，参数会在 Vue 完成DOM 更新后立即调用。如果某些操作是依赖DOM更新后的，可以把这些操作放在回调函数里执行。</p>\n<ul>\n<li>在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。</li>\n<li>mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted。</li>\n</ul>\n<p><code>Vue.$nexttick</code> 全局的，<code>this.$nexttick</code> 是局部的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'123'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.message = <span class=\"string\">'new message'</span> <span class=\"comment\">// 更改数据</span></span><br><span class=\"line\">vm.$el.textContent === <span class=\"string\">'new message'</span> <span class=\"comment\">// false  此时DOM还没渲染</span></span><br><span class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  vm.$el.textContent === <span class=\"string\">'new message'</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Vue DOM 的更新是异步的，数据变化后，组件不会立即渲染，而是在事件队列刷新时，在下一个事件循环 <code>tick</code> 中渲染。</p>\n<p><code>$nexttick</code> 返回一个 Promise，可使用 <code>await</code> 关键词调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  updateMessage: <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.message = <span class=\"string\">'已更新'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el.textContent) <span class=\"comment\">// =&gt; '未更新'</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.$nextTick()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el.textContent) <span class=\"comment\">// =&gt; '已更新'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在父级组件中调用子组件的方法\"><a class=\"markdownIt-Anchor\" href=\"#在父级组件中调用子组件的方法\"></a> 在父级组件中调用子组件的方法</h3>\n<p>有时候需要再父级组件中调用子组件的方法。可以在使用组件时指定 <code>ref</code> ，然后使用 <code>ref</code> 调用。<br>\n比如调用组件的暂停方法，使得数据变化暂停。</p>\n<p>在组件中定义暂停方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:textFromChild</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"left\"</span>&gt;</span>奖金额度：<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"countClass\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span>&gt;</span> 元<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountUp <span class=\"keyword\">from</span> <span class=\"string\">\"countup\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"CountTo\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>  在父级组件中使用封装组件内部的方法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 在父级组件中调用该方法，实现暂停</span></span></span><br><span class=\"line\"><span class=\"undefined\">    pause() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.counter.pauseResume();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在父组件中使用调用组件暂停方法。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">count-to</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">ref</span>=<span class=\"string\">\"countTo\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 指定 ref --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">left</span>=<span class=\"string\">\"&#123;textFromChild&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123;color:textFromChild.color&#125;\"</span>&gt;</span>&#123;&#123;textFromChild.name&#125;&#125;：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"right\"</span>&gt;</span>￥<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"pasue\"</span>&gt;</span>暂停<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span> <span class=\"string\">\"_c/count-to\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"count_to\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    CountTo</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      endValue: 4000,</span></span><br><span class=\"line\"><span class=\"undefined\">      decimals: 2,</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    pasue() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">// 使用 refs 访问组件，然后调用器方法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.$refs.countTo.pause();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"样式\"><a class=\"markdownIt-Anchor\" href=\"#样式\"></a> 样式</h2>\n<p>组件使用样式，用三种方式：</p>\n<ul>\n<li>外部样式；</li>\n<li>内部样式；</li>\n<li>通过 props 传入 类名，以指定使用内部样式中的哪个类名。</li>\n</ul>\n<p>外部样式两种方法引入：<br>\n在 <code>script</code> 标签中引入和在 <code>style</code> 标签中引入。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:textFromChild</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"left\"</span>&gt;</span>奖金额度：<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 将 props 中的类绑定到 class 上 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"countClass\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span>&gt;</span> 元<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">//引入样式方法一：</span></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// import './count-to.css'</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountUp <span class=\"keyword\">from</span> <span class=\"string\">\"countup\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"CountTo\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  inheritAttrs: <span class=\"literal\">true</span>, <span class=\"comment\">//不让父作用域的属性挂载到组件的根元素上</span></span></span><br><span class=\"line\"><span class=\"undefined\">  props: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     * @description  自定义样式类名</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    className: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"comment\">/* 引入样式方法二 */</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"comment\">/* @import './count-to.css' */</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"comment\">/*  内部样式 */</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.count-to-number</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">  font-size: 30px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>通过 props 传递类名，实际是在父级组件中指定使用内部样式中的哪个类。</p>\n<p>通过 <code>style</code> 也可以应用样式到组件上。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>封装一个组件 props  和  data 决定了组件的核心功能，插槽用于向组件传递 html 标签，使得组件更加具有扩展性。通过事件我们可以对组件进行某些操作。改天分析一个第三方组件，好好体会一下这些概念。</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg5ODA5NTM1Mw==&amp;mid=2247483942&amp;idx=1&amp;sn=bb123cb4d34f94f79881f0fa226da26b&amp;chksm=c06683b0f7110aa6baf6e8ab59870a10fbf9a07083910054a25e67e50d306985103570d88ca2&amp;mpshare=1&amp;scene=24&amp;srcid=&amp;key=ae82afc765e556e1414e399de49e6bc8869fd285d0066971f5cc9b598ff7de811cb0d815acce725f87095b807115ec769907ccf0085d396ef53cc02e077effe6860c3ee0bd74fdf19ca63f73b15a6ba4&amp;ascene=14&amp;uin=MTMzNjE2MjkyMg%3D%3D&amp;devicetype=Windows+7&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=ErOTla1jgsmijn6aCklGP3WGqdRSH9bBBL5cgmhDAhNizyP7X0BxM9stZwgKIQOG\" target=\"_blank\" rel=\"noopener\">详解vue组件三大核心概念</a></li>\n<li><a href=\"https://juejin.im/post/5a6fdb846fb9a01cc0268618\" target=\"_blank\" rel=\"noopener\">简单理解Vue中的nextTick</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000012861862\" target=\"_blank\" rel=\"noopener\">vue.nextTick 的原理和用途</a></li>\n<li><a href=\"https://ustbhuangyi.github.io/vue-analysis/reactive/next-tick.html#js-%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6\" target=\"_blank\" rel=\"noopener\">nextTick</a></li>\n<li><a href=\"https://vuejsdevelopers.com/2019/01/22/vue-what-is-next-tick/\" target=\"_blank\" rel=\"noopener\">What the Tick is Vue.nextTick?</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81\" target=\"_blank\" rel=\"noopener\">vue 文档Prop</a></li>\n</ul>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>项目中没有从零开始封装一个组件，本文记录一下 Vue 组件封装的基本实践和一些组件的相关知识。主要涉及以下知识点：</p>\n<ul>\n<li>封装一个组件的代码组织形式；</li>\n<li>vue 组件的三大核心：\n<ul>\n<li>属性（props、data）;</li>\n<li>事件</li>\n<li>插槽</li>\n</ul>\n</li>\n<li>样式</li>\n<li>其他一些杂项\n<ul>\n<li>$nextTick 函数的使用</li>\n<li>获取 DOM 元素及在父级组件中执行子组件方法</li>\n</ul>\n</li>\n</ul>\n<p>使用第三方计数库 <a href=\"https://inorganik.github.io/countUp.js/\" target=\"_blank\" rel=\"noopener\">countup.js</a> 创建一个 <code>count-to</code> 组件对以上知识进行总结。</p>","more":"<h2 id=\"文件组织形式\"><a class=\"markdownIt-Anchor\" href=\"#文件组织形式\"></a> 文件组织形式</h2>\n<p>在组件文件夹 <code>component</code> 下创建一个与组件名相同的文件，文件夹内必须有 <code>index.js</code>,并将组件导入到该文件中，这样方便我们引用组件。</p>\n<p><code>count-to</code> 文件夹内：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span> <span class=\"string\">'./count-to.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> CountTo</span><br></pre></td></tr></table></figure>\n<p>使用组件时，只需这样引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span>  <span class=\"string\">\"_c/count-to\"</span>;<span class=\"comment\">// _c 是组件存放路径</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"vue-组件的三大核心\"><a class=\"markdownIt-Anchor\" href=\"#vue-组件的三大核心\"></a> Vue 组件的三大核心</h2>\n<h3 id=\"属性props-data-和样式\"><a class=\"markdownIt-Anchor\" href=\"#属性props-data-和样式\"></a> 属性（props、data 和样式）</h3>\n<p>props 定义了组件<code>可配置</code>的数据，确定的组件的核心功能。封装组件时，props 推荐写成对象形式，方便对数据进行验证，提高了代码健壮性也能明确如何使用。</p>\n<p>常见的检查类型：<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Array</code>、<code>Object</code>、<code>Date</code>、<code>Function</code>、<code>Symbol</code>、<code>构造函数</code>。<code>null|undefined</code> 会通过所有类型。</p>\n<p>还可以自定义验证函数，指定是否必须和默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props:&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 多个可能的类型</span></span><br><span class=\"line\">  propB: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span><br><span class=\"line\">\t<span class=\"comment\">// 必填的字符串</span></span><br><span class=\"line\">  propC: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 带有默认值的数字</span></span><br><span class=\"line\">  propD: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 带有默认值的对象</span></span><br><span class=\"line\">  propE: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">'hello'</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 自定义验证函数</span></span><br><span class=\"line\">  propF: &#123;</span><br><span class=\"line\">    validator: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这个值必须匹配下列字符串中的一个</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> [<span class=\"string\">'success'</span>, <span class=\"string\">'warning'</span>, <span class=\"string\">'danger'</span>].indexOf(value) !== <span class=\"number\">-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过阅读 <a href=\"https://github.com/inorganik/CountUp.js\" target=\"_blank\" rel=\"noopener\">countUP文档</a>，了解到构造函数<code>CountUp</code> 的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CountUp(eleDOM,startValue,endValue,decimals,duration,options);<span class=\"comment\">// eleDOM 是数值显示的元素；endValue 是数值的最终值，这两个参数必须的。</span></span><br></pre></td></tr></table></figure>\n<p>组件代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountUp <span class=\"keyword\">from</span> <span class=\"string\">\"countup\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"CountTo\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  props: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     * @description 起始值</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    startValue: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Number</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     * @description 终止值</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    endValue: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Number</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      required: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     * @description 小数点后保留几位小数（精度）</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    decimals: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Number</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     * @description 渐变时长(秒)</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    duration: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Number</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     *@description 变速效果</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    useEasing: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Boolean</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     *@description 分组</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    useGrouping: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Boolean</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     *@description 分组符号 2,2234</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    separator: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"string\">\",\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     *@description 整数小数分隔符 34.56</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    decimal: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"string\">\".\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     * @description  动画延迟（秒）</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    delay: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Number</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    eleId() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">//使用 this.uid 生成全局唯一id</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"string\">`count_up_uid<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>._uid&#125;</span>`</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  mounted() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span> this.$nextTick</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> options = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        useEasing: <span class=\"keyword\">this</span>.useEasing,</span></span><br><span class=\"line\"><span class=\"actionscript\">        useGrouping: <span class=\"keyword\">this</span>.useGrouping,</span></span><br><span class=\"line\"><span class=\"actionscript\">        separator: <span class=\"keyword\">this</span>.separator,</span></span><br><span class=\"line\"><span class=\"actionscript\">        decimal: <span class=\"keyword\">this</span>.decimal</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.counter = <span class=\"keyword\">new</span> CountUp(</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.eleId,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.startValue,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.endValue,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.decimals,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.duration,</span></span><br><span class=\"line\"><span class=\"undefined\">        options</span></span><br><span class=\"line\"><span class=\"undefined\">      );</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码说明：<br>\n<code>this._uid</code> 用于生成<code>组件内唯一</code>的id值，可用作元素的id，值是递增的。<br>\n<code>this.$nextTick</code> 函数接收一个回调函数作为参数，回调函数会在 <code>DOM更新</code> 之后执行，如果某些操作必须在DOM更新之后，可将这些操作作为其参数。</p>\n<p>计数组件的基本功能就满足了。</p>\n<p>这样使用组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"这个会挂载到组件根元素上\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span> <span class=\"string\">'_c/count-to'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'count_to'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomponents: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tCountTo</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tendValue: 4000,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tdecimals: 2,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tclassName: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>prop 的命名：</p>\n<p>组件中使用<code>小驼峰</code>命名，传递值是使用<code>-</code>。</p>\n<p>关于 props 传递静态值：</p>\n<p>不使用 <code>v-bind</code> 指令<code>:</code>传递的是静态值，是一个字符串字常量，而不是变量，而使用<code>:</code>指令传递的值，是有类型的。<code>:duration=&quot;5&quot;</code> 传递是 数值 5，<code>duration=&quot;5&quot;</code> 传递字符串<code>5</code>。<br>\n<code>duration=&quot;true&quot;</code> 传递的是字符串<code>true</code> 而不是 Boolean 值真值。</p>\n<p>默认值：</p>\n<p>传递是引用类型的值（对象和数组），默认值需要使用一个工厂函数返回一个引用类型的值。</p>\n<p>inheritAttrs：</p>\n<p>如果传递一个组件中没有声明的属性，该属性会挂载都组件元素上，可在组件中将<code>inheritAttrs</code> 设置为 <code>false</code> 取消这一行为。上面的 <code>title</code> 属性会挂载到组件的 <code>div</code> 上。该属性不应 style 和 calss 的传递。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">title</span>=<span class=\"string\">\"会挂载到组件的根元素上\"</span> <span class=\"attr\">test</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span>&gt;</span>\t<span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>title 会成为<code>count-to</code> 组件的根元素的属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">title</span>=<span class=\"string\">\"这是标题\"</span> <span class=\"attr\">test</span>=<span class=\"string\">\"测试\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"count_up_uid14\"</span> &gt;</span>10,000.00<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>$attrs 接收没有声明的属性</p>\n<p>title 和 test 属性没有在组件中声明，依然可以在组件中使用 <code>attrs</code> 接收到些属性：<br>\n<code>&lt;span&gt;没有props接收的父组件数据：&lt;/span&gt;&lt;br/&gt;</code></p>\n<p>最后的结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">title</span>=<span class=\"string\">\"这是标题\"</span> <span class=\"attr\">test</span>=<span class=\"string\">\"测试\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>没有props接收的父组件数据：&#123;</span><br><span class=\"line\">\t\t\"title\": \"这是标题\",</span><br><span class=\"line\">\t\t\"test\": \"测试\"</span><br><span class=\"line\">\t&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"count_up_uid14\"</span>&gt;</span>10,000.00<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>inheritAttrs: false 和 $attrs 结合使用：</p>\n<p><strong>有了 inheritAttrs: false 和 $attrs，你就可以手动决定这些特性会被赋予哪个元素，而不需要声明变量接收</strong>。</p>\n\n<p class=\"codepen\" data-height=\"551\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"JackZhouMine\" data-slug-hash=\"yWZdRv\" style=\"height: 551px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"$attrs使用\">\n  <span>See the Pen <a href=\"https://codepen.io/JackZhouMine/pen/yWZdRv/\" target=\"_blank\" rel=\"noopener\">\n  $attrs使用</a> by JackZhouMine (<a href=\"https://codepen.io/JackZhouMine\" target=\"_blank\" rel=\"noopener\">@JackZhouMine</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h4 id=\"data-vs-props\"><a class=\"markdownIt-Anchor\" href=\"#data-vs-props\"></a> data vs props</h4>\n<p>props 从父级组件入，传入的值由父级组件维护，不允许在子组件中<strong>直接操作</strong>,是否必需和数据类型都是确定的，我们不能改变。</p>\n<p>data 是组件内部维护的状态，组件可直接操作，可随时改变值、类型等。</p>\n<p>相同点：都是组件的属性，改变两者都会响应到模板上。</p>\n<h4 id=\"打破-props-单向数据流\"><a class=\"markdownIt-Anchor\" href=\"#打破-props-单向数据流\"></a> 打破 props 单向数据流</h4>\n<p>Vue 不允许在子组件中<strong>直接操作</strong> props ,否则会报错，因为父组件和子组件都可直接操作 props，会使得 props 的管理变得混乱。可通过一些间接的方式操作 props:</p>\n<ol>\n<li>将 props 赋值给 data ，然后操作 data;</li>\n<li>在计算属性中返回 props;</li>\n</ol>\n<p>以上两种方式，修改后的值，是不能会响应到父组件的，想要在父级组件中也看到修改，需要用到下面的方式：</p>\n<ol start=\"3\">\n<li>.sync 和 $emit 结合</li>\n</ol>\n<p>传递props 时加上 <code>.sync</code> 修饰符，在子组件内部使用 <code>$emit</code> 更新 props。</p>\n<p>使用 <code>.sync</code> 需要注意：</p>\n<ul>\n<li>不能和表达式一起使用：<code>v-bind:title.sync=&quot;doc.title + '!'&quot;</code>;</li>\n<li>不能传递对象字面量：<code>v-bind.sync=&quot;{ title: doc.title }&quot;</code>。</li>\n</ul>\n<ol start=\"4\">\n<li>传递引用类型的 props</li>\n</ol>\n<p>传递数组和对象，在子组件中修改他们，会直接反应到父组件上。</p>\n<h3 id=\"事件\"><a class=\"markdownIt-Anchor\" href=\"#事件\"></a> 事件</h3>\n<p>传统的web开发使用事件驱动：</p>\n<ul>\n<li>查询节点→绑定事件监听；</li>\n<li>用在页面上触发事件→执行监听器，修改DOM,反馈到页面上；<br>\n这种模式开发效率低成本高。</li>\n</ul>\n<p>Vue 的核心思想是数据驱动，视图由数据决定。MVVM 架构的页面变化流程：</p>\n<p>View(用户操作) → 执行 DOMlistenrs (ViewModel) → Data 改变 （Model）→ View 改变。</p>\n<p>组件和绑定原生事件和自定义事件，绑定原生事件时，需要添加<code>native</code>修饰符。</p>\n<p>可以在组件的原生事件处理器中触发一个自定义事件，就能在父级组件中监听该事件，执行相关操作。</p>\n<p>在 <code>count-to</code> 声明一个 <code>changeValue</code> 事件：</p>\n<p>增加一个按钮：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"add\"</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在事件处理器<code>add</code>中触发一个自定义事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">\"changeValue\"</span>, <span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>$emit</code> 的第一个参数是事件名称，第二个参数是传递到该事件监听器的参数。</p>\n<p>在组件上监听 <code>changValue</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span> @<span class=\"attr\">changeValue</span>=<span class=\"string\">\"changeValue\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span> <span class=\"string\">'_c/count-to'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'count_to'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomponents: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tCountTo</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tendValue: 4000,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tdecimals: 2,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchangeValue(value) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.endValue += value</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>自定义一个更新结束事件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountUp <span class=\"keyword\">from</span> <span class=\"string\">\"countup\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"CountTo\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    getCount() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">//使用 id 获取 DOM</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> span = <span class=\"built_in\">document</span>.getElementById(<span class=\"keyword\">this</span>.eleId);</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> currentValue = <span class=\"built_in\">Number</span>.parseFloat(span.innerText.split(<span class=\"string\">\",\"</span>).join(<span class=\"string\">\"\"</span>));</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> currentValue.toFixed(<span class=\"keyword\">this</span>.decimals);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    emitEnd() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">\"on-end\"</span>, <span class=\"keyword\">this</span>.getCount());</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">// this.$emit('on-end', this.endValue) 使用 endValue 不是 库处理后的值，所有使用 DOM 元素获取更新后的值</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 监听 props 属性的变化</span></span></span><br><span class=\"line\"><span class=\"undefined\">  watch: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    endValue(newValue) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">//update 是库的方法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.counter.update(newValue);</span></span><br><span class=\"line\"><span class=\"javascript\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.emitEnd();</span></span><br><span class=\"line\"><span class=\"actionscript\">      &#125;, <span class=\"keyword\">this</span>.duration * <span class=\"number\">1000</span> + <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在组件上使用监听<code>on-end</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span> @<span class=\"attr\">on-end</span>=<span class=\"string\">\"endUp\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span> <span class=\"string\">'_c/count-to'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'count_to'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomponents: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tCountTo</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tendValue: 4000,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tdecimals: 2,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">// 更新接收后，会触发自定义事件，然后执行该函数</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tendUp(value) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'endValue =&gt; '</span>, value);</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"表单修饰符\"><a class=\"markdownIt-Anchor\" href=\"#表单修饰符\"></a> 表单修饰符</h4>\n<ul>\n<li>lazy ： 在<code>change</code>事件同步数据；</li>\n<li>trim ： 删除首尾空格；</li>\n<li>number ：只能输入数字；</li>\n</ul>\n<h4 id=\"事件修饰符\"><a class=\"markdownIt-Anchor\" href=\"#事件修饰符\"></a> 事件修饰符</h4>\n<ul>\n<li>stop：阻止冒泡；</li>\n<li>prevent :阻止默认行为；</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on</span> <span class=\"attr\">:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on</span> <span class=\"attr\">:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"插槽\"><a class=\"markdownIt-Anchor\" href=\"#插槽\"></a> 插槽</h3>\n<p>props 传递普通的数据类型，插槽提供了<code>传递 HTML 代码</code>的方式，父组件中给的插槽内容，会被放置到子组件的指定为位置。</p>\n<p>父组件决定是否显示插槽和怎样显示，子组件决定插槽显示的位置。</p>\n<p>三种插槽：</p>\n<ul>\n<li>匿名插槽；</li>\n<li>命名插槽；</li>\n<li>作用域插槽。</li>\n</ul>\n<p>我们现在想要在 数值左边显示一个从父级组件传递到组件中的文字提示，数值右边显示人民币符号。</p>\n<p>可使用插槽接收文字提示和人民币符号：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 匿名插槽 找不到放置的位置，就放在这里--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 命名插槽--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在父级组件传递插槽内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>金额：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"right\"</span>&gt;</span> ￥<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最后的html是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>金额：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"count_up_uid13\"</span> &gt;</span>4,000.00<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> ￥<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>不传递插槽内容时，可以在组件中设置一个默认的插槽内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>奖金额度：<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span>&gt;</span> ￥<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>父级组件的作用域和子组件的作用是独立的，在父级组件的插槽内容中，获取不到子组件的数据。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">count-to</span> <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span> <span class=\"attr\">:decimals</span>=<span class=\"string\">\"parentDecimals\"</span> <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>精确到几位小数：&#123;&#123;parentDecimals&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"right\"</span>&gt;</span>&#123;&#123;decimals&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>parentDecimals</code> 是父级组件中的属性，插槽内容属于父级作用域，可获取父级的数据；<br>\n<code>decimals</code> 是子级组件中的属性，插槽内容属于父级作用域，获取不到值；</p>\n<p>想要在父级插槽内容中获取子组件的数据，就需要用到作用域插槽。</p>\n<p>现在想要把数值前面的文字从父级组件传递到子组件，并且还要传递文字的颜色：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text: &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">\"本月工资\"</span>,</span><br><span class=\"line\">\tcolor: <span class=\"string\">\"#F4D03F\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>子组件这样定义：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--向父级组件传递text 并起了名字--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"left\"</span>&gt;</span>奖金额度：<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"number\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span>&gt;</span> 元<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountUp <span class=\"keyword\">from</span> <span class=\"string\">\"countup\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"CountTo\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  props: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"comment\">//增加 prop </span></span></span><br><span class=\"line\"><span class=\"undefined\">\ttext:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\ttype:<span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">default</span>:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样使用组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">count-to</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:text</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">\"data\"</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"left\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123;color:data.color&#125;\"</span>&gt;</span>&#123;&#123;data.name&#125;&#125;：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"right\"</span>&gt;</span>￥<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span> <span class=\"string\">\"_c/count-to\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"count_to\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    CountTo</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      text: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        name: <span class=\"string\">\"本月工资\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        color: <span class=\"string\">\"#F4D03F\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      endValue: 4000,</span></span><br><span class=\"line\"><span class=\"undefined\">      decimals: 2,</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;slot v-bind=&quot;text&quot;&gt;奖金额度：&lt;/slot&gt;</code>，向父级组件传递数据；<br>\n<code>slot-scope=&quot;data&quot;</code> 用来接收插槽传递到父组件的数据；</p>\n<h4 id=\"新指令-v-slot\"><a class=\"markdownIt-Anchor\" href=\"#新指令-v-slot\"></a> 新指令 v-slot</h4>\n<p>在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 v-slot 指令)。它取代了 slot 和 slot-scope 。</p>\n<p>子组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 向父级组件传递 textFromChild --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:textFromChild</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"left\"</span>&gt;</span>奖金额度：<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"number\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span>&gt;</span> 元<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountUp <span class=\"keyword\">from</span> <span class=\"string\">\"countup\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"CountTo\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  props: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"comment\">//增加 prop </span></span></span><br><span class=\"line\"><span class=\"undefined\">\ttext:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\ttype:<span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">default</span>:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样使用组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">count-to</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:text</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:left</span>=<span class=\"string\">\"&#123;textFromChild&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123;color:textFromChild.color&#125;\"</span>&gt;</span>&#123;&#123;textFromChild.name&#125;&#125;：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"right\"</span>&gt;</span>￥<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>子组件传递过来的变量被放置在一个对象中，使用解构赋值的方式提取出来。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:left</span>=<span class=\"string\">\"&#123;textFromChild&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123;color:textFromChild.color&#125;\"</span>&gt;</span>&#123;&#123;textFromChild.name&#125;&#125;：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-slot</code> 指令后跟一个 slot 的名字，插槽具有名字时，可简写为<code>#</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">left</span>=<span class=\"string\">\"&#123;textFromChild&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123;color:textFromChild.color&#125;\"</span>&gt;</span>&#123;&#123;textFromChild.name&#125;&#125;：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>不管有几个插槽，都把插槽内容放置在 <code>template</code> 中是很好的做法。</p>\n<h2 id=\"其他杂项\"><a class=\"markdownIt-Anchor\" href=\"#其他杂项\"></a> 其他杂项</h2>\n<h3 id=\"组件生成-id\"><a class=\"markdownIt-Anchor\" href=\"#组件生成-id\"></a> 组件生成 id</h3>\n<p>使用<code>this_uid</code>其他字母，可成组件内唯一的id。<br>\n<code>count-to</code>组件中，我们使用计算属性，设置 span 的 id。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eleId() &#123;</span><br><span class=\"line\">      <span class=\"comment\">//使用 this.uid 生成全局唯一id</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`count_up_uid<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>._uid&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<p>在组件内部，可以通过 id 或者 class 等获取到 dom，但是不推荐这么做。可通过<code>ref</code> 属性，获取到<code>DOM</code>，更加简洁，并且可以直接通过<code>ref</code> 获取组件或者<code>DOM</code>元素。</p>\n<p>在下面的函数中获取DOM：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCount() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 获取 DOM</span></span><br><span class=\"line\">  <span class=\"comment\">//使用 ref 属性获取 DOM 元素</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(this.$refs.number.innerText)</span></span><br><span class=\"line\">  <span class=\"comment\">// return this.$refs.number.innerText</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//使用 id 获取 DOM</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> span = <span class=\"built_in\">document</span>.getElementById(<span class=\"keyword\">this</span>.eleId);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentValue = <span class=\"built_in\">Number</span>.parseFloat(span.innerText.split(<span class=\"string\">\",\"</span>).join(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentValue.toFixed(<span class=\"keyword\">this</span>.decimals);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"nexttick-函数的使用\"><a class=\"markdownIt-Anchor\" href=\"#nexttick-函数的使用\"></a> $nextTick 函数的使用</h3>\n<p><code>this.$nextTick</code> 接收一个回调函数作为参数，参数会在 Vue 完成DOM 更新后立即调用。如果某些操作是依赖DOM更新后的，可以把这些操作放在回调函数里执行。</p>\n<ul>\n<li>在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。</li>\n<li>mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted。</li>\n</ul>\n<p><code>Vue.$nexttick</code> 全局的，<code>this.$nexttick</code> 是局部的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'123'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.message = <span class=\"string\">'new message'</span> <span class=\"comment\">// 更改数据</span></span><br><span class=\"line\">vm.$el.textContent === <span class=\"string\">'new message'</span> <span class=\"comment\">// false  此时DOM还没渲染</span></span><br><span class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  vm.$el.textContent === <span class=\"string\">'new message'</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Vue DOM 的更新是异步的，数据变化后，组件不会立即渲染，而是在事件队列刷新时，在下一个事件循环 <code>tick</code> 中渲染。</p>\n<p><code>$nexttick</code> 返回一个 Promise，可使用 <code>await</code> 关键词调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  updateMessage: <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.message = <span class=\"string\">'已更新'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el.textContent) <span class=\"comment\">// =&gt; '未更新'</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.$nextTick()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el.textContent) <span class=\"comment\">// =&gt; '已更新'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在父级组件中调用子组件的方法\"><a class=\"markdownIt-Anchor\" href=\"#在父级组件中调用子组件的方法\"></a> 在父级组件中调用子组件的方法</h3>\n<p>有时候需要再父级组件中调用子组件的方法。可以在使用组件时指定 <code>ref</code> ，然后使用 <code>ref</code> 调用。<br>\n比如调用组件的暂停方法，使得数据变化暂停。</p>\n<p>在组件中定义暂停方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:textFromChild</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"left\"</span>&gt;</span>奖金额度：<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"countClass\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span>&gt;</span> 元<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountUp <span class=\"keyword\">from</span> <span class=\"string\">\"countup\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"CountTo\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>  在父级组件中使用封装组件内部的方法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 在父级组件中调用该方法，实现暂停</span></span></span><br><span class=\"line\"><span class=\"undefined\">    pause() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.counter.pauseResume();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在父组件中使用调用组件暂停方法。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">count-to</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:end-value</span>=<span class=\"string\">\"endValue\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:decimals</span>=<span class=\"string\">\"decimals\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:duration</span>=<span class=\"string\">\"5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">ref</span>=<span class=\"string\">\"countTo\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 指定 ref --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">left</span>=<span class=\"string\">\"&#123;textFromChild&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123;color:textFromChild.color&#125;\"</span>&gt;</span>&#123;&#123;textFromChild.name&#125;&#125;：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"right\"</span>&gt;</span>￥<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">count-to</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"pasue\"</span>&gt;</span>暂停<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountTo <span class=\"keyword\">from</span> <span class=\"string\">\"_c/count-to\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"count_to\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    CountTo</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      endValue: 4000,</span></span><br><span class=\"line\"><span class=\"undefined\">      decimals: 2,</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    pasue() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">// 使用 refs 访问组件，然后调用器方法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.$refs.countTo.pause();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"样式\"><a class=\"markdownIt-Anchor\" href=\"#样式\"></a> 样式</h2>\n<p>组件使用样式，用三种方式：</p>\n<ul>\n<li>外部样式；</li>\n<li>内部样式；</li>\n<li>通过 props 传入 类名，以指定使用内部样式中的哪个类名。</li>\n</ul>\n<p>外部样式两种方法引入：<br>\n在 <code>script</code> 标签中引入和在 <code>style</code> 标签中引入。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:textFromChild</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"left\"</span>&gt;</span>奖金额度：<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 将 props 中的类绑定到 class 上 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"eleId\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"countClass\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"right\"</span>&gt;</span> 元<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">//引入样式方法一：</span></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// import './count-to.css'</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> CountUp <span class=\"keyword\">from</span> <span class=\"string\">\"countup\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  name: <span class=\"string\">\"CountTo\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  inheritAttrs: <span class=\"literal\">true</span>, <span class=\"comment\">//不让父作用域的属性挂载到组件的根元素上</span></span></span><br><span class=\"line\"><span class=\"undefined\">  props: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    /**</span></span><br><span class=\"line\"><span class=\"undefined\">     * @description  自定义样式类名</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    className: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">default</span>: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"comment\">/* 引入样式方法二 */</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"comment\">/* @import './count-to.css' */</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"comment\">/*  内部样式 */</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.count-to-number</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">  font-size: 30px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>通过 props 传递类名，实际是在父级组件中指定使用内部样式中的哪个类。</p>\n<p>通过 <code>style</code> 也可以应用样式到组件上。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>封装一个组件 props  和  data 决定了组件的核心功能，插槽用于向组件传递 html 标签，使得组件更加具有扩展性。通过事件我们可以对组件进行某些操作。改天分析一个第三方组件，好好体会一下这些概念。</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg5ODA5NTM1Mw==&amp;mid=2247483942&amp;idx=1&amp;sn=bb123cb4d34f94f79881f0fa226da26b&amp;chksm=c06683b0f7110aa6baf6e8ab59870a10fbf9a07083910054a25e67e50d306985103570d88ca2&amp;mpshare=1&amp;scene=24&amp;srcid=&amp;key=ae82afc765e556e1414e399de49e6bc8869fd285d0066971f5cc9b598ff7de811cb0d815acce725f87095b807115ec769907ccf0085d396ef53cc02e077effe6860c3ee0bd74fdf19ca63f73b15a6ba4&amp;ascene=14&amp;uin=MTMzNjE2MjkyMg%3D%3D&amp;devicetype=Windows+7&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=ErOTla1jgsmijn6aCklGP3WGqdRSH9bBBL5cgmhDAhNizyP7X0BxM9stZwgKIQOG\" target=\"_blank\" rel=\"noopener\">详解vue组件三大核心概念</a></li>\n<li><a href=\"https://juejin.im/post/5a6fdb846fb9a01cc0268618\" target=\"_blank\" rel=\"noopener\">简单理解Vue中的nextTick</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000012861862\" target=\"_blank\" rel=\"noopener\">vue.nextTick 的原理和用途</a></li>\n<li><a href=\"https://ustbhuangyi.github.io/vue-analysis/reactive/next-tick.html#js-%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6\" target=\"_blank\" rel=\"noopener\">nextTick</a></li>\n<li><a href=\"https://vuejsdevelopers.com/2019/01/22/vue-what-is-next-tick/\" target=\"_blank\" rel=\"noopener\">What the Tick is Vue.nextTick?</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81\" target=\"_blank\" rel=\"noopener\">vue 文档Prop</a></li>\n</ul>"},{"title":"git 学习笔记","date":"2019-10-05T17:57:52.000Z","_content":"Git是一个分布式版本控制系统（CVS），可以记录**文本文件**的**变化**（*修改、增加、删除等操作*），比如 TXT、HTML、程序源代码等，<span style=\"color:red;\">不能记录其他文件（图片、音频等二进制文件）的变化，不能记录word文档的变化。</span>\n<!--more-->\n\n@[TOC]\n\n## Git常见操作\n\n### 配置相关\n\n配置分为系统配置、全局配置和仓库配置，全局配置一般对该电脑的使用这都是有效的，也就对所有仓库有效了，仓库配置只对某个仓库有效。命令加`--global`是全局配置。\n\n#### 查看配置\n\n```bash\ngit config --global -l # 全局配置\ngit config --local -l # 仓库配置\n```\n#### 添加配置\n\n```bash\ngit config --global --add <key> value\n```\n#### 删除配置\n\n```bash \ngit config --global --unset <key> # 删除全局 key 配置\n```\n#### 编辑配置文件\n\n```bash\ngit config --global -e # -e 是 --edit 的别名，会在编辑器中打开配置文件。编辑后配置，配置就生效了。\n```\n\n###创建版本仓库\n\n#### 创建新仓库\n\n```bash\n# 在某个文件下，该文件夹成为一个 git 仓库，生成一个 .git 文件夹\ngit init\ngit init <fileName> # 将 fileName 初始化为一个 git 仓库\n# 帮助命令\ngit help <command>\n```\n```bash\n$ ls -a\n./  ../  .git/\n```\n*.git 文件夹内的内容不可轻易改动，里面记录了文件变化*\n#### 克隆已有仓库\n\n```bash \ngit clone <repo> # 在某个文件内执行，会在该文件里生成一个仓库\ngit clone <repo> <directory> # 克隆仓库到指定目录\n```\nclone 做了4件事：\n- `repo`的文件夹被创建；\n- 仓库的所有文件和`提交`都被下载到`repo`内；\n- 在`repo`文件内初始化一个git仓库；\n- 一个远程分支`origin`被创建,关联了该URL；\n- 本地有一个分支（默认名字为`master`）。\n  **四种协议克隆**\n```bash\n# SSH 协议\ngit clone git@github.com:fsliurujie/test.git\n# HTTPS 协议\ngit clone https://github.com/fsliurujie/test.git\n# GIT协议\ngit clone git://github.com/fsliurujie/test.git\n# HTTP 协议\ngit clone http:////github.com/fsliurujie/test.git\n```\n**ssh vs https**\nssh 和 http 是常见的两种克隆方法：\n| 协议  | 是否配置SSH key | 速度 |        PUSH        |\n| :---: | :-------------: | :--: | :----------------: |\n|  ssh  |        √        |  快  | 仓库管理员无需密码 |\n| https |        ×        | 较慢 |  需要用户名和密码  |\n\n创建仓库时可能会用到的其他操作：\n- **创建文件夹**: mkdir  fileName  创建目录\n- **创建文件**: touch  documentName  创建文件\n- **删除文件 ：** rm fileName  删除非空文件夹\n- **强制删除非空文件 ：** *rm -rf  fileName*   f -force 强制删除文件（夹），没有提示 -r--recursive 递归删除 删除空文件可用这个\n\n### 添加更改\n\n添加跟踪的文件之前，一般需要设置排除跟踪的文件，即创建`.gitignore`文件。\n不知道如何编写？复制来，按需修改即可。\n[各种项目的gitignore模板](https://github.com/github/gitignore)\n```bash\ngit add <fileName> # 添加某一个文件到暂存区\ngit add *.js # 增加所有 js 文件的修改\ngit add -u # git add --update 添加修改（modified)和删除（delete）文件（跟踪的文件），不添加（new）新增文件\ngit add . # 添加新增和修改，不添加删除\ngit add -A # git add -all, 合并 git add -u 和 git add . 即添加新增、修改和删除\n```\n\n### 重命名已跟踪的文件\n\n```bash\ngit mv old-name new-name\n```\n该命令和直接重命名文件，然后 `git rm old-file`,`git add new-old`是一样的。\n\n### 撤销修改\n\n在 commit 提交前，不想添加修改，可`撤掉更改`---`文件修改会消失，这是非常危险的操作` *除非你确实清楚不想要那个文件了，否则不要使用这个命令。*\n```bash\n# -- 必须有，没有是分支切换命令\ngit checkout --file\n```\n- `add` 后修改，`checkout`回到**最近一次**add后的状态，还未 add 的更改消失；\n- `commit`后修改，`checkout`回到**最近一次**commit 后的状态，更改消失；\n- 总的来说，**checkout 是撤掉修改**。\n\n添加文件也是一种修改，`checkout`的另一个作用是找回删错的文件：\n```bash\ngit rm file # file 不是你想删除的文件，\ngit checkout --file # 找回误删的文件，但是最近一次 add/commit 后的修改丢失了\n```\n\n### 从暂存区撤回\n\n-**从暂存区撤回**：git  rm --cached \n\nusage: git rm [<options>] [--] <file>...\n-n, --dry-run         dry run\n-q, --quiet           do not list removed files\n--cached              only remove from the index\n-f, --force           override the up-to-date check\n-r                    allow recursive removal\n--ignore-unmatch      exit with a zero status even if nothing matched\n\n**撤回很多文件如何操作？？？**\n\n### commit 相关操作\n\n#### 提交更改到仓库\n```bash\ngit commit -m  提交说明\ngit commit -a # 在编辑器中写提交说明\n```\n#### 合并 commit \n\n```bash\ngit log # 查看提交历史\n```\n当前历史：\n\n```bash\ncommit a00766289ef.......\n    待合并commit\ncommit 22281fca7bf.......\n    第三方库和业务代码分开打包\ncommit 7828194fe69.......\n    各页面分开打包\n```\n\n需要合并'待合并commit'和'第三方库和业务代码分开打包'\n\n先 rebase 操作：\n```bash \ngit rebase -i 7828194f # 参数 i 是不需要合并的commit\n```\n执行完该命令，会进入交互模式：\n```bash\np e2d34a8 脚本配置自定义参数\ns 004fb27 修改README\n\n# Rebase bd25857..004fb27 onto bd25857 (2 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```\n`pick` 会执行 commit\n`squash` 该 commit 会合并到前一个commit\n\n把第二条命令改为`s`，保存并退出，会进入commit message 编辑界面，可编辑新的commit message。\n```bash\n# This is a combination of 2 commits.\n# This is the 1st commit message:\n\n脚本配置自定义参数\n\n# This is the commit message #2:\n\n修改README\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Fri Feb 15 17:31:30 2019 +0800\n#\n# interactive rebase in progress; onto bd25857\n# Last commands done (2 commands done):\n#    pick e2d34a8 脚本配置自定义参数\n#    squash 004fb27 修改README\n# No commands remaining.\n# You are currently rebasing branch 'master' on 'bd25857'.\n#\n# Changes to be committed:\n#\tmodified:   .gitignore\n#\tmodified:   README.md\n#\tnew file:   config/default.js\n#\tnew file:   config/dev.js\n#\tmodified:   package.json\n#\tmodified:   webpack.config.js\n#\n```\n### 修改比较 git diff\n**git status** 命令是查看仓库状态，文件是否被修改，修改会哪些文件还没提交等，不知道修改的具体内容。\n-**查看修改的内容**：git diff  比较的是 暂存区的文件和本地文件。\n  **有变化的内会用红色和绿色标记**\n\n### 版本回退 \n\n#### 查看提交记录\n\n```bash\ngit log \ngit log  --pretty=oneline  #在一行显示提交记录\n```\n#### 版本回退\n\n**HEAD** : 表示当前版本。\n我们可回退到其他版本。\n*HEAD^* ：上一个版本，*HEAD^^* ： 上上个版本。\n*HEAD~n* ：往前第 n 个版本。\n```bash\ngit reset --hard <commitID> # 回退到 commitID 为版本 推荐使用\ngit reset --hard HEAD~n # 回退到往前第 n 个版本\n```\n回退我反悔了，又想回到之前的版本呢？\n\n1. 查看 commitID:\n\n```bash\ngit reflog\n```\n2. 版本穿梭\n\n```bash\ngit reset --hard commitID # 根据commitID 回退\n```\n\n## 工作区和暂存区\n\n- **工作区（工作目录）** : 本地电脑文件夹，该文件夹里有你需要版本控制的文件。\n- **版本仓库Repository**：工作区里有一个隐藏的 .git 文件夹，这不是工作区，这是 Git 仓库。\n- **暂存区Stage**：版本仓库里有暂存区区，Git add 先添加到这里。\n- **分支** :  仓库里有一个分支，git commit 把修改从暂存区提交到分支，一本版本仓库里可能有多个分支。\n  ![Alt text](./工作区---暂存区---版本库.bmp)\n\n### status 和 diff 比较的是哪些？\n\n#### diff 的比较\n\ndiff 可比较工作区和暂存区、工作区和HEAD、暂存区和 HEAD、两个分支、两个提交、两个文件、两个 bolb之间的差异。\n##### 工作区和暂存区的比较\n\n```bash\ngit diff # 比较所有文件\ngit diff -- file1 file2 # 比较个别文件\n```\n##### 暂存区和 HEAD 比较\n```bash\ngit diff --cached  # 暂存区和HEAD的比较 比较所有文件\ngit diff --cached -- file1 file2 比较个别文件\ngit diff --staged  # 暂存区和HEAD的比较\n```\n\n##### 工作区和 HEAD 比较\n\n```bash\ngit diff HEAD # 比较所有文件\ngit diff HEAD -- file1 file2 # 比较个别文件\n```\n\n##### 分支比较\n\n```bash\ngit diff branch-name # 分支 branch-name 的 HEAD 和当前分支 HEAD 比较\ngit diff branch-name1 branch-name2 # 两个分支的 HEAD 比较\ngit diff HEAD HEAD~1 # 当前 HEAD 和上一个 HEAD 比较（两个 commit 的比较）\ngit diff commitID1 commitID2 # 两个 commit 的比较\n```\n\n##### 输出比较结果\n\n```bash\ngit diff >> diff.txt # 将比较结果输出到 diff.txt 文件中\n```\n\n#### status 的比较\n\n实验：\n-  **修改→status**：文件被修改，还没提交到暂存区。可以 git add，或者 git checkout --file 放弃更改 ;\n-  **修改→add→status**：提示更改没commit，可以git reset回退版本。\n-  **修改→add→修改→status**：提示更改没commit，可以git reset回退版本。 提示 文件被修改，还没提交到暂存区。可以 git add，或者 git checkout --file 放弃更改 ；\n-  **修改→add→commit→status**：工作区干净。\n\n**结论：** \n1. **提示没有commit，比较的是暂存区和分支，可进行commit 或者 reset ;**\n2. **提示没有 add，比较的是工作区和暂存区，可 add 到暂存区和 checkout ，放弃更改；**\n3. **status 比较的是工作区和暂存区，暂存区和分支，<span style=\"color:red;\">不比较工作区和分支</span>。**\n\n### 撤销修改\n\n- **撤销修改**:git checkout -- file， 文件回到最后一次 add 的状态。\n  两种情况：\n  1.**修改后还没add**：回到最近的版本库；\n  2.**修改后已add** : 回到 add 之前的状态。\n><span style=\"color:red;\"> - - 很重要，没有它就不是撤销修改，而是切换分支</span>\n\n>git checkout -- . 撤销所有修改\n>git checkout path/../file 撤销文件下中某个文件的修改\n\n*git reset HEAD file* 可以回退版本，也可从暂存区回到工作区。\n\n### 删除文件\n\n**在工作区删除文件**：rm file\n在工作删除文件后，工作区和仓库版本不一致了，可以有两个操作：\n1. 误删了，就把版本库里的最新版本，拿到工作区。 **git  checkout -- file**\n2. 确认删除，那再把版本库里的文件删除。**git rm file**\n\n><span style=\"color:red;\">注意 git rm file 和 rm 的区别：</span>\n>**git rm file**:删除暂存区和工作区，需用用 **git checkeout HEAD -- file** 或者 **git checktout HEAD file**分支恢复。\n\n## 远程仓库\n\n1. 在 Github 上创建仓库并关联本地仓库\n  Git 是分布式版本控制系统，同一个 Git 版本仓库，可分布到不同的机器上，这些机器上的版本库都是一样的。现在只有一台机器，如何分布？\n  **①：在 Github 上创建仓库，将代码推送到该仓库。**推荐做法\n  ②：分布在同一台机器上的不同目录，硬盘坏了所有版本库都没了，不推荐，（也不知道怎么弄）。\n  ③：建一台服务器，从该服务器上克隆版本库，提交版本库到该服务器。成本高，适合公司多人协作开发。\n\n### 关联远程仓库\n\n```bash\ngit remote add origin <repoUrl>\n```\n**origin** 是默认的**远程仓库**的名字，可取其他名。远程仓库可有多个分支。\n\n>\n>\t“origin” 并无特殊含义\n>\t远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 git init 时默认的**起始分支名字**，原因仅仅是它的广泛使用，“origin” 是当你运行 git clone 时默认的**远程仓库名字**。 如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master\n\n### 查看远程仓库\n\n```bash\ngit remote -v # 显示所有远程仓库\n```\n\n### 删除本地分支和远程分支的关联\n\n```bash \ngit remote remove origin\n```\n\n### 推送本地修改到远程仓库\n**第一次推送本地仓库到远程仓库**\n```bash\ngit push -u origin master  # master 是分支名字\n```\n**非第一次推送**\n\n开始工作前，远程仓库可能有更新,需要先**合并**。\n\n### 分支合并\n\n#### 合并分支方法一（推荐）\n1. 获取远程仓库`某个分支的更改`：\n\n```bash\ngit fetch origin <remote-branch>:<temp-branch> \n```\n该命令做了两件事情：\n    ①. 创建本地分支 temp-branch;\n    ②. 将`remote-branch`上的更新保存在 temp-branch 中\n\n2. 与当前分支比较不同：\n\n```\ngit diff <temp-branch> \n```\n3. 将更改`合并`到`当前分支`：\n\n```bash\ngit merge <temp-branch> # <temp-branch> 是合并进`当前分支`的分支\n```\n合并成功会没提示，并且在`当前分支`上有一个合并进来的分支的`提交记录`。\n\n#### 合并分支方法二\n\n1. 获取更改\n\n```bash \ngit fetch <remote> # 获取远程仓库的更改，是哪个分支呢？remote 远程仓库名字，一般是 origin\n```\n\n2. 合并\n\n```bash\ngit merge <remote>/<local-branch> # 将更改合并进入local-branch\n```\n#### 分支合并方法三\n\n以上两个操作合并为一个操作：\n```bash\ngit pull <remote> <local-branch>\n```\n出现`Already up to date.`,则合并成功。\n\n`pull`会自动合并，执行该命令前，需要确保当前分支的修改都提交了，需要提交的修改，可能会使你的修改丢失。执行成功后，有冲突，会显示冲突的文件。\n如果你不想自动合并，可执行`git merge --abort`撤销`pull`。\n\n以上参考：[fetching-a-remote][1]\n\n执行`git merge --abort`可能会出现`fatal: There is no merge to abort (MERGE_HEAD missing).`的提示，说明`撤销合并`没成功。（因为合并成功，合并分支被删除了？）\n\n可用 `git reset --merge`来`撤销合并`。\n\n注意：当`MERGE_HEAD`存在，`git reset --merge`和`git merge --abort`是相同的。\n\n参考：[undoing git merge after merge.renameLimit warning plus conflicts][2]\n\n合并完后，进行编辑，提交修改，最后`推送`：\n```bash\ngit push <remote> <remote-branch> # <remote-branch> 是你工作的远程分支名字，可能别人和你在该分支是上工作\n```\n\n### 强制覆盖合并\n```bash\ngit fetch --all  \ngit reset --hard origin/master \ngit pull\n```\n## 如何避免每次输入密码?\n\n执行某些操作，Git 服务器会询问用户名与密码。可在本地设置保存密码，提高效率。\n\n1. 短期凭证存储\n  凭证保存在**内存中**，几分钟内有效。\n```bash\ngit config --global credential.helper cache\n```\n2. 长期凭证存储\n  凭证保存在硬盘内，长期有效。\n```bash\ngit config --global credential.helper store\n```\n\n##分支管理\n\n### 查看分支\n\ngit branch [-r] [-a] [-v]\n```bash\ngit branch -av # 推荐使用，可参看本地分支和远程分支，并且可看最近的提交\n```\n```bash\ngit branch  # 查看本地分支\n```\n```bash\ngit branch -r # 查看远程分支\n```\n```bash\ngit branch -a # 查看所有分支\n```\n\n### 新建分支\n\n```bash\ngit branch [-f] new-branch  # 新建分支 -f 可选\n```\n```bash\ngit checkout new-branch  # 切换分支\n```\n```bash\ngit checkout -b new-branch # 新建并切换\n```\n\n### 删除本地分支\n\n```bash\ngit branch -D need-delete-local-branch  # 在当前分支下删除自身，不可删除\n```\n删除错了，恢复：\n```bash\ngit reflog  # 查看操作日志，找到需要恢复的commit id\n```\n```bash\ngit branch need-recover-branch commitId  # 恢复分支\n```\n本地分支和远程分支都删除了，怎么恢复？\n先恢复本地分支，再 **push** 一次，即恢复了本地和远程分支\n\n### 删除远程分支\n\n远程以` remote/branch` 形式命名。 例如，如果你想要看你最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。\n```bash\ngit branch origin -d remote-branch\n```\n- git branch -r -d origin/remote-branch-name\n- git branch -d -r origin/remote-branch-name\n\n```bash\ngit push origin --delete origin/<remote-branch>\ngit push origin :<remote-bracnh>\n# 给出本地分支 是推送远程分支\ngit push origin <local-branch>:<remote-bracnh>\n```\n>删除了，但是产生一个问题：其他成员在pull代码时，不会把删除本地的分支\n>fetch 时 加 -p\n>git fetch -p\n\n### 重命名分支\n\n删除远程分支→重命名本地分支→ push 分支到远程仓库\n本地分支重命名：\n```bash\ngit branch -m  old-branch-name new-branch-name # 重命名当前分支，可省略 old-branch-name\n```\npush 新分支分支到远程仓库：\n```bash\ngit push origin new-branch-name \n```\n\n## 已跟踪的文件取消跟踪\n\n有的文件忘记加入到 `.gitignore`，`git add .`后Git 就会默认追踪该文件，追踪后取消追踪的操作：\n1. 从追踪列表中删除：\n```bash\n# 删除某个文件\ngit rm --cached <file>\n# 可加 -r 选项 表示递归删除 带目录时加 -r\ngit rm -r --cached <directory>\n# 删除整个目录\ngit rm --cached . \n# 删除某个目录下的所有文件\n# * 加 \\ 是为了从 git 命令中转译\ngit rm --cached src/\\*\n```\n该操作 从仓库索引中**取消文件跟踪**，文件**仍然保留在工作目录中**。\n2. 增加刚才的文件或者目录到 `.gitignore`\n3. 提交更改\n```bash\ngit add .\ngit commit -m '文件取消跟踪'\n```\n3. 推送至远程\n  推送至远程后，远程仓库不再用取消忽略的文件。\n>[Tell Git not to track a file any more (remove from repo)](https://alvinalexander.com/git/git-rm-file-git-repository-dont-track-accidentally-added)\n>\n>[How to make Git “forget” about a file that was tracked but is now in .gitignore?](https://stackoverflow.com/questions/1274057/how-to-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-gitignore)\n\n## 删除已跟踪的文件\n\n希望从工作目录中**删除**已跟踪的文件，必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。\n0. 修改`.gitingnore`\n1. 删除文件跟踪\n```bash\ngit rm <file>\ngit rm -r <dir>\\*.md\n```\n执行该操作，项目仓库中不再有该文件。\n2. 提交更改\n```bash\ngit add .\n```\n\n## .gitignore 文件相关\n\n### 忽略规则\n\n`.gitignore` 列出的`目录`或者`文件`是不被 git 跟踪的。常常需要忽略的文件如下：\n1. 临时资源，比如缓存、日志、编译后的源码等；\n2. 开发环境配置文件，不同的开发人员有不同的开发习惯，环境配置文件不该被跟踪；\n3. 敏感信息，比如数据库密码、秘钥等。\n\n匹配规则：会以 `.gitignore` 所在目录为顶级目录或者当前目录，**递归**地匹配路径或文件，后面的规则会覆盖前面的规则。\n\n一个文件或者目录被忽略，**不会**有以下行为：\n1. 被 git 跟踪；\n2. 反映到 `git status` 或 `git diff`等命令中；\n3. 被暂存，比如 `git add -A` 不会暂存被忽略的文件。\n\n#### 常见的规则模式\n\n`#` 是注释，注释不能和规则同行，否则规则失效。规则含有 `#`，使用反斜线 `/` 转义。\n1. 常用规则\n\n```bash\n# 某类型文件，使用扩展名\n*.js\n*.log\n# 排除特定文件\n!index.js\n# 特定文件\nindex.css\ntest.json\n\n# 目录及其内容\nnode_modules/\n# 当前目录下的某个目录 .gitignore 所在目录为顶级目录\n/node_modules/\n\n# 任意目录或文件\nnode_modules\n# 当前目录下的任意目录或文件\n/node_modules\n```\n2. 高级规则\n\n```bash\n# 子目录 两层关系\ntarget/logs/\n# 孙子目录 三层关系\ntarget/*/logs/\n# 后代目录 任意层关系\ntarget/**/logs/\n\n# 可选字符匹配 \n# 匹配 build/Build 文件或目录 Build 不会匹配 uild\n[bB]uild \n# 匹配 .pyc 或 .pyo\n.py[co]\n\n# 特定目录下文件\ntarget/*/.bin/*.js\n# 目录匹配通配符\n# 匹配 .deploy_git .deployB\n.deploy*/\n```\n\n#### 其他忽略方式\n\n`.gitingore` 文件应该被提交到仓库里，但是会暴露你的忽略规则，如果不想暴露，可使用以下方式设置：\n- .git/info/exclude 文件配置；\n- 配置全局忽略文件。\n\n### 常见项目的 .gitignore 文件\n\n- [常见gitignore模板](https://github.com/github/gitignore)\n- [在线生成gitignore文件](https://www.gitignore.io/)\n\n### 列出忽略的文件\n\n1. git status\n\n```bash\ngit status --ignored\n```\n2. git ls-files\n\n```bash\ngit ls-files --others -i --exclude-standard\n```\n\n### 删除忽略文件\n\n`git clean -x` 可删除忽略文件,和 `git reset --hard` 一起使用可完全回到某个 commit 状态。\n\n```bash\ngit clean -n # clean 演练，告知哪些文件会被删除\n# 删除当前目录下所有没有 track 的文件，不删除 .gitignore 文件里的文件\ngit clean -f  <path> # 指定路径 path\n\n# 删除当前目录下没有被 track 的文件和目录\ngit clean -df\n\n# 所有没有被 track 的目录和文件，不管 .gitignore 是否匹配\ngit clean -xf\n# \n```\n\n\n### 列出被跟踪的文件\n```bash\ngit ls-tree -r master --name-only\n```\n\n## 常见问题\n\n### 本地仓库版本落后于远程仓库版本\n\n当push到远程仓库时，出现以下错误：\n\n```bash\n Updates were rejected because the tip of your current branch is behind\n```\n解决办法：\n- 强推（远程修改会丢失）\n\n```bash\ngit push origin -f master\n```\n- 先合并，再推送（待验证）\n\n```bash\ngit pull origin master\ngit push origin master\n```\n- 不想合并，先建分支，再推送（待验证）\n\n```bash\ngit branch <branch-name>\ngit push origin <branch-name> # 待验证\n```\n\n### Git推送提示：remote origin already exists\n\n1. 删除远程仓库 (删除报错，可在配置文件中删除仓库信息)\n> git  remote rm origin\n\n2. 在添加远程仓库\n> git remote add origin repo-url\n\n3. 再次推送\n> git push -u origin master\n\n## todo\n\n>[git relog VS git log](https://wjp2013.github.io/tool/git-reflog-git-log-git-cherry-pick/) \n>[Undo changes in Git - Cheat sheet for git checkout, stash, reset, clean, revert, rebase -i, amend](https://dev.to/mzanggl/undo-changes-in-git-cheat-sheet-for-git-checkout-stash-reset-clean-revert-rebase-i-amend-2h1h)\n>[temporary_undo_and_red](https://sdqweb.ipd.kit.edu/wiki/Git_undo#temporary_undo_and_redo)\n### git 进阶\n>[A Hacker's Guide to Git](https://wildlyinaccurate.com/a-hackers-guide-to-git/)\n\n_______________________________________________\n> [Git – Fast Forward 和 no fast foward](https://my.oschina.net/yuzn/blog/82297)\n\n\n[1]: https://help.github.com/articles/fetching-a-remote/\n[2]: https://stackoverflow.com/questions/10737966/undoing-git-merge-after-merge-renamelimit-warning-plus-conflicts/10738171","source":"_posts/git-学习笔记.md","raw":"---\ntitle: git 学习笔记\ndate: 2019-10-06 01:57:52\ntags:\n- git\n- github\ncategories:\n- [版本控制]\n- [工具使用]\n---\nGit是一个分布式版本控制系统（CVS），可以记录**文本文件**的**变化**（*修改、增加、删除等操作*），比如 TXT、HTML、程序源代码等，<span style=\"color:red;\">不能记录其他文件（图片、音频等二进制文件）的变化，不能记录word文档的变化。</span>\n<!--more-->\n\n@[TOC]\n\n## Git常见操作\n\n### 配置相关\n\n配置分为系统配置、全局配置和仓库配置，全局配置一般对该电脑的使用这都是有效的，也就对所有仓库有效了，仓库配置只对某个仓库有效。命令加`--global`是全局配置。\n\n#### 查看配置\n\n```bash\ngit config --global -l # 全局配置\ngit config --local -l # 仓库配置\n```\n#### 添加配置\n\n```bash\ngit config --global --add <key> value\n```\n#### 删除配置\n\n```bash \ngit config --global --unset <key> # 删除全局 key 配置\n```\n#### 编辑配置文件\n\n```bash\ngit config --global -e # -e 是 --edit 的别名，会在编辑器中打开配置文件。编辑后配置，配置就生效了。\n```\n\n###创建版本仓库\n\n#### 创建新仓库\n\n```bash\n# 在某个文件下，该文件夹成为一个 git 仓库，生成一个 .git 文件夹\ngit init\ngit init <fileName> # 将 fileName 初始化为一个 git 仓库\n# 帮助命令\ngit help <command>\n```\n```bash\n$ ls -a\n./  ../  .git/\n```\n*.git 文件夹内的内容不可轻易改动，里面记录了文件变化*\n#### 克隆已有仓库\n\n```bash \ngit clone <repo> # 在某个文件内执行，会在该文件里生成一个仓库\ngit clone <repo> <directory> # 克隆仓库到指定目录\n```\nclone 做了4件事：\n- `repo`的文件夹被创建；\n- 仓库的所有文件和`提交`都被下载到`repo`内；\n- 在`repo`文件内初始化一个git仓库；\n- 一个远程分支`origin`被创建,关联了该URL；\n- 本地有一个分支（默认名字为`master`）。\n  **四种协议克隆**\n```bash\n# SSH 协议\ngit clone git@github.com:fsliurujie/test.git\n# HTTPS 协议\ngit clone https://github.com/fsliurujie/test.git\n# GIT协议\ngit clone git://github.com/fsliurujie/test.git\n# HTTP 协议\ngit clone http:////github.com/fsliurujie/test.git\n```\n**ssh vs https**\nssh 和 http 是常见的两种克隆方法：\n| 协议  | 是否配置SSH key | 速度 |        PUSH        |\n| :---: | :-------------: | :--: | :----------------: |\n|  ssh  |        √        |  快  | 仓库管理员无需密码 |\n| https |        ×        | 较慢 |  需要用户名和密码  |\n\n创建仓库时可能会用到的其他操作：\n- **创建文件夹**: mkdir  fileName  创建目录\n- **创建文件**: touch  documentName  创建文件\n- **删除文件 ：** rm fileName  删除非空文件夹\n- **强制删除非空文件 ：** *rm -rf  fileName*   f -force 强制删除文件（夹），没有提示 -r--recursive 递归删除 删除空文件可用这个\n\n### 添加更改\n\n添加跟踪的文件之前，一般需要设置排除跟踪的文件，即创建`.gitignore`文件。\n不知道如何编写？复制来，按需修改即可。\n[各种项目的gitignore模板](https://github.com/github/gitignore)\n```bash\ngit add <fileName> # 添加某一个文件到暂存区\ngit add *.js # 增加所有 js 文件的修改\ngit add -u # git add --update 添加修改（modified)和删除（delete）文件（跟踪的文件），不添加（new）新增文件\ngit add . # 添加新增和修改，不添加删除\ngit add -A # git add -all, 合并 git add -u 和 git add . 即添加新增、修改和删除\n```\n\n### 重命名已跟踪的文件\n\n```bash\ngit mv old-name new-name\n```\n该命令和直接重命名文件，然后 `git rm old-file`,`git add new-old`是一样的。\n\n### 撤销修改\n\n在 commit 提交前，不想添加修改，可`撤掉更改`---`文件修改会消失，这是非常危险的操作` *除非你确实清楚不想要那个文件了，否则不要使用这个命令。*\n```bash\n# -- 必须有，没有是分支切换命令\ngit checkout --file\n```\n- `add` 后修改，`checkout`回到**最近一次**add后的状态，还未 add 的更改消失；\n- `commit`后修改，`checkout`回到**最近一次**commit 后的状态，更改消失；\n- 总的来说，**checkout 是撤掉修改**。\n\n添加文件也是一种修改，`checkout`的另一个作用是找回删错的文件：\n```bash\ngit rm file # file 不是你想删除的文件，\ngit checkout --file # 找回误删的文件，但是最近一次 add/commit 后的修改丢失了\n```\n\n### 从暂存区撤回\n\n-**从暂存区撤回**：git  rm --cached \n\nusage: git rm [<options>] [--] <file>...\n-n, --dry-run         dry run\n-q, --quiet           do not list removed files\n--cached              only remove from the index\n-f, --force           override the up-to-date check\n-r                    allow recursive removal\n--ignore-unmatch      exit with a zero status even if nothing matched\n\n**撤回很多文件如何操作？？？**\n\n### commit 相关操作\n\n#### 提交更改到仓库\n```bash\ngit commit -m  提交说明\ngit commit -a # 在编辑器中写提交说明\n```\n#### 合并 commit \n\n```bash\ngit log # 查看提交历史\n```\n当前历史：\n\n```bash\ncommit a00766289ef.......\n    待合并commit\ncommit 22281fca7bf.......\n    第三方库和业务代码分开打包\ncommit 7828194fe69.......\n    各页面分开打包\n```\n\n需要合并'待合并commit'和'第三方库和业务代码分开打包'\n\n先 rebase 操作：\n```bash \ngit rebase -i 7828194f # 参数 i 是不需要合并的commit\n```\n执行完该命令，会进入交互模式：\n```bash\np e2d34a8 脚本配置自定义参数\ns 004fb27 修改README\n\n# Rebase bd25857..004fb27 onto bd25857 (2 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```\n`pick` 会执行 commit\n`squash` 该 commit 会合并到前一个commit\n\n把第二条命令改为`s`，保存并退出，会进入commit message 编辑界面，可编辑新的commit message。\n```bash\n# This is a combination of 2 commits.\n# This is the 1st commit message:\n\n脚本配置自定义参数\n\n# This is the commit message #2:\n\n修改README\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Fri Feb 15 17:31:30 2019 +0800\n#\n# interactive rebase in progress; onto bd25857\n# Last commands done (2 commands done):\n#    pick e2d34a8 脚本配置自定义参数\n#    squash 004fb27 修改README\n# No commands remaining.\n# You are currently rebasing branch 'master' on 'bd25857'.\n#\n# Changes to be committed:\n#\tmodified:   .gitignore\n#\tmodified:   README.md\n#\tnew file:   config/default.js\n#\tnew file:   config/dev.js\n#\tmodified:   package.json\n#\tmodified:   webpack.config.js\n#\n```\n### 修改比较 git diff\n**git status** 命令是查看仓库状态，文件是否被修改，修改会哪些文件还没提交等，不知道修改的具体内容。\n-**查看修改的内容**：git diff  比较的是 暂存区的文件和本地文件。\n  **有变化的内会用红色和绿色标记**\n\n### 版本回退 \n\n#### 查看提交记录\n\n```bash\ngit log \ngit log  --pretty=oneline  #在一行显示提交记录\n```\n#### 版本回退\n\n**HEAD** : 表示当前版本。\n我们可回退到其他版本。\n*HEAD^* ：上一个版本，*HEAD^^* ： 上上个版本。\n*HEAD~n* ：往前第 n 个版本。\n```bash\ngit reset --hard <commitID> # 回退到 commitID 为版本 推荐使用\ngit reset --hard HEAD~n # 回退到往前第 n 个版本\n```\n回退我反悔了，又想回到之前的版本呢？\n\n1. 查看 commitID:\n\n```bash\ngit reflog\n```\n2. 版本穿梭\n\n```bash\ngit reset --hard commitID # 根据commitID 回退\n```\n\n## 工作区和暂存区\n\n- **工作区（工作目录）** : 本地电脑文件夹，该文件夹里有你需要版本控制的文件。\n- **版本仓库Repository**：工作区里有一个隐藏的 .git 文件夹，这不是工作区，这是 Git 仓库。\n- **暂存区Stage**：版本仓库里有暂存区区，Git add 先添加到这里。\n- **分支** :  仓库里有一个分支，git commit 把修改从暂存区提交到分支，一本版本仓库里可能有多个分支。\n  ![Alt text](./工作区---暂存区---版本库.bmp)\n\n### status 和 diff 比较的是哪些？\n\n#### diff 的比较\n\ndiff 可比较工作区和暂存区、工作区和HEAD、暂存区和 HEAD、两个分支、两个提交、两个文件、两个 bolb之间的差异。\n##### 工作区和暂存区的比较\n\n```bash\ngit diff # 比较所有文件\ngit diff -- file1 file2 # 比较个别文件\n```\n##### 暂存区和 HEAD 比较\n```bash\ngit diff --cached  # 暂存区和HEAD的比较 比较所有文件\ngit diff --cached -- file1 file2 比较个别文件\ngit diff --staged  # 暂存区和HEAD的比较\n```\n\n##### 工作区和 HEAD 比较\n\n```bash\ngit diff HEAD # 比较所有文件\ngit diff HEAD -- file1 file2 # 比较个别文件\n```\n\n##### 分支比较\n\n```bash\ngit diff branch-name # 分支 branch-name 的 HEAD 和当前分支 HEAD 比较\ngit diff branch-name1 branch-name2 # 两个分支的 HEAD 比较\ngit diff HEAD HEAD~1 # 当前 HEAD 和上一个 HEAD 比较（两个 commit 的比较）\ngit diff commitID1 commitID2 # 两个 commit 的比较\n```\n\n##### 输出比较结果\n\n```bash\ngit diff >> diff.txt # 将比较结果输出到 diff.txt 文件中\n```\n\n#### status 的比较\n\n实验：\n-  **修改→status**：文件被修改，还没提交到暂存区。可以 git add，或者 git checkout --file 放弃更改 ;\n-  **修改→add→status**：提示更改没commit，可以git reset回退版本。\n-  **修改→add→修改→status**：提示更改没commit，可以git reset回退版本。 提示 文件被修改，还没提交到暂存区。可以 git add，或者 git checkout --file 放弃更改 ；\n-  **修改→add→commit→status**：工作区干净。\n\n**结论：** \n1. **提示没有commit，比较的是暂存区和分支，可进行commit 或者 reset ;**\n2. **提示没有 add，比较的是工作区和暂存区，可 add 到暂存区和 checkout ，放弃更改；**\n3. **status 比较的是工作区和暂存区，暂存区和分支，<span style=\"color:red;\">不比较工作区和分支</span>。**\n\n### 撤销修改\n\n- **撤销修改**:git checkout -- file， 文件回到最后一次 add 的状态。\n  两种情况：\n  1.**修改后还没add**：回到最近的版本库；\n  2.**修改后已add** : 回到 add 之前的状态。\n><span style=\"color:red;\"> - - 很重要，没有它就不是撤销修改，而是切换分支</span>\n\n>git checkout -- . 撤销所有修改\n>git checkout path/../file 撤销文件下中某个文件的修改\n\n*git reset HEAD file* 可以回退版本，也可从暂存区回到工作区。\n\n### 删除文件\n\n**在工作区删除文件**：rm file\n在工作删除文件后，工作区和仓库版本不一致了，可以有两个操作：\n1. 误删了，就把版本库里的最新版本，拿到工作区。 **git  checkout -- file**\n2. 确认删除，那再把版本库里的文件删除。**git rm file**\n\n><span style=\"color:red;\">注意 git rm file 和 rm 的区别：</span>\n>**git rm file**:删除暂存区和工作区，需用用 **git checkeout HEAD -- file** 或者 **git checktout HEAD file**分支恢复。\n\n## 远程仓库\n\n1. 在 Github 上创建仓库并关联本地仓库\n  Git 是分布式版本控制系统，同一个 Git 版本仓库，可分布到不同的机器上，这些机器上的版本库都是一样的。现在只有一台机器，如何分布？\n  **①：在 Github 上创建仓库，将代码推送到该仓库。**推荐做法\n  ②：分布在同一台机器上的不同目录，硬盘坏了所有版本库都没了，不推荐，（也不知道怎么弄）。\n  ③：建一台服务器，从该服务器上克隆版本库，提交版本库到该服务器。成本高，适合公司多人协作开发。\n\n### 关联远程仓库\n\n```bash\ngit remote add origin <repoUrl>\n```\n**origin** 是默认的**远程仓库**的名字，可取其他名。远程仓库可有多个分支。\n\n>\n>\t“origin” 并无特殊含义\n>\t远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 git init 时默认的**起始分支名字**，原因仅仅是它的广泛使用，“origin” 是当你运行 git clone 时默认的**远程仓库名字**。 如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master\n\n### 查看远程仓库\n\n```bash\ngit remote -v # 显示所有远程仓库\n```\n\n### 删除本地分支和远程分支的关联\n\n```bash \ngit remote remove origin\n```\n\n### 推送本地修改到远程仓库\n**第一次推送本地仓库到远程仓库**\n```bash\ngit push -u origin master  # master 是分支名字\n```\n**非第一次推送**\n\n开始工作前，远程仓库可能有更新,需要先**合并**。\n\n### 分支合并\n\n#### 合并分支方法一（推荐）\n1. 获取远程仓库`某个分支的更改`：\n\n```bash\ngit fetch origin <remote-branch>:<temp-branch> \n```\n该命令做了两件事情：\n    ①. 创建本地分支 temp-branch;\n    ②. 将`remote-branch`上的更新保存在 temp-branch 中\n\n2. 与当前分支比较不同：\n\n```\ngit diff <temp-branch> \n```\n3. 将更改`合并`到`当前分支`：\n\n```bash\ngit merge <temp-branch> # <temp-branch> 是合并进`当前分支`的分支\n```\n合并成功会没提示，并且在`当前分支`上有一个合并进来的分支的`提交记录`。\n\n#### 合并分支方法二\n\n1. 获取更改\n\n```bash \ngit fetch <remote> # 获取远程仓库的更改，是哪个分支呢？remote 远程仓库名字，一般是 origin\n```\n\n2. 合并\n\n```bash\ngit merge <remote>/<local-branch> # 将更改合并进入local-branch\n```\n#### 分支合并方法三\n\n以上两个操作合并为一个操作：\n```bash\ngit pull <remote> <local-branch>\n```\n出现`Already up to date.`,则合并成功。\n\n`pull`会自动合并，执行该命令前，需要确保当前分支的修改都提交了，需要提交的修改，可能会使你的修改丢失。执行成功后，有冲突，会显示冲突的文件。\n如果你不想自动合并，可执行`git merge --abort`撤销`pull`。\n\n以上参考：[fetching-a-remote][1]\n\n执行`git merge --abort`可能会出现`fatal: There is no merge to abort (MERGE_HEAD missing).`的提示，说明`撤销合并`没成功。（因为合并成功，合并分支被删除了？）\n\n可用 `git reset --merge`来`撤销合并`。\n\n注意：当`MERGE_HEAD`存在，`git reset --merge`和`git merge --abort`是相同的。\n\n参考：[undoing git merge after merge.renameLimit warning plus conflicts][2]\n\n合并完后，进行编辑，提交修改，最后`推送`：\n```bash\ngit push <remote> <remote-branch> # <remote-branch> 是你工作的远程分支名字，可能别人和你在该分支是上工作\n```\n\n### 强制覆盖合并\n```bash\ngit fetch --all  \ngit reset --hard origin/master \ngit pull\n```\n## 如何避免每次输入密码?\n\n执行某些操作，Git 服务器会询问用户名与密码。可在本地设置保存密码，提高效率。\n\n1. 短期凭证存储\n  凭证保存在**内存中**，几分钟内有效。\n```bash\ngit config --global credential.helper cache\n```\n2. 长期凭证存储\n  凭证保存在硬盘内，长期有效。\n```bash\ngit config --global credential.helper store\n```\n\n##分支管理\n\n### 查看分支\n\ngit branch [-r] [-a] [-v]\n```bash\ngit branch -av # 推荐使用，可参看本地分支和远程分支，并且可看最近的提交\n```\n```bash\ngit branch  # 查看本地分支\n```\n```bash\ngit branch -r # 查看远程分支\n```\n```bash\ngit branch -a # 查看所有分支\n```\n\n### 新建分支\n\n```bash\ngit branch [-f] new-branch  # 新建分支 -f 可选\n```\n```bash\ngit checkout new-branch  # 切换分支\n```\n```bash\ngit checkout -b new-branch # 新建并切换\n```\n\n### 删除本地分支\n\n```bash\ngit branch -D need-delete-local-branch  # 在当前分支下删除自身，不可删除\n```\n删除错了，恢复：\n```bash\ngit reflog  # 查看操作日志，找到需要恢复的commit id\n```\n```bash\ngit branch need-recover-branch commitId  # 恢复分支\n```\n本地分支和远程分支都删除了，怎么恢复？\n先恢复本地分支，再 **push** 一次，即恢复了本地和远程分支\n\n### 删除远程分支\n\n远程以` remote/branch` 形式命名。 例如，如果你想要看你最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。\n```bash\ngit branch origin -d remote-branch\n```\n- git branch -r -d origin/remote-branch-name\n- git branch -d -r origin/remote-branch-name\n\n```bash\ngit push origin --delete origin/<remote-branch>\ngit push origin :<remote-bracnh>\n# 给出本地分支 是推送远程分支\ngit push origin <local-branch>:<remote-bracnh>\n```\n>删除了，但是产生一个问题：其他成员在pull代码时，不会把删除本地的分支\n>fetch 时 加 -p\n>git fetch -p\n\n### 重命名分支\n\n删除远程分支→重命名本地分支→ push 分支到远程仓库\n本地分支重命名：\n```bash\ngit branch -m  old-branch-name new-branch-name # 重命名当前分支，可省略 old-branch-name\n```\npush 新分支分支到远程仓库：\n```bash\ngit push origin new-branch-name \n```\n\n## 已跟踪的文件取消跟踪\n\n有的文件忘记加入到 `.gitignore`，`git add .`后Git 就会默认追踪该文件，追踪后取消追踪的操作：\n1. 从追踪列表中删除：\n```bash\n# 删除某个文件\ngit rm --cached <file>\n# 可加 -r 选项 表示递归删除 带目录时加 -r\ngit rm -r --cached <directory>\n# 删除整个目录\ngit rm --cached . \n# 删除某个目录下的所有文件\n# * 加 \\ 是为了从 git 命令中转译\ngit rm --cached src/\\*\n```\n该操作 从仓库索引中**取消文件跟踪**，文件**仍然保留在工作目录中**。\n2. 增加刚才的文件或者目录到 `.gitignore`\n3. 提交更改\n```bash\ngit add .\ngit commit -m '文件取消跟踪'\n```\n3. 推送至远程\n  推送至远程后，远程仓库不再用取消忽略的文件。\n>[Tell Git not to track a file any more (remove from repo)](https://alvinalexander.com/git/git-rm-file-git-repository-dont-track-accidentally-added)\n>\n>[How to make Git “forget” about a file that was tracked but is now in .gitignore?](https://stackoverflow.com/questions/1274057/how-to-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-gitignore)\n\n## 删除已跟踪的文件\n\n希望从工作目录中**删除**已跟踪的文件，必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。\n0. 修改`.gitingnore`\n1. 删除文件跟踪\n```bash\ngit rm <file>\ngit rm -r <dir>\\*.md\n```\n执行该操作，项目仓库中不再有该文件。\n2. 提交更改\n```bash\ngit add .\n```\n\n## .gitignore 文件相关\n\n### 忽略规则\n\n`.gitignore` 列出的`目录`或者`文件`是不被 git 跟踪的。常常需要忽略的文件如下：\n1. 临时资源，比如缓存、日志、编译后的源码等；\n2. 开发环境配置文件，不同的开发人员有不同的开发习惯，环境配置文件不该被跟踪；\n3. 敏感信息，比如数据库密码、秘钥等。\n\n匹配规则：会以 `.gitignore` 所在目录为顶级目录或者当前目录，**递归**地匹配路径或文件，后面的规则会覆盖前面的规则。\n\n一个文件或者目录被忽略，**不会**有以下行为：\n1. 被 git 跟踪；\n2. 反映到 `git status` 或 `git diff`等命令中；\n3. 被暂存，比如 `git add -A` 不会暂存被忽略的文件。\n\n#### 常见的规则模式\n\n`#` 是注释，注释不能和规则同行，否则规则失效。规则含有 `#`，使用反斜线 `/` 转义。\n1. 常用规则\n\n```bash\n# 某类型文件，使用扩展名\n*.js\n*.log\n# 排除特定文件\n!index.js\n# 特定文件\nindex.css\ntest.json\n\n# 目录及其内容\nnode_modules/\n# 当前目录下的某个目录 .gitignore 所在目录为顶级目录\n/node_modules/\n\n# 任意目录或文件\nnode_modules\n# 当前目录下的任意目录或文件\n/node_modules\n```\n2. 高级规则\n\n```bash\n# 子目录 两层关系\ntarget/logs/\n# 孙子目录 三层关系\ntarget/*/logs/\n# 后代目录 任意层关系\ntarget/**/logs/\n\n# 可选字符匹配 \n# 匹配 build/Build 文件或目录 Build 不会匹配 uild\n[bB]uild \n# 匹配 .pyc 或 .pyo\n.py[co]\n\n# 特定目录下文件\ntarget/*/.bin/*.js\n# 目录匹配通配符\n# 匹配 .deploy_git .deployB\n.deploy*/\n```\n\n#### 其他忽略方式\n\n`.gitingore` 文件应该被提交到仓库里，但是会暴露你的忽略规则，如果不想暴露，可使用以下方式设置：\n- .git/info/exclude 文件配置；\n- 配置全局忽略文件。\n\n### 常见项目的 .gitignore 文件\n\n- [常见gitignore模板](https://github.com/github/gitignore)\n- [在线生成gitignore文件](https://www.gitignore.io/)\n\n### 列出忽略的文件\n\n1. git status\n\n```bash\ngit status --ignored\n```\n2. git ls-files\n\n```bash\ngit ls-files --others -i --exclude-standard\n```\n\n### 删除忽略文件\n\n`git clean -x` 可删除忽略文件,和 `git reset --hard` 一起使用可完全回到某个 commit 状态。\n\n```bash\ngit clean -n # clean 演练，告知哪些文件会被删除\n# 删除当前目录下所有没有 track 的文件，不删除 .gitignore 文件里的文件\ngit clean -f  <path> # 指定路径 path\n\n# 删除当前目录下没有被 track 的文件和目录\ngit clean -df\n\n# 所有没有被 track 的目录和文件，不管 .gitignore 是否匹配\ngit clean -xf\n# \n```\n\n\n### 列出被跟踪的文件\n```bash\ngit ls-tree -r master --name-only\n```\n\n## 常见问题\n\n### 本地仓库版本落后于远程仓库版本\n\n当push到远程仓库时，出现以下错误：\n\n```bash\n Updates were rejected because the tip of your current branch is behind\n```\n解决办法：\n- 强推（远程修改会丢失）\n\n```bash\ngit push origin -f master\n```\n- 先合并，再推送（待验证）\n\n```bash\ngit pull origin master\ngit push origin master\n```\n- 不想合并，先建分支，再推送（待验证）\n\n```bash\ngit branch <branch-name>\ngit push origin <branch-name> # 待验证\n```\n\n### Git推送提示：remote origin already exists\n\n1. 删除远程仓库 (删除报错，可在配置文件中删除仓库信息)\n> git  remote rm origin\n\n2. 在添加远程仓库\n> git remote add origin repo-url\n\n3. 再次推送\n> git push -u origin master\n\n## todo\n\n>[git relog VS git log](https://wjp2013.github.io/tool/git-reflog-git-log-git-cherry-pick/) \n>[Undo changes in Git - Cheat sheet for git checkout, stash, reset, clean, revert, rebase -i, amend](https://dev.to/mzanggl/undo-changes-in-git-cheat-sheet-for-git-checkout-stash-reset-clean-revert-rebase-i-amend-2h1h)\n>[temporary_undo_and_red](https://sdqweb.ipd.kit.edu/wiki/Git_undo#temporary_undo_and_redo)\n### git 进阶\n>[A Hacker's Guide to Git](https://wildlyinaccurate.com/a-hackers-guide-to-git/)\n\n_______________________________________________\n> [Git – Fast Forward 和 no fast foward](https://my.oschina.net/yuzn/blog/82297)\n\n\n[1]: https://help.github.com/articles/fetching-a-remote/\n[2]: https://stackoverflow.com/questions/10737966/undoing-git-merge-after-merge-renamelimit-warning-plus-conflicts/10738171","slug":"git-学习笔记","published":1,"updated":"2019-10-05T17:57:53.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccer000rjwrnax9puo0h","content":"<p>Git是一个分布式版本控制系统（CVS），可以记录<strong>文本文件</strong>的<strong>变化</strong>（<em>修改、增加、删除等操作</em>），比如 TXT、HTML、程序源代码等，<span style=\"color:red;\">不能记录其他文件（图片、音频等二进制文件）的变化，不能记录word文档的变化。</span></p>\n<a id=\"more\"></a>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#git%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C\">Git常见操作</a>\n<ul>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3\">配置相关</a>\n<ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E9%85%8D%E7%BD%AE\">查看配置</a></li>\n<li><a href=\"#%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE\">添加配置</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E9%85%8D%E7%BD%AE\">删除配置</a></li>\n<li><a href=\"#%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">编辑配置文件</a></li>\n<li><a href=\"#%E5%88%9B%E5%BB%BA%E6%96%B0%E4%BB%93%E5%BA%93\">创建新仓库</a></li>\n<li><a href=\"#%E5%85%8B%E9%9A%86%E5%B7%B2%E6%9C%89%E4%BB%93%E5%BA%93\">克隆已有仓库</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%B7%BB%E5%8A%A0%E6%9B%B4%E6%94%B9\">添加更改</a></li>\n<li><a href=\"#%E9%87%8D%E5%91%BD%E5%90%8D%E5%B7%B2%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6\">重命名已跟踪的文件</a></li>\n<li><a href=\"#%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9\">撤销修改</a></li>\n<li><a href=\"#%E4%BB%8E%E6%9A%82%E5%AD%98%E5%8C%BA%E6%92%A4%E5%9B%9E\">从暂存区撤回</a></li>\n<li><a href=\"#commit-%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C\">commit 相关操作</a>\n<ul>\n<li><a href=\"#%E6%8F%90%E4%BA%A4%E6%9B%B4%E6%94%B9%E5%88%B0%E4%BB%93%E5%BA%93\">提交更改到仓库</a></li>\n<li><a href=\"#%E5%90%88%E5%B9%B6-commit\">合并 commit</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BF%AE%E6%94%B9%E6%AF%94%E8%BE%83-git-diff\">修改比较 git diff</a></li>\n<li><a href=\"#%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80\">版本回退</a>\n<ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95\">查看提交记录</a></li>\n<li><a href=\"#%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80-2\">版本回退</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA\">工作区和暂存区</a>\n<ul>\n<li><a href=\"#status-%E5%92%8C-diff-%E6%AF%94%E8%BE%83%E7%9A%84%E6%98%AF%E5%93%AA%E4%BA%9B\">status 和 diff 比较的是哪些？</a>\n<ul>\n<li><a href=\"#diff-%E7%9A%84%E6%AF%94%E8%BE%83\">diff 的比较</a>\n<ul>\n<li><a href=\"#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E6%AF%94%E8%BE%83\">工作区和暂存区的比较</a></li>\n<li><a href=\"#%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8C-head-%E6%AF%94%E8%BE%83\">暂存区和 HEAD 比较</a></li>\n<li><a href=\"#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C-head-%E6%AF%94%E8%BE%83\">工作区和 HEAD 比较</a></li>\n<li><a href=\"#%E5%88%86%E6%94%AF%E6%AF%94%E8%BE%83\">分支比较</a></li>\n<li><a href=\"#%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83%E7%BB%93%E6%9E%9C\">输出比较结果</a></li>\n</ul>\n</li>\n<li><a href=\"#status-%E7%9A%84%E6%AF%94%E8%BE%83\">status 的比较</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9-2\">撤销修改</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\">删除文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\">远程仓库</a>\n<ul>\n<li><a href=\"#%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\">关联远程仓库</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\">查看远程仓库</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%9A%84%E5%85%B3%E8%81%94\">删除本地分支和远程分支的关联</a></li>\n<li><a href=\"#%E6%8E%A8%E9%80%81%E6%9C%AC%E5%9C%B0%E4%BF%AE%E6%94%B9%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\">推送本地修改到远程仓库</a></li>\n<li><a href=\"#%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6\">分支合并</a>\n<ul>\n<li><a href=\"#%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%96%B9%E6%B3%95%E4%B8%80%E6%8E%A8%E8%8D%90\">合并分支方法一（推荐）</a></li>\n<li><a href=\"#%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%96%B9%E6%B3%95%E4%BA%8C\">合并分支方法二</a></li>\n<li><a href=\"#%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6%E6%96%B9%E6%B3%95%E4%B8%89\">分支合并方法三</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%BC%BA%E5%88%B6%E8%A6%86%E7%9B%96%E5%90%88%E5%B9%B6\">强制覆盖合并</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AF%8F%E6%AC%A1%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81\">如何避免每次输入密码?</a>\n<ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF\">查看分支</a></li>\n<li><a href=\"#%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF\">新建分支</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF\">删除本地分支</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF\">删除远程分支</a></li>\n<li><a href=\"#%E9%87%8D%E5%91%BD%E5%90%8D%E5%88%86%E6%94%AF\">重命名分支</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B7%B2%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6%E5%8F%96%E6%B6%88%E8%B7%9F%E8%B8%AA\">已跟踪的文件取消跟踪</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E5%B7%B2%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6\">删除已跟踪的文件</a></li>\n<li><a href=\"#gitignore-%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3\">.gitignore 文件相关</a>\n<ul>\n<li><a href=\"#%E5%BF%BD%E7%95%A5%E8%A7%84%E5%88%99\">忽略规则</a>\n<ul>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A7%84%E5%88%99%E6%A8%A1%E5%BC%8F\">常见的规则模式</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96%E5%BF%BD%E7%95%A5%E6%96%B9%E5%BC%8F\">其他忽略方式</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E9%A1%B9%E7%9B%AE%E7%9A%84-gitignore-%E6%96%87%E4%BB%B6\">常见项目的 .gitignore 文件</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BA%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6\">列出忽略的文件</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6\">删除忽略文件</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BA%E8%A2%AB%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6\">列出被跟踪的文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">常见问题</a>\n<ul>\n<li><a href=\"#%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E7%89%88%E6%9C%AC%E8%90%BD%E5%90%8E%E4%BA%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%89%88%E6%9C%AC\">本地仓库版本落后于远程仓库版本</a></li>\n<li><a href=\"#git%E6%8E%A8%E9%80%81%E6%8F%90%E7%A4%BAremote-origin-already-exists\">Git推送提示：remote origin already exists</a></li>\n</ul>\n</li>\n<li><a href=\"#todo\">todo</a>\n<ul>\n<li><a href=\"#git-%E8%BF%9B%E9%98%B6\">git 进阶</a></li>\n</ul>\n</li>\n</ul>\n</p>\n<h2 id=\"git常见操作\"><a class=\"markdownIt-Anchor\" href=\"#git常见操作\"></a> Git常见操作</h2>\n<h3 id=\"配置相关\"><a class=\"markdownIt-Anchor\" href=\"#配置相关\"></a> 配置相关</h3>\n<p>配置分为系统配置、全局配置和仓库配置，全局配置一般对该电脑的使用这都是有效的，也就对所有仓库有效了，仓库配置只对某个仓库有效。命令加<code>--global</code>是全局配置。</p>\n<h4 id=\"查看配置\"><a class=\"markdownIt-Anchor\" href=\"#查看配置\"></a> 查看配置</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global -l <span class=\"comment\"># 全局配置</span></span><br><span class=\"line\">git config --<span class=\"built_in\">local</span> -l <span class=\"comment\"># 仓库配置</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"添加配置\"><a class=\"markdownIt-Anchor\" href=\"#添加配置\"></a> 添加配置</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --add &lt;key&gt; value</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除配置\"><a class=\"markdownIt-Anchor\" href=\"#删除配置\"></a> 删除配置</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> &lt;key&gt; <span class=\"comment\"># 删除全局 key 配置</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"编辑配置文件\"><a class=\"markdownIt-Anchor\" href=\"#编辑配置文件\"></a> 编辑配置文件</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global -e <span class=\"comment\"># -e 是 --edit 的别名，会在编辑器中打开配置文件。编辑后配置，配置就生效了。</span></span><br></pre></td></tr></table></figure>\n<p>###创建版本仓库</p>\n<h4 id=\"创建新仓库\"><a class=\"markdownIt-Anchor\" href=\"#创建新仓库\"></a> 创建新仓库</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在某个文件下，该文件夹成为一个 git 仓库，生成一个 .git 文件夹</span></span><br><span class=\"line\">git init</span><br><span class=\"line\">git init &lt;fileName&gt; <span class=\"comment\"># 将 fileName 初始化为一个 git 仓库</span></span><br><span class=\"line\"><span class=\"comment\"># 帮助命令</span></span><br><span class=\"line\">git <span class=\"built_in\">help</span> &lt;<span class=\"built_in\">command</span>&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -a</span><br><span class=\"line\">./  ../  .git/</span><br></pre></td></tr></table></figure>\n<p><em>.git 文件夹内的内容不可轻易改动，里面记录了文件变化</em></p>\n<h4 id=\"克隆已有仓库\"><a class=\"markdownIt-Anchor\" href=\"#克隆已有仓库\"></a> 克隆已有仓库</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;repo&gt; <span class=\"comment\"># 在某个文件内执行，会在该文件里生成一个仓库</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt; <span class=\"comment\"># 克隆仓库到指定目录</span></span><br></pre></td></tr></table></figure>\n<p>clone 做了4件事：</p>\n<ul>\n<li><code>repo</code>的文件夹被创建；</li>\n<li>仓库的所有文件和<code>提交</code>都被下载到<code>repo</code>内；</li>\n<li>在<code>repo</code>文件内初始化一个git仓库；</li>\n<li>一个远程分支<code>origin</code>被创建,关联了该URL；</li>\n<li>本地有一个分支（默认名字为<code>master</code>）。<br>\n<strong>四种协议克隆</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SSH 协议</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:fsliurujie/test.git</span><br><span class=\"line\"><span class=\"comment\"># HTTPS 协议</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/fsliurujie/test.git</span><br><span class=\"line\"><span class=\"comment\"># GIT协议</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/fsliurujie/test.git</span><br><span class=\"line\"><span class=\"comment\"># HTTP 协议</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> http:////github.com/fsliurujie/test.git</span><br></pre></td></tr></table></figure>\n<p><strong>ssh vs https</strong><br>\nssh 和 http 是常见的两种克隆方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">协议</th>\n<th style=\"text-align:center\">是否配置SSH key</th>\n<th style=\"text-align:center\">速度</th>\n<th style=\"text-align:center\">PUSH</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ssh</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">快</td>\n<td style=\"text-align:center\">仓库管理员无需密码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">https</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">较慢</td>\n<td style=\"text-align:center\">需要用户名和密码</td>\n</tr>\n</tbody>\n</table>\n<p>创建仓库时可能会用到的其他操作：</p>\n<ul>\n<li><strong>创建文件夹</strong>: mkdir  fileName  创建目录</li>\n<li><strong>创建文件</strong>: touch  documentName  创建文件</li>\n<li><strong>删除文件 ：</strong> rm fileName  删除非空文件夹</li>\n<li><strong>强制删除非空文件 ：</strong> <em>rm -rf  fileName</em>   f -force 强制删除文件（夹），没有提示 -r–recursive 递归删除 删除空文件可用这个</li>\n</ul>\n<h3 id=\"添加更改\"><a class=\"markdownIt-Anchor\" href=\"#添加更改\"></a> 添加更改</h3>\n<p>添加跟踪的文件之前，一般需要设置排除跟踪的文件，即创建<code>.gitignore</code>文件。<br>\n不知道如何编写？复制来，按需修改即可。<br>\n<a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\">各种项目的gitignore模板</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;fileName&gt; <span class=\"comment\"># 添加某一个文件到暂存区</span></span><br><span class=\"line\">git add *.js <span class=\"comment\"># 增加所有 js 文件的修改</span></span><br><span class=\"line\">git add -u <span class=\"comment\"># git add --update 添加修改（modified)和删除（delete）文件（跟踪的文件），不添加（new）新增文件</span></span><br><span class=\"line\">git add . <span class=\"comment\"># 添加新增和修改，不添加删除</span></span><br><span class=\"line\">git add -A <span class=\"comment\"># git add -all, 合并 git add -u 和 git add . 即添加新增、修改和删除</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重命名已跟踪的文件\"><a class=\"markdownIt-Anchor\" href=\"#重命名已跟踪的文件\"></a> 重命名已跟踪的文件</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git mv old-name new-name</span><br></pre></td></tr></table></figure>\n<p>该命令和直接重命名文件，然后 <code>git rm old-file</code>,<code>git add new-old</code>是一样的。</p>\n<h3 id=\"撤销修改\"><a class=\"markdownIt-Anchor\" href=\"#撤销修改\"></a> 撤销修改</h3>\n<p>在 commit 提交前，不想添加修改，可<code>撤掉更改</code>—<code>文件修改会消失，这是非常危险的操作</code> <em>除非你确实清楚不想要那个文件了，否则不要使用这个命令。</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -- 必须有，没有是分支切换命令</span></span><br><span class=\"line\">git checkout --file</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>add</code> 后修改，<code>checkout</code>回到<strong>最近一次</strong>add后的状态，还未 add 的更改消失；</li>\n<li><code>commit</code>后修改，<code>checkout</code>回到<strong>最近一次</strong>commit 后的状态，更改消失；</li>\n<li>总的来说，<strong>checkout 是撤掉修改</strong>。</li>\n</ul>\n<p>添加文件也是一种修改，<code>checkout</code>的另一个作用是找回删错的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm file <span class=\"comment\"># file 不是你想删除的文件，</span></span><br><span class=\"line\">git checkout --file <span class=\"comment\"># 找回误删的文件，但是最近一次 add/commit 后的修改丢失了</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"从暂存区撤回\"><a class=\"markdownIt-Anchor\" href=\"#从暂存区撤回\"></a> 从暂存区撤回</h3>\n<p>-<strong>从暂存区撤回</strong>：git  rm --cached</p>\n<p>usage: git rm [<options>] [–] <file>…<br>\n-n, --dry-run         dry run<br>\n-q, --quiet           do not list removed files<br>\n–cached              only remove from the index<br>\n-f, --force           override the up-to-date check<br>\n-r                    allow recursive removal<br>\n–ignore-unmatch      exit with a zero status even if nothing matched</file></options></p>\n<p><strong>撤回很多文件如何操作？？？</strong></p>\n<h3 id=\"commit-相关操作\"><a class=\"markdownIt-Anchor\" href=\"#commit-相关操作\"></a> commit 相关操作</h3>\n<h4 id=\"提交更改到仓库\"><a class=\"markdownIt-Anchor\" href=\"#提交更改到仓库\"></a> 提交更改到仓库</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m  提交说明</span><br><span class=\"line\">git commit -a <span class=\"comment\"># 在编辑器中写提交说明</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"合并-commit\"><a class=\"markdownIt-Anchor\" href=\"#合并-commit\"></a> 合并 commit</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> <span class=\"comment\"># 查看提交历史</span></span><br></pre></td></tr></table></figure>\n<p>当前历史：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit a00766289ef.......</span><br><span class=\"line\">    待合并commit</span><br><span class=\"line\">commit 22281fca7bf.......</span><br><span class=\"line\">    第三方库和业务代码分开打包</span><br><span class=\"line\">commit 7828194fe69.......</span><br><span class=\"line\">    各页面分开打包</span><br></pre></td></tr></table></figure>\n<p>需要合并’待合并commit’和’第三方库和业务代码分开打包’</p>\n<p>先 rebase 操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i 7828194f <span class=\"comment\"># 参数 i 是不需要合并的commit</span></span><br></pre></td></tr></table></figure>\n<p>执行完该命令，会进入交互模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p e2d34a8 脚本配置自定义参数</span><br><span class=\"line\">s 004fb27 修改README</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rebase bd25857..004fb27 onto bd25857 (2 commands)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup = like \"squash\", but discard this commit's log message</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop = remove commit</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure>\n<p><code>pick</code> 会执行 commit<br>\n<code>squash</code> 该 commit 会合并到前一个commit</p>\n<p>把第二条命令改为<code>s</code>，保存并退出，会进入commit message 编辑界面，可编辑新的commit message。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is a combination of 2 commits.</span></span><br><span class=\"line\"><span class=\"comment\"># This is the 1st commit message:</span></span><br><span class=\"line\"></span><br><span class=\"line\">脚本配置自定义参数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This is the commit message #2:</span></span><br><span class=\"line\"></span><br><span class=\"line\">修改README</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Please enter the commit message for your changes. Lines starting</span></span><br><span class=\"line\"><span class=\"comment\"># with '#' will be ignored, and an empty message aborts the commit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Date:      Fri Feb 15 17:31:30 2019 +0800</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># interactive rebase in progress; onto bd25857</span></span><br><span class=\"line\"><span class=\"comment\"># Last commands done (2 commands done):</span></span><br><span class=\"line\"><span class=\"comment\">#    pick e2d34a8 脚本配置自定义参数</span></span><br><span class=\"line\"><span class=\"comment\">#    squash 004fb27 修改README</span></span><br><span class=\"line\"><span class=\"comment\"># No commands remaining.</span></span><br><span class=\"line\"><span class=\"comment\"># You are currently rebasing branch 'master' on 'bd25857'.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Changes to be committed:</span></span><br><span class=\"line\"><span class=\"comment\">#\tmodified:   .gitignore</span></span><br><span class=\"line\"><span class=\"comment\">#\tmodified:   README.md</span></span><br><span class=\"line\"><span class=\"comment\">#\tnew file:   config/default.js</span></span><br><span class=\"line\"><span class=\"comment\">#\tnew file:   config/dev.js</span></span><br><span class=\"line\"><span class=\"comment\">#\tmodified:   package.json</span></span><br><span class=\"line\"><span class=\"comment\">#\tmodified:   webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改比较-git-diff\"><a class=\"markdownIt-Anchor\" href=\"#修改比较-git-diff\"></a> 修改比较 git diff</h3>\n<p><strong>git status</strong> 命令是查看仓库状态，文件是否被修改，修改会哪些文件还没提交等，不知道修改的具体内容。<br>\n-<strong>查看修改的内容</strong>：git diff  比较的是 暂存区的文件和本地文件。<br>\n<strong>有变化的内会用红色和绿色标记</strong></p>\n<h3 id=\"版本回退\"><a class=\"markdownIt-Anchor\" href=\"#版本回退\"></a> 版本回退</h3>\n<h4 id=\"查看提交记录\"><a class=\"markdownIt-Anchor\" href=\"#查看提交记录\"></a> 查看提交记录</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> </span><br><span class=\"line\">git <span class=\"built_in\">log</span>  --pretty=oneline  <span class=\"comment\">#在一行显示提交记录</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"版本回退-2\"><a class=\"markdownIt-Anchor\" href=\"#版本回退-2\"></a> 版本回退</h4>\n<p><strong>HEAD</strong> : 表示当前版本。<br>\n我们可回退到其他版本。<br>\n<em>HEAD^</em> ：上一个版本，<em>HEAD^^</em> ： 上上个版本。<br>\n<em>HEAD~n</em> ：往前第 n 个版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;commitID&gt; <span class=\"comment\"># 回退到 commitID 为版本 推荐使用</span></span><br><span class=\"line\">git reset --hard HEAD~n <span class=\"comment\"># 回退到往前第 n 个版本</span></span><br></pre></td></tr></table></figure>\n<p>回退我反悔了，又想回到之前的版本呢？</p>\n<ol>\n<li>查看 commitID:</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>版本穿梭</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard commitID <span class=\"comment\"># 根据commitID 回退</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"工作区和暂存区\"><a class=\"markdownIt-Anchor\" href=\"#工作区和暂存区\"></a> 工作区和暂存区</h2>\n<ul>\n<li><strong>工作区（工作目录）</strong> : 本地电脑文件夹，该文件夹里有你需要版本控制的文件。</li>\n<li><strong>版本仓库Repository</strong>：工作区里有一个隐藏的 .git 文件夹，这不是工作区，这是 Git 仓库。</li>\n<li><strong>暂存区Stage</strong>：版本仓库里有暂存区区，Git add 先添加到这里。</li>\n<li><strong>分支</strong> :  仓库里有一个分支，git commit 把修改从暂存区提交到分支，一本版本仓库里可能有多个分支。<br>\n<img src=\"./%E5%B7%A5%E4%BD%9C%E5%8C%BA---%E6%9A%82%E5%AD%98%E5%8C%BA---%E7%89%88%E6%9C%AC%E5%BA%93.bmp\" alt=\"Alt text\"></li>\n</ul>\n<h3 id=\"status-和-diff-比较的是哪些\"><a class=\"markdownIt-Anchor\" href=\"#status-和-diff-比较的是哪些\"></a> status 和 diff 比较的是哪些？</h3>\n<h4 id=\"diff-的比较\"><a class=\"markdownIt-Anchor\" href=\"#diff-的比较\"></a> diff 的比较</h4>\n<p>diff 可比较工作区和暂存区、工作区和HEAD、暂存区和 HEAD、两个分支、两个提交、两个文件、两个 bolb之间的差异。</p>\n<h5 id=\"工作区和暂存区的比较\"><a class=\"markdownIt-Anchor\" href=\"#工作区和暂存区的比较\"></a> 工作区和暂存区的比较</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff <span class=\"comment\"># 比较所有文件</span></span><br><span class=\"line\">git diff -- file1 file2 <span class=\"comment\"># 比较个别文件</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"暂存区和-head-比较\"><a class=\"markdownIt-Anchor\" href=\"#暂存区和-head-比较\"></a> 暂存区和 HEAD 比较</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached  <span class=\"comment\"># 暂存区和HEAD的比较 比较所有文件</span></span><br><span class=\"line\">git diff --cached -- file1 file2 比较个别文件</span><br><span class=\"line\">git diff --staged  <span class=\"comment\"># 暂存区和HEAD的比较</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"工作区和-head-比较\"><a class=\"markdownIt-Anchor\" href=\"#工作区和-head-比较\"></a> 工作区和 HEAD 比较</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff HEAD <span class=\"comment\"># 比较所有文件</span></span><br><span class=\"line\">git diff HEAD -- file1 file2 <span class=\"comment\"># 比较个别文件</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"分支比较\"><a class=\"markdownIt-Anchor\" href=\"#分支比较\"></a> 分支比较</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff branch-name <span class=\"comment\"># 分支 branch-name 的 HEAD 和当前分支 HEAD 比较</span></span><br><span class=\"line\">git diff branch-name1 branch-name2 <span class=\"comment\"># 两个分支的 HEAD 比较</span></span><br><span class=\"line\">git diff HEAD HEAD~1 <span class=\"comment\"># 当前 HEAD 和上一个 HEAD 比较（两个 commit 的比较）</span></span><br><span class=\"line\">git diff commitID1 commitID2 <span class=\"comment\"># 两个 commit 的比较</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"输出比较结果\"><a class=\"markdownIt-Anchor\" href=\"#输出比较结果\"></a> 输出比较结果</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &gt;&gt; diff.txt <span class=\"comment\"># 将比较结果输出到 diff.txt 文件中</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"status-的比较\"><a class=\"markdownIt-Anchor\" href=\"#status-的比较\"></a> status 的比较</h4>\n<p>实验：</p>\n<ul>\n<li><strong>修改→status</strong>：文件被修改，还没提交到暂存区。可以 git add，或者 git checkout --file 放弃更改 ;</li>\n<li><strong>修改→add→status</strong>：提示更改没commit，可以git reset回退版本。</li>\n<li><strong>修改→add→修改→status</strong>：提示更改没commit，可以git reset回退版本。 提示 文件被修改，还没提交到暂存区。可以 git add，或者 git checkout --file 放弃更改 ；</li>\n<li><strong>修改→add→commit→status</strong>：工作区干净。</li>\n</ul>\n<p><strong>结论：</strong></p>\n<ol>\n<li><strong>提示没有commit，比较的是暂存区和分支，可进行commit 或者 reset ;</strong></li>\n<li><strong>提示没有 add，比较的是工作区和暂存区，可 add 到暂存区和 checkout ，放弃更改；</strong></li>\n<li><strong>status 比较的是工作区和暂存区，暂存区和分支，<span style=\"color:red;\">不比较工作区和分支</span>。</strong></li>\n</ol>\n<h3 id=\"撤销修改-2\"><a class=\"markdownIt-Anchor\" href=\"#撤销修改-2\"></a> 撤销修改</h3>\n<ul>\n<li><strong>撤销修改</strong>:git checkout – file， 文件回到最后一次 add 的状态。<br>\n两种情况：<br>\n1.<strong>修改后还没add</strong>：回到最近的版本库；<br>\n2.<strong>修改后已add</strong> : 回到 add 之前的状态。</li>\n</ul>\n<blockquote>\n<p><span style=\"color:red;\"> - - 很重要，没有它就不是撤销修改，而是切换分支</span></p>\n</blockquote>\n<blockquote>\n<p>git checkout – . 撤销所有修改<br>\ngit checkout path/…/file 撤销文件下中某个文件的修改</p>\n</blockquote>\n<p><em>git reset HEAD file</em> 可以回退版本，也可从暂存区回到工作区。</p>\n<h3 id=\"删除文件\"><a class=\"markdownIt-Anchor\" href=\"#删除文件\"></a> 删除文件</h3>\n<p><strong>在工作区删除文件</strong>：rm file<br>\n在工作删除文件后，工作区和仓库版本不一致了，可以有两个操作：</p>\n<ol>\n<li>误删了，就把版本库里的最新版本，拿到工作区。 <strong>git  checkout – file</strong></li>\n<li>确认删除，那再把版本库里的文件删除。<strong>git rm file</strong></li>\n</ol>\n<blockquote>\n<p><span style=\"color:red;\">注意 git rm file 和 rm 的区别：</span><br>\n<strong>git rm file</strong>:删除暂存区和工作区，需用用 <strong>git checkeout HEAD – file</strong> 或者 <strong>git checktout HEAD file</strong>分支恢复。</p>\n</blockquote>\n<h2 id=\"远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#远程仓库\"></a> 远程仓库</h2>\n<ol>\n<li>在 Github 上创建仓库并关联本地仓库<br>\nGit 是分布式版本控制系统，同一个 Git 版本仓库，可分布到不同的机器上，这些机器上的版本库都是一样的。现在只有一台机器，如何分布？<br>\n**①：在 Github 上创建仓库，将代码推送到该仓库。**推荐做法<br>\n②：分布在同一台机器上的不同目录，硬盘坏了所有版本库都没了，不推荐，（也不知道怎么弄）。<br>\n③：建一台服务器，从该服务器上克隆版本库，提交版本库到该服务器。成本高，适合公司多人协作开发。</li>\n</ol>\n<h3 id=\"关联远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#关联远程仓库\"></a> 关联远程仓库</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;repoUrl&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>origin</strong> 是默认的<strong>远程仓库</strong>的名字，可取其他名。远程仓库可有多个分支。</p>\n<blockquote>\n<p>“origin” 并无特殊含义<br>\n远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 git init 时默认的<strong>起始分支名字</strong>，原因仅仅是它的广泛使用，“origin” 是当你运行 git clone 时默认的<strong>远程仓库名字</strong>。 如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master</p>\n</blockquote>\n<h3 id=\"查看远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#查看远程仓库\"></a> 查看远程仓库</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v <span class=\"comment\"># 显示所有远程仓库</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除本地分支和远程分支的关联\"><a class=\"markdownIt-Anchor\" href=\"#删除本地分支和远程分支的关联\"></a> 删除本地分支和远程分支的关联</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote remove origin</span><br></pre></td></tr></table></figure>\n<h3 id=\"推送本地修改到远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#推送本地修改到远程仓库\"></a> 推送本地修改到远程仓库</h3>\n<p><strong>第一次推送本地仓库到远程仓库</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master  <span class=\"comment\"># master 是分支名字</span></span><br></pre></td></tr></table></figure>\n<p><strong>非第一次推送</strong></p>\n<p>开始工作前，远程仓库可能有更新,需要先<strong>合并</strong>。</p>\n<h3 id=\"分支合并\"><a class=\"markdownIt-Anchor\" href=\"#分支合并\"></a> 分支合并</h3>\n<h4 id=\"合并分支方法一推荐\"><a class=\"markdownIt-Anchor\" href=\"#合并分支方法一推荐\"></a> 合并分支方法一（推荐）</h4>\n<ol>\n<li>获取远程仓库<code>某个分支的更改</code>：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin &lt;remote-branch&gt;:&lt;temp-branch&gt;</span><br></pre></td></tr></table></figure>\n<p>该命令做了两件事情：<br>\n①. 创建本地分支 temp-branch;<br>\n②. 将<code>remote-branch</code>上的更新保存在 temp-branch 中</p>\n<ol start=\"2\">\n<li>与当前分支比较不同：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &lt;temp-branch&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>将更改<code>合并</code>到<code>当前分支</code>：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;temp-branch&gt; <span class=\"comment\"># &lt;temp-branch&gt; 是合并进`当前分支`的分支</span></span><br></pre></td></tr></table></figure>\n<p>合并成功会没提示，并且在<code>当前分支</code>上有一个合并进来的分支的<code>提交记录</code>。</p>\n<h4 id=\"合并分支方法二\"><a class=\"markdownIt-Anchor\" href=\"#合并分支方法二\"></a> 合并分支方法二</h4>\n<ol>\n<li>获取更改</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch &lt;remote&gt; <span class=\"comment\"># 获取远程仓库的更改，是哪个分支呢？remote 远程仓库名字，一般是 origin</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>合并</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;remote&gt;/&lt;<span class=\"built_in\">local</span>-branch&gt; <span class=\"comment\"># 将更改合并进入local-branch</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分支合并方法三\"><a class=\"markdownIt-Anchor\" href=\"#分支合并方法三\"></a> 分支合并方法三</h4>\n<p>以上两个操作合并为一个操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull &lt;remote&gt; &lt;<span class=\"built_in\">local</span>-branch&gt;</span><br></pre></td></tr></table></figure>\n<p>出现<code>Already up to date.</code>,则合并成功。</p>\n<p><code>pull</code>会自动合并，执行该命令前，需要确保当前分支的修改都提交了，需要提交的修改，可能会使你的修改丢失。执行成功后，有冲突，会显示冲突的文件。<br>\n如果你不想自动合并，可执行<code>git merge --abort</code>撤销<code>pull</code>。</p>\n<p>以上参考：<a href=\"https://help.github.com/articles/fetching-a-remote/\" target=\"_blank\" rel=\"noopener\">fetching-a-remote</a></p>\n<p>执行<code>git merge --abort</code>可能会出现<code>fatal: There is no merge to abort (MERGE_HEAD missing).</code>的提示，说明<code>撤销合并</code>没成功。（因为合并成功，合并分支被删除了？）</p>\n<p>可用 <code>git reset --merge</code>来<code>撤销合并</code>。</p>\n<p>注意：当<code>MERGE_HEAD</code>存在，<code>git reset --merge</code>和<code>git merge --abort</code>是相同的。</p>\n<p>参考：<a href=\"https://stackoverflow.com/questions/10737966/undoing-git-merge-after-merge-renamelimit-warning-plus-conflicts/10738171\" target=\"_blank\" rel=\"noopener\">undoing git merge after merge.renameLimit warning plus conflicts</a></p>\n<p>合并完后，进行编辑，提交修改，最后<code>推送</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push &lt;remote&gt; &lt;remote-branch&gt; <span class=\"comment\"># &lt;remote-branch&gt; 是你工作的远程分支名字，可能别人和你在该分支是上工作</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"强制覆盖合并\"><a class=\"markdownIt-Anchor\" href=\"#强制覆盖合并\"></a> 强制覆盖合并</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all  </span><br><span class=\"line\">git reset --hard origin/master </span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何避免每次输入密码\"><a class=\"markdownIt-Anchor\" href=\"#如何避免每次输入密码\"></a> 如何避免每次输入密码?</h2>\n<p>执行某些操作，Git 服务器会询问用户名与密码。可在本地设置保存密码，提高效率。</p>\n<ol>\n<li>短期凭证存储<br>\n凭证保存在<strong>内存中</strong>，几分钟内有效。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global credential.helper cache</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>长期凭证存储<br>\n凭证保存在硬盘内，长期有效。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global credential.helper store</span><br></pre></td></tr></table></figure>\n<p>##分支管理</p>\n<h3 id=\"查看分支\"><a class=\"markdownIt-Anchor\" href=\"#查看分支\"></a> 查看分支</h3>\n<p>git branch [-r] [-a] [-v]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -av <span class=\"comment\"># 推荐使用，可参看本地分支和远程分支，并且可看最近的提交</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch  <span class=\"comment\"># 查看本地分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r <span class=\"comment\"># 查看远程分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a <span class=\"comment\"># 查看所有分支</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"新建分支\"><a class=\"markdownIt-Anchor\" href=\"#新建分支\"></a> 新建分支</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch [-f] new-branch  <span class=\"comment\"># 新建分支 -f 可选</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout new-branch  <span class=\"comment\"># 切换分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b new-branch <span class=\"comment\"># 新建并切换</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除本地分支\"><a class=\"markdownIt-Anchor\" href=\"#删除本地分支\"></a> 删除本地分支</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D need-delete-local-branch  <span class=\"comment\"># 在当前分支下删除自身，不可删除</span></span><br></pre></td></tr></table></figure>\n<p>删除错了，恢复：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog  <span class=\"comment\"># 查看操作日志，找到需要恢复的commit id</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch need-recover-branch commitId  <span class=\"comment\"># 恢复分支</span></span><br></pre></td></tr></table></figure>\n<p>本地分支和远程分支都删除了，怎么恢复？<br>\n先恢复本地分支，再 <strong>push</strong> 一次，即恢复了本地和远程分支</p>\n<h3 id=\"删除远程分支\"><a class=\"markdownIt-Anchor\" href=\"#删除远程分支\"></a> 删除远程分支</h3>\n<p>远程以<code>remote/branch</code> 形式命名。 例如，如果你想要看你最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch origin -d remote-branch</span><br></pre></td></tr></table></figure>\n<ul>\n<li>git branch -r -d origin/remote-branch-name</li>\n<li>git branch -d -r origin/remote-branch-name</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete origin/&lt;remote-branch&gt;</span><br><span class=\"line\">git push origin :&lt;remote-bracnh&gt;</span><br><span class=\"line\"><span class=\"comment\"># 给出本地分支 是推送远程分支</span></span><br><span class=\"line\">git push origin &lt;<span class=\"built_in\">local</span>-branch&gt;:&lt;remote-bracnh&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>删除了，但是产生一个问题：其他成员在pull代码时，不会把删除本地的分支<br>\nfetch 时 加 -p<br>\ngit fetch -p</p>\n</blockquote>\n<h3 id=\"重命名分支\"><a class=\"markdownIt-Anchor\" href=\"#重命名分支\"></a> 重命名分支</h3>\n<p>删除远程分支→重命名本地分支→ push 分支到远程仓库<br>\n本地分支重命名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m  old-branch-name new-branch-name <span class=\"comment\"># 重命名当前分支，可省略 old-branch-name</span></span><br></pre></td></tr></table></figure>\n<p>push 新分支分支到远程仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin new-branch-name</span><br></pre></td></tr></table></figure>\n<h2 id=\"已跟踪的文件取消跟踪\"><a class=\"markdownIt-Anchor\" href=\"#已跟踪的文件取消跟踪\"></a> 已跟踪的文件取消跟踪</h2>\n<p>有的文件忘记加入到 <code>.gitignore</code>，<code>git add .</code>后Git 就会默认追踪该文件，追踪后取消追踪的操作：</p>\n<ol>\n<li>从追踪列表中删除：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除某个文件</span></span><br><span class=\"line\">git rm --cached &lt;file&gt;</span><br><span class=\"line\"><span class=\"comment\"># 可加 -r 选项 表示递归删除 带目录时加 -r</span></span><br><span class=\"line\">git rm -r --cached &lt;directory&gt;</span><br><span class=\"line\"><span class=\"comment\"># 删除整个目录</span></span><br><span class=\"line\">git rm --cached . </span><br><span class=\"line\"><span class=\"comment\"># 删除某个目录下的所有文件</span></span><br><span class=\"line\"><span class=\"comment\"># * 加 \\ 是为了从 git 命令中转译</span></span><br><span class=\"line\">git rm --cached src/\\*</span><br></pre></td></tr></table></figure>\n<p>该操作 从仓库索引中<strong>取消文件跟踪</strong>，文件<strong>仍然保留在工作目录中</strong>。<br>\n2. 增加刚才的文件或者目录到 <code>.gitignore</code><br>\n3. 提交更改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">'文件取消跟踪'</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>推送至远程<br>\n推送至远程后，远程仓库不再用取消忽略的文件。</li>\n</ol>\n<blockquote>\n<p><a href=\"https://alvinalexander.com/git/git-rm-file-git-repository-dont-track-accidentally-added\" target=\"_blank\" rel=\"noopener\">Tell Git not to track a file any more (remove from repo)</a></p>\n<p><a href=\"https://stackoverflow.com/questions/1274057/how-to-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-gitignore\" target=\"_blank\" rel=\"noopener\">How to make Git “forget” about a file that was tracked but is now in .gitignore?</a></p>\n</blockquote>\n<h2 id=\"删除已跟踪的文件\"><a class=\"markdownIt-Anchor\" href=\"#删除已跟踪的文件\"></a> 删除已跟踪的文件</h2>\n<p>希望从工作目录中<strong>删除</strong>已跟踪的文件，必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。<br>\n0. 修改<code>.gitingnore</code></p>\n<ol>\n<li>删除文件跟踪</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm &lt;file&gt;</span><br><span class=\"line\">git rm -r &lt;dir&gt;\\*.md</span><br></pre></td></tr></table></figure>\n<p>执行该操作，项目仓库中不再有该文件。<br>\n2. 提交更改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n<h2 id=\"gitignore-文件相关\"><a class=\"markdownIt-Anchor\" href=\"#gitignore-文件相关\"></a> .gitignore 文件相关</h2>\n<h3 id=\"忽略规则\"><a class=\"markdownIt-Anchor\" href=\"#忽略规则\"></a> 忽略规则</h3>\n<p><code>.gitignore</code> 列出的<code>目录</code>或者<code>文件</code>是不被 git 跟踪的。常常需要忽略的文件如下：</p>\n<ol>\n<li>临时资源，比如缓存、日志、编译后的源码等；</li>\n<li>开发环境配置文件，不同的开发人员有不同的开发习惯，环境配置文件不该被跟踪；</li>\n<li>敏感信息，比如数据库密码、秘钥等。</li>\n</ol>\n<p>匹配规则：会以 <code>.gitignore</code> 所在目录为顶级目录或者当前目录，<strong>递归</strong>地匹配路径或文件，后面的规则会覆盖前面的规则。</p>\n<p>一个文件或者目录被忽略，<strong>不会</strong>有以下行为：</p>\n<ol>\n<li>被 git 跟踪；</li>\n<li>反映到 <code>git status</code> 或 <code>git diff</code>等命令中；</li>\n<li>被暂存，比如 <code>git add -A</code> 不会暂存被忽略的文件。</li>\n</ol>\n<h4 id=\"常见的规则模式\"><a class=\"markdownIt-Anchor\" href=\"#常见的规则模式\"></a> 常见的规则模式</h4>\n<p><code>#</code> 是注释，注释不能和规则同行，否则规则失效。规则含有 <code>#</code>，使用反斜线 <code>/</code> 转义。</p>\n<ol>\n<li>常用规则</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 某类型文件，使用扩展名</span></span><br><span class=\"line\">*.js</span><br><span class=\"line\">*.<span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\"># 排除特定文件</span></span><br><span class=\"line\">!index.js</span><br><span class=\"line\"><span class=\"comment\"># 特定文件</span></span><br><span class=\"line\">index.css</span><br><span class=\"line\">test.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目录及其内容</span></span><br><span class=\"line\">node_modules/</span><br><span class=\"line\"><span class=\"comment\"># 当前目录下的某个目录 .gitignore 所在目录为顶级目录</span></span><br><span class=\"line\">/node_modules/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 任意目录或文件</span></span><br><span class=\"line\">node_modules</span><br><span class=\"line\"><span class=\"comment\"># 当前目录下的任意目录或文件</span></span><br><span class=\"line\">/node_modules</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>高级规则</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 子目录 两层关系</span></span><br><span class=\"line\">target/logs/</span><br><span class=\"line\"><span class=\"comment\"># 孙子目录 三层关系</span></span><br><span class=\"line\">target/*/logs/</span><br><span class=\"line\"><span class=\"comment\"># 后代目录 任意层关系</span></span><br><span class=\"line\">target/**/logs/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可选字符匹配 </span></span><br><span class=\"line\"><span class=\"comment\"># 匹配 build/Build 文件或目录 Build 不会匹配 uild</span></span><br><span class=\"line\">[bB]uild </span><br><span class=\"line\"><span class=\"comment\"># 匹配 .pyc 或 .pyo</span></span><br><span class=\"line\">.py[co]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 特定目录下文件</span></span><br><span class=\"line\">target/*/.bin/*.js</span><br><span class=\"line\"><span class=\"comment\"># 目录匹配通配符</span></span><br><span class=\"line\"><span class=\"comment\"># 匹配 .deploy_git .deployB</span></span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他忽略方式\"><a class=\"markdownIt-Anchor\" href=\"#其他忽略方式\"></a> 其他忽略方式</h4>\n<p><code>.gitingore</code> 文件应该被提交到仓库里，但是会暴露你的忽略规则，如果不想暴露，可使用以下方式设置：</p>\n<ul>\n<li>.git/info/exclude 文件配置；</li>\n<li>配置全局忽略文件。</li>\n</ul>\n<h3 id=\"常见项目的-gitignore-文件\"><a class=\"markdownIt-Anchor\" href=\"#常见项目的-gitignore-文件\"></a> 常见项目的 .gitignore 文件</h3>\n<ul>\n<li><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\">常见gitignore模板</a></li>\n<li><a href=\"https://www.gitignore.io/\" target=\"_blank\" rel=\"noopener\">在线生成gitignore文件</a></li>\n</ul>\n<h3 id=\"列出忽略的文件\"><a class=\"markdownIt-Anchor\" href=\"#列出忽略的文件\"></a> 列出忽略的文件</h3>\n<ol>\n<li>git status</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status --ignored</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>git ls-files</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files --others -i --exclude-standard</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除忽略文件\"><a class=\"markdownIt-Anchor\" href=\"#删除忽略文件\"></a> 删除忽略文件</h3>\n<p><code>git clean -x</code> 可删除忽略文件,和 <code>git reset --hard</code> 一起使用可完全回到某个 commit 状态。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -n <span class=\"comment\"># clean 演练，告知哪些文件会被删除</span></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下所有没有 track 的文件，不删除 .gitignore 文件里的文件</span></span><br><span class=\"line\">git clean -f  &lt;path&gt; <span class=\"comment\"># 指定路径 path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下没有被 track 的文件和目录</span></span><br><span class=\"line\">git clean -df</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 所有没有被 track 的目录和文件，不管 .gitignore 是否匹配</span></span><br><span class=\"line\">git clean -xf</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"列出被跟踪的文件\"><a class=\"markdownIt-Anchor\" href=\"#列出被跟踪的文件\"></a> 列出被跟踪的文件</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-tree -r master --name-only</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见问题\"><a class=\"markdownIt-Anchor\" href=\"#常见问题\"></a> 常见问题</h2>\n<h3 id=\"本地仓库版本落后于远程仓库版本\"><a class=\"markdownIt-Anchor\" href=\"#本地仓库版本落后于远程仓库版本\"></a> 本地仓库版本落后于远程仓库版本</h3>\n<p>当push到远程仓库时，出现以下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Updates were rejected because the tip of your current branch is behind</span><br></pre></td></tr></table></figure>\n<p>解决办法：</p>\n<ul>\n<li>强推（远程修改会丢失）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin -f master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>先合并，再推送（待验证）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不想合并，先建分支，再推送（待验证）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &lt;branch-name&gt;</span><br><span class=\"line\">git push origin &lt;branch-name&gt; <span class=\"comment\"># 待验证</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"git推送提示remote-origin-already-exists\"><a class=\"markdownIt-Anchor\" href=\"#git推送提示remote-origin-already-exists\"></a> Git推送提示：remote origin already exists</h3>\n<ol>\n<li>删除远程仓库 (删除报错，可在配置文件中删除仓库信息)</li>\n</ol>\n<blockquote>\n<p>git  remote rm origin</p>\n</blockquote>\n<ol start=\"2\">\n<li>在添加远程仓库</li>\n</ol>\n<blockquote>\n<p>git remote add origin repo-url</p>\n</blockquote>\n<ol start=\"3\">\n<li>再次推送</li>\n</ol>\n<blockquote>\n<p>git push -u origin master</p>\n</blockquote>\n<h2 id=\"todo\"><a class=\"markdownIt-Anchor\" href=\"#todo\"></a> todo</h2>\n<blockquote>\n<p><a href=\"https://wjp2013.github.io/tool/git-reflog-git-log-git-cherry-pick/\" target=\"_blank\" rel=\"noopener\">git relog VS git log</a><br>\n<a href=\"https://dev.to/mzanggl/undo-changes-in-git-cheat-sheet-for-git-checkout-stash-reset-clean-revert-rebase-i-amend-2h1h\" target=\"_blank\" rel=\"noopener\">Undo changes in Git - Cheat sheet for git checkout, stash, reset, clean, revert, rebase -i, amend</a><br>\n<a href=\"https://sdqweb.ipd.kit.edu/wiki/Git_undo#temporary_undo_and_redo\" target=\"_blank\" rel=\"noopener\">temporary_undo_and_red</a></p>\n</blockquote>\n<h3 id=\"git-进阶\"><a class=\"markdownIt-Anchor\" href=\"#git-进阶\"></a> git 进阶</h3>\n<blockquote>\n<p><a href=\"https://wildlyinaccurate.com/a-hackers-guide-to-git/\" target=\"_blank\" rel=\"noopener\">A Hacker’s Guide to Git</a></p>\n</blockquote>\n<hr>\n<blockquote>\n<p><a href=\"https://my.oschina.net/yuzn/blog/82297\" target=\"_blank\" rel=\"noopener\">Git – Fast Forward 和 no fast foward</a></p>\n</blockquote>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>Git是一个分布式版本控制系统（CVS），可以记录<strong>文本文件</strong>的<strong>变化</strong>（<em>修改、增加、删除等操作</em>），比如 TXT、HTML、程序源代码等，<span style=\"color:red;\">不能记录其他文件（图片、音频等二进制文件）的变化，不能记录word文档的变化。</span></p>","more":"<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#git%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C\">Git常见操作</a>\n<ul>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3\">配置相关</a>\n<ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E9%85%8D%E7%BD%AE\">查看配置</a></li>\n<li><a href=\"#%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE\">添加配置</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E9%85%8D%E7%BD%AE\">删除配置</a></li>\n<li><a href=\"#%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">编辑配置文件</a></li>\n<li><a href=\"#%E5%88%9B%E5%BB%BA%E6%96%B0%E4%BB%93%E5%BA%93\">创建新仓库</a></li>\n<li><a href=\"#%E5%85%8B%E9%9A%86%E5%B7%B2%E6%9C%89%E4%BB%93%E5%BA%93\">克隆已有仓库</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%B7%BB%E5%8A%A0%E6%9B%B4%E6%94%B9\">添加更改</a></li>\n<li><a href=\"#%E9%87%8D%E5%91%BD%E5%90%8D%E5%B7%B2%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6\">重命名已跟踪的文件</a></li>\n<li><a href=\"#%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9\">撤销修改</a></li>\n<li><a href=\"#%E4%BB%8E%E6%9A%82%E5%AD%98%E5%8C%BA%E6%92%A4%E5%9B%9E\">从暂存区撤回</a></li>\n<li><a href=\"#commit-%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C\">commit 相关操作</a>\n<ul>\n<li><a href=\"#%E6%8F%90%E4%BA%A4%E6%9B%B4%E6%94%B9%E5%88%B0%E4%BB%93%E5%BA%93\">提交更改到仓库</a></li>\n<li><a href=\"#%E5%90%88%E5%B9%B6-commit\">合并 commit</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BF%AE%E6%94%B9%E6%AF%94%E8%BE%83-git-diff\">修改比较 git diff</a></li>\n<li><a href=\"#%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80\">版本回退</a>\n<ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95\">查看提交记录</a></li>\n<li><a href=\"#%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80-2\">版本回退</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA\">工作区和暂存区</a>\n<ul>\n<li><a href=\"#status-%E5%92%8C-diff-%E6%AF%94%E8%BE%83%E7%9A%84%E6%98%AF%E5%93%AA%E4%BA%9B\">status 和 diff 比较的是哪些？</a>\n<ul>\n<li><a href=\"#diff-%E7%9A%84%E6%AF%94%E8%BE%83\">diff 的比较</a>\n<ul>\n<li><a href=\"#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E6%AF%94%E8%BE%83\">工作区和暂存区的比较</a></li>\n<li><a href=\"#%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8C-head-%E6%AF%94%E8%BE%83\">暂存区和 HEAD 比较</a></li>\n<li><a href=\"#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C-head-%E6%AF%94%E8%BE%83\">工作区和 HEAD 比较</a></li>\n<li><a href=\"#%E5%88%86%E6%94%AF%E6%AF%94%E8%BE%83\">分支比较</a></li>\n<li><a href=\"#%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83%E7%BB%93%E6%9E%9C\">输出比较结果</a></li>\n</ul>\n</li>\n<li><a href=\"#status-%E7%9A%84%E6%AF%94%E8%BE%83\">status 的比较</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9-2\">撤销修改</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\">删除文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\">远程仓库</a>\n<ul>\n<li><a href=\"#%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\">关联远程仓库</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\">查看远程仓库</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%9A%84%E5%85%B3%E8%81%94\">删除本地分支和远程分支的关联</a></li>\n<li><a href=\"#%E6%8E%A8%E9%80%81%E6%9C%AC%E5%9C%B0%E4%BF%AE%E6%94%B9%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\">推送本地修改到远程仓库</a></li>\n<li><a href=\"#%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6\">分支合并</a>\n<ul>\n<li><a href=\"#%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%96%B9%E6%B3%95%E4%B8%80%E6%8E%A8%E8%8D%90\">合并分支方法一（推荐）</a></li>\n<li><a href=\"#%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%96%B9%E6%B3%95%E4%BA%8C\">合并分支方法二</a></li>\n<li><a href=\"#%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6%E6%96%B9%E6%B3%95%E4%B8%89\">分支合并方法三</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%BC%BA%E5%88%B6%E8%A6%86%E7%9B%96%E5%90%88%E5%B9%B6\">强制覆盖合并</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AF%8F%E6%AC%A1%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81\">如何避免每次输入密码?</a>\n<ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF\">查看分支</a></li>\n<li><a href=\"#%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF\">新建分支</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF\">删除本地分支</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF\">删除远程分支</a></li>\n<li><a href=\"#%E9%87%8D%E5%91%BD%E5%90%8D%E5%88%86%E6%94%AF\">重命名分支</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B7%B2%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6%E5%8F%96%E6%B6%88%E8%B7%9F%E8%B8%AA\">已跟踪的文件取消跟踪</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E5%B7%B2%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6\">删除已跟踪的文件</a></li>\n<li><a href=\"#gitignore-%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3\">.gitignore 文件相关</a>\n<ul>\n<li><a href=\"#%E5%BF%BD%E7%95%A5%E8%A7%84%E5%88%99\">忽略规则</a>\n<ul>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A7%84%E5%88%99%E6%A8%A1%E5%BC%8F\">常见的规则模式</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96%E5%BF%BD%E7%95%A5%E6%96%B9%E5%BC%8F\">其他忽略方式</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E9%A1%B9%E7%9B%AE%E7%9A%84-gitignore-%E6%96%87%E4%BB%B6\">常见项目的 .gitignore 文件</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BA%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6\">列出忽略的文件</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6\">删除忽略文件</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BA%E8%A2%AB%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6\">列出被跟踪的文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">常见问题</a>\n<ul>\n<li><a href=\"#%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E7%89%88%E6%9C%AC%E8%90%BD%E5%90%8E%E4%BA%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%89%88%E6%9C%AC\">本地仓库版本落后于远程仓库版本</a></li>\n<li><a href=\"#git%E6%8E%A8%E9%80%81%E6%8F%90%E7%A4%BAremote-origin-already-exists\">Git推送提示：remote origin already exists</a></li>\n</ul>\n</li>\n<li><a href=\"#todo\">todo</a>\n<ul>\n<li><a href=\"#git-%E8%BF%9B%E9%98%B6\">git 进阶</a></li>\n</ul>\n</li>\n</ul>\n</p>\n<h2 id=\"git常见操作\"><a class=\"markdownIt-Anchor\" href=\"#git常见操作\"></a> Git常见操作</h2>\n<h3 id=\"配置相关\"><a class=\"markdownIt-Anchor\" href=\"#配置相关\"></a> 配置相关</h3>\n<p>配置分为系统配置、全局配置和仓库配置，全局配置一般对该电脑的使用这都是有效的，也就对所有仓库有效了，仓库配置只对某个仓库有效。命令加<code>--global</code>是全局配置。</p>\n<h4 id=\"查看配置\"><a class=\"markdownIt-Anchor\" href=\"#查看配置\"></a> 查看配置</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global -l <span class=\"comment\"># 全局配置</span></span><br><span class=\"line\">git config --<span class=\"built_in\">local</span> -l <span class=\"comment\"># 仓库配置</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"添加配置\"><a class=\"markdownIt-Anchor\" href=\"#添加配置\"></a> 添加配置</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --add &lt;key&gt; value</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除配置\"><a class=\"markdownIt-Anchor\" href=\"#删除配置\"></a> 删除配置</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> &lt;key&gt; <span class=\"comment\"># 删除全局 key 配置</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"编辑配置文件\"><a class=\"markdownIt-Anchor\" href=\"#编辑配置文件\"></a> 编辑配置文件</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global -e <span class=\"comment\"># -e 是 --edit 的别名，会在编辑器中打开配置文件。编辑后配置，配置就生效了。</span></span><br></pre></td></tr></table></figure>\n<p>###创建版本仓库</p>\n<h4 id=\"创建新仓库\"><a class=\"markdownIt-Anchor\" href=\"#创建新仓库\"></a> 创建新仓库</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在某个文件下，该文件夹成为一个 git 仓库，生成一个 .git 文件夹</span></span><br><span class=\"line\">git init</span><br><span class=\"line\">git init &lt;fileName&gt; <span class=\"comment\"># 将 fileName 初始化为一个 git 仓库</span></span><br><span class=\"line\"><span class=\"comment\"># 帮助命令</span></span><br><span class=\"line\">git <span class=\"built_in\">help</span> &lt;<span class=\"built_in\">command</span>&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -a</span><br><span class=\"line\">./  ../  .git/</span><br></pre></td></tr></table></figure>\n<p><em>.git 文件夹内的内容不可轻易改动，里面记录了文件变化</em></p>\n<h4 id=\"克隆已有仓库\"><a class=\"markdownIt-Anchor\" href=\"#克隆已有仓库\"></a> 克隆已有仓库</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;repo&gt; <span class=\"comment\"># 在某个文件内执行，会在该文件里生成一个仓库</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt; <span class=\"comment\"># 克隆仓库到指定目录</span></span><br></pre></td></tr></table></figure>\n<p>clone 做了4件事：</p>\n<ul>\n<li><code>repo</code>的文件夹被创建；</li>\n<li>仓库的所有文件和<code>提交</code>都被下载到<code>repo</code>内；</li>\n<li>在<code>repo</code>文件内初始化一个git仓库；</li>\n<li>一个远程分支<code>origin</code>被创建,关联了该URL；</li>\n<li>本地有一个分支（默认名字为<code>master</code>）。<br>\n<strong>四种协议克隆</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SSH 协议</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:fsliurujie/test.git</span><br><span class=\"line\"><span class=\"comment\"># HTTPS 协议</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/fsliurujie/test.git</span><br><span class=\"line\"><span class=\"comment\"># GIT协议</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/fsliurujie/test.git</span><br><span class=\"line\"><span class=\"comment\"># HTTP 协议</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> http:////github.com/fsliurujie/test.git</span><br></pre></td></tr></table></figure>\n<p><strong>ssh vs https</strong><br>\nssh 和 http 是常见的两种克隆方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">协议</th>\n<th style=\"text-align:center\">是否配置SSH key</th>\n<th style=\"text-align:center\">速度</th>\n<th style=\"text-align:center\">PUSH</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ssh</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">快</td>\n<td style=\"text-align:center\">仓库管理员无需密码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">https</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">较慢</td>\n<td style=\"text-align:center\">需要用户名和密码</td>\n</tr>\n</tbody>\n</table>\n<p>创建仓库时可能会用到的其他操作：</p>\n<ul>\n<li><strong>创建文件夹</strong>: mkdir  fileName  创建目录</li>\n<li><strong>创建文件</strong>: touch  documentName  创建文件</li>\n<li><strong>删除文件 ：</strong> rm fileName  删除非空文件夹</li>\n<li><strong>强制删除非空文件 ：</strong> <em>rm -rf  fileName</em>   f -force 强制删除文件（夹），没有提示 -r–recursive 递归删除 删除空文件可用这个</li>\n</ul>\n<h3 id=\"添加更改\"><a class=\"markdownIt-Anchor\" href=\"#添加更改\"></a> 添加更改</h3>\n<p>添加跟踪的文件之前，一般需要设置排除跟踪的文件，即创建<code>.gitignore</code>文件。<br>\n不知道如何编写？复制来，按需修改即可。<br>\n<a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\">各种项目的gitignore模板</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;fileName&gt; <span class=\"comment\"># 添加某一个文件到暂存区</span></span><br><span class=\"line\">git add *.js <span class=\"comment\"># 增加所有 js 文件的修改</span></span><br><span class=\"line\">git add -u <span class=\"comment\"># git add --update 添加修改（modified)和删除（delete）文件（跟踪的文件），不添加（new）新增文件</span></span><br><span class=\"line\">git add . <span class=\"comment\"># 添加新增和修改，不添加删除</span></span><br><span class=\"line\">git add -A <span class=\"comment\"># git add -all, 合并 git add -u 和 git add . 即添加新增、修改和删除</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重命名已跟踪的文件\"><a class=\"markdownIt-Anchor\" href=\"#重命名已跟踪的文件\"></a> 重命名已跟踪的文件</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git mv old-name new-name</span><br></pre></td></tr></table></figure>\n<p>该命令和直接重命名文件，然后 <code>git rm old-file</code>,<code>git add new-old</code>是一样的。</p>\n<h3 id=\"撤销修改\"><a class=\"markdownIt-Anchor\" href=\"#撤销修改\"></a> 撤销修改</h3>\n<p>在 commit 提交前，不想添加修改，可<code>撤掉更改</code>—<code>文件修改会消失，这是非常危险的操作</code> <em>除非你确实清楚不想要那个文件了，否则不要使用这个命令。</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -- 必须有，没有是分支切换命令</span></span><br><span class=\"line\">git checkout --file</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>add</code> 后修改，<code>checkout</code>回到<strong>最近一次</strong>add后的状态，还未 add 的更改消失；</li>\n<li><code>commit</code>后修改，<code>checkout</code>回到<strong>最近一次</strong>commit 后的状态，更改消失；</li>\n<li>总的来说，<strong>checkout 是撤掉修改</strong>。</li>\n</ul>\n<p>添加文件也是一种修改，<code>checkout</code>的另一个作用是找回删错的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm file <span class=\"comment\"># file 不是你想删除的文件，</span></span><br><span class=\"line\">git checkout --file <span class=\"comment\"># 找回误删的文件，但是最近一次 add/commit 后的修改丢失了</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"从暂存区撤回\"><a class=\"markdownIt-Anchor\" href=\"#从暂存区撤回\"></a> 从暂存区撤回</h3>\n<p>-<strong>从暂存区撤回</strong>：git  rm --cached</p>\n<p>usage: git rm [<options>] [–] <file>…<br>\n-n, --dry-run         dry run<br>\n-q, --quiet           do not list removed files<br>\n–cached              only remove from the index<br>\n-f, --force           override the up-to-date check<br>\n-r                    allow recursive removal<br>\n–ignore-unmatch      exit with a zero status even if nothing matched</file></options></p>\n<p><strong>撤回很多文件如何操作？？？</strong></p>\n<h3 id=\"commit-相关操作\"><a class=\"markdownIt-Anchor\" href=\"#commit-相关操作\"></a> commit 相关操作</h3>\n<h4 id=\"提交更改到仓库\"><a class=\"markdownIt-Anchor\" href=\"#提交更改到仓库\"></a> 提交更改到仓库</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m  提交说明</span><br><span class=\"line\">git commit -a <span class=\"comment\"># 在编辑器中写提交说明</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"合并-commit\"><a class=\"markdownIt-Anchor\" href=\"#合并-commit\"></a> 合并 commit</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> <span class=\"comment\"># 查看提交历史</span></span><br></pre></td></tr></table></figure>\n<p>当前历史：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit a00766289ef.......</span><br><span class=\"line\">    待合并commit</span><br><span class=\"line\">commit 22281fca7bf.......</span><br><span class=\"line\">    第三方库和业务代码分开打包</span><br><span class=\"line\">commit 7828194fe69.......</span><br><span class=\"line\">    各页面分开打包</span><br></pre></td></tr></table></figure>\n<p>需要合并’待合并commit’和’第三方库和业务代码分开打包’</p>\n<p>先 rebase 操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i 7828194f <span class=\"comment\"># 参数 i 是不需要合并的commit</span></span><br></pre></td></tr></table></figure>\n<p>执行完该命令，会进入交互模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p e2d34a8 脚本配置自定义参数</span><br><span class=\"line\">s 004fb27 修改README</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rebase bd25857..004fb27 onto bd25857 (2 commands)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup = like \"squash\", but discard this commit's log message</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop = remove commit</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure>\n<p><code>pick</code> 会执行 commit<br>\n<code>squash</code> 该 commit 会合并到前一个commit</p>\n<p>把第二条命令改为<code>s</code>，保存并退出，会进入commit message 编辑界面，可编辑新的commit message。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is a combination of 2 commits.</span></span><br><span class=\"line\"><span class=\"comment\"># This is the 1st commit message:</span></span><br><span class=\"line\"></span><br><span class=\"line\">脚本配置自定义参数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This is the commit message #2:</span></span><br><span class=\"line\"></span><br><span class=\"line\">修改README</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Please enter the commit message for your changes. Lines starting</span></span><br><span class=\"line\"><span class=\"comment\"># with '#' will be ignored, and an empty message aborts the commit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Date:      Fri Feb 15 17:31:30 2019 +0800</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># interactive rebase in progress; onto bd25857</span></span><br><span class=\"line\"><span class=\"comment\"># Last commands done (2 commands done):</span></span><br><span class=\"line\"><span class=\"comment\">#    pick e2d34a8 脚本配置自定义参数</span></span><br><span class=\"line\"><span class=\"comment\">#    squash 004fb27 修改README</span></span><br><span class=\"line\"><span class=\"comment\"># No commands remaining.</span></span><br><span class=\"line\"><span class=\"comment\"># You are currently rebasing branch 'master' on 'bd25857'.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Changes to be committed:</span></span><br><span class=\"line\"><span class=\"comment\">#\tmodified:   .gitignore</span></span><br><span class=\"line\"><span class=\"comment\">#\tmodified:   README.md</span></span><br><span class=\"line\"><span class=\"comment\">#\tnew file:   config/default.js</span></span><br><span class=\"line\"><span class=\"comment\">#\tnew file:   config/dev.js</span></span><br><span class=\"line\"><span class=\"comment\">#\tmodified:   package.json</span></span><br><span class=\"line\"><span class=\"comment\">#\tmodified:   webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改比较-git-diff\"><a class=\"markdownIt-Anchor\" href=\"#修改比较-git-diff\"></a> 修改比较 git diff</h3>\n<p><strong>git status</strong> 命令是查看仓库状态，文件是否被修改，修改会哪些文件还没提交等，不知道修改的具体内容。<br>\n-<strong>查看修改的内容</strong>：git diff  比较的是 暂存区的文件和本地文件。<br>\n<strong>有变化的内会用红色和绿色标记</strong></p>\n<h3 id=\"版本回退\"><a class=\"markdownIt-Anchor\" href=\"#版本回退\"></a> 版本回退</h3>\n<h4 id=\"查看提交记录\"><a class=\"markdownIt-Anchor\" href=\"#查看提交记录\"></a> 查看提交记录</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> </span><br><span class=\"line\">git <span class=\"built_in\">log</span>  --pretty=oneline  <span class=\"comment\">#在一行显示提交记录</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"版本回退-2\"><a class=\"markdownIt-Anchor\" href=\"#版本回退-2\"></a> 版本回退</h4>\n<p><strong>HEAD</strong> : 表示当前版本。<br>\n我们可回退到其他版本。<br>\n<em>HEAD^</em> ：上一个版本，<em>HEAD^^</em> ： 上上个版本。<br>\n<em>HEAD~n</em> ：往前第 n 个版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;commitID&gt; <span class=\"comment\"># 回退到 commitID 为版本 推荐使用</span></span><br><span class=\"line\">git reset --hard HEAD~n <span class=\"comment\"># 回退到往前第 n 个版本</span></span><br></pre></td></tr></table></figure>\n<p>回退我反悔了，又想回到之前的版本呢？</p>\n<ol>\n<li>查看 commitID:</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>版本穿梭</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard commitID <span class=\"comment\"># 根据commitID 回退</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"工作区和暂存区\"><a class=\"markdownIt-Anchor\" href=\"#工作区和暂存区\"></a> 工作区和暂存区</h2>\n<ul>\n<li><strong>工作区（工作目录）</strong> : 本地电脑文件夹，该文件夹里有你需要版本控制的文件。</li>\n<li><strong>版本仓库Repository</strong>：工作区里有一个隐藏的 .git 文件夹，这不是工作区，这是 Git 仓库。</li>\n<li><strong>暂存区Stage</strong>：版本仓库里有暂存区区，Git add 先添加到这里。</li>\n<li><strong>分支</strong> :  仓库里有一个分支，git commit 把修改从暂存区提交到分支，一本版本仓库里可能有多个分支。<br>\n<img src=\"./%E5%B7%A5%E4%BD%9C%E5%8C%BA---%E6%9A%82%E5%AD%98%E5%8C%BA---%E7%89%88%E6%9C%AC%E5%BA%93.bmp\" alt=\"Alt text\"></li>\n</ul>\n<h3 id=\"status-和-diff-比较的是哪些\"><a class=\"markdownIt-Anchor\" href=\"#status-和-diff-比较的是哪些\"></a> status 和 diff 比较的是哪些？</h3>\n<h4 id=\"diff-的比较\"><a class=\"markdownIt-Anchor\" href=\"#diff-的比较\"></a> diff 的比较</h4>\n<p>diff 可比较工作区和暂存区、工作区和HEAD、暂存区和 HEAD、两个分支、两个提交、两个文件、两个 bolb之间的差异。</p>\n<h5 id=\"工作区和暂存区的比较\"><a class=\"markdownIt-Anchor\" href=\"#工作区和暂存区的比较\"></a> 工作区和暂存区的比较</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff <span class=\"comment\"># 比较所有文件</span></span><br><span class=\"line\">git diff -- file1 file2 <span class=\"comment\"># 比较个别文件</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"暂存区和-head-比较\"><a class=\"markdownIt-Anchor\" href=\"#暂存区和-head-比较\"></a> 暂存区和 HEAD 比较</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached  <span class=\"comment\"># 暂存区和HEAD的比较 比较所有文件</span></span><br><span class=\"line\">git diff --cached -- file1 file2 比较个别文件</span><br><span class=\"line\">git diff --staged  <span class=\"comment\"># 暂存区和HEAD的比较</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"工作区和-head-比较\"><a class=\"markdownIt-Anchor\" href=\"#工作区和-head-比较\"></a> 工作区和 HEAD 比较</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff HEAD <span class=\"comment\"># 比较所有文件</span></span><br><span class=\"line\">git diff HEAD -- file1 file2 <span class=\"comment\"># 比较个别文件</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"分支比较\"><a class=\"markdownIt-Anchor\" href=\"#分支比较\"></a> 分支比较</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff branch-name <span class=\"comment\"># 分支 branch-name 的 HEAD 和当前分支 HEAD 比较</span></span><br><span class=\"line\">git diff branch-name1 branch-name2 <span class=\"comment\"># 两个分支的 HEAD 比较</span></span><br><span class=\"line\">git diff HEAD HEAD~1 <span class=\"comment\"># 当前 HEAD 和上一个 HEAD 比较（两个 commit 的比较）</span></span><br><span class=\"line\">git diff commitID1 commitID2 <span class=\"comment\"># 两个 commit 的比较</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"输出比较结果\"><a class=\"markdownIt-Anchor\" href=\"#输出比较结果\"></a> 输出比较结果</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &gt;&gt; diff.txt <span class=\"comment\"># 将比较结果输出到 diff.txt 文件中</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"status-的比较\"><a class=\"markdownIt-Anchor\" href=\"#status-的比较\"></a> status 的比较</h4>\n<p>实验：</p>\n<ul>\n<li><strong>修改→status</strong>：文件被修改，还没提交到暂存区。可以 git add，或者 git checkout --file 放弃更改 ;</li>\n<li><strong>修改→add→status</strong>：提示更改没commit，可以git reset回退版本。</li>\n<li><strong>修改→add→修改→status</strong>：提示更改没commit，可以git reset回退版本。 提示 文件被修改，还没提交到暂存区。可以 git add，或者 git checkout --file 放弃更改 ；</li>\n<li><strong>修改→add→commit→status</strong>：工作区干净。</li>\n</ul>\n<p><strong>结论：</strong></p>\n<ol>\n<li><strong>提示没有commit，比较的是暂存区和分支，可进行commit 或者 reset ;</strong></li>\n<li><strong>提示没有 add，比较的是工作区和暂存区，可 add 到暂存区和 checkout ，放弃更改；</strong></li>\n<li><strong>status 比较的是工作区和暂存区，暂存区和分支，<span style=\"color:red;\">不比较工作区和分支</span>。</strong></li>\n</ol>\n<h3 id=\"撤销修改-2\"><a class=\"markdownIt-Anchor\" href=\"#撤销修改-2\"></a> 撤销修改</h3>\n<ul>\n<li><strong>撤销修改</strong>:git checkout – file， 文件回到最后一次 add 的状态。<br>\n两种情况：<br>\n1.<strong>修改后还没add</strong>：回到最近的版本库；<br>\n2.<strong>修改后已add</strong> : 回到 add 之前的状态。</li>\n</ul>\n<blockquote>\n<p><span style=\"color:red;\"> - - 很重要，没有它就不是撤销修改，而是切换分支</span></p>\n</blockquote>\n<blockquote>\n<p>git checkout – . 撤销所有修改<br>\ngit checkout path/…/file 撤销文件下中某个文件的修改</p>\n</blockquote>\n<p><em>git reset HEAD file</em> 可以回退版本，也可从暂存区回到工作区。</p>\n<h3 id=\"删除文件\"><a class=\"markdownIt-Anchor\" href=\"#删除文件\"></a> 删除文件</h3>\n<p><strong>在工作区删除文件</strong>：rm file<br>\n在工作删除文件后，工作区和仓库版本不一致了，可以有两个操作：</p>\n<ol>\n<li>误删了，就把版本库里的最新版本，拿到工作区。 <strong>git  checkout – file</strong></li>\n<li>确认删除，那再把版本库里的文件删除。<strong>git rm file</strong></li>\n</ol>\n<blockquote>\n<p><span style=\"color:red;\">注意 git rm file 和 rm 的区别：</span><br>\n<strong>git rm file</strong>:删除暂存区和工作区，需用用 <strong>git checkeout HEAD – file</strong> 或者 <strong>git checktout HEAD file</strong>分支恢复。</p>\n</blockquote>\n<h2 id=\"远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#远程仓库\"></a> 远程仓库</h2>\n<ol>\n<li>在 Github 上创建仓库并关联本地仓库<br>\nGit 是分布式版本控制系统，同一个 Git 版本仓库，可分布到不同的机器上，这些机器上的版本库都是一样的。现在只有一台机器，如何分布？<br>\n**①：在 Github 上创建仓库，将代码推送到该仓库。**推荐做法<br>\n②：分布在同一台机器上的不同目录，硬盘坏了所有版本库都没了，不推荐，（也不知道怎么弄）。<br>\n③：建一台服务器，从该服务器上克隆版本库，提交版本库到该服务器。成本高，适合公司多人协作开发。</li>\n</ol>\n<h3 id=\"关联远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#关联远程仓库\"></a> 关联远程仓库</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;repoUrl&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>origin</strong> 是默认的<strong>远程仓库</strong>的名字，可取其他名。远程仓库可有多个分支。</p>\n<blockquote>\n<p>“origin” 并无特殊含义<br>\n远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 git init 时默认的<strong>起始分支名字</strong>，原因仅仅是它的广泛使用，“origin” 是当你运行 git clone 时默认的<strong>远程仓库名字</strong>。 如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master</p>\n</blockquote>\n<h3 id=\"查看远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#查看远程仓库\"></a> 查看远程仓库</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v <span class=\"comment\"># 显示所有远程仓库</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除本地分支和远程分支的关联\"><a class=\"markdownIt-Anchor\" href=\"#删除本地分支和远程分支的关联\"></a> 删除本地分支和远程分支的关联</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote remove origin</span><br></pre></td></tr></table></figure>\n<h3 id=\"推送本地修改到远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#推送本地修改到远程仓库\"></a> 推送本地修改到远程仓库</h3>\n<p><strong>第一次推送本地仓库到远程仓库</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master  <span class=\"comment\"># master 是分支名字</span></span><br></pre></td></tr></table></figure>\n<p><strong>非第一次推送</strong></p>\n<p>开始工作前，远程仓库可能有更新,需要先<strong>合并</strong>。</p>\n<h3 id=\"分支合并\"><a class=\"markdownIt-Anchor\" href=\"#分支合并\"></a> 分支合并</h3>\n<h4 id=\"合并分支方法一推荐\"><a class=\"markdownIt-Anchor\" href=\"#合并分支方法一推荐\"></a> 合并分支方法一（推荐）</h4>\n<ol>\n<li>获取远程仓库<code>某个分支的更改</code>：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin &lt;remote-branch&gt;:&lt;temp-branch&gt;</span><br></pre></td></tr></table></figure>\n<p>该命令做了两件事情：<br>\n①. 创建本地分支 temp-branch;<br>\n②. 将<code>remote-branch</code>上的更新保存在 temp-branch 中</p>\n<ol start=\"2\">\n<li>与当前分支比较不同：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &lt;temp-branch&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>将更改<code>合并</code>到<code>当前分支</code>：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;temp-branch&gt; <span class=\"comment\"># &lt;temp-branch&gt; 是合并进`当前分支`的分支</span></span><br></pre></td></tr></table></figure>\n<p>合并成功会没提示，并且在<code>当前分支</code>上有一个合并进来的分支的<code>提交记录</code>。</p>\n<h4 id=\"合并分支方法二\"><a class=\"markdownIt-Anchor\" href=\"#合并分支方法二\"></a> 合并分支方法二</h4>\n<ol>\n<li>获取更改</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch &lt;remote&gt; <span class=\"comment\"># 获取远程仓库的更改，是哪个分支呢？remote 远程仓库名字，一般是 origin</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>合并</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;remote&gt;/&lt;<span class=\"built_in\">local</span>-branch&gt; <span class=\"comment\"># 将更改合并进入local-branch</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分支合并方法三\"><a class=\"markdownIt-Anchor\" href=\"#分支合并方法三\"></a> 分支合并方法三</h4>\n<p>以上两个操作合并为一个操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull &lt;remote&gt; &lt;<span class=\"built_in\">local</span>-branch&gt;</span><br></pre></td></tr></table></figure>\n<p>出现<code>Already up to date.</code>,则合并成功。</p>\n<p><code>pull</code>会自动合并，执行该命令前，需要确保当前分支的修改都提交了，需要提交的修改，可能会使你的修改丢失。执行成功后，有冲突，会显示冲突的文件。<br>\n如果你不想自动合并，可执行<code>git merge --abort</code>撤销<code>pull</code>。</p>\n<p>以上参考：<a href=\"https://help.github.com/articles/fetching-a-remote/\" target=\"_blank\" rel=\"noopener\">fetching-a-remote</a></p>\n<p>执行<code>git merge --abort</code>可能会出现<code>fatal: There is no merge to abort (MERGE_HEAD missing).</code>的提示，说明<code>撤销合并</code>没成功。（因为合并成功，合并分支被删除了？）</p>\n<p>可用 <code>git reset --merge</code>来<code>撤销合并</code>。</p>\n<p>注意：当<code>MERGE_HEAD</code>存在，<code>git reset --merge</code>和<code>git merge --abort</code>是相同的。</p>\n<p>参考：<a href=\"https://stackoverflow.com/questions/10737966/undoing-git-merge-after-merge-renamelimit-warning-plus-conflicts/10738171\" target=\"_blank\" rel=\"noopener\">undoing git merge after merge.renameLimit warning plus conflicts</a></p>\n<p>合并完后，进行编辑，提交修改，最后<code>推送</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push &lt;remote&gt; &lt;remote-branch&gt; <span class=\"comment\"># &lt;remote-branch&gt; 是你工作的远程分支名字，可能别人和你在该分支是上工作</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"强制覆盖合并\"><a class=\"markdownIt-Anchor\" href=\"#强制覆盖合并\"></a> 强制覆盖合并</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all  </span><br><span class=\"line\">git reset --hard origin/master </span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何避免每次输入密码\"><a class=\"markdownIt-Anchor\" href=\"#如何避免每次输入密码\"></a> 如何避免每次输入密码?</h2>\n<p>执行某些操作，Git 服务器会询问用户名与密码。可在本地设置保存密码，提高效率。</p>\n<ol>\n<li>短期凭证存储<br>\n凭证保存在<strong>内存中</strong>，几分钟内有效。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global credential.helper cache</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>长期凭证存储<br>\n凭证保存在硬盘内，长期有效。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global credential.helper store</span><br></pre></td></tr></table></figure>\n<p>##分支管理</p>\n<h3 id=\"查看分支\"><a class=\"markdownIt-Anchor\" href=\"#查看分支\"></a> 查看分支</h3>\n<p>git branch [-r] [-a] [-v]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -av <span class=\"comment\"># 推荐使用，可参看本地分支和远程分支，并且可看最近的提交</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch  <span class=\"comment\"># 查看本地分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r <span class=\"comment\"># 查看远程分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a <span class=\"comment\"># 查看所有分支</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"新建分支\"><a class=\"markdownIt-Anchor\" href=\"#新建分支\"></a> 新建分支</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch [-f] new-branch  <span class=\"comment\"># 新建分支 -f 可选</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout new-branch  <span class=\"comment\"># 切换分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b new-branch <span class=\"comment\"># 新建并切换</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除本地分支\"><a class=\"markdownIt-Anchor\" href=\"#删除本地分支\"></a> 删除本地分支</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D need-delete-local-branch  <span class=\"comment\"># 在当前分支下删除自身，不可删除</span></span><br></pre></td></tr></table></figure>\n<p>删除错了，恢复：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog  <span class=\"comment\"># 查看操作日志，找到需要恢复的commit id</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch need-recover-branch commitId  <span class=\"comment\"># 恢复分支</span></span><br></pre></td></tr></table></figure>\n<p>本地分支和远程分支都删除了，怎么恢复？<br>\n先恢复本地分支，再 <strong>push</strong> 一次，即恢复了本地和远程分支</p>\n<h3 id=\"删除远程分支\"><a class=\"markdownIt-Anchor\" href=\"#删除远程分支\"></a> 删除远程分支</h3>\n<p>远程以<code>remote/branch</code> 形式命名。 例如，如果你想要看你最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch origin -d remote-branch</span><br></pre></td></tr></table></figure>\n<ul>\n<li>git branch -r -d origin/remote-branch-name</li>\n<li>git branch -d -r origin/remote-branch-name</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete origin/&lt;remote-branch&gt;</span><br><span class=\"line\">git push origin :&lt;remote-bracnh&gt;</span><br><span class=\"line\"><span class=\"comment\"># 给出本地分支 是推送远程分支</span></span><br><span class=\"line\">git push origin &lt;<span class=\"built_in\">local</span>-branch&gt;:&lt;remote-bracnh&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>删除了，但是产生一个问题：其他成员在pull代码时，不会把删除本地的分支<br>\nfetch 时 加 -p<br>\ngit fetch -p</p>\n</blockquote>\n<h3 id=\"重命名分支\"><a class=\"markdownIt-Anchor\" href=\"#重命名分支\"></a> 重命名分支</h3>\n<p>删除远程分支→重命名本地分支→ push 分支到远程仓库<br>\n本地分支重命名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m  old-branch-name new-branch-name <span class=\"comment\"># 重命名当前分支，可省略 old-branch-name</span></span><br></pre></td></tr></table></figure>\n<p>push 新分支分支到远程仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin new-branch-name</span><br></pre></td></tr></table></figure>\n<h2 id=\"已跟踪的文件取消跟踪\"><a class=\"markdownIt-Anchor\" href=\"#已跟踪的文件取消跟踪\"></a> 已跟踪的文件取消跟踪</h2>\n<p>有的文件忘记加入到 <code>.gitignore</code>，<code>git add .</code>后Git 就会默认追踪该文件，追踪后取消追踪的操作：</p>\n<ol>\n<li>从追踪列表中删除：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除某个文件</span></span><br><span class=\"line\">git rm --cached &lt;file&gt;</span><br><span class=\"line\"><span class=\"comment\"># 可加 -r 选项 表示递归删除 带目录时加 -r</span></span><br><span class=\"line\">git rm -r --cached &lt;directory&gt;</span><br><span class=\"line\"><span class=\"comment\"># 删除整个目录</span></span><br><span class=\"line\">git rm --cached . </span><br><span class=\"line\"><span class=\"comment\"># 删除某个目录下的所有文件</span></span><br><span class=\"line\"><span class=\"comment\"># * 加 \\ 是为了从 git 命令中转译</span></span><br><span class=\"line\">git rm --cached src/\\*</span><br></pre></td></tr></table></figure>\n<p>该操作 从仓库索引中<strong>取消文件跟踪</strong>，文件<strong>仍然保留在工作目录中</strong>。<br>\n2. 增加刚才的文件或者目录到 <code>.gitignore</code><br>\n3. 提交更改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">'文件取消跟踪'</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>推送至远程<br>\n推送至远程后，远程仓库不再用取消忽略的文件。</li>\n</ol>\n<blockquote>\n<p><a href=\"https://alvinalexander.com/git/git-rm-file-git-repository-dont-track-accidentally-added\" target=\"_blank\" rel=\"noopener\">Tell Git not to track a file any more (remove from repo)</a></p>\n<p><a href=\"https://stackoverflow.com/questions/1274057/how-to-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-gitignore\" target=\"_blank\" rel=\"noopener\">How to make Git “forget” about a file that was tracked but is now in .gitignore?</a></p>\n</blockquote>\n<h2 id=\"删除已跟踪的文件\"><a class=\"markdownIt-Anchor\" href=\"#删除已跟踪的文件\"></a> 删除已跟踪的文件</h2>\n<p>希望从工作目录中<strong>删除</strong>已跟踪的文件，必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。<br>\n0. 修改<code>.gitingnore</code></p>\n<ol>\n<li>删除文件跟踪</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm &lt;file&gt;</span><br><span class=\"line\">git rm -r &lt;dir&gt;\\*.md</span><br></pre></td></tr></table></figure>\n<p>执行该操作，项目仓库中不再有该文件。<br>\n2. 提交更改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n<h2 id=\"gitignore-文件相关\"><a class=\"markdownIt-Anchor\" href=\"#gitignore-文件相关\"></a> .gitignore 文件相关</h2>\n<h3 id=\"忽略规则\"><a class=\"markdownIt-Anchor\" href=\"#忽略规则\"></a> 忽略规则</h3>\n<p><code>.gitignore</code> 列出的<code>目录</code>或者<code>文件</code>是不被 git 跟踪的。常常需要忽略的文件如下：</p>\n<ol>\n<li>临时资源，比如缓存、日志、编译后的源码等；</li>\n<li>开发环境配置文件，不同的开发人员有不同的开发习惯，环境配置文件不该被跟踪；</li>\n<li>敏感信息，比如数据库密码、秘钥等。</li>\n</ol>\n<p>匹配规则：会以 <code>.gitignore</code> 所在目录为顶级目录或者当前目录，<strong>递归</strong>地匹配路径或文件，后面的规则会覆盖前面的规则。</p>\n<p>一个文件或者目录被忽略，<strong>不会</strong>有以下行为：</p>\n<ol>\n<li>被 git 跟踪；</li>\n<li>反映到 <code>git status</code> 或 <code>git diff</code>等命令中；</li>\n<li>被暂存，比如 <code>git add -A</code> 不会暂存被忽略的文件。</li>\n</ol>\n<h4 id=\"常见的规则模式\"><a class=\"markdownIt-Anchor\" href=\"#常见的规则模式\"></a> 常见的规则模式</h4>\n<p><code>#</code> 是注释，注释不能和规则同行，否则规则失效。规则含有 <code>#</code>，使用反斜线 <code>/</code> 转义。</p>\n<ol>\n<li>常用规则</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 某类型文件，使用扩展名</span></span><br><span class=\"line\">*.js</span><br><span class=\"line\">*.<span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\"># 排除特定文件</span></span><br><span class=\"line\">!index.js</span><br><span class=\"line\"><span class=\"comment\"># 特定文件</span></span><br><span class=\"line\">index.css</span><br><span class=\"line\">test.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目录及其内容</span></span><br><span class=\"line\">node_modules/</span><br><span class=\"line\"><span class=\"comment\"># 当前目录下的某个目录 .gitignore 所在目录为顶级目录</span></span><br><span class=\"line\">/node_modules/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 任意目录或文件</span></span><br><span class=\"line\">node_modules</span><br><span class=\"line\"><span class=\"comment\"># 当前目录下的任意目录或文件</span></span><br><span class=\"line\">/node_modules</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>高级规则</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 子目录 两层关系</span></span><br><span class=\"line\">target/logs/</span><br><span class=\"line\"><span class=\"comment\"># 孙子目录 三层关系</span></span><br><span class=\"line\">target/*/logs/</span><br><span class=\"line\"><span class=\"comment\"># 后代目录 任意层关系</span></span><br><span class=\"line\">target/**/logs/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可选字符匹配 </span></span><br><span class=\"line\"><span class=\"comment\"># 匹配 build/Build 文件或目录 Build 不会匹配 uild</span></span><br><span class=\"line\">[bB]uild </span><br><span class=\"line\"><span class=\"comment\"># 匹配 .pyc 或 .pyo</span></span><br><span class=\"line\">.py[co]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 特定目录下文件</span></span><br><span class=\"line\">target/*/.bin/*.js</span><br><span class=\"line\"><span class=\"comment\"># 目录匹配通配符</span></span><br><span class=\"line\"><span class=\"comment\"># 匹配 .deploy_git .deployB</span></span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他忽略方式\"><a class=\"markdownIt-Anchor\" href=\"#其他忽略方式\"></a> 其他忽略方式</h4>\n<p><code>.gitingore</code> 文件应该被提交到仓库里，但是会暴露你的忽略规则，如果不想暴露，可使用以下方式设置：</p>\n<ul>\n<li>.git/info/exclude 文件配置；</li>\n<li>配置全局忽略文件。</li>\n</ul>\n<h3 id=\"常见项目的-gitignore-文件\"><a class=\"markdownIt-Anchor\" href=\"#常见项目的-gitignore-文件\"></a> 常见项目的 .gitignore 文件</h3>\n<ul>\n<li><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\">常见gitignore模板</a></li>\n<li><a href=\"https://www.gitignore.io/\" target=\"_blank\" rel=\"noopener\">在线生成gitignore文件</a></li>\n</ul>\n<h3 id=\"列出忽略的文件\"><a class=\"markdownIt-Anchor\" href=\"#列出忽略的文件\"></a> 列出忽略的文件</h3>\n<ol>\n<li>git status</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status --ignored</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>git ls-files</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files --others -i --exclude-standard</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除忽略文件\"><a class=\"markdownIt-Anchor\" href=\"#删除忽略文件\"></a> 删除忽略文件</h3>\n<p><code>git clean -x</code> 可删除忽略文件,和 <code>git reset --hard</code> 一起使用可完全回到某个 commit 状态。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -n <span class=\"comment\"># clean 演练，告知哪些文件会被删除</span></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下所有没有 track 的文件，不删除 .gitignore 文件里的文件</span></span><br><span class=\"line\">git clean -f  &lt;path&gt; <span class=\"comment\"># 指定路径 path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下没有被 track 的文件和目录</span></span><br><span class=\"line\">git clean -df</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 所有没有被 track 的目录和文件，不管 .gitignore 是否匹配</span></span><br><span class=\"line\">git clean -xf</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"列出被跟踪的文件\"><a class=\"markdownIt-Anchor\" href=\"#列出被跟踪的文件\"></a> 列出被跟踪的文件</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-tree -r master --name-only</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见问题\"><a class=\"markdownIt-Anchor\" href=\"#常见问题\"></a> 常见问题</h2>\n<h3 id=\"本地仓库版本落后于远程仓库版本\"><a class=\"markdownIt-Anchor\" href=\"#本地仓库版本落后于远程仓库版本\"></a> 本地仓库版本落后于远程仓库版本</h3>\n<p>当push到远程仓库时，出现以下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Updates were rejected because the tip of your current branch is behind</span><br></pre></td></tr></table></figure>\n<p>解决办法：</p>\n<ul>\n<li>强推（远程修改会丢失）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin -f master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>先合并，再推送（待验证）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不想合并，先建分支，再推送（待验证）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &lt;branch-name&gt;</span><br><span class=\"line\">git push origin &lt;branch-name&gt; <span class=\"comment\"># 待验证</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"git推送提示remote-origin-already-exists\"><a class=\"markdownIt-Anchor\" href=\"#git推送提示remote-origin-already-exists\"></a> Git推送提示：remote origin already exists</h3>\n<ol>\n<li>删除远程仓库 (删除报错，可在配置文件中删除仓库信息)</li>\n</ol>\n<blockquote>\n<p>git  remote rm origin</p>\n</blockquote>\n<ol start=\"2\">\n<li>在添加远程仓库</li>\n</ol>\n<blockquote>\n<p>git remote add origin repo-url</p>\n</blockquote>\n<ol start=\"3\">\n<li>再次推送</li>\n</ol>\n<blockquote>\n<p>git push -u origin master</p>\n</blockquote>\n<h2 id=\"todo\"><a class=\"markdownIt-Anchor\" href=\"#todo\"></a> todo</h2>\n<blockquote>\n<p><a href=\"https://wjp2013.github.io/tool/git-reflog-git-log-git-cherry-pick/\" target=\"_blank\" rel=\"noopener\">git relog VS git log</a><br>\n<a href=\"https://dev.to/mzanggl/undo-changes-in-git-cheat-sheet-for-git-checkout-stash-reset-clean-revert-rebase-i-amend-2h1h\" target=\"_blank\" rel=\"noopener\">Undo changes in Git - Cheat sheet for git checkout, stash, reset, clean, revert, rebase -i, amend</a><br>\n<a href=\"https://sdqweb.ipd.kit.edu/wiki/Git_undo#temporary_undo_and_redo\" target=\"_blank\" rel=\"noopener\">temporary_undo_and_red</a></p>\n</blockquote>\n<h3 id=\"git-进阶\"><a class=\"markdownIt-Anchor\" href=\"#git-进阶\"></a> git 进阶</h3>\n<blockquote>\n<p><a href=\"https://wildlyinaccurate.com/a-hackers-guide-to-git/\" target=\"_blank\" rel=\"noopener\">A Hacker’s Guide to Git</a></p>\n</blockquote>\n<hr>\n<blockquote>\n<p><a href=\"https://my.oschina.net/yuzn/blog/82297\" target=\"_blank\" rel=\"noopener\">Git – Fast Forward 和 no fast foward</a></p>\n</blockquote>"},{"title":"Windows7下的包管理器Chocolatey的安装及使用","date":"2019-10-07T13:16:39.000Z","_content":"\n\n以前安装过 chocolatey，win7 下报错，试了几次都没成功，今天学习 electron，又安装了一次，居然成功了。记录一下安装和使用。\n<!-- more -->\n***\n\n@[TOC]\n\n## 安装\n\nwin7 终端下，或者cmder下，输入下面的字符串，然后回车:\n```bash\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n```\n没有错就显示安装信息了，安装成功后可能会报警告，别管它，然后检查是否安装成功：\n在 git bash 或者 cmder 输入：\n```bash\nchoco\n```\n显示版本号等信息，就表示安装成功了。\n\n## 使用\n\n`choco -h` 可查看常用命令，这里记录常用的命令：\n\n```bash\nchoco <command> -h # 查看命令帮助 choco list -h  查看 list 用法\nchoco list <filter> # 搜索本地或者远程的安装包  clist 简写 search / find 和 list 功能相同\nchoco list -li # 查看本地安装的软件\nchoco list -lo # 列出已安装\nchoco list --local # 查看本地通过 choco 安装的软件\nchoco info <pkg> # 查看安装包信息\n\nchoco install <pkg1> <pkg2> # 安装\nchoco install --yes <pkg1> <pkg2> # 安装时无需确认\nchoco install <pkg> -y # 同上\ncinst <pkg> -y --dir DIR # 指定 DIR 为安装路径\ncinst <pkg> --version n #指定版本号安装\nchoco uninstall <pkg> # 卸载软件\ncuninst <pkg> # 卸载\n\nchoco outdated # 查看可更新的软件\n\n# 更新\nchoco upgrade <pkg|all> [<pkg>] # 更新所有或多个软件\ncup <pkg|all> [<pkg>] # 更新所有或多个软件\ncup <pkg> --version 1.0.0 # 更新某个版本\n```\n## 使用 gui\n\n使用命令不习惯，还可以使用 gui。\n```bash\ncinst chocolateygui -y # 安装\n```\n在`所有程序`里搜索`choco` ，点击启动gui了。\n\n还可在 [chocolatey商店](https://chocolatey.org/packages) 查找软件。\n\n## 其他用法\n\n修改安装的默认路径：\n- 花钱使用高级版本；\n- 修改注册表，谨慎操作，修改了，可能会导致某些软件运行报错，比如firefox。\n\n\n## 参考\n- [Windows7下的包管理器Chocolatey的安装](https://blog.csdn.net/u013253924/article/details/83149821)\n- [Window上更方便的软件安装方式 — Chocolatey](https://zhuanlan.zhihu.com/p/57663273)\n- [Chocolatey软体管理神器](https://blog.tdccc.com.tw/319/)\n- [设置软件默认安装路径（一劳永逸）](https://blog.csdn.net/vrmogui/article/details/88593365)\n\n","source":"_posts/Windows7下的包管理器Chocolatey的安装及使用.md","raw":"---\ntitle: Windows7下的包管理器Chocolatey的安装及使用\ntags:\n  - 数码产品\ncategories:\n  - - 开发工具\ndate: 2019-10-07 21:16:39\n---\n\n\n以前安装过 chocolatey，win7 下报错，试了几次都没成功，今天学习 electron，又安装了一次，居然成功了。记录一下安装和使用。\n<!-- more -->\n***\n\n@[TOC]\n\n## 安装\n\nwin7 终端下，或者cmder下，输入下面的字符串，然后回车:\n```bash\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n```\n没有错就显示安装信息了，安装成功后可能会报警告，别管它，然后检查是否安装成功：\n在 git bash 或者 cmder 输入：\n```bash\nchoco\n```\n显示版本号等信息，就表示安装成功了。\n\n## 使用\n\n`choco -h` 可查看常用命令，这里记录常用的命令：\n\n```bash\nchoco <command> -h # 查看命令帮助 choco list -h  查看 list 用法\nchoco list <filter> # 搜索本地或者远程的安装包  clist 简写 search / find 和 list 功能相同\nchoco list -li # 查看本地安装的软件\nchoco list -lo # 列出已安装\nchoco list --local # 查看本地通过 choco 安装的软件\nchoco info <pkg> # 查看安装包信息\n\nchoco install <pkg1> <pkg2> # 安装\nchoco install --yes <pkg1> <pkg2> # 安装时无需确认\nchoco install <pkg> -y # 同上\ncinst <pkg> -y --dir DIR # 指定 DIR 为安装路径\ncinst <pkg> --version n #指定版本号安装\nchoco uninstall <pkg> # 卸载软件\ncuninst <pkg> # 卸载\n\nchoco outdated # 查看可更新的软件\n\n# 更新\nchoco upgrade <pkg|all> [<pkg>] # 更新所有或多个软件\ncup <pkg|all> [<pkg>] # 更新所有或多个软件\ncup <pkg> --version 1.0.0 # 更新某个版本\n```\n## 使用 gui\n\n使用命令不习惯，还可以使用 gui。\n```bash\ncinst chocolateygui -y # 安装\n```\n在`所有程序`里搜索`choco` ，点击启动gui了。\n\n还可在 [chocolatey商店](https://chocolatey.org/packages) 查找软件。\n\n## 其他用法\n\n修改安装的默认路径：\n- 花钱使用高级版本；\n- 修改注册表，谨慎操作，修改了，可能会导致某些软件运行报错，比如firefox。\n\n\n## 参考\n- [Windows7下的包管理器Chocolatey的安装](https://blog.csdn.net/u013253924/article/details/83149821)\n- [Window上更方便的软件安装方式 — Chocolatey](https://zhuanlan.zhihu.com/p/57663273)\n- [Chocolatey软体管理神器](https://blog.tdccc.com.tw/319/)\n- [设置软件默认安装路径（一劳永逸）](https://blog.csdn.net/vrmogui/article/details/88593365)\n\n","slug":"Windows7下的包管理器Chocolatey的安装及使用","published":1,"updated":"2019-10-07T13:16:39.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccew000tjwrndbodlkbn","content":"<p>以前安装过 chocolatey，win7 下报错，试了几次都没成功，今天学习 electron，又安装了一次，居然成功了。记录一下安装和使用。</p>\n<a id=\"more\"></a>\n<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E5%AE%89%E8%A3%85\">安装</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8\">使用</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-gui\">使用 gui</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96%E7%94%A8%E6%B3%95\">其他用法</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n</p>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h2>\n<p>win7 终端下，或者cmder下，输入下面的字符串，然后回车:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"string\">\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\"</span> -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command <span class=\"string\">\"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\"</span> &amp;&amp; SET <span class=\"string\">\"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"</span></span><br></pre></td></tr></table></figure>\n<p>没有错就显示安装信息了，安装成功后可能会报警告，别管它，然后检查是否安装成功：<br>\n在 git bash 或者 cmder 输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco</span><br></pre></td></tr></table></figure>\n<p>显示版本号等信息，就表示安装成功了。</p>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h2>\n<p><code>choco -h</code> 可查看常用命令，这里记录常用的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco &lt;<span class=\"built_in\">command</span>&gt; -h <span class=\"comment\"># 查看命令帮助 choco list -h  查看 list 用法</span></span><br><span class=\"line\">choco list &lt;filter&gt; <span class=\"comment\"># 搜索本地或者远程的安装包  clist 简写 search / find 和 list 功能相同</span></span><br><span class=\"line\">choco list -li <span class=\"comment\"># 查看本地安装的软件</span></span><br><span class=\"line\">choco list -lo <span class=\"comment\"># 列出已安装</span></span><br><span class=\"line\">choco list --<span class=\"built_in\">local</span> <span class=\"comment\"># 查看本地通过 choco 安装的软件</span></span><br><span class=\"line\">choco info &lt;pkg&gt; <span class=\"comment\"># 查看安装包信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">choco install &lt;pkg1&gt; &lt;pkg2&gt; <span class=\"comment\"># 安装</span></span><br><span class=\"line\">choco install --yes &lt;pkg1&gt; &lt;pkg2&gt; <span class=\"comment\"># 安装时无需确认</span></span><br><span class=\"line\">choco install &lt;pkg&gt; -y <span class=\"comment\"># 同上</span></span><br><span class=\"line\">cinst &lt;pkg&gt; -y --dir DIR <span class=\"comment\"># 指定 DIR 为安装路径</span></span><br><span class=\"line\">cinst &lt;pkg&gt; --version n <span class=\"comment\">#指定版本号安装</span></span><br><span class=\"line\">choco uninstall &lt;pkg&gt; <span class=\"comment\"># 卸载软件</span></span><br><span class=\"line\">cuninst &lt;pkg&gt; <span class=\"comment\"># 卸载</span></span><br><span class=\"line\"></span><br><span class=\"line\">choco outdated <span class=\"comment\"># 查看可更新的软件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">choco upgrade &lt;pkg|all&gt; [&lt;pkg&gt;] <span class=\"comment\"># 更新所有或多个软件</span></span><br><span class=\"line\">cup &lt;pkg|all&gt; [&lt;pkg&gt;] <span class=\"comment\"># 更新所有或多个软件</span></span><br><span class=\"line\">cup &lt;pkg&gt; --version 1.0.0 <span class=\"comment\"># 更新某个版本</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-gui\"><a class=\"markdownIt-Anchor\" href=\"#使用-gui\"></a> 使用 gui</h2>\n<p>使用命令不习惯，还可以使用 gui。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cinst chocolateygui -y <span class=\"comment\"># 安装</span></span><br></pre></td></tr></table></figure>\n<p>在<code>所有程序</code>里搜索<code>choco</code> ，点击启动gui了。</p>\n<p>还可在 <a href=\"https://chocolatey.org/packages\" target=\"_blank\" rel=\"noopener\">chocolatey商店</a> 查找软件。</p>\n<h2 id=\"其他用法\"><a class=\"markdownIt-Anchor\" href=\"#其他用法\"></a> 其他用法</h2>\n<p>修改安装的默认路径：</p>\n<ul>\n<li>花钱使用高级版本；</li>\n<li>修改注册表，谨慎操作，修改了，可能会导致某些软件运行报错，比如firefox。</li>\n</ul>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/u013253924/article/details/83149821\" target=\"_blank\" rel=\"noopener\">Windows7下的包管理器Chocolatey的安装</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/57663273\" target=\"_blank\" rel=\"noopener\">Window上更方便的软件安装方式 — Chocolatey</a></li>\n<li><a href=\"https://blog.tdccc.com.tw/319/\" target=\"_blank\" rel=\"noopener\">Chocolatey软体管理神器</a></li>\n<li><a href=\"https://blog.csdn.net/vrmogui/article/details/88593365\" target=\"_blank\" rel=\"noopener\">设置软件默认安装路径（一劳永逸）</a></li>\n</ul>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>以前安装过 chocolatey，win7 下报错，试了几次都没成功，今天学习 electron，又安装了一次，居然成功了。记录一下安装和使用。</p>","more":"<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E5%AE%89%E8%A3%85\">安装</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8\">使用</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-gui\">使用 gui</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96%E7%94%A8%E6%B3%95\">其他用法</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n</p>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h2>\n<p>win7 终端下，或者cmder下，输入下面的字符串，然后回车:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"string\">\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\"</span> -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command <span class=\"string\">\"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\"</span> &amp;&amp; SET <span class=\"string\">\"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"</span></span><br></pre></td></tr></table></figure>\n<p>没有错就显示安装信息了，安装成功后可能会报警告，别管它，然后检查是否安装成功：<br>\n在 git bash 或者 cmder 输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco</span><br></pre></td></tr></table></figure>\n<p>显示版本号等信息，就表示安装成功了。</p>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h2>\n<p><code>choco -h</code> 可查看常用命令，这里记录常用的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco &lt;<span class=\"built_in\">command</span>&gt; -h <span class=\"comment\"># 查看命令帮助 choco list -h  查看 list 用法</span></span><br><span class=\"line\">choco list &lt;filter&gt; <span class=\"comment\"># 搜索本地或者远程的安装包  clist 简写 search / find 和 list 功能相同</span></span><br><span class=\"line\">choco list -li <span class=\"comment\"># 查看本地安装的软件</span></span><br><span class=\"line\">choco list -lo <span class=\"comment\"># 列出已安装</span></span><br><span class=\"line\">choco list --<span class=\"built_in\">local</span> <span class=\"comment\"># 查看本地通过 choco 安装的软件</span></span><br><span class=\"line\">choco info &lt;pkg&gt; <span class=\"comment\"># 查看安装包信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">choco install &lt;pkg1&gt; &lt;pkg2&gt; <span class=\"comment\"># 安装</span></span><br><span class=\"line\">choco install --yes &lt;pkg1&gt; &lt;pkg2&gt; <span class=\"comment\"># 安装时无需确认</span></span><br><span class=\"line\">choco install &lt;pkg&gt; -y <span class=\"comment\"># 同上</span></span><br><span class=\"line\">cinst &lt;pkg&gt; -y --dir DIR <span class=\"comment\"># 指定 DIR 为安装路径</span></span><br><span class=\"line\">cinst &lt;pkg&gt; --version n <span class=\"comment\">#指定版本号安装</span></span><br><span class=\"line\">choco uninstall &lt;pkg&gt; <span class=\"comment\"># 卸载软件</span></span><br><span class=\"line\">cuninst &lt;pkg&gt; <span class=\"comment\"># 卸载</span></span><br><span class=\"line\"></span><br><span class=\"line\">choco outdated <span class=\"comment\"># 查看可更新的软件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">choco upgrade &lt;pkg|all&gt; [&lt;pkg&gt;] <span class=\"comment\"># 更新所有或多个软件</span></span><br><span class=\"line\">cup &lt;pkg|all&gt; [&lt;pkg&gt;] <span class=\"comment\"># 更新所有或多个软件</span></span><br><span class=\"line\">cup &lt;pkg&gt; --version 1.0.0 <span class=\"comment\"># 更新某个版本</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-gui\"><a class=\"markdownIt-Anchor\" href=\"#使用-gui\"></a> 使用 gui</h2>\n<p>使用命令不习惯，还可以使用 gui。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cinst chocolateygui -y <span class=\"comment\"># 安装</span></span><br></pre></td></tr></table></figure>\n<p>在<code>所有程序</code>里搜索<code>choco</code> ，点击启动gui了。</p>\n<p>还可在 <a href=\"https://chocolatey.org/packages\" target=\"_blank\" rel=\"noopener\">chocolatey商店</a> 查找软件。</p>\n<h2 id=\"其他用法\"><a class=\"markdownIt-Anchor\" href=\"#其他用法\"></a> 其他用法</h2>\n<p>修改安装的默认路径：</p>\n<ul>\n<li>花钱使用高级版本；</li>\n<li>修改注册表，谨慎操作，修改了，可能会导致某些软件运行报错，比如firefox。</li>\n</ul>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/u013253924/article/details/83149821\" target=\"_blank\" rel=\"noopener\">Windows7下的包管理器Chocolatey的安装</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/57663273\" target=\"_blank\" rel=\"noopener\">Window上更方便的软件安装方式 — Chocolatey</a></li>\n<li><a href=\"https://blog.tdccc.com.tw/319/\" target=\"_blank\" rel=\"noopener\">Chocolatey软体管理神器</a></li>\n<li><a href=\"https://blog.csdn.net/vrmogui/article/details/88593365\" target=\"_blank\" rel=\"noopener\">设置软件默认安装路径（一劳永逸）</a></li>\n</ul>"},{"title":"使用hexo + github搭建个人主页","date":"2019-10-05T18:02:19.000Z","updated":"2019-10-05T18:03:10.000Z","git_issue_id":0,"_content":"大学时搭建过 github 博客，但是后来没怎么弄了。感觉有点折腾，就没有继续维护了，今天再来重新搭建一个博客。本文记录搭建操作。\n<!--more-->\n***\n\n@[TOC]\n\n## 预备知识：\n\n- npm 命令；\n- git 命令\n- github 常见操作\n\n环境要求：\n- node\n- git\n\n我的环境：\n```bash\n$ git version\ngit version 2.15.1.windows.2\n$ node -v\nv8.11.1\n$ npm -v\n6.4.0\n```\n## 安装 hexo\n```bash\nnpm i -g hexo-cli \n```\n在某个文件夹内初始化 hexo 博客所需要的文件\n```bash\nmkdir myBlog  # /e/HexoPages 新建一个文件夹\ncd myBlog\nhexo init # 初始化一个hexo博客需要的资源\n```\n得到如下目录：\n```bash\n├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 \n├── package.json\n├── scaffolds # 模版文件夹\n├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹\n|   ├── _drafts # 草稿文件\n|   └── _posts # 文章Markdowm文件 \n└── themes  # 主题文件夹\n```\n```bash\nnpm i # 安装 npm 依赖\n```\n本地预览博客：\n```bash\nhexo s\n```\n打开`http://localhost:4000`即可看到效果。\n\n![hexo默认主题](https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/hexo%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98.png \"hexo默认主题\")\n\n## 创建托管博客的仓库\n\n仓库名字必须用`用户名.github.io`，需要公开。\n\n## 部署本地博客到 gitbub\n\n1. 修改`_config.yml`\n\n打开 _config.yml ，将 deploy 修改如下**注意空格**\n```bash\ndeploy:\n  type: git # 版本管理工具\n  repo: # 仓库信息\n    github: https://github.com/JackZhouMine/jackzhoumine.github.io\n  branch: master # 使用分支\n```\n其他配置也可以修改，比如我将站点信息修改如下：\n```bash\n# Site\ntitle:jackzhoumine\nsubtitle:\ndescription:\nkeywords:\nauthor: jackzhoumine\nlanguage:\ntimezone:\n```\n2. 安装 hexo-deployer-git\n\n```bash\nnpm i -S hexo-deployer-git\n```\n3. 部署\n\n```bash\nhexo d -g\n```\n打开我的主页链接 `https://jackzhoumine.github.io`，看到页面就部署成功了。\n\n![部署成功](https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/myblog1.png \"部署成功的页面\")\n\n## 创建文章\n\n1. 创建文章\n\n执行`hexo new '文章标题'`，会在source/_posts文件夹内新建一个md文件，就可在里面写文章了，当然也可以手动创建。\n\n`hexo new` 简写成 `hexo n`。\n\n2. 预览效果\n\n创建完成，执行以下命令,在本地预览效果：\n```bash\nhexo g\nhexo s\n# 或者 \nhexo s g\n```\n```bash\nhexo S --draft # 预览草稿\n```\n3. 创建草稿\n\n可先创建草稿，想发布时，在发布。\n```bash\nhexo new draft \"文章标题\" # 会在 /source/-drafts 里生成草稿\nhexo publish filename # 将草稿发布成文章，会进入 post 目录\n```\n如何批量发布呢？\n\n4. 部署到线上\n\n```bash\n# 非必需\nhexo clean # 清除缓存文件（db.json）和静态文件。更改后不生效，就需要运行该命令。\n# 部署\nhexo d g # 部署到线上\n```\n5. 更新已发布的文章\n\n最简单的是修改完文章后，再部署一次。\n\n文章加上更新时间，可在主题里配置。\n我使用更加粗暴的方法，每次更新文章，就使用 vs code 扩展 `Insert Date String` 插入当前时间。\n\n## 给 markdown 文章加入图片\n\n使用本地图片，markdown 笔记移动后，图片路径失效，免费的图床可能到倒闭，毕竟都是小公司。解决办法是将所有图片在一个git仓库里管理起来，托管在 github （没有巨硬这个财大气粗的土豪做后台，也倒不了）上，安全放心。\n需要用到图片时，打开图片，然后在代码块左上方点 `Download` 按钮，打开的新标签里只有图片了，复制地址栏图片链接，类似`https://raw.githubusercontent.com/xxxx`到文章里，就可放心饮用了。\n\n## 高级主题[^说明]\n\n 可以为博客增加评论功能，方便与他人交流。增加访客统计等。\n\n### 渲染文章目录(TOC)\n\nhexo 默认的渲染模块，不支持渲染TOC的，可使用[hexo-renderer-markdown-it-plus](https://www.npmjs.com/package/hexo-renderer-markdown-it-plus)实现渲染 TOC。\n- 安装\n```bash\nnpm un hexo-renderer-marked # 卸载原来的渲染模块\nnpm i hexo-renderer-markdown-it-plus -S\n```\n- 修改配置\n在配置文件中加入以下选项：\n```bash\n## 渲染 TOC\nmarkdown_it_plus:\n    highlight: true\n    html: true\n    xhtmlOut: true\n    breaks: true\n    langPrefix:\n    linkify: true\n    typographer:\n    quotes: “”‘’\n    pre_class: highlight\n```\n还可以看模块文档，配置其他高级选项。\n\n- 写文章\n只写 `TOC`，是不会渲染目录的，需要加上`@`,并且不会渲染一级标题。推荐在摘要后面写目录，并用横线分隔摘要。\n```bash\n<!--more-->\n***\n\n@[TOC]\n```\n### 增加评论功能\n\n~~yilia 主题配置开启就可。\n疑问：为何disqus评论底部会显示其他博客的评论内容呢？~~\n\n### 增加访客统计\n\n~~使用不蒜子统计功能，免费好用。\n打开 `themes/yilia/layout/_partial/footer.ejs`，\n在id为`footer-info`的div后面增加以下内容：~~\n```ejs\n<div calss=\"count-span\">\n      <span id=\"busuanzi_container_site_pv\">\n        总访问量: <span id=\"busuanzi_value_site_pv\"></span>|\n      </span>\n      <span id=\"busuanzi_container_site_uv\">\n        总访客: <span id=\"busuanzi_value_site_uv\"></span>\n      </span>\n</div>\n```\n~~在footer顶部增加统计脚本：~~\n```js\n<script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n```\n~~部署即可看到效果了，可增加一些好看的样式。~~\n\n### 增加 stackoverflow 技术媒体\n\n~~yilia 主题没有引入 stackoverflow ,可执行增加。\nAcfun已经凉了，在 `themes\\yilia\\source\\main.0cf68a.css`中搜索acfun，替换成stackoverflow，图标就不换了。~~\n\n### 增加版权声明\n\n比较简单，[参考](https://blog.zscself.com/posts/ee4d9ecb/)\n\n### 增加推荐阅读\n\n推荐阅读是通过插件 hexo-recommended-posts 来实现的, 它不仅可以推荐你自己的博客, 还可以推荐别人的相关博客. 如果有比较多人使用这个插件的话, 不仅能帮读者快速找到感兴趣的内容, 同时也能增加自己博客的流量。\n\n1. 在 post 中增加 `recommended-post.ejs` \n\n```ejs\n<% if(theme.recommended_posts.enable && !index) {%>\n  <div class=\"recommended_posts\">\n    <h3>推荐阅读</h3>\n    <ul>\n    <% let post_list = recommended_posts(page, site) %>\n    <% for (let i in post_list){%>\n      <li>\n        <a href=\"<%= post_list[i].permalink %>\"  title=\"<%= post_list[i].title %>\" target='_blank'>\n        <%- post_list[i].title %>\n        </a>\n      </li>\n      <% } %>\n    </ul>\n  </div>\n<%}else{%>\n   <div class=\"recommended_posts\" hidden></div>\n<%}%>\n```\n2. 在 _patial 中增加样式 `recommended-post.styl`\n\n```css\n.recommended_posts\n    padding: 0.5em 1em;\n    border-left: 3px solid #6f42c1;\n    background-color: #efefef;\n    li { margin: 5px 0; }\n    a:link { color: blue; }\n    a:hover { text-decoration:underline;color: red}\n    a:visited { color: green; }\n```\n3. 在`style.styl`和`article.ejs`中引入样式和ejs\n`@import \"_partial/recommended-post\"`\n\n引入的 ejs 放在评论上边。\n\n4. 增加配置项\n\n在主题的配置中增加：\n```yml\n# 推荐阅读 需要 hexo-recommended-posts 支持\nrecommended_posts:\n  enable: true  # 启用文章推荐\n```\n在博客配置增加：\n```yml\n# 推荐阅读 需要 hexo-recommended-posts 支持\nrecommended_posts:\n  autoDisplay: false #设置为 fasle，不采用默认样式\n```\n5. 安装 hexo-recommended-posts\n\n```bash\nnpm i -S hexo-recommended-posts\n```\n6. 预览效果\n\n```bash\nhexo recommend && hexo clean && hexo g && hexo s\n```\n参考：[为 hexo maupassant 主题添加文章版权信息和推荐阅读功能 ](https://juejin.im/entry/5aef8e995188256712786e43)\n## 写在最后\n\n发现一些网站，专门爬取别人写的文章，也不注明出处，该今后发表文章，都增加不限于打赏码、微信公众号等信息。\n\n[^说明]：使用ocean主题，yilia 主题设置就删除了。","source":"_posts/hexo搭建博客.md","raw":"---\ntitle: 使用hexo + github搭建个人主页\ndate: 2019-10-06 02:02:19\nupdated: 2019-10-06 02:03:10\ngit_issue_id: 0\ntags: hexo\ncategories:\n- [node]\n---\n大学时搭建过 github 博客，但是后来没怎么弄了。感觉有点折腾，就没有继续维护了，今天再来重新搭建一个博客。本文记录搭建操作。\n<!--more-->\n***\n\n@[TOC]\n\n## 预备知识：\n\n- npm 命令；\n- git 命令\n- github 常见操作\n\n环境要求：\n- node\n- git\n\n我的环境：\n```bash\n$ git version\ngit version 2.15.1.windows.2\n$ node -v\nv8.11.1\n$ npm -v\n6.4.0\n```\n## 安装 hexo\n```bash\nnpm i -g hexo-cli \n```\n在某个文件夹内初始化 hexo 博客所需要的文件\n```bash\nmkdir myBlog  # /e/HexoPages 新建一个文件夹\ncd myBlog\nhexo init # 初始化一个hexo博客需要的资源\n```\n得到如下目录：\n```bash\n├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 \n├── package.json\n├── scaffolds # 模版文件夹\n├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹\n|   ├── _drafts # 草稿文件\n|   └── _posts # 文章Markdowm文件 \n└── themes  # 主题文件夹\n```\n```bash\nnpm i # 安装 npm 依赖\n```\n本地预览博客：\n```bash\nhexo s\n```\n打开`http://localhost:4000`即可看到效果。\n\n![hexo默认主题](https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/hexo%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98.png \"hexo默认主题\")\n\n## 创建托管博客的仓库\n\n仓库名字必须用`用户名.github.io`，需要公开。\n\n## 部署本地博客到 gitbub\n\n1. 修改`_config.yml`\n\n打开 _config.yml ，将 deploy 修改如下**注意空格**\n```bash\ndeploy:\n  type: git # 版本管理工具\n  repo: # 仓库信息\n    github: https://github.com/JackZhouMine/jackzhoumine.github.io\n  branch: master # 使用分支\n```\n其他配置也可以修改，比如我将站点信息修改如下：\n```bash\n# Site\ntitle:jackzhoumine\nsubtitle:\ndescription:\nkeywords:\nauthor: jackzhoumine\nlanguage:\ntimezone:\n```\n2. 安装 hexo-deployer-git\n\n```bash\nnpm i -S hexo-deployer-git\n```\n3. 部署\n\n```bash\nhexo d -g\n```\n打开我的主页链接 `https://jackzhoumine.github.io`，看到页面就部署成功了。\n\n![部署成功](https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/myblog1.png \"部署成功的页面\")\n\n## 创建文章\n\n1. 创建文章\n\n执行`hexo new '文章标题'`，会在source/_posts文件夹内新建一个md文件，就可在里面写文章了，当然也可以手动创建。\n\n`hexo new` 简写成 `hexo n`。\n\n2. 预览效果\n\n创建完成，执行以下命令,在本地预览效果：\n```bash\nhexo g\nhexo s\n# 或者 \nhexo s g\n```\n```bash\nhexo S --draft # 预览草稿\n```\n3. 创建草稿\n\n可先创建草稿，想发布时，在发布。\n```bash\nhexo new draft \"文章标题\" # 会在 /source/-drafts 里生成草稿\nhexo publish filename # 将草稿发布成文章，会进入 post 目录\n```\n如何批量发布呢？\n\n4. 部署到线上\n\n```bash\n# 非必需\nhexo clean # 清除缓存文件（db.json）和静态文件。更改后不生效，就需要运行该命令。\n# 部署\nhexo d g # 部署到线上\n```\n5. 更新已发布的文章\n\n最简单的是修改完文章后，再部署一次。\n\n文章加上更新时间，可在主题里配置。\n我使用更加粗暴的方法，每次更新文章，就使用 vs code 扩展 `Insert Date String` 插入当前时间。\n\n## 给 markdown 文章加入图片\n\n使用本地图片，markdown 笔记移动后，图片路径失效，免费的图床可能到倒闭，毕竟都是小公司。解决办法是将所有图片在一个git仓库里管理起来，托管在 github （没有巨硬这个财大气粗的土豪做后台，也倒不了）上，安全放心。\n需要用到图片时，打开图片，然后在代码块左上方点 `Download` 按钮，打开的新标签里只有图片了，复制地址栏图片链接，类似`https://raw.githubusercontent.com/xxxx`到文章里，就可放心饮用了。\n\n## 高级主题[^说明]\n\n 可以为博客增加评论功能，方便与他人交流。增加访客统计等。\n\n### 渲染文章目录(TOC)\n\nhexo 默认的渲染模块，不支持渲染TOC的，可使用[hexo-renderer-markdown-it-plus](https://www.npmjs.com/package/hexo-renderer-markdown-it-plus)实现渲染 TOC。\n- 安装\n```bash\nnpm un hexo-renderer-marked # 卸载原来的渲染模块\nnpm i hexo-renderer-markdown-it-plus -S\n```\n- 修改配置\n在配置文件中加入以下选项：\n```bash\n## 渲染 TOC\nmarkdown_it_plus:\n    highlight: true\n    html: true\n    xhtmlOut: true\n    breaks: true\n    langPrefix:\n    linkify: true\n    typographer:\n    quotes: “”‘’\n    pre_class: highlight\n```\n还可以看模块文档，配置其他高级选项。\n\n- 写文章\n只写 `TOC`，是不会渲染目录的，需要加上`@`,并且不会渲染一级标题。推荐在摘要后面写目录，并用横线分隔摘要。\n```bash\n<!--more-->\n***\n\n@[TOC]\n```\n### 增加评论功能\n\n~~yilia 主题配置开启就可。\n疑问：为何disqus评论底部会显示其他博客的评论内容呢？~~\n\n### 增加访客统计\n\n~~使用不蒜子统计功能，免费好用。\n打开 `themes/yilia/layout/_partial/footer.ejs`，\n在id为`footer-info`的div后面增加以下内容：~~\n```ejs\n<div calss=\"count-span\">\n      <span id=\"busuanzi_container_site_pv\">\n        总访问量: <span id=\"busuanzi_value_site_pv\"></span>|\n      </span>\n      <span id=\"busuanzi_container_site_uv\">\n        总访客: <span id=\"busuanzi_value_site_uv\"></span>\n      </span>\n</div>\n```\n~~在footer顶部增加统计脚本：~~\n```js\n<script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n```\n~~部署即可看到效果了，可增加一些好看的样式。~~\n\n### 增加 stackoverflow 技术媒体\n\n~~yilia 主题没有引入 stackoverflow ,可执行增加。\nAcfun已经凉了，在 `themes\\yilia\\source\\main.0cf68a.css`中搜索acfun，替换成stackoverflow，图标就不换了。~~\n\n### 增加版权声明\n\n比较简单，[参考](https://blog.zscself.com/posts/ee4d9ecb/)\n\n### 增加推荐阅读\n\n推荐阅读是通过插件 hexo-recommended-posts 来实现的, 它不仅可以推荐你自己的博客, 还可以推荐别人的相关博客. 如果有比较多人使用这个插件的话, 不仅能帮读者快速找到感兴趣的内容, 同时也能增加自己博客的流量。\n\n1. 在 post 中增加 `recommended-post.ejs` \n\n```ejs\n<% if(theme.recommended_posts.enable && !index) {%>\n  <div class=\"recommended_posts\">\n    <h3>推荐阅读</h3>\n    <ul>\n    <% let post_list = recommended_posts(page, site) %>\n    <% for (let i in post_list){%>\n      <li>\n        <a href=\"<%= post_list[i].permalink %>\"  title=\"<%= post_list[i].title %>\" target='_blank'>\n        <%- post_list[i].title %>\n        </a>\n      </li>\n      <% } %>\n    </ul>\n  </div>\n<%}else{%>\n   <div class=\"recommended_posts\" hidden></div>\n<%}%>\n```\n2. 在 _patial 中增加样式 `recommended-post.styl`\n\n```css\n.recommended_posts\n    padding: 0.5em 1em;\n    border-left: 3px solid #6f42c1;\n    background-color: #efefef;\n    li { margin: 5px 0; }\n    a:link { color: blue; }\n    a:hover { text-decoration:underline;color: red}\n    a:visited { color: green; }\n```\n3. 在`style.styl`和`article.ejs`中引入样式和ejs\n`@import \"_partial/recommended-post\"`\n\n引入的 ejs 放在评论上边。\n\n4. 增加配置项\n\n在主题的配置中增加：\n```yml\n# 推荐阅读 需要 hexo-recommended-posts 支持\nrecommended_posts:\n  enable: true  # 启用文章推荐\n```\n在博客配置增加：\n```yml\n# 推荐阅读 需要 hexo-recommended-posts 支持\nrecommended_posts:\n  autoDisplay: false #设置为 fasle，不采用默认样式\n```\n5. 安装 hexo-recommended-posts\n\n```bash\nnpm i -S hexo-recommended-posts\n```\n6. 预览效果\n\n```bash\nhexo recommend && hexo clean && hexo g && hexo s\n```\n参考：[为 hexo maupassant 主题添加文章版权信息和推荐阅读功能 ](https://juejin.im/entry/5aef8e995188256712786e43)\n## 写在最后\n\n发现一些网站，专门爬取别人写的文章，也不注明出处，该今后发表文章，都增加不限于打赏码、微信公众号等信息。\n\n[^说明]：使用ocean主题，yilia 主题设置就删除了。","slug":"hexo搭建博客","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccf0000vjwrnnigw8kyr","content":"<p>大学时搭建过 github 博客，但是后来没怎么弄了。感觉有点折腾，就没有继续维护了，今天再来重新搭建一个博客。本文记录搭建操作。</p>\n<a id=\"more\"></a>\n<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86\">预备知识：</a></li>\n<li><a href=\"#%E5%AE%89%E8%A3%85-hexo\">安装 hexo</a></li>\n<li><a href=\"#%E5%88%9B%E5%BB%BA%E6%89%98%E7%AE%A1%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BB%93%E5%BA%93\">创建托管博客的仓库</a></li>\n<li><a href=\"#%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E5%88%B0-gitbub\">部署本地博客到 gitbub</a></li>\n<li><a href=\"#%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0\">创建文章</a></li>\n<li><a href=\"#%E7%BB%99-markdown-%E6%96%87%E7%AB%A0%E5%8A%A0%E5%85%A5%E5%9B%BE%E7%89%87\">给 markdown 文章加入图片</a></li>\n<li><a href=\"#%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E8%AF%B4%E6%98%8E\">高级主题[^说明]</a>\n<ul>\n<li><a href=\"#%E6%B8%B2%E6%9F%93%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95toc\">渲染文章目录(TOC)</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD\">增加评论功能</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0%E8%AE%BF%E5%AE%A2%E7%BB%9F%E8%AE%A1\">增加访客统计</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0-stackoverflow-%E6%8A%80%E6%9C%AF%E5%AA%92%E4%BD%93\">增加 stackoverflow 技术媒体</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E\">增加版权声明</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB\">增加推荐阅读</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E\">写在最后</a></li>\n</ul>\n</p>\n<h2 id=\"预备知识\"><a class=\"markdownIt-Anchor\" href=\"#预备知识\"></a> 预备知识：</h2>\n<ul>\n<li>npm 命令；</li>\n<li>git 命令</li>\n<li>github 常见操作</li>\n</ul>\n<p>环境要求：</p>\n<ul>\n<li>node</li>\n<li>git</li>\n</ul>\n<p>我的环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git version</span><br><span class=\"line\">git version 2.15.1.windows.2</span><br><span class=\"line\">$ node -v</span><br><span class=\"line\">v8.11.1</span><br><span class=\"line\">$ npm -v</span><br><span class=\"line\">6.4.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-hexo\"><a class=\"markdownIt-Anchor\" href=\"#安装-hexo\"></a> 安装 hexo</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>在某个文件夹内初始化 hexo 博客所需要的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir myBlog  <span class=\"comment\"># /e/HexoPages 新建一个文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> myBlog</span><br><span class=\"line\">hexo init <span class=\"comment\"># 初始化一个hexo博客需要的资源</span></span><br></pre></td></tr></table></figure>\n<p>得到如下目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── _config.yml <span class=\"comment\"># 网站的配置信息，您可以在此配置大部分的参数。 </span></span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds <span class=\"comment\"># 模版文件夹</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span>  <span class=\"comment\"># 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span></span><br><span class=\"line\">|   ├── _drafts <span class=\"comment\"># 草稿文件</span></span><br><span class=\"line\">|   └── _posts <span class=\"comment\"># 文章Markdowm文件 </span></span><br><span class=\"line\">└── themes  <span class=\"comment\"># 主题文件夹</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i <span class=\"comment\"># 安装 npm 依赖</span></span><br></pre></td></tr></table></figure>\n<p>本地预览博客：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>打开<code>http://localhost:4000</code>即可看到效果。</p>\n<p><img src=\"https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/hexo%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98.png\" alt=\"hexo默认主题\" title=\"hexo默认主题\"></p>\n<h2 id=\"创建托管博客的仓库\"><a class=\"markdownIt-Anchor\" href=\"#创建托管博客的仓库\"></a> 创建托管博客的仓库</h2>\n<p>仓库名字必须用<code>用户名.github.io</code>，需要公开。</p>\n<h2 id=\"部署本地博客到-gitbub\"><a class=\"markdownIt-Anchor\" href=\"#部署本地博客到-gitbub\"></a> 部署本地博客到 gitbub</h2>\n<ol>\n<li>修改<code>_config.yml</code></li>\n</ol>\n<p>打开 _config.yml ，将 deploy 修改如下<strong>注意空格</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git <span class=\"comment\"># 版本管理工具</span></span><br><span class=\"line\">  repo: <span class=\"comment\"># 仓库信息</span></span><br><span class=\"line\">    github: https://github.com/JackZhouMine/jackzhoumine.github.io</span><br><span class=\"line\">  branch: master <span class=\"comment\"># 使用分支</span></span><br></pre></td></tr></table></figure>\n<p>其他配置也可以修改，比如我将站点信息修改如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\">title:jackzhoumine</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: jackzhoumine</span><br><span class=\"line\">language:</span><br><span class=\"line\">timezone:</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装 hexo-deployer-git</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-deployer-git</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>部署</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n<p>打开我的主页链接 <code>https://jackzhoumine.github.io</code>，看到页面就部署成功了。</p>\n<p><img src=\"https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/myblog1.png\" alt=\"部署成功\" title=\"部署成功的页面\"></p>\n<h2 id=\"创建文章\"><a class=\"markdownIt-Anchor\" href=\"#创建文章\"></a> 创建文章</h2>\n<ol>\n<li>创建文章</li>\n</ol>\n<p>执行<code>hexo new '文章标题'</code>，会在source/_posts文件夹内新建一个md文件，就可在里面写文章了，当然也可以手动创建。</p>\n<p><code>hexo new</code> 简写成 <code>hexo n</code>。</p>\n<ol start=\"2\">\n<li>预览效果</li>\n</ol>\n<p>创建完成，执行以下命令,在本地预览效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br><span class=\"line\"><span class=\"comment\"># 或者 </span></span><br><span class=\"line\">hexo s g</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo S --draft <span class=\"comment\"># 预览草稿</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建草稿</li>\n</ol>\n<p>可先创建草稿，想发布时，在发布。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new draft <span class=\"string\">\"文章标题\"</span> <span class=\"comment\"># 会在 /source/-drafts 里生成草稿</span></span><br><span class=\"line\">hexo publish filename <span class=\"comment\"># 将草稿发布成文章，会进入 post 目录</span></span><br></pre></td></tr></table></figure>\n<p>如何批量发布呢？</p>\n<ol start=\"4\">\n<li>部署到线上</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 非必需</span></span><br><span class=\"line\">hexo clean <span class=\"comment\"># 清除缓存文件（db.json）和静态文件。更改后不生效，就需要运行该命令。</span></span><br><span class=\"line\"><span class=\"comment\"># 部署</span></span><br><span class=\"line\">hexo d g <span class=\"comment\"># 部署到线上</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>更新已发布的文章</li>\n</ol>\n<p>最简单的是修改完文章后，再部署一次。</p>\n<p>文章加上更新时间，可在主题里配置。<br>\n我使用更加粗暴的方法，每次更新文章，就使用 vs code 扩展 <code>Insert Date String</code> 插入当前时间。</p>\n<h2 id=\"给-markdown-文章加入图片\"><a class=\"markdownIt-Anchor\" href=\"#给-markdown-文章加入图片\"></a> 给 markdown 文章加入图片</h2>\n<p>使用本地图片，markdown 笔记移动后，图片路径失效，免费的图床可能到倒闭，毕竟都是小公司。解决办法是将所有图片在一个git仓库里管理起来，托管在 github （没有巨硬这个财大气粗的土豪做后台，也倒不了）上，安全放心。<br>\n需要用到图片时，打开图片，然后在代码块左上方点 <code>Download</code> 按钮，打开的新标签里只有图片了，复制地址栏图片链接，类似<code>https://raw.githubusercontent.com/xxxx</code>到文章里，就可放心饮用了。</p>\n<h2 id=\"高级主题说明\"><a class=\"markdownIt-Anchor\" href=\"#高级主题说明\"></a> 高级主题[^说明]</h2>\n<p>可以为博客增加评论功能，方便与他人交流。增加访客统计等。</p>\n<h3 id=\"渲染文章目录toc\"><a class=\"markdownIt-Anchor\" href=\"#渲染文章目录toc\"></a> 渲染文章目录(TOC)</h3>\n<p>hexo 默认的渲染模块，不支持渲染TOC的，可使用<a href=\"https://www.npmjs.com/package/hexo-renderer-markdown-it-plus\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it-plus</a>实现渲染 TOC。</p>\n<ul>\n<li>安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm un hexo-renderer-marked <span class=\"comment\"># 卸载原来的渲染模块</span></span><br><span class=\"line\">npm i hexo-renderer-markdown-it-plus -S</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改配置<br>\n在配置文件中加入以下选项：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 渲染 TOC</span></span><br><span class=\"line\">markdown_it_plus:</span><br><span class=\"line\">    highlight: <span class=\"literal\">true</span></span><br><span class=\"line\">    html: <span class=\"literal\">true</span></span><br><span class=\"line\">    xhtmlOut: <span class=\"literal\">true</span></span><br><span class=\"line\">    breaks: <span class=\"literal\">true</span></span><br><span class=\"line\">    langPrefix:</span><br><span class=\"line\">    linkify: <span class=\"literal\">true</span></span><br><span class=\"line\">    typographer:</span><br><span class=\"line\">    quotes: “”‘’</span><br><span class=\"line\">    pre_class: highlight</span><br></pre></td></tr></table></figure>\n<p>还可以看模块文档，配置其他高级选项。</p>\n<ul>\n<li>写文章<br>\n只写 <code>TOC</code>，是不会渲染目录的，需要加上<code>@</code>,并且不会渲染一级标题。推荐在摘要后面写目录，并用横线分隔摘要。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--more--&gt;</span><br><span class=\"line\">***</span><br><span class=\"line\"></span><br><span class=\"line\">@[TOC]</span><br></pre></td></tr></table></figure>\n<h3 id=\"增加评论功能\"><a class=\"markdownIt-Anchor\" href=\"#增加评论功能\"></a> 增加评论功能</h3>\n<p><s>yilia 主题配置开启就可。<br>\n疑问：为何disqus评论底部会显示其他博客的评论内容呢？</s></p>\n<h3 id=\"增加访客统计\"><a class=\"markdownIt-Anchor\" href=\"#增加访客统计\"></a> 增加访客统计</h3>\n<p><s>使用不蒜子统计功能，免费好用。<br>\n打开 <code>themes/yilia/layout/_partial/footer.ejs</code>，<br>\n在id为<code>footer-info</code>的div后面增加以下内容：</s></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div calss=&quot;count-span&quot;&gt;</span><br><span class=\"line\">      &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class=\"line\">        总访问量: &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;|</span><br><span class=\"line\">      &lt;/span&gt;</span><br><span class=\"line\">      &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class=\"line\">        总访客: &lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">      &lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><s>在footer顶部增加统计脚本：</s></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p><s>部署即可看到效果了，可增加一些好看的样式。</s></p>\n<h3 id=\"增加-stackoverflow-技术媒体\"><a class=\"markdownIt-Anchor\" href=\"#增加-stackoverflow-技术媒体\"></a> 增加 stackoverflow 技术媒体</h3>\n<p><s>yilia 主题没有引入 stackoverflow ,可执行增加。<br>\nAcfun已经凉了，在 <code>themes\\yilia\\source\\main.0cf68a.css</code>中搜索acfun，替换成stackoverflow，图标就不换了。</s></p>\n<h3 id=\"增加版权声明\"><a class=\"markdownIt-Anchor\" href=\"#增加版权声明\"></a> 增加版权声明</h3>\n<p>比较简单，<a href=\"https://blog.zscself.com/posts/ee4d9ecb/\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h3 id=\"增加推荐阅读\"><a class=\"markdownIt-Anchor\" href=\"#增加推荐阅读\"></a> 增加推荐阅读</h3>\n<p>推荐阅读是通过插件 hexo-recommended-posts 来实现的, 它不仅可以推荐你自己的博客, 还可以推荐别人的相关博客. 如果有比较多人使用这个插件的话, 不仅能帮读者快速找到感兴趣的内容, 同时也能增加自己博客的流量。</p>\n<ol>\n<li>在 post 中增加 <code>recommended-post.ejs</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if(theme.recommended_posts.enable &amp;&amp; !index) &#123;%&gt;</span><br><span class=\"line\">  &lt;div class=&quot;recommended_posts&quot;&gt;</span><br><span class=\"line\">    &lt;h3&gt;推荐阅读&lt;/h3&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">    &lt;% let post_list = recommended_posts(page, site) %&gt;</span><br><span class=\"line\">    &lt;% for (let i in post_list)&#123;%&gt;</span><br><span class=\"line\">      &lt;li&gt;</span><br><span class=\"line\">        &lt;a href=&quot;&lt;%= post_list[i].permalink %&gt;&quot;  title=&quot;&lt;%= post_list[i].title %&gt;&quot; target=&apos;_blank&apos;&gt;</span><br><span class=\"line\">        &lt;%- post_list[i].title %&gt;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">      &lt;% &#125; %&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;%&#125;else&#123;%&gt;</span><br><span class=\"line\">   &lt;div class=&quot;recommended_posts&quot; hidden&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 _patial 中增加样式 <code>recommended-post.styl</code></li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.recommended_posts</span></span><br><span class=\"line\">    <span class=\"selector-tag\">padding</span>: 0<span class=\"selector-class\">.5em</span> 1<span class=\"selector-tag\">em</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-left</span>: 3<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#6f42c1</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#efefef</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">li</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span> &#123; <span class=\"attribute\">color</span>: blue; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>:underline;<span class=\"attribute\">color</span>: red&#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span> &#123; <span class=\"attribute\">color</span>: green; &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在<code>style.styl</code>和<code>article.ejs</code>中引入样式和ejs<br>\n<code>@import &quot;_partial/recommended-post&quot;</code></li>\n</ol>\n<p>引入的 ejs 放在评论上边。</p>\n<ol start=\"4\">\n<li>增加配置项</li>\n</ol>\n<p>在主题的配置中增加：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推荐阅读 需要 hexo-recommended-posts 支持</span></span><br><span class=\"line\"><span class=\"attr\">recommended_posts:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 启用文章推荐</span></span><br></pre></td></tr></table></figure>\n<p>在博客配置增加：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推荐阅读 需要 hexo-recommended-posts 支持</span></span><br><span class=\"line\"><span class=\"attr\">recommended_posts:</span></span><br><span class=\"line\"><span class=\"attr\">  autoDisplay:</span> <span class=\"literal\">false</span> <span class=\"comment\">#设置为 fasle，不采用默认样式</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>安装 hexo-recommended-posts</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-recommended-posts</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>预览效果</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo recommend &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://juejin.im/entry/5aef8e995188256712786e43\" target=\"_blank\" rel=\"noopener\">为 hexo maupassant 主题添加文章版权信息和推荐阅读功能 </a></p>\n<h2 id=\"写在最后\"><a class=\"markdownIt-Anchor\" href=\"#写在最后\"></a> 写在最后</h2>\n<p>发现一些网站，专门爬取别人写的文章，也不注明出处，该今后发表文章，都增加不限于打赏码、微信公众号等信息。</p>\n<p>[^说明]：使用ocean主题，yilia 主题设置就删除了。</p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>大学时搭建过 github 博客，但是后来没怎么弄了。感觉有点折腾，就没有继续维护了，今天再来重新搭建一个博客。本文记录搭建操作。</p>","more":"<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86\">预备知识：</a></li>\n<li><a href=\"#%E5%AE%89%E8%A3%85-hexo\">安装 hexo</a></li>\n<li><a href=\"#%E5%88%9B%E5%BB%BA%E6%89%98%E7%AE%A1%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BB%93%E5%BA%93\">创建托管博客的仓库</a></li>\n<li><a href=\"#%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E5%88%B0-gitbub\">部署本地博客到 gitbub</a></li>\n<li><a href=\"#%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0\">创建文章</a></li>\n<li><a href=\"#%E7%BB%99-markdown-%E6%96%87%E7%AB%A0%E5%8A%A0%E5%85%A5%E5%9B%BE%E7%89%87\">给 markdown 文章加入图片</a></li>\n<li><a href=\"#%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E8%AF%B4%E6%98%8E\">高级主题[^说明]</a>\n<ul>\n<li><a href=\"#%E6%B8%B2%E6%9F%93%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95toc\">渲染文章目录(TOC)</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD\">增加评论功能</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0%E8%AE%BF%E5%AE%A2%E7%BB%9F%E8%AE%A1\">增加访客统计</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0-stackoverflow-%E6%8A%80%E6%9C%AF%E5%AA%92%E4%BD%93\">增加 stackoverflow 技术媒体</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E\">增加版权声明</a></li>\n<li><a href=\"#%E5%A2%9E%E5%8A%A0%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB\">增加推荐阅读</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E\">写在最后</a></li>\n</ul>\n</p>\n<h2 id=\"预备知识\"><a class=\"markdownIt-Anchor\" href=\"#预备知识\"></a> 预备知识：</h2>\n<ul>\n<li>npm 命令；</li>\n<li>git 命令</li>\n<li>github 常见操作</li>\n</ul>\n<p>环境要求：</p>\n<ul>\n<li>node</li>\n<li>git</li>\n</ul>\n<p>我的环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git version</span><br><span class=\"line\">git version 2.15.1.windows.2</span><br><span class=\"line\">$ node -v</span><br><span class=\"line\">v8.11.1</span><br><span class=\"line\">$ npm -v</span><br><span class=\"line\">6.4.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-hexo\"><a class=\"markdownIt-Anchor\" href=\"#安装-hexo\"></a> 安装 hexo</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>在某个文件夹内初始化 hexo 博客所需要的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir myBlog  <span class=\"comment\"># /e/HexoPages 新建一个文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> myBlog</span><br><span class=\"line\">hexo init <span class=\"comment\"># 初始化一个hexo博客需要的资源</span></span><br></pre></td></tr></table></figure>\n<p>得到如下目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── _config.yml <span class=\"comment\"># 网站的配置信息，您可以在此配置大部分的参数。 </span></span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds <span class=\"comment\"># 模版文件夹</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span>  <span class=\"comment\"># 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span></span><br><span class=\"line\">|   ├── _drafts <span class=\"comment\"># 草稿文件</span></span><br><span class=\"line\">|   └── _posts <span class=\"comment\"># 文章Markdowm文件 </span></span><br><span class=\"line\">└── themes  <span class=\"comment\"># 主题文件夹</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i <span class=\"comment\"># 安装 npm 依赖</span></span><br></pre></td></tr></table></figure>\n<p>本地预览博客：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>打开<code>http://localhost:4000</code>即可看到效果。</p>\n<p><img src=\"https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/hexo%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98.png\" alt=\"hexo默认主题\" title=\"hexo默认主题\"></p>\n<h2 id=\"创建托管博客的仓库\"><a class=\"markdownIt-Anchor\" href=\"#创建托管博客的仓库\"></a> 创建托管博客的仓库</h2>\n<p>仓库名字必须用<code>用户名.github.io</code>，需要公开。</p>\n<h2 id=\"部署本地博客到-gitbub\"><a class=\"markdownIt-Anchor\" href=\"#部署本地博客到-gitbub\"></a> 部署本地博客到 gitbub</h2>\n<ol>\n<li>修改<code>_config.yml</code></li>\n</ol>\n<p>打开 _config.yml ，将 deploy 修改如下<strong>注意空格</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git <span class=\"comment\"># 版本管理工具</span></span><br><span class=\"line\">  repo: <span class=\"comment\"># 仓库信息</span></span><br><span class=\"line\">    github: https://github.com/JackZhouMine/jackzhoumine.github.io</span><br><span class=\"line\">  branch: master <span class=\"comment\"># 使用分支</span></span><br></pre></td></tr></table></figure>\n<p>其他配置也可以修改，比如我将站点信息修改如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\">title:jackzhoumine</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: jackzhoumine</span><br><span class=\"line\">language:</span><br><span class=\"line\">timezone:</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装 hexo-deployer-git</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-deployer-git</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>部署</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n<p>打开我的主页链接 <code>https://jackzhoumine.github.io</code>，看到页面就部署成功了。</p>\n<p><img src=\"https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/myblog1.png\" alt=\"部署成功\" title=\"部署成功的页面\"></p>\n<h2 id=\"创建文章\"><a class=\"markdownIt-Anchor\" href=\"#创建文章\"></a> 创建文章</h2>\n<ol>\n<li>创建文章</li>\n</ol>\n<p>执行<code>hexo new '文章标题'</code>，会在source/_posts文件夹内新建一个md文件，就可在里面写文章了，当然也可以手动创建。</p>\n<p><code>hexo new</code> 简写成 <code>hexo n</code>。</p>\n<ol start=\"2\">\n<li>预览效果</li>\n</ol>\n<p>创建完成，执行以下命令,在本地预览效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br><span class=\"line\"><span class=\"comment\"># 或者 </span></span><br><span class=\"line\">hexo s g</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo S --draft <span class=\"comment\"># 预览草稿</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建草稿</li>\n</ol>\n<p>可先创建草稿，想发布时，在发布。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new draft <span class=\"string\">\"文章标题\"</span> <span class=\"comment\"># 会在 /source/-drafts 里生成草稿</span></span><br><span class=\"line\">hexo publish filename <span class=\"comment\"># 将草稿发布成文章，会进入 post 目录</span></span><br></pre></td></tr></table></figure>\n<p>如何批量发布呢？</p>\n<ol start=\"4\">\n<li>部署到线上</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 非必需</span></span><br><span class=\"line\">hexo clean <span class=\"comment\"># 清除缓存文件（db.json）和静态文件。更改后不生效，就需要运行该命令。</span></span><br><span class=\"line\"><span class=\"comment\"># 部署</span></span><br><span class=\"line\">hexo d g <span class=\"comment\"># 部署到线上</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>更新已发布的文章</li>\n</ol>\n<p>最简单的是修改完文章后，再部署一次。</p>\n<p>文章加上更新时间，可在主题里配置。<br>\n我使用更加粗暴的方法，每次更新文章，就使用 vs code 扩展 <code>Insert Date String</code> 插入当前时间。</p>\n<h2 id=\"给-markdown-文章加入图片\"><a class=\"markdownIt-Anchor\" href=\"#给-markdown-文章加入图片\"></a> 给 markdown 文章加入图片</h2>\n<p>使用本地图片，markdown 笔记移动后，图片路径失效，免费的图床可能到倒闭，毕竟都是小公司。解决办法是将所有图片在一个git仓库里管理起来，托管在 github （没有巨硬这个财大气粗的土豪做后台，也倒不了）上，安全放心。<br>\n需要用到图片时，打开图片，然后在代码块左上方点 <code>Download</code> 按钮，打开的新标签里只有图片了，复制地址栏图片链接，类似<code>https://raw.githubusercontent.com/xxxx</code>到文章里，就可放心饮用了。</p>\n<h2 id=\"高级主题说明\"><a class=\"markdownIt-Anchor\" href=\"#高级主题说明\"></a> 高级主题[^说明]</h2>\n<p>可以为博客增加评论功能，方便与他人交流。增加访客统计等。</p>\n<h3 id=\"渲染文章目录toc\"><a class=\"markdownIt-Anchor\" href=\"#渲染文章目录toc\"></a> 渲染文章目录(TOC)</h3>\n<p>hexo 默认的渲染模块，不支持渲染TOC的，可使用<a href=\"https://www.npmjs.com/package/hexo-renderer-markdown-it-plus\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it-plus</a>实现渲染 TOC。</p>\n<ul>\n<li>安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm un hexo-renderer-marked <span class=\"comment\"># 卸载原来的渲染模块</span></span><br><span class=\"line\">npm i hexo-renderer-markdown-it-plus -S</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改配置<br>\n在配置文件中加入以下选项：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 渲染 TOC</span></span><br><span class=\"line\">markdown_it_plus:</span><br><span class=\"line\">    highlight: <span class=\"literal\">true</span></span><br><span class=\"line\">    html: <span class=\"literal\">true</span></span><br><span class=\"line\">    xhtmlOut: <span class=\"literal\">true</span></span><br><span class=\"line\">    breaks: <span class=\"literal\">true</span></span><br><span class=\"line\">    langPrefix:</span><br><span class=\"line\">    linkify: <span class=\"literal\">true</span></span><br><span class=\"line\">    typographer:</span><br><span class=\"line\">    quotes: “”‘’</span><br><span class=\"line\">    pre_class: highlight</span><br></pre></td></tr></table></figure>\n<p>还可以看模块文档，配置其他高级选项。</p>\n<ul>\n<li>写文章<br>\n只写 <code>TOC</code>，是不会渲染目录的，需要加上<code>@</code>,并且不会渲染一级标题。推荐在摘要后面写目录，并用横线分隔摘要。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--more--&gt;</span><br><span class=\"line\">***</span><br><span class=\"line\"></span><br><span class=\"line\">@[TOC]</span><br></pre></td></tr></table></figure>\n<h3 id=\"增加评论功能\"><a class=\"markdownIt-Anchor\" href=\"#增加评论功能\"></a> 增加评论功能</h3>\n<p><s>yilia 主题配置开启就可。<br>\n疑问：为何disqus评论底部会显示其他博客的评论内容呢？</s></p>\n<h3 id=\"增加访客统计\"><a class=\"markdownIt-Anchor\" href=\"#增加访客统计\"></a> 增加访客统计</h3>\n<p><s>使用不蒜子统计功能，免费好用。<br>\n打开 <code>themes/yilia/layout/_partial/footer.ejs</code>，<br>\n在id为<code>footer-info</code>的div后面增加以下内容：</s></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div calss=&quot;count-span&quot;&gt;</span><br><span class=\"line\">      &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class=\"line\">        总访问量: &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;|</span><br><span class=\"line\">      &lt;/span&gt;</span><br><span class=\"line\">      &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class=\"line\">        总访客: &lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">      &lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><s>在footer顶部增加统计脚本：</s></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p><s>部署即可看到效果了，可增加一些好看的样式。</s></p>\n<h3 id=\"增加-stackoverflow-技术媒体\"><a class=\"markdownIt-Anchor\" href=\"#增加-stackoverflow-技术媒体\"></a> 增加 stackoverflow 技术媒体</h3>\n<p><s>yilia 主题没有引入 stackoverflow ,可执行增加。<br>\nAcfun已经凉了，在 <code>themes\\yilia\\source\\main.0cf68a.css</code>中搜索acfun，替换成stackoverflow，图标就不换了。</s></p>\n<h3 id=\"增加版权声明\"><a class=\"markdownIt-Anchor\" href=\"#增加版权声明\"></a> 增加版权声明</h3>\n<p>比较简单，<a href=\"https://blog.zscself.com/posts/ee4d9ecb/\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h3 id=\"增加推荐阅读\"><a class=\"markdownIt-Anchor\" href=\"#增加推荐阅读\"></a> 增加推荐阅读</h3>\n<p>推荐阅读是通过插件 hexo-recommended-posts 来实现的, 它不仅可以推荐你自己的博客, 还可以推荐别人的相关博客. 如果有比较多人使用这个插件的话, 不仅能帮读者快速找到感兴趣的内容, 同时也能增加自己博客的流量。</p>\n<ol>\n<li>在 post 中增加 <code>recommended-post.ejs</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if(theme.recommended_posts.enable &amp;&amp; !index) &#123;%&gt;</span><br><span class=\"line\">  &lt;div class=&quot;recommended_posts&quot;&gt;</span><br><span class=\"line\">    &lt;h3&gt;推荐阅读&lt;/h3&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">    &lt;% let post_list = recommended_posts(page, site) %&gt;</span><br><span class=\"line\">    &lt;% for (let i in post_list)&#123;%&gt;</span><br><span class=\"line\">      &lt;li&gt;</span><br><span class=\"line\">        &lt;a href=&quot;&lt;%= post_list[i].permalink %&gt;&quot;  title=&quot;&lt;%= post_list[i].title %&gt;&quot; target=&apos;_blank&apos;&gt;</span><br><span class=\"line\">        &lt;%- post_list[i].title %&gt;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">      &lt;% &#125; %&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;%&#125;else&#123;%&gt;</span><br><span class=\"line\">   &lt;div class=&quot;recommended_posts&quot; hidden&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 _patial 中增加样式 <code>recommended-post.styl</code></li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.recommended_posts</span></span><br><span class=\"line\">    <span class=\"selector-tag\">padding</span>: 0<span class=\"selector-class\">.5em</span> 1<span class=\"selector-tag\">em</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-left</span>: 3<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#6f42c1</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#efefef</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">li</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span> &#123; <span class=\"attribute\">color</span>: blue; &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>:underline;<span class=\"attribute\">color</span>: red&#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span> &#123; <span class=\"attribute\">color</span>: green; &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在<code>style.styl</code>和<code>article.ejs</code>中引入样式和ejs<br>\n<code>@import &quot;_partial/recommended-post&quot;</code></li>\n</ol>\n<p>引入的 ejs 放在评论上边。</p>\n<ol start=\"4\">\n<li>增加配置项</li>\n</ol>\n<p>在主题的配置中增加：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推荐阅读 需要 hexo-recommended-posts 支持</span></span><br><span class=\"line\"><span class=\"attr\">recommended_posts:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 启用文章推荐</span></span><br></pre></td></tr></table></figure>\n<p>在博客配置增加：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推荐阅读 需要 hexo-recommended-posts 支持</span></span><br><span class=\"line\"><span class=\"attr\">recommended_posts:</span></span><br><span class=\"line\"><span class=\"attr\">  autoDisplay:</span> <span class=\"literal\">false</span> <span class=\"comment\">#设置为 fasle，不采用默认样式</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>安装 hexo-recommended-posts</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-recommended-posts</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>预览效果</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo recommend &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://juejin.im/entry/5aef8e995188256712786e43\" target=\"_blank\" rel=\"noopener\">为 hexo maupassant 主题添加文章版权信息和推荐阅读功能 </a></p>\n<h2 id=\"写在最后\"><a class=\"markdownIt-Anchor\" href=\"#写在最后\"></a> 写在最后</h2>\n<p>发现一些网站，专门爬取别人写的文章，也不注明出处，该今后发表文章，都增加不限于打赏码、微信公众号等信息。</p>\n<p>[^说明]：使用ocean主题，yilia 主题设置就删除了。</p>"},{"title":"html5 websocket","date":"2019-06-16T09:56:14.000Z","_content":"\nWebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行的`全双工通信协议`。\n\n<!--more-->\n\n## 具体使用\n\nWebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务器主动向客户端推送数据。\n\n在 WebSocket API 中，浏览器和服务器只需一次HTTP握手，就建立了持久连接，后续可双向通信。\n\n没有出现 websocket 之前，服务器实现推送消息，一般都是 通过 AJAX 轮询，这种方式浪费带宽，频繁的连接、断开，消耗服务器资源。\n\n\n![@ajax轮询和webSocket的比较|center](https://i.loli.net/2019/01/20/5c447fd150742.png)\n\n\n建立 websocket 连接后，可主动向对方发送数据，通过 onmessage 事件来接收数据。\n\n创建 webSocket 对象：\n\n```js\nlet Socket = new WebSoket(url[,protocol]);//\n```\n\nurl: 可以是 wss 和 ws 协议。\nwebsocket 使用的默认端口和TCP相同，默认80，wss，默认443。\n`protocol`：\n哪些子协议常用呢？\n\n一个客户端请求例子：\n\n```js\nGET / HTTP/1.1\n\nUpgrade: websocket //希望升级到 websocket 协议\nConnection: Upgrade //表示升级通信协议\nHost: example.com\nOrigin: http://example.com\nSec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==\nSec-WebSocket-Version: 13 //webSocket 版本\n```\n\nSec-WebSocket-Key：一个随机字符串，服务器会使用这个数据构造出一个SHA-1的信息摘要。`Sec-WebSocket-Key` 加上一个特殊字符串`258EAFA5-E914-47DA-95CA-C5AB0DC85B11`，然后计算摘要，再进行base-64编码，将结果作为响应头`Sec-WebSocket-Accep`的值，这样做的目的是，尽量避免http请求被误认为是websocket协议。\n\nOrigin：可选字段，表示发情websocket连接的页面，类似Referer，但是 Origin 包含子协议和主机名。\n\n响应：\n\n```js\nHTTP/1.1 101 Switching Protocols\n\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=\nSec-WebSocket-Location: ws://example.com/\n```\n\nwebsocket 属性：\n\n| 属性 | 值   | 说明 | 对应属性 |\n| ---- | ---- | ---- | -------- |\n|readyState（只读）|0|连接正在建立|连接正在建立|\n|readyState|1|连接已建立，可通信|OPEN|\n|readyState|2|连接正在关闭|CLOSEING|\n|readyState|3|连接已关闭或者连接无法打开|CLOSED|\n|bufferedAmount（只读）|数值|正在等待传输的数据的字节数|可用来判断发送是否完毕|\n\n如何监听 readyState 的状态变化呢？\n事件：\n\n|属性|处理程序|说明|\n|---|--- |---|\n|open|onopen|建立连接时触发|\n|error|onerror|通信发生错误时触发|\n|message|onmessage|接收到数据时触发|\n|close|onclose|连接关闭时触发|\n\n以上事件的事件处理函数的参数都是事件`event`,可在事件中获取相关信息。\n\n方法：\n\n|方法|说明|参数|\n|-----|----|---|\n|send|发送数据|参数只能是字符串或者二进制|\n|close|关闭连接|无参数|\n\n\n二进制数据可用`blod`或者`ArrayBuffer`\n```js\nws.onmessage = function(event){\n  if(typeof event.data === String) {\n    console.log(\"Received data string\");\n  }\n\n  if(event.data instanceof ArrayBuffer){\n    var buffer = event.data;\n    console.log(\"Received arraybuffer\");\n  }\n}\n```\n还可指定接收的类型：\n```js\n\nws.binaryType = \"blob\"; // 指定接收的二进制数据的类型\nws.onmessage = function(e) {\n  console.log(e.data.size);\n};\n\n// 收到的是 ArrayBuffer 数据\nws.binaryType = \"arraybuffer\";\nws.onmessage = function(e) {\n  console.log(e.data.byteLength);\n};\n```\n###  参考\n\n[全双工的 websocket](https://halfrost.com/websocket)","source":"_posts/html5-websocket.md","raw":"---\ntitle: html5 websocket\ndate: 2019-06-16 17:56:14\ntags:\n- html5\ncategories:\n- [网络]\n---\n\nWebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行的`全双工通信协议`。\n\n<!--more-->\n\n## 具体使用\n\nWebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务器主动向客户端推送数据。\n\n在 WebSocket API 中，浏览器和服务器只需一次HTTP握手，就建立了持久连接，后续可双向通信。\n\n没有出现 websocket 之前，服务器实现推送消息，一般都是 通过 AJAX 轮询，这种方式浪费带宽，频繁的连接、断开，消耗服务器资源。\n\n\n![@ajax轮询和webSocket的比较|center](https://i.loli.net/2019/01/20/5c447fd150742.png)\n\n\n建立 websocket 连接后，可主动向对方发送数据，通过 onmessage 事件来接收数据。\n\n创建 webSocket 对象：\n\n```js\nlet Socket = new WebSoket(url[,protocol]);//\n```\n\nurl: 可以是 wss 和 ws 协议。\nwebsocket 使用的默认端口和TCP相同，默认80，wss，默认443。\n`protocol`：\n哪些子协议常用呢？\n\n一个客户端请求例子：\n\n```js\nGET / HTTP/1.1\n\nUpgrade: websocket //希望升级到 websocket 协议\nConnection: Upgrade //表示升级通信协议\nHost: example.com\nOrigin: http://example.com\nSec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==\nSec-WebSocket-Version: 13 //webSocket 版本\n```\n\nSec-WebSocket-Key：一个随机字符串，服务器会使用这个数据构造出一个SHA-1的信息摘要。`Sec-WebSocket-Key` 加上一个特殊字符串`258EAFA5-E914-47DA-95CA-C5AB0DC85B11`，然后计算摘要，再进行base-64编码，将结果作为响应头`Sec-WebSocket-Accep`的值，这样做的目的是，尽量避免http请求被误认为是websocket协议。\n\nOrigin：可选字段，表示发情websocket连接的页面，类似Referer，但是 Origin 包含子协议和主机名。\n\n响应：\n\n```js\nHTTP/1.1 101 Switching Protocols\n\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=\nSec-WebSocket-Location: ws://example.com/\n```\n\nwebsocket 属性：\n\n| 属性 | 值   | 说明 | 对应属性 |\n| ---- | ---- | ---- | -------- |\n|readyState（只读）|0|连接正在建立|连接正在建立|\n|readyState|1|连接已建立，可通信|OPEN|\n|readyState|2|连接正在关闭|CLOSEING|\n|readyState|3|连接已关闭或者连接无法打开|CLOSED|\n|bufferedAmount（只读）|数值|正在等待传输的数据的字节数|可用来判断发送是否完毕|\n\n如何监听 readyState 的状态变化呢？\n事件：\n\n|属性|处理程序|说明|\n|---|--- |---|\n|open|onopen|建立连接时触发|\n|error|onerror|通信发生错误时触发|\n|message|onmessage|接收到数据时触发|\n|close|onclose|连接关闭时触发|\n\n以上事件的事件处理函数的参数都是事件`event`,可在事件中获取相关信息。\n\n方法：\n\n|方法|说明|参数|\n|-----|----|---|\n|send|发送数据|参数只能是字符串或者二进制|\n|close|关闭连接|无参数|\n\n\n二进制数据可用`blod`或者`ArrayBuffer`\n```js\nws.onmessage = function(event){\n  if(typeof event.data === String) {\n    console.log(\"Received data string\");\n  }\n\n  if(event.data instanceof ArrayBuffer){\n    var buffer = event.data;\n    console.log(\"Received arraybuffer\");\n  }\n}\n```\n还可指定接收的类型：\n```js\n\nws.binaryType = \"blob\"; // 指定接收的二进制数据的类型\nws.onmessage = function(e) {\n  console.log(e.data.size);\n};\n\n// 收到的是 ArrayBuffer 数据\nws.binaryType = \"arraybuffer\";\nws.onmessage = function(e) {\n  console.log(e.data.byteLength);\n};\n```\n###  参考\n\n[全双工的 websocket](https://halfrost.com/websocket)","slug":"html5-websocket","published":1,"updated":"2019-06-16T10:17:39.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccf3000zjwrn50ffq034","content":"<p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行的<code>全双工通信协议</code>。</p>\n<a id=\"more\"></a>\n<h2 id=\"具体使用\"><a class=\"markdownIt-Anchor\" href=\"#具体使用\"></a> 具体使用</h2>\n<p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务器主动向客户端推送数据。</p>\n<p>在 WebSocket API 中，浏览器和服务器只需一次HTTP握手，就建立了持久连接，后续可双向通信。</p>\n<p>没有出现 websocket 之前，服务器实现推送消息，一般都是 通过 AJAX 轮询，这种方式浪费带宽，频繁的连接、断开，消耗服务器资源。</p>\n<p><img src=\"https://i.loli.net/2019/01/20/5c447fd150742.png\" alt=\"@ajax轮询和webSocket的比较|center\"></p>\n<p>建立 websocket 连接后，可主动向对方发送数据，通过 onmessage 事件来接收数据。</p>\n<p>创建 webSocket 对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Socket = <span class=\"keyword\">new</span> WebSoket(url[,protocol]);<span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n<p>url: 可以是 wss 和 ws 协议。<br>\nwebsocket 使用的默认端口和TCP相同，默认80，wss，默认443。<br>\n<code>protocol</code>：<br>\n哪些子协议常用呢？</p>\n<p>一个客户端请求例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">Upgrade: websocket <span class=\"comment\">//希望升级到 websocket 协议</span></span><br><span class=\"line\">Connection: Upgrade <span class=\"comment\">//表示升级通信协议</span></span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Origin: http:<span class=\"comment\">//example.com</span></span><br><span class=\"line\">Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==</span><br><span class=\"line\">Sec-WebSocket-Version: <span class=\"number\">13</span> <span class=\"comment\">//webSocket 版本</span></span><br></pre></td></tr></table></figure>\n<p>Sec-WebSocket-Key：一个随机字符串，服务器会使用这个数据构造出一个SHA-1的信息摘要。<code>Sec-WebSocket-Key</code> 加上一个特殊字符串<code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>，然后计算摘要，再进行base-64编码，将结果作为响应头<code>Sec-WebSocket-Accep</code>的值，这样做的目的是，尽量避免http请求被误认为是websocket协议。</p>\n<p>Origin：可选字段，表示发情websocket连接的页面，类似Referer，但是 Origin 包含子协议和主机名。</p>\n<p>响应：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/<span class=\"number\">1.1</span> <span class=\"number\">101</span> Switching Protocols</span><br><span class=\"line\"></span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Sec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=</span><br><span class=\"line\">Sec-WebSocket-Location: ws:<span class=\"comment\">//example.com/</span></span><br></pre></td></tr></table></figure>\n<p>websocket 属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>说明</th>\n<th>对应属性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>readyState（只读）</td>\n<td>0</td>\n<td>连接正在建立</td>\n<td>连接正在建立</td>\n</tr>\n<tr>\n<td>readyState</td>\n<td>1</td>\n<td>连接已建立，可通信</td>\n<td>OPEN</td>\n</tr>\n<tr>\n<td>readyState</td>\n<td>2</td>\n<td>连接正在关闭</td>\n<td>CLOSEING</td>\n</tr>\n<tr>\n<td>readyState</td>\n<td>3</td>\n<td>连接已关闭或者连接无法打开</td>\n<td>CLOSED</td>\n</tr>\n<tr>\n<td>bufferedAmount（只读）</td>\n<td>数值</td>\n<td>正在等待传输的数据的字节数</td>\n<td>可用来判断发送是否完毕</td>\n</tr>\n</tbody>\n</table>\n<p>如何监听 readyState 的状态变化呢？<br>\n事件：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>处理程序</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>open</td>\n<td>onopen</td>\n<td>建立连接时触发</td>\n</tr>\n<tr>\n<td>error</td>\n<td>onerror</td>\n<td>通信发生错误时触发</td>\n</tr>\n<tr>\n<td>message</td>\n<td>onmessage</td>\n<td>接收到数据时触发</td>\n</tr>\n<tr>\n<td>close</td>\n<td>onclose</td>\n<td>连接关闭时触发</td>\n</tr>\n</tbody>\n</table>\n<p>以上事件的事件处理函数的参数都是事件<code>event</code>,可在事件中获取相关信息。</p>\n<p>方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>send</td>\n<td>发送数据</td>\n<td>参数只能是字符串或者二进制</td>\n</tr>\n<tr>\n<td>close</td>\n<td>关闭连接</td>\n<td>无参数</td>\n</tr>\n</tbody>\n</table>\n<p>二进制数据可用<code>blod</code>或者<code>ArrayBuffer</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> event.data === <span class=\"built_in\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Received data string\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(event.data <span class=\"keyword\">instanceof</span> <span class=\"built_in\">ArrayBuffer</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buffer = event.data;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Received arraybuffer\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还可指定接收的类型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ws.binaryType = <span class=\"string\">\"blob\"</span>; <span class=\"comment\">// 指定接收的二进制数据的类型</span></span><br><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.data.size);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 收到的是 ArrayBuffer 数据</span></span><br><span class=\"line\">ws.binaryType = <span class=\"string\">\"arraybuffer\"</span>;</span><br><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.data.byteLength);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h3>\n<p><a href=\"https://halfrost.com/websocket\" target=\"_blank\" rel=\"noopener\">全双工的 websocket</a></p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行的<code>全双工通信协议</code>。</p>","more":"<h2 id=\"具体使用\"><a class=\"markdownIt-Anchor\" href=\"#具体使用\"></a> 具体使用</h2>\n<p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务器主动向客户端推送数据。</p>\n<p>在 WebSocket API 中，浏览器和服务器只需一次HTTP握手，就建立了持久连接，后续可双向通信。</p>\n<p>没有出现 websocket 之前，服务器实现推送消息，一般都是 通过 AJAX 轮询，这种方式浪费带宽，频繁的连接、断开，消耗服务器资源。</p>\n<p><img src=\"https://i.loli.net/2019/01/20/5c447fd150742.png\" alt=\"@ajax轮询和webSocket的比较|center\"></p>\n<p>建立 websocket 连接后，可主动向对方发送数据，通过 onmessage 事件来接收数据。</p>\n<p>创建 webSocket 对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Socket = <span class=\"keyword\">new</span> WebSoket(url[,protocol]);<span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n<p>url: 可以是 wss 和 ws 协议。<br>\nwebsocket 使用的默认端口和TCP相同，默认80，wss，默认443。<br>\n<code>protocol</code>：<br>\n哪些子协议常用呢？</p>\n<p>一个客户端请求例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">Upgrade: websocket <span class=\"comment\">//希望升级到 websocket 协议</span></span><br><span class=\"line\">Connection: Upgrade <span class=\"comment\">//表示升级通信协议</span></span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Origin: http:<span class=\"comment\">//example.com</span></span><br><span class=\"line\">Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==</span><br><span class=\"line\">Sec-WebSocket-Version: <span class=\"number\">13</span> <span class=\"comment\">//webSocket 版本</span></span><br></pre></td></tr></table></figure>\n<p>Sec-WebSocket-Key：一个随机字符串，服务器会使用这个数据构造出一个SHA-1的信息摘要。<code>Sec-WebSocket-Key</code> 加上一个特殊字符串<code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>，然后计算摘要，再进行base-64编码，将结果作为响应头<code>Sec-WebSocket-Accep</code>的值，这样做的目的是，尽量避免http请求被误认为是websocket协议。</p>\n<p>Origin：可选字段，表示发情websocket连接的页面，类似Referer，但是 Origin 包含子协议和主机名。</p>\n<p>响应：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/<span class=\"number\">1.1</span> <span class=\"number\">101</span> Switching Protocols</span><br><span class=\"line\"></span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Sec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=</span><br><span class=\"line\">Sec-WebSocket-Location: ws:<span class=\"comment\">//example.com/</span></span><br></pre></td></tr></table></figure>\n<p>websocket 属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>说明</th>\n<th>对应属性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>readyState（只读）</td>\n<td>0</td>\n<td>连接正在建立</td>\n<td>连接正在建立</td>\n</tr>\n<tr>\n<td>readyState</td>\n<td>1</td>\n<td>连接已建立，可通信</td>\n<td>OPEN</td>\n</tr>\n<tr>\n<td>readyState</td>\n<td>2</td>\n<td>连接正在关闭</td>\n<td>CLOSEING</td>\n</tr>\n<tr>\n<td>readyState</td>\n<td>3</td>\n<td>连接已关闭或者连接无法打开</td>\n<td>CLOSED</td>\n</tr>\n<tr>\n<td>bufferedAmount（只读）</td>\n<td>数值</td>\n<td>正在等待传输的数据的字节数</td>\n<td>可用来判断发送是否完毕</td>\n</tr>\n</tbody>\n</table>\n<p>如何监听 readyState 的状态变化呢？<br>\n事件：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>处理程序</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>open</td>\n<td>onopen</td>\n<td>建立连接时触发</td>\n</tr>\n<tr>\n<td>error</td>\n<td>onerror</td>\n<td>通信发生错误时触发</td>\n</tr>\n<tr>\n<td>message</td>\n<td>onmessage</td>\n<td>接收到数据时触发</td>\n</tr>\n<tr>\n<td>close</td>\n<td>onclose</td>\n<td>连接关闭时触发</td>\n</tr>\n</tbody>\n</table>\n<p>以上事件的事件处理函数的参数都是事件<code>event</code>,可在事件中获取相关信息。</p>\n<p>方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>send</td>\n<td>发送数据</td>\n<td>参数只能是字符串或者二进制</td>\n</tr>\n<tr>\n<td>close</td>\n<td>关闭连接</td>\n<td>无参数</td>\n</tr>\n</tbody>\n</table>\n<p>二进制数据可用<code>blod</code>或者<code>ArrayBuffer</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> event.data === <span class=\"built_in\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Received data string\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(event.data <span class=\"keyword\">instanceof</span> <span class=\"built_in\">ArrayBuffer</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buffer = event.data;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Received arraybuffer\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还可指定接收的类型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ws.binaryType = <span class=\"string\">\"blob\"</span>; <span class=\"comment\">// 指定接收的二进制数据的类型</span></span><br><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.data.size);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 收到的是 ArrayBuffer 数据</span></span><br><span class=\"line\">ws.binaryType = <span class=\"string\">\"arraybuffer\"</span>;</span><br><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.data.byteLength);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h3>\n<p><a href=\"https://halfrost.com/websocket\" target=\"_blank\" rel=\"noopener\">全双工的 websocket</a></p>"},{"title":"node 中的 ES 模块","date":"2019-06-16T13:36:35.000Z","_content":"\n[TOC]\n\nES6 模块的设计思想是尽量静态化，在编译时就能确定依赖关系，以及输入和输出变量，是编译时加载。编译时加载可实现静态优化，类型检查等都在静态分析实现。CommmonJS 是运行时加载，加载的是对象，不能静态优化。ES6 模块不是对象，而是通过 **export** 命令显示输出代码，再通过**import**导出。\n\n目前 node 对 ES6 的支持尚处在实验阶段，可编写`.mjs` 和给 node 命令增加`--experimental-modules` 使用 ES6 模块。\n\n<!--more-->\n## ES6 自动启用严格模式\n\n有以下限制：\n- 变量必须先声明再使用；\n- 不能删除变量`delte prop`,只能删除属性`delete global[prop]`;\n- `arguments`不随函数参数变化；\n- 禁止 `this`指向全局对象，顶层 this 指向 `undefined`；\n- 增加保留字`protected`、`satic`、`interface`等。\n\n## 导出接口\n\n导出接口使用 export 命令。一个模块就是一个独立的文件，文件内部的变量，外部王无法获取。\n\n### export 命令\n\n逐个导出接口：\n```js \n// name.mjs\nexport let firstName = 'JACK';\nexport let lastName = 'Zhou';\nexport let myFun = () => {\n\tconsole.log(`${firstName} ${lastName}`);\n};\n```\n引入接口：\n大括号里面的接口名，必须和导出的相同。\n```js\n//app.mjs\nimport { firstName,lastName,myFun } from \"./name\";\nconsole.log(firstName +' '+ lastName);\nmyFun()\n```\n统一导出：\n如果不想暴露内部变量的名字，可用`as`指定**导出名**\n```js\nlet firstName = 'JACK';\nlet lastName = 'Zhou';\nlet myFun = () => {\n\tconsole.log(`${firstName} ${lastName}`);\n};\nsetTimeout(() => (firstName = 'HaHa'), 10); //在10毫秒后改变导出接口的值\nexport { firstName as name, lastName, myFun };\n```\n引入：\n可用`as`给导出的接口取一个别名。\n```js\nimport { name as firstName, lastName, myFun } from './name';\nconsole.log(firstName + ' ' + lastName);\nmyFun();\n// 2秒后输出新的值 HaHa\nsetTimeout(() => {\n\tconsole.log(firstName);\n}, 2000);\n```\n输出：\n```js\nJACK ZHOU\nJACK ZHOU\nHaha\n```\n**setTimeout(() => (firstName = 'HAHHAH'), 10);**在10毫秒后改变导出接口的值。`export` 导出的接口和值是动态绑定的。即可通过接口获取模块内部实时的值。这和CommonJS 规范完全不同，其保存的是模块内的缓存。\n\n导出的接口是**常量**，不可修改，否则报`TypeError:Assingment to constant variable.`。但是可修改**对象**，包括数组、包装对象等。\n**但是不推荐这么做，，容易出错，还难以调试**\n```js\n//my.mjs\nlet firstName = 'JACK';\nlet lastName = 'Zhou';\nlet myFun = () => {\n\tconsole.log(`${firstName} ${lastName}`);\n};\nlet obj = {\n\tage: 10,\n\tID: '1313134'\n};\nlet arr = ['1', '2'];\nlet  oNum= new Number(12)\nexport { arr, obj ,myFun,oNum};\n```\n引入：\n```js\nimport { arr, obj, myFun, oNum } from './name';\nconsole.log(obj);\nobj.age++; #修改对象\nconsole.log(obj);\narr.push('你好'); # 修改数组 数组是特殊的对象\nconsole.log(arr); \nmyFun();\n// myFun=()=>'周杰' 这里报错\nconsole.log(oNum.valueOf());\noNum.age = 20;\nconsole.log(oNum);\nconsole.log(oNum.age);\n```\n整体引入,修改上述引入方法：\n```js\nimport * as OBJ from './name';\nconsole.log(OBJ.obj);\n```\n用**\\***指定一个对象，将接口都加载到好对象上。\n\nimport 提升效果：\n```js\nconsole.log(OBJ.obj);\nimport * as OBJ from './name';\n```\n这种效果的本质是模块在**编译时加载，而非运行时**。\n加载时可不暴露任何接口。那这样有和作用呢？如何调用接口？？\n```js\nimport './name'; \nimport './name'; //多次加载，只会执行一次\n```\n比如 vue 自定义指令，已经在指令定义文件中使用 `Vue.directive`函数定义指令了，就可以不导出接口，引入时也不需要导入任何接口。\n```js\nimport json from './json';\nimport Vue from 'vue';\nconst directives = {\n  json\n};\nfor (const [key, value] of Object.entries(directives)) {\n  Vue.directive(key, value);\n}\n// export {json}\n```\n在main.js 引入：\n```js\n// 自定义指令 这里不需要导入任何接口\nimport './directives';\n```\n### export default 命令\n\n上面接口的导出方式，在引入时都需要先知道接口名字，否则无法加载。但是用户往往不想要先阅读文档，了解接口。`export default`就是为模块指定默认接口的，引入时接口名可随意命名。\n\n```js\n//my.mjs\nlet firstName = 'JACK';\nlet lastName = 'Zhou';\nlet myFun = () => {\n\tconsole.log(`${firstName} ${lastName}`);\n};\nlet obj = {\n\tage: 10,\n\tID: '1313134'\n};\nlet arr = ['1', '2'];\nlet oNum = new Number(12);\nexport { obj, myFun, oNum };\nexport default arr; //默认接口 一个模块只能有一个\n```\n引入；\n```js\nimport Obj from './name'; //将默认接口加载到 Obj 上\nconsole.log(Obj);\nimport { obj, myFun, oNum } from './name'; //引入命名接口\nconsole.log(obj);\nconsole.log(myFun);\nconsole.log(oNum);\n```\n\n**export default Interface** 的实质是将接口命名为 **default**。\n`export default arr` 和 `export {arr as default}`相同。\n\n`export default` 导出匿名函数都是可以的，还可用来导出类。\n```js\nclass Point {\n\tconstructor(x, y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\ttoString() {\n\t\treturn `(${this.x},${this.y})`;\n\t}\n}\nlet greeting = 'hello class';\nexport { greeting }; // export default 可和多个export 混用\nexport default Point;\n```\n引入接口:\n```js\nimport Point, { greeting } from './Point';\nconsole.log(greeting);\nlet point = new Point(3, 4);\nconsole.log(point.toString());\nconsole.log(point instanceof Point);\n```\n## 引入接口\n\n总结\n- import 命令经静态分析后先于其他语句执行；\n- import from ,from 指定模块位置，可以是相对路径或者绝对路径，不带路径，就需要用配置文件告诉JS引擎。\n- 静态加载是import有提升效果，多次加载只执行一次；\n- 引入接口时可不输出接口；\n- `as` 可改写接口名字；\n- 编译时加载可实时获取模块内部的变量。\n- 关于是否使用大括号引入：\n  - 引入`export default`导出的接口，不使用大括号；\n  - 引入`export`导出的接口，一般使用大括号，用`as`整体引入就不使用大括号。\n\n\n## export 和 import 复合使用\n\n## import 动态引入模块\n\n前面的加载无法实现按需加载或者动态加载，因此引入`import()`指令，不是函数，因此不具备函数的特性，比如调用`apply`、`bind`、从`Function.prototype`获得继承，返回`Promise`对象，模块会作为`then`方法的参数。import 能接受的参数，import()都能接受。\n**require**是异步动态记载，import() 是动态同步加载。\n\nimport() 适用场景\n- 按需加载和条件加载；\n- 路径动态改变的模块；\n\n例子：\n```js\n//dynam.mjs\nlet n = 10;\nlet sayHello = name => {\n\tconsole.log('hello', name);\n};\nexport { n };\nexport default sayHello;\n```\n引入模块：\n```js\nif (true) {\n\timport('./dynamic.mjs').then(module => {\n    console.log(module)\n    console.table(module)\n    console.log(module.n);\n\tsayHello('JACK'); # 用 export default 导出的模块，直接在then方法里调用\n\t});\n}\n```\n用 export default 导出的模块，直接在then方法里直接使用接口，但是有会感觉这个接口来的太突然，推荐动态加载的模块都用 export 导出，然后在引入时解构赋值提取接口。\n```js\n//dynamic.mjs\nlet n = 10;\nlet sayHello = name => {\n\tconsole.log('hello', name);\n};\nexport { n, sayHello };\n```\n引入\n```js\nif (true) {\n\timport('./dynamic.mjs').then(({ sayHello, n }) => {\n\t\tconsole.log(n);\n\t\tsayHello('JACK');\n\t});\n}\n```\n使用async函数加载：\n```js\nif (true) {\n\tdynamicLoad();\n}\nasync function dynamicLoad() {\n\tlet { sayHello, n } = await import('./dynamic.mjs');\n\tconsole.log(n);\n\tsayHello('JACK');\n}\n```\n\n## 模块继承\n\n未完待续\n\n## 跨模块常量\n\n未完待续\n## 参考\n\n[ES6 Module 的语法][1]\n\n\n[1]: https://es6.ruanyifeng.com/#docs/module","source":"_posts/node-中的-ES-模块.md","raw":"---\ntitle: node 中的 ES 模块\ndate: 2019-06-16 21:36:35\ntags:\n- es6\ncategories:\n- [node]\n---\n\n[TOC]\n\nES6 模块的设计思想是尽量静态化，在编译时就能确定依赖关系，以及输入和输出变量，是编译时加载。编译时加载可实现静态优化，类型检查等都在静态分析实现。CommmonJS 是运行时加载，加载的是对象，不能静态优化。ES6 模块不是对象，而是通过 **export** 命令显示输出代码，再通过**import**导出。\n\n目前 node 对 ES6 的支持尚处在实验阶段，可编写`.mjs` 和给 node 命令增加`--experimental-modules` 使用 ES6 模块。\n\n<!--more-->\n## ES6 自动启用严格模式\n\n有以下限制：\n- 变量必须先声明再使用；\n- 不能删除变量`delte prop`,只能删除属性`delete global[prop]`;\n- `arguments`不随函数参数变化；\n- 禁止 `this`指向全局对象，顶层 this 指向 `undefined`；\n- 增加保留字`protected`、`satic`、`interface`等。\n\n## 导出接口\n\n导出接口使用 export 命令。一个模块就是一个独立的文件，文件内部的变量，外部王无法获取。\n\n### export 命令\n\n逐个导出接口：\n```js \n// name.mjs\nexport let firstName = 'JACK';\nexport let lastName = 'Zhou';\nexport let myFun = () => {\n\tconsole.log(`${firstName} ${lastName}`);\n};\n```\n引入接口：\n大括号里面的接口名，必须和导出的相同。\n```js\n//app.mjs\nimport { firstName,lastName,myFun } from \"./name\";\nconsole.log(firstName +' '+ lastName);\nmyFun()\n```\n统一导出：\n如果不想暴露内部变量的名字，可用`as`指定**导出名**\n```js\nlet firstName = 'JACK';\nlet lastName = 'Zhou';\nlet myFun = () => {\n\tconsole.log(`${firstName} ${lastName}`);\n};\nsetTimeout(() => (firstName = 'HaHa'), 10); //在10毫秒后改变导出接口的值\nexport { firstName as name, lastName, myFun };\n```\n引入：\n可用`as`给导出的接口取一个别名。\n```js\nimport { name as firstName, lastName, myFun } from './name';\nconsole.log(firstName + ' ' + lastName);\nmyFun();\n// 2秒后输出新的值 HaHa\nsetTimeout(() => {\n\tconsole.log(firstName);\n}, 2000);\n```\n输出：\n```js\nJACK ZHOU\nJACK ZHOU\nHaha\n```\n**setTimeout(() => (firstName = 'HAHHAH'), 10);**在10毫秒后改变导出接口的值。`export` 导出的接口和值是动态绑定的。即可通过接口获取模块内部实时的值。这和CommonJS 规范完全不同，其保存的是模块内的缓存。\n\n导出的接口是**常量**，不可修改，否则报`TypeError:Assingment to constant variable.`。但是可修改**对象**，包括数组、包装对象等。\n**但是不推荐这么做，，容易出错，还难以调试**\n```js\n//my.mjs\nlet firstName = 'JACK';\nlet lastName = 'Zhou';\nlet myFun = () => {\n\tconsole.log(`${firstName} ${lastName}`);\n};\nlet obj = {\n\tage: 10,\n\tID: '1313134'\n};\nlet arr = ['1', '2'];\nlet  oNum= new Number(12)\nexport { arr, obj ,myFun,oNum};\n```\n引入：\n```js\nimport { arr, obj, myFun, oNum } from './name';\nconsole.log(obj);\nobj.age++; #修改对象\nconsole.log(obj);\narr.push('你好'); # 修改数组 数组是特殊的对象\nconsole.log(arr); \nmyFun();\n// myFun=()=>'周杰' 这里报错\nconsole.log(oNum.valueOf());\noNum.age = 20;\nconsole.log(oNum);\nconsole.log(oNum.age);\n```\n整体引入,修改上述引入方法：\n```js\nimport * as OBJ from './name';\nconsole.log(OBJ.obj);\n```\n用**\\***指定一个对象，将接口都加载到好对象上。\n\nimport 提升效果：\n```js\nconsole.log(OBJ.obj);\nimport * as OBJ from './name';\n```\n这种效果的本质是模块在**编译时加载，而非运行时**。\n加载时可不暴露任何接口。那这样有和作用呢？如何调用接口？？\n```js\nimport './name'; \nimport './name'; //多次加载，只会执行一次\n```\n比如 vue 自定义指令，已经在指令定义文件中使用 `Vue.directive`函数定义指令了，就可以不导出接口，引入时也不需要导入任何接口。\n```js\nimport json from './json';\nimport Vue from 'vue';\nconst directives = {\n  json\n};\nfor (const [key, value] of Object.entries(directives)) {\n  Vue.directive(key, value);\n}\n// export {json}\n```\n在main.js 引入：\n```js\n// 自定义指令 这里不需要导入任何接口\nimport './directives';\n```\n### export default 命令\n\n上面接口的导出方式，在引入时都需要先知道接口名字，否则无法加载。但是用户往往不想要先阅读文档，了解接口。`export default`就是为模块指定默认接口的，引入时接口名可随意命名。\n\n```js\n//my.mjs\nlet firstName = 'JACK';\nlet lastName = 'Zhou';\nlet myFun = () => {\n\tconsole.log(`${firstName} ${lastName}`);\n};\nlet obj = {\n\tage: 10,\n\tID: '1313134'\n};\nlet arr = ['1', '2'];\nlet oNum = new Number(12);\nexport { obj, myFun, oNum };\nexport default arr; //默认接口 一个模块只能有一个\n```\n引入；\n```js\nimport Obj from './name'; //将默认接口加载到 Obj 上\nconsole.log(Obj);\nimport { obj, myFun, oNum } from './name'; //引入命名接口\nconsole.log(obj);\nconsole.log(myFun);\nconsole.log(oNum);\n```\n\n**export default Interface** 的实质是将接口命名为 **default**。\n`export default arr` 和 `export {arr as default}`相同。\n\n`export default` 导出匿名函数都是可以的，还可用来导出类。\n```js\nclass Point {\n\tconstructor(x, y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\ttoString() {\n\t\treturn `(${this.x},${this.y})`;\n\t}\n}\nlet greeting = 'hello class';\nexport { greeting }; // export default 可和多个export 混用\nexport default Point;\n```\n引入接口:\n```js\nimport Point, { greeting } from './Point';\nconsole.log(greeting);\nlet point = new Point(3, 4);\nconsole.log(point.toString());\nconsole.log(point instanceof Point);\n```\n## 引入接口\n\n总结\n- import 命令经静态分析后先于其他语句执行；\n- import from ,from 指定模块位置，可以是相对路径或者绝对路径，不带路径，就需要用配置文件告诉JS引擎。\n- 静态加载是import有提升效果，多次加载只执行一次；\n- 引入接口时可不输出接口；\n- `as` 可改写接口名字；\n- 编译时加载可实时获取模块内部的变量。\n- 关于是否使用大括号引入：\n  - 引入`export default`导出的接口，不使用大括号；\n  - 引入`export`导出的接口，一般使用大括号，用`as`整体引入就不使用大括号。\n\n\n## export 和 import 复合使用\n\n## import 动态引入模块\n\n前面的加载无法实现按需加载或者动态加载，因此引入`import()`指令，不是函数，因此不具备函数的特性，比如调用`apply`、`bind`、从`Function.prototype`获得继承，返回`Promise`对象，模块会作为`then`方法的参数。import 能接受的参数，import()都能接受。\n**require**是异步动态记载，import() 是动态同步加载。\n\nimport() 适用场景\n- 按需加载和条件加载；\n- 路径动态改变的模块；\n\n例子：\n```js\n//dynam.mjs\nlet n = 10;\nlet sayHello = name => {\n\tconsole.log('hello', name);\n};\nexport { n };\nexport default sayHello;\n```\n引入模块：\n```js\nif (true) {\n\timport('./dynamic.mjs').then(module => {\n    console.log(module)\n    console.table(module)\n    console.log(module.n);\n\tsayHello('JACK'); # 用 export default 导出的模块，直接在then方法里调用\n\t});\n}\n```\n用 export default 导出的模块，直接在then方法里直接使用接口，但是有会感觉这个接口来的太突然，推荐动态加载的模块都用 export 导出，然后在引入时解构赋值提取接口。\n```js\n//dynamic.mjs\nlet n = 10;\nlet sayHello = name => {\n\tconsole.log('hello', name);\n};\nexport { n, sayHello };\n```\n引入\n```js\nif (true) {\n\timport('./dynamic.mjs').then(({ sayHello, n }) => {\n\t\tconsole.log(n);\n\t\tsayHello('JACK');\n\t});\n}\n```\n使用async函数加载：\n```js\nif (true) {\n\tdynamicLoad();\n}\nasync function dynamicLoad() {\n\tlet { sayHello, n } = await import('./dynamic.mjs');\n\tconsole.log(n);\n\tsayHello('JACK');\n}\n```\n\n## 模块继承\n\n未完待续\n\n## 跨模块常量\n\n未完待续\n## 参考\n\n[ES6 Module 的语法][1]\n\n\n[1]: https://es6.ruanyifeng.com/#docs/module","slug":"node-中的-ES-模块","published":1,"updated":"2019-06-16T13:38:31.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccf50011jwrnbyf1flma","content":"<p>[TOC]</p>\n<p>ES6 模块的设计思想是尽量静态化，在编译时就能确定依赖关系，以及输入和输出变量，是编译时加载。编译时加载可实现静态优化，类型检查等都在静态分析实现。CommmonJS 是运行时加载，加载的是对象，不能静态优化。ES6 模块不是对象，而是通过 <strong>export</strong> 命令显示输出代码，再通过<strong>import</strong>导出。</p>\n<p>目前 node 对 ES6 的支持尚处在实验阶段，可编写<code>.mjs</code> 和给 node 命令增加<code>--experimental-modules</code> 使用 ES6 模块。</p>\n<a id=\"more\"></a>\n<h2 id=\"es6-自动启用严格模式\"><a class=\"markdownIt-Anchor\" href=\"#es6-自动启用严格模式\"></a> ES6 自动启用严格模式</h2>\n<p>有以下限制：</p>\n<ul>\n<li>变量必须先声明再使用；</li>\n<li>不能删除变量<code>delte prop</code>,只能删除属性<code>delete global[prop]</code>;</li>\n<li><code>arguments</code>不随函数参数变化；</li>\n<li>禁止 <code>this</code>指向全局对象，顶层 this 指向 <code>undefined</code>；</li>\n<li>增加保留字<code>protected</code>、<code>satic</code>、<code>interface</code>等。</li>\n</ul>\n<h2 id=\"导出接口\"><a class=\"markdownIt-Anchor\" href=\"#导出接口\"></a> 导出接口</h2>\n<p>导出接口使用 export 命令。一个模块就是一个独立的文件，文件内部的变量，外部王无法获取。</p>\n<h3 id=\"export-命令\"><a class=\"markdownIt-Anchor\" href=\"#export-命令\"></a> export 命令</h3>\n<p>逐个导出接口：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> firstName = <span class=\"string\">'JACK'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> lastName = <span class=\"string\">'Zhou'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> myFun = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;firstName&#125;</span> <span class=\"subst\">$&#123;lastName&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>引入接口：<br>\n大括号里面的接口名，必须和导出的相同。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//app.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; firstName,lastName,myFun &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./name\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstName +<span class=\"string\">' '</span>+ lastName);</span><br><span class=\"line\">myFun()</span><br></pre></td></tr></table></figure>\n<p>统一导出：<br>\n如果不想暴露内部变量的名字，可用<code>as</code>指定<strong>导出名</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> firstName = <span class=\"string\">'JACK'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> lastName = <span class=\"string\">'Zhou'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myFun = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;firstName&#125;</span> <span class=\"subst\">$&#123;lastName&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (firstName = <span class=\"string\">'HaHa'</span>), <span class=\"number\">10</span>); <span class=\"comment\">//在10毫秒后改变导出接口的值</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; firstName <span class=\"keyword\">as</span> name, lastName, myFun &#125;;</span><br></pre></td></tr></table></figure>\n<p>引入：<br>\n可用<code>as</code>给导出的接口取一个别名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; name <span class=\"keyword\">as</span> firstName, lastName, myFun &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstName + <span class=\"string\">' '</span> + lastName);</span><br><span class=\"line\">myFun();</span><br><span class=\"line\"><span class=\"comment\">// 2秒后输出新的值 HaHa</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(firstName);</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>);</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JACK ZHOU</span><br><span class=\"line\">JACK ZHOU</span><br><span class=\"line\">Haha</span><br></pre></td></tr></table></figure>\n<p>**setTimeout(() =&gt; (firstName = ‘HAHHAH’), 10);**在10毫秒后改变导出接口的值。<code>export</code> 导出的接口和值是动态绑定的。即可通过接口获取模块内部实时的值。这和CommonJS 规范完全不同，其保存的是模块内的缓存。</p>\n<p>导出的接口是<strong>常量</strong>，不可修改，否则报<code>TypeError:Assingment to constant variable.</code>。但是可修改<strong>对象</strong>，包括数组、包装对象等。<br>\n<strong>但是不推荐这么做，，容易出错，还难以调试</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//my.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> firstName = <span class=\"string\">'JACK'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> lastName = <span class=\"string\">'Zhou'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myFun = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;firstName&#125;</span> <span class=\"subst\">$&#123;lastName&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tage: <span class=\"number\">10</span>,</span><br><span class=\"line\">\tID: <span class=\"string\">'1313134'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span>  oNum= <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; arr, obj ,myFun,oNum&#125;;</span><br></pre></td></tr></table></figure>\n<p>引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; arr, obj, myFun, oNum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">obj.age++; #修改对象</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">arr.push('你好'); # 修改数组 数组是特殊的对象</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); </span><br><span class=\"line\">myFun();</span><br><span class=\"line\"><span class=\"comment\">// myFun=()=&gt;'周杰' 这里报错</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oNum.valueOf());</span><br><span class=\"line\">oNum.age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oNum);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oNum.age);</span><br></pre></td></tr></table></figure>\n<p>整体引入,修改上述引入方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> OBJ <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(OBJ.obj);</span><br></pre></td></tr></table></figure>\n<p>用*****指定一个对象，将接口都加载到好对象上。</p>\n<p>import 提升效果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(OBJ.obj);</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> OBJ <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span>;</span><br></pre></td></tr></table></figure>\n<p>这种效果的本质是模块在<strong>编译时加载，而非运行时</strong>。<br>\n加载时可不暴露任何接口。那这样有和作用呢？如何调用接口？？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./name'</span>; </span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./name'</span>; <span class=\"comment\">//多次加载，只会执行一次</span></span><br></pre></td></tr></table></figure>\n<p>比如 vue 自定义指令，已经在指令定义文件中使用 <code>Vue.directive</code>函数定义指令了，就可以不导出接口，引入时也不需要导入任何接口。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json <span class=\"keyword\">from</span> <span class=\"string\">'./json'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> directives = &#123;</span><br><span class=\"line\">  json</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(directives)) &#123;</span><br><span class=\"line\">  Vue.directive(key, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// export &#123;json&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在main.js 引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义指令 这里不需要导入任何接口</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./directives'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"export-default-命令\"><a class=\"markdownIt-Anchor\" href=\"#export-default-命令\"></a> export default 命令</h3>\n<p>上面接口的导出方式，在引入时都需要先知道接口名字，否则无法加载。但是用户往往不想要先阅读文档，了解接口。<code>export default</code>就是为模块指定默认接口的，引入时接口名可随意命名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//my.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> firstName = <span class=\"string\">'JACK'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> lastName = <span class=\"string\">'Zhou'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myFun = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;firstName&#125;</span> <span class=\"subst\">$&#123;lastName&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tage: <span class=\"number\">10</span>,</span><br><span class=\"line\">\tID: <span class=\"string\">'1313134'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> oNum = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; obj, myFun, oNum &#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> arr; <span class=\"comment\">//默认接口 一个模块只能有一个</span></span><br></pre></td></tr></table></figure>\n<p>引入；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Obj <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span>; <span class=\"comment\">//将默认接口加载到 Obj 上</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Obj);</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; obj, myFun, oNum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span>; <span class=\"comment\">//引入命名接口</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myFun);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oNum);</span><br></pre></td></tr></table></figure>\n<p><strong>export default Interface</strong> 的实质是将接口命名为 <strong>default</strong>。<br>\n<code>export default arr</code> 和 <code>export {arr as default}</code>相同。</p>\n<p><code>export default</code> 导出匿名函数都是可以的，还可用来导出类。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttoString() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">`(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.x&#125;</span>,<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.y&#125;</span>)`</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> greeting = <span class=\"string\">'hello class'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; greeting &#125;; <span class=\"comment\">// export default 可和多个export 混用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Point;</span><br></pre></td></tr></table></figure>\n<p>引入接口:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Point, &#123; greeting &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./Point'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greeting);</span><br><span class=\"line\"><span class=\"keyword\">let</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(point.toString());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(point <span class=\"keyword\">instanceof</span> Point);</span><br></pre></td></tr></table></figure>\n<h2 id=\"引入接口\"><a class=\"markdownIt-Anchor\" href=\"#引入接口\"></a> 引入接口</h2>\n<p>总结</p>\n<ul>\n<li>import 命令经静态分析后先于其他语句执行；</li>\n<li>import from ,from 指定模块位置，可以是相对路径或者绝对路径，不带路径，就需要用配置文件告诉JS引擎。</li>\n<li>静态加载是import有提升效果，多次加载只执行一次；</li>\n<li>引入接口时可不输出接口；</li>\n<li><code>as</code> 可改写接口名字；</li>\n<li>编译时加载可实时获取模块内部的变量。</li>\n<li>关于是否使用大括号引入：\n<ul>\n<li>引入<code>export default</code>导出的接口，不使用大括号；</li>\n<li>引入<code>export</code>导出的接口，一般使用大括号，用<code>as</code>整体引入就不使用大括号。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"export-和-import-复合使用\"><a class=\"markdownIt-Anchor\" href=\"#export-和-import-复合使用\"></a> export 和 import 复合使用</h2>\n<h2 id=\"import-动态引入模块\"><a class=\"markdownIt-Anchor\" href=\"#import-动态引入模块\"></a> import 动态引入模块</h2>\n<p>前面的加载无法实现按需加载或者动态加载，因此引入<code>import()</code>指令，不是函数，因此不具备函数的特性，比如调用<code>apply</code>、<code>bind</code>、从<code>Function.prototype</code>获得继承，返回<code>Promise</code>对象，模块会作为<code>then</code>方法的参数。import 能接受的参数，import()都能接受。<br>\n<strong>require</strong>是异步动态记载，import() 是动态同步加载。</p>\n<p>import() 适用场景</p>\n<ul>\n<li>按需加载和条件加载；</li>\n<li>路径动态改变的模块；</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dynam.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sayHello = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>, name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; n &#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> sayHello;</span><br></pre></td></tr></table></figure>\n<p>引入模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">import</span>(<span class=\"string\">'./dynamic.mjs'</span>).then(<span class=\"function\"><span class=\"params\">module</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.table(<span class=\"built_in\">module</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>.n);</span><br><span class=\"line\">\tsayHello('JACK'); # 用 export default 导出的模块，直接在then方法里调用</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用 export default 导出的模块，直接在then方法里直接使用接口，但是有会感觉这个接口来的太突然，推荐动态加载的模块都用 export 导出，然后在引入时解构赋值提取接口。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dynamic.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sayHello = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>, name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; n, sayHello &#125;;</span><br></pre></td></tr></table></figure>\n<p>引入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">import</span>(<span class=\"string\">'./dynamic.mjs'</span>).then(<span class=\"function\">(<span class=\"params\">&#123; sayHello, n &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">\t\tsayHello(<span class=\"string\">'JACK'</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用async函数加载：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\tdynamicLoad();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dynamicLoad</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> &#123; sayHello, n &#125; = <span class=\"keyword\">await</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./dynamic.mjs'</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">\tsayHello(<span class=\"string\">'JACK'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"模块继承\"><a class=\"markdownIt-Anchor\" href=\"#模块继承\"></a> 模块继承</h2>\n<p>未完待续</p>\n<h2 id=\"跨模块常量\"><a class=\"markdownIt-Anchor\" href=\"#跨模块常量\"></a> 跨模块常量</h2>\n<p>未完待续</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"https://es6.ruanyifeng.com/#docs/module\" target=\"_blank\" rel=\"noopener\">ES6 Module 的语法</a></p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>[TOC]</p>\n<p>ES6 模块的设计思想是尽量静态化，在编译时就能确定依赖关系，以及输入和输出变量，是编译时加载。编译时加载可实现静态优化，类型检查等都在静态分析实现。CommmonJS 是运行时加载，加载的是对象，不能静态优化。ES6 模块不是对象，而是通过 <strong>export</strong> 命令显示输出代码，再通过<strong>import</strong>导出。</p>\n<p>目前 node 对 ES6 的支持尚处在实验阶段，可编写<code>.mjs</code> 和给 node 命令增加<code>--experimental-modules</code> 使用 ES6 模块。</p>","more":"<h2 id=\"es6-自动启用严格模式\"><a class=\"markdownIt-Anchor\" href=\"#es6-自动启用严格模式\"></a> ES6 自动启用严格模式</h2>\n<p>有以下限制：</p>\n<ul>\n<li>变量必须先声明再使用；</li>\n<li>不能删除变量<code>delte prop</code>,只能删除属性<code>delete global[prop]</code>;</li>\n<li><code>arguments</code>不随函数参数变化；</li>\n<li>禁止 <code>this</code>指向全局对象，顶层 this 指向 <code>undefined</code>；</li>\n<li>增加保留字<code>protected</code>、<code>satic</code>、<code>interface</code>等。</li>\n</ul>\n<h2 id=\"导出接口\"><a class=\"markdownIt-Anchor\" href=\"#导出接口\"></a> 导出接口</h2>\n<p>导出接口使用 export 命令。一个模块就是一个独立的文件，文件内部的变量，外部王无法获取。</p>\n<h3 id=\"export-命令\"><a class=\"markdownIt-Anchor\" href=\"#export-命令\"></a> export 命令</h3>\n<p>逐个导出接口：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> firstName = <span class=\"string\">'JACK'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> lastName = <span class=\"string\">'Zhou'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> myFun = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;firstName&#125;</span> <span class=\"subst\">$&#123;lastName&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>引入接口：<br>\n大括号里面的接口名，必须和导出的相同。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//app.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; firstName,lastName,myFun &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./name\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstName +<span class=\"string\">' '</span>+ lastName);</span><br><span class=\"line\">myFun()</span><br></pre></td></tr></table></figure>\n<p>统一导出：<br>\n如果不想暴露内部变量的名字，可用<code>as</code>指定<strong>导出名</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> firstName = <span class=\"string\">'JACK'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> lastName = <span class=\"string\">'Zhou'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myFun = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;firstName&#125;</span> <span class=\"subst\">$&#123;lastName&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (firstName = <span class=\"string\">'HaHa'</span>), <span class=\"number\">10</span>); <span class=\"comment\">//在10毫秒后改变导出接口的值</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; firstName <span class=\"keyword\">as</span> name, lastName, myFun &#125;;</span><br></pre></td></tr></table></figure>\n<p>引入：<br>\n可用<code>as</code>给导出的接口取一个别名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; name <span class=\"keyword\">as</span> firstName, lastName, myFun &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstName + <span class=\"string\">' '</span> + lastName);</span><br><span class=\"line\">myFun();</span><br><span class=\"line\"><span class=\"comment\">// 2秒后输出新的值 HaHa</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(firstName);</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>);</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JACK ZHOU</span><br><span class=\"line\">JACK ZHOU</span><br><span class=\"line\">Haha</span><br></pre></td></tr></table></figure>\n<p>**setTimeout(() =&gt; (firstName = ‘HAHHAH’), 10);**在10毫秒后改变导出接口的值。<code>export</code> 导出的接口和值是动态绑定的。即可通过接口获取模块内部实时的值。这和CommonJS 规范完全不同，其保存的是模块内的缓存。</p>\n<p>导出的接口是<strong>常量</strong>，不可修改，否则报<code>TypeError:Assingment to constant variable.</code>。但是可修改<strong>对象</strong>，包括数组、包装对象等。<br>\n<strong>但是不推荐这么做，，容易出错，还难以调试</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//my.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> firstName = <span class=\"string\">'JACK'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> lastName = <span class=\"string\">'Zhou'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myFun = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;firstName&#125;</span> <span class=\"subst\">$&#123;lastName&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tage: <span class=\"number\">10</span>,</span><br><span class=\"line\">\tID: <span class=\"string\">'1313134'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span>  oNum= <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; arr, obj ,myFun,oNum&#125;;</span><br></pre></td></tr></table></figure>\n<p>引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; arr, obj, myFun, oNum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">obj.age++; #修改对象</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">arr.push('你好'); # 修改数组 数组是特殊的对象</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); </span><br><span class=\"line\">myFun();</span><br><span class=\"line\"><span class=\"comment\">// myFun=()=&gt;'周杰' 这里报错</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oNum.valueOf());</span><br><span class=\"line\">oNum.age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oNum);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oNum.age);</span><br></pre></td></tr></table></figure>\n<p>整体引入,修改上述引入方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> OBJ <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(OBJ.obj);</span><br></pre></td></tr></table></figure>\n<p>用*****指定一个对象，将接口都加载到好对象上。</p>\n<p>import 提升效果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(OBJ.obj);</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> OBJ <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span>;</span><br></pre></td></tr></table></figure>\n<p>这种效果的本质是模块在<strong>编译时加载，而非运行时</strong>。<br>\n加载时可不暴露任何接口。那这样有和作用呢？如何调用接口？？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./name'</span>; </span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./name'</span>; <span class=\"comment\">//多次加载，只会执行一次</span></span><br></pre></td></tr></table></figure>\n<p>比如 vue 自定义指令，已经在指令定义文件中使用 <code>Vue.directive</code>函数定义指令了，就可以不导出接口，引入时也不需要导入任何接口。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json <span class=\"keyword\">from</span> <span class=\"string\">'./json'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> directives = &#123;</span><br><span class=\"line\">  json</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(directives)) &#123;</span><br><span class=\"line\">  Vue.directive(key, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// export &#123;json&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在main.js 引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义指令 这里不需要导入任何接口</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./directives'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"export-default-命令\"><a class=\"markdownIt-Anchor\" href=\"#export-default-命令\"></a> export default 命令</h3>\n<p>上面接口的导出方式，在引入时都需要先知道接口名字，否则无法加载。但是用户往往不想要先阅读文档，了解接口。<code>export default</code>就是为模块指定默认接口的，引入时接口名可随意命名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//my.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> firstName = <span class=\"string\">'JACK'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> lastName = <span class=\"string\">'Zhou'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myFun = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;firstName&#125;</span> <span class=\"subst\">$&#123;lastName&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tage: <span class=\"number\">10</span>,</span><br><span class=\"line\">\tID: <span class=\"string\">'1313134'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> oNum = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; obj, myFun, oNum &#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> arr; <span class=\"comment\">//默认接口 一个模块只能有一个</span></span><br></pre></td></tr></table></figure>\n<p>引入；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Obj <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span>; <span class=\"comment\">//将默认接口加载到 Obj 上</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Obj);</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; obj, myFun, oNum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./name'</span>; <span class=\"comment\">//引入命名接口</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myFun);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oNum);</span><br></pre></td></tr></table></figure>\n<p><strong>export default Interface</strong> 的实质是将接口命名为 <strong>default</strong>。<br>\n<code>export default arr</code> 和 <code>export {arr as default}</code>相同。</p>\n<p><code>export default</code> 导出匿名函数都是可以的，还可用来导出类。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttoString() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">`(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.x&#125;</span>,<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.y&#125;</span>)`</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> greeting = <span class=\"string\">'hello class'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; greeting &#125;; <span class=\"comment\">// export default 可和多个export 混用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Point;</span><br></pre></td></tr></table></figure>\n<p>引入接口:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Point, &#123; greeting &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./Point'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greeting);</span><br><span class=\"line\"><span class=\"keyword\">let</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(point.toString());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(point <span class=\"keyword\">instanceof</span> Point);</span><br></pre></td></tr></table></figure>\n<h2 id=\"引入接口\"><a class=\"markdownIt-Anchor\" href=\"#引入接口\"></a> 引入接口</h2>\n<p>总结</p>\n<ul>\n<li>import 命令经静态分析后先于其他语句执行；</li>\n<li>import from ,from 指定模块位置，可以是相对路径或者绝对路径，不带路径，就需要用配置文件告诉JS引擎。</li>\n<li>静态加载是import有提升效果，多次加载只执行一次；</li>\n<li>引入接口时可不输出接口；</li>\n<li><code>as</code> 可改写接口名字；</li>\n<li>编译时加载可实时获取模块内部的变量。</li>\n<li>关于是否使用大括号引入：\n<ul>\n<li>引入<code>export default</code>导出的接口，不使用大括号；</li>\n<li>引入<code>export</code>导出的接口，一般使用大括号，用<code>as</code>整体引入就不使用大括号。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"export-和-import-复合使用\"><a class=\"markdownIt-Anchor\" href=\"#export-和-import-复合使用\"></a> export 和 import 复合使用</h2>\n<h2 id=\"import-动态引入模块\"><a class=\"markdownIt-Anchor\" href=\"#import-动态引入模块\"></a> import 动态引入模块</h2>\n<p>前面的加载无法实现按需加载或者动态加载，因此引入<code>import()</code>指令，不是函数，因此不具备函数的特性，比如调用<code>apply</code>、<code>bind</code>、从<code>Function.prototype</code>获得继承，返回<code>Promise</code>对象，模块会作为<code>then</code>方法的参数。import 能接受的参数，import()都能接受。<br>\n<strong>require</strong>是异步动态记载，import() 是动态同步加载。</p>\n<p>import() 适用场景</p>\n<ul>\n<li>按需加载和条件加载；</li>\n<li>路径动态改变的模块；</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dynam.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sayHello = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>, name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; n &#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> sayHello;</span><br></pre></td></tr></table></figure>\n<p>引入模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">import</span>(<span class=\"string\">'./dynamic.mjs'</span>).then(<span class=\"function\"><span class=\"params\">module</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.table(<span class=\"built_in\">module</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>.n);</span><br><span class=\"line\">\tsayHello('JACK'); # 用 export default 导出的模块，直接在then方法里调用</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用 export default 导出的模块，直接在then方法里直接使用接口，但是有会感觉这个接口来的太突然，推荐动态加载的模块都用 export 导出，然后在引入时解构赋值提取接口。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dynamic.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sayHello = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>, name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; n, sayHello &#125;;</span><br></pre></td></tr></table></figure>\n<p>引入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">import</span>(<span class=\"string\">'./dynamic.mjs'</span>).then(<span class=\"function\">(<span class=\"params\">&#123; sayHello, n &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">\t\tsayHello(<span class=\"string\">'JACK'</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用async函数加载：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\tdynamicLoad();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dynamicLoad</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> &#123; sayHello, n &#125; = <span class=\"keyword\">await</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./dynamic.mjs'</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">\tsayHello(<span class=\"string\">'JACK'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"模块继承\"><a class=\"markdownIt-Anchor\" href=\"#模块继承\"></a> 模块继承</h2>\n<p>未完待续</p>\n<h2 id=\"跨模块常量\"><a class=\"markdownIt-Anchor\" href=\"#跨模块常量\"></a> 跨模块常量</h2>\n<p>未完待续</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"https://es6.ruanyifeng.com/#docs/module\" target=\"_blank\" rel=\"noopener\">ES6 Module 的语法</a></p>"},{"title":"vue 路由基础","date":"2019-05-24T16:46:33.000Z","_content":"vue 使用 vue-router 插件处理路由，路由是开发单页应用必须掌握的知识。\n\n<!--more-->\n\n[TOC]\n\n## 什么是 vue-router？ \n\n（1）**vue-router** 是 **Vue** 官方提供前端路由插件，借助它我们实现可以基于路由和组件的单页面应用。\n\n（2）它与传统的页面区别在于：\n\n- 传统的页面应用采用的是`后端路由`，即通过超链接来实现页面切换和跳转的。\n- 而在 **vue-router** 单页面应用中，则是通过路径之间的切换（实际上就是组件的切换）。\n\n###  router-link 和 router-view 组件\n\n`router-link` 是一个`a`（链接）标签的封装，`router-view` 是路由视图，渲染 router-link 匹配到的组件，可配合使用`<transition>` 和 `<keep-alive>` 使用。\n\n[更多详细信息](<https://router.vuejs.org/zh/api/#router-link>)\n\n## 路由配置\n\n### 动态路由\n\n`$route`  是当前路由，可用` watch`在组件中监它的变化，有一个  `params`  属性，值一个包含动态路由的对象。\n\n```js\nwatch: {\n  '$route'(to) {\n\t console.log(to);\n\t //将路由的 params 属性赋值给组件的 data 属性\n\t to.params && to.params.view && (this.effect = to.params.view)\n\t},\n}\n```\n\n[route 和 router 的区别](<https://segmentfault.com/q/1010000009289159/a-1020000018573459>)\n\n路由对象为：\n\n```js\n{\n\tpath:'/argu/:name',\n    // 使用 import 动态引入路径对应的组件，起到懒加载的作用\n    component:()=>import('@/views/ArguPage')\n}\n```\n可在该路由的`组件`中这样获取name的值：\n\n```js\n$route.params.name //给同一个组件设置传递不同的params，实现组件的复用\n```\n\n### 嵌套路由\n\n\n在路由对象中添加一个  `children`  属性，值是一个数组，可包含多个子路由。`子路由 path 前面不能有 / `  。 父级路由对应的组件必须有路由出口，即 router-view。\n\n### 命名路由\n\n路由对象中的 name 属性是路由的名字，可用该名字指定路径。\n在 router-link 的 to 属性`动态绑定` `路由对象`。\n\n```html\n<router-link :to=\"{name:'home'}\"></router-link>\n```\n\n### 命名视图\n\nroute-view 是路由视图，只有一个视图时，路由匹配的组件在该视图中渲染，多个视图则要对视图进行命名。\n\n```html\n<!-- 视图渲染组件,该组件内不需要房子任何内容，可写成只闭合标签-->\n<router-view />\n<!-- 有多个路由视图需要匹配，则用命名视图 -->\n<router-view name=\"sister\"></router-view>\n<router-view name=\"brother\"></router-view>\n```\n\n路由对象：\n\n```js\n{\n\tpath:'/name/view',\n\tname:'name_view',\n\t// 注意命名视图的 components 和 组件的 component 的区别\n\tcomponents:{\n\t\t// 不给 router-view 设置 name 属性，name 值就是 default\n\t\tdefault:()=>import('@/views/ChildPage'),\n\t\tsister:()=>import('@/views/SisterPage'),\n\t\tbrother:()=>import('@/views/BrotherPage'),\n\t}\n}\n```\n\n### JS 操作路由\n\n路由对象 $router 有多个函数`push `、` go `、` replace`\n\npush 可导航到不同的页面，会将该路径进入历史记录。\n`$router.push`  和  `window.history.pushSate`  一样。\npush 可接受不同的参数：\n\n```js\n//字符串路径\nthis.$router.push('home')\n\n// 路由对象\nthis.$router.push({path:'home'})\n\n// 命名路由加参数\nthis.$router.push({name:'argu',params:{name:'jack'}})\n//  path 路由和 query\nthis.$router.push({path:'argu',query:{name:'jack'}});\n//  path  和 params 不可一起使用，params 会被忽略\nthis.$router.push({path:'argu',params:{name:'jack'}});\nthis.$router.push({name:'argu',query:{name:'jack'}});\n\n```\n\ngo 的参数是一个整数，表示回退或者前进多少历史记录。\n\n```js\n// 在浏览器记录中前进一步，等同于 history.forward()\n$router.go(1)\n\n// 后退一步记录，等同于 history.back()\n$router.go(-1)\n\n// 前进 3 步记录\n$router.go(3)\n\n// 如果 history 记录不够用，那就默默地失败呗\n$router.go(-100)\n$router.go(100)\n```\n\n`router.replace(location)` =  `window.history.replaceState`\n跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录\n\n使用场景：不需要用户回退的情况，比如权限验证。\n\n```js\n// 路由名字\nthis.$router.replace('name_view');\n// 字符串路径\nthis.$router.replace('/name/view');\n// 路由对象\nthis.$router.replace({path:'/name/view'});\n// 命名路由带 params \nthis.$router.replace({name:'name_view',params:{age:24}});\n// path 和 query\nthis.$router.replace({path:'name_view',query:{age:24}});\n// this.$router.replace({path:'/name/view',params:{age:24}});\n```\n### 重定向和别名\n\n```js\n// 路由重定向:访问 /index ，重定向到 /\n{\n\tpath:'/index',\n\tredirect:'/'\n}\n```\nredirect 也可设置一个对象：\n\n```js\n{\n\tpath:'/index',\n\tredirect:{\n\t\tname:'home'\n\t}\n}\n```\n\nredirect  还可以设置为一个函数，传递一个参数 to,可根据该对象的不同值，重定向到不同的页面，返回一个 `命名路由 `  或者 `字符串路径 `  。\n\n```js\n{\n\tpath:'/index',\n\tredirect:to=>{\n\t\t// do something with to \n\t\treturn {\n\t\t\tname:'home'\n\t\t}\n\t}\n}\n```\n\n`to`  是一个包含路径参数的对象：\n\n```json\n{\n\tname: \"index\",\n\tmeta: {},// 路由元数据，可在全局导航守卫中获取该对象，然后不同页面设置不同的值，比如设置页面的标题\n\tpath: \"/index\", // 路由路径 解析为绝对路径 /a/b\n\thash: \"\", // 书签\n\tquery: {}, // 查询参数 /a?user=jack, $route.query.uer 的值为 jack\n\tparams: {}, //\n\tfullPath: \"/index\", // 完整路径\n\tmatched: [{ // 当前路由的所有嵌套路径片段的路由记录,路由记录就是路由的副本。\n\t\tpath: \"/index\",\n\t\tregex: {\n\t\t\tkeys: []\n\t\t},\n\t\tcomponents: {},\n\t\tinstances: {},\n\t\tname: \"index\",\n\t\tmeta: {},\n\t\tprops: {}\n\t}],\n    redirectedForm:''// 重定向来源的名字\n}\n```\n\n```js\nrouter.beforeEach((to, from, next) => {\n\tconsole.log('①，全局前置守卫,beforeEach');\n    //给每个页面设置不同的标题，标题就从 meta 中获取\n    //setTitle = (title)=>{\n\t// window.document.title=title||'admin'\n\t//}\n\tto.meta && setTitle(to.meta.title);\n\tnext(()=>{\n\t\tconsole.log('②，全局前置守卫,beforeEach');\n\t});\n});\n```\n#### 路径别名\n```js\n{\n\tname: 'home',\n\talias:'home_page',// 路径别名\n\tpath: '/',\n\tcomponent: Home\n}\n```","source":"_posts/vue 路由基础.md","raw":"---\ntitle: vue 路由基础\ndate: 2019-05-25 00:46:33\ntags:\n- vue\n- vue-router\ncategories:\n- [vue]\n- [前端框架]\n---\nvue 使用 vue-router 插件处理路由，路由是开发单页应用必须掌握的知识。\n\n<!--more-->\n\n[TOC]\n\n## 什么是 vue-router？ \n\n（1）**vue-router** 是 **Vue** 官方提供前端路由插件，借助它我们实现可以基于路由和组件的单页面应用。\n\n（2）它与传统的页面区别在于：\n\n- 传统的页面应用采用的是`后端路由`，即通过超链接来实现页面切换和跳转的。\n- 而在 **vue-router** 单页面应用中，则是通过路径之间的切换（实际上就是组件的切换）。\n\n###  router-link 和 router-view 组件\n\n`router-link` 是一个`a`（链接）标签的封装，`router-view` 是路由视图，渲染 router-link 匹配到的组件，可配合使用`<transition>` 和 `<keep-alive>` 使用。\n\n[更多详细信息](<https://router.vuejs.org/zh/api/#router-link>)\n\n## 路由配置\n\n### 动态路由\n\n`$route`  是当前路由，可用` watch`在组件中监它的变化，有一个  `params`  属性，值一个包含动态路由的对象。\n\n```js\nwatch: {\n  '$route'(to) {\n\t console.log(to);\n\t //将路由的 params 属性赋值给组件的 data 属性\n\t to.params && to.params.view && (this.effect = to.params.view)\n\t},\n}\n```\n\n[route 和 router 的区别](<https://segmentfault.com/q/1010000009289159/a-1020000018573459>)\n\n路由对象为：\n\n```js\n{\n\tpath:'/argu/:name',\n    // 使用 import 动态引入路径对应的组件，起到懒加载的作用\n    component:()=>import('@/views/ArguPage')\n}\n```\n可在该路由的`组件`中这样获取name的值：\n\n```js\n$route.params.name //给同一个组件设置传递不同的params，实现组件的复用\n```\n\n### 嵌套路由\n\n\n在路由对象中添加一个  `children`  属性，值是一个数组，可包含多个子路由。`子路由 path 前面不能有 / `  。 父级路由对应的组件必须有路由出口，即 router-view。\n\n### 命名路由\n\n路由对象中的 name 属性是路由的名字，可用该名字指定路径。\n在 router-link 的 to 属性`动态绑定` `路由对象`。\n\n```html\n<router-link :to=\"{name:'home'}\"></router-link>\n```\n\n### 命名视图\n\nroute-view 是路由视图，只有一个视图时，路由匹配的组件在该视图中渲染，多个视图则要对视图进行命名。\n\n```html\n<!-- 视图渲染组件,该组件内不需要房子任何内容，可写成只闭合标签-->\n<router-view />\n<!-- 有多个路由视图需要匹配，则用命名视图 -->\n<router-view name=\"sister\"></router-view>\n<router-view name=\"brother\"></router-view>\n```\n\n路由对象：\n\n```js\n{\n\tpath:'/name/view',\n\tname:'name_view',\n\t// 注意命名视图的 components 和 组件的 component 的区别\n\tcomponents:{\n\t\t// 不给 router-view 设置 name 属性，name 值就是 default\n\t\tdefault:()=>import('@/views/ChildPage'),\n\t\tsister:()=>import('@/views/SisterPage'),\n\t\tbrother:()=>import('@/views/BrotherPage'),\n\t}\n}\n```\n\n### JS 操作路由\n\n路由对象 $router 有多个函数`push `、` go `、` replace`\n\npush 可导航到不同的页面，会将该路径进入历史记录。\n`$router.push`  和  `window.history.pushSate`  一样。\npush 可接受不同的参数：\n\n```js\n//字符串路径\nthis.$router.push('home')\n\n// 路由对象\nthis.$router.push({path:'home'})\n\n// 命名路由加参数\nthis.$router.push({name:'argu',params:{name:'jack'}})\n//  path 路由和 query\nthis.$router.push({path:'argu',query:{name:'jack'}});\n//  path  和 params 不可一起使用，params 会被忽略\nthis.$router.push({path:'argu',params:{name:'jack'}});\nthis.$router.push({name:'argu',query:{name:'jack'}});\n\n```\n\ngo 的参数是一个整数，表示回退或者前进多少历史记录。\n\n```js\n// 在浏览器记录中前进一步，等同于 history.forward()\n$router.go(1)\n\n// 后退一步记录，等同于 history.back()\n$router.go(-1)\n\n// 前进 3 步记录\n$router.go(3)\n\n// 如果 history 记录不够用，那就默默地失败呗\n$router.go(-100)\n$router.go(100)\n```\n\n`router.replace(location)` =  `window.history.replaceState`\n跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录\n\n使用场景：不需要用户回退的情况，比如权限验证。\n\n```js\n// 路由名字\nthis.$router.replace('name_view');\n// 字符串路径\nthis.$router.replace('/name/view');\n// 路由对象\nthis.$router.replace({path:'/name/view'});\n// 命名路由带 params \nthis.$router.replace({name:'name_view',params:{age:24}});\n// path 和 query\nthis.$router.replace({path:'name_view',query:{age:24}});\n// this.$router.replace({path:'/name/view',params:{age:24}});\n```\n### 重定向和别名\n\n```js\n// 路由重定向:访问 /index ，重定向到 /\n{\n\tpath:'/index',\n\tredirect:'/'\n}\n```\nredirect 也可设置一个对象：\n\n```js\n{\n\tpath:'/index',\n\tredirect:{\n\t\tname:'home'\n\t}\n}\n```\n\nredirect  还可以设置为一个函数，传递一个参数 to,可根据该对象的不同值，重定向到不同的页面，返回一个 `命名路由 `  或者 `字符串路径 `  。\n\n```js\n{\n\tpath:'/index',\n\tredirect:to=>{\n\t\t// do something with to \n\t\treturn {\n\t\t\tname:'home'\n\t\t}\n\t}\n}\n```\n\n`to`  是一个包含路径参数的对象：\n\n```json\n{\n\tname: \"index\",\n\tmeta: {},// 路由元数据，可在全局导航守卫中获取该对象，然后不同页面设置不同的值，比如设置页面的标题\n\tpath: \"/index\", // 路由路径 解析为绝对路径 /a/b\n\thash: \"\", // 书签\n\tquery: {}, // 查询参数 /a?user=jack, $route.query.uer 的值为 jack\n\tparams: {}, //\n\tfullPath: \"/index\", // 完整路径\n\tmatched: [{ // 当前路由的所有嵌套路径片段的路由记录,路由记录就是路由的副本。\n\t\tpath: \"/index\",\n\t\tregex: {\n\t\t\tkeys: []\n\t\t},\n\t\tcomponents: {},\n\t\tinstances: {},\n\t\tname: \"index\",\n\t\tmeta: {},\n\t\tprops: {}\n\t}],\n    redirectedForm:''// 重定向来源的名字\n}\n```\n\n```js\nrouter.beforeEach((to, from, next) => {\n\tconsole.log('①，全局前置守卫,beforeEach');\n    //给每个页面设置不同的标题，标题就从 meta 中获取\n    //setTitle = (title)=>{\n\t// window.document.title=title||'admin'\n\t//}\n\tto.meta && setTitle(to.meta.title);\n\tnext(()=>{\n\t\tconsole.log('②，全局前置守卫,beforeEach');\n\t});\n});\n```\n#### 路径别名\n```js\n{\n\tname: 'home',\n\talias:'home_page',// 路径别名\n\tpath: '/',\n\tcomponent: Home\n}\n```","slug":"vue 路由基础","published":1,"updated":"2019-06-01T05:23:45.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccfa0016jwrnevypmdhi","content":"<p>vue 使用 vue-router 插件处理路由，路由是开发单页应用必须掌握的知识。</p>\n<a id=\"more\"></a>\n<p>[TOC]</p>\n<h2 id=\"什么是-vue-router\"><a class=\"markdownIt-Anchor\" href=\"#什么是-vue-router\"></a> 什么是 vue-router？</h2>\n<p>（1）<strong>vue-router</strong> 是 <strong>Vue</strong> 官方提供前端路由插件，借助它我们实现可以基于路由和组件的单页面应用。</p>\n<p>（2）它与传统的页面区别在于：</p>\n<ul>\n<li>传统的页面应用采用的是<code>后端路由</code>，即通过超链接来实现页面切换和跳转的。</li>\n<li>而在 <strong>vue-router</strong> 单页面应用中，则是通过路径之间的切换（实际上就是组件的切换）。</li>\n</ul>\n<h3 id=\"router-link-和-router-view-组件\"><a class=\"markdownIt-Anchor\" href=\"#router-link-和-router-view-组件\"></a> router-link 和 router-view 组件</h3>\n<p><code>router-link</code> 是一个<code>a</code>（链接）标签的封装，<code>router-view</code> 是路由视图，渲染 router-link 匹配到的组件，可配合使用<code>&lt;transition&gt;</code> 和 <code>&lt;keep-alive&gt;</code> 使用。</p>\n<p><a href=\"https://router.vuejs.org/zh/api/#router-link\" target=\"_blank\" rel=\"noopener\">更多详细信息</a></p>\n<h2 id=\"路由配置\"><a class=\"markdownIt-Anchor\" href=\"#路由配置\"></a> 路由配置</h2>\n<h3 id=\"动态路由\"><a class=\"markdownIt-Anchor\" href=\"#动态路由\"></a> 动态路由</h3>\n<p><code>$route</code>  是当前路由，可用<code>watch</code>在组件中监它的变化，有一个  <code>params</code>  属性，值一个包含动态路由的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  <span class=\"string\">'$route'</span>(to) &#123;</span><br><span class=\"line\">\t <span class=\"built_in\">console</span>.log(to);</span><br><span class=\"line\">\t <span class=\"comment\">//将路由的 params 属性赋值给组件的 data 属性</span></span><br><span class=\"line\">\t to.params &amp;&amp; to.params.view &amp;&amp; (<span class=\"keyword\">this</span>.effect = to.params.view)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://segmentfault.com/q/1010000009289159/a-1020000018573459\" target=\"_blank\" rel=\"noopener\">route 和 router 的区别</a></p>\n<p>路由对象为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'/argu/:name'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 使用 import 动态引入路径对应的组件，起到懒加载的作用</span></span><br><span class=\"line\">    component:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/ArguPage'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可在该路由的<code>组件</code>中这样获取name的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$route.params.name <span class=\"comment\">//给同一个组件设置传递不同的params，实现组件的复用</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌套路由\"><a class=\"markdownIt-Anchor\" href=\"#嵌套路由\"></a> 嵌套路由</h3>\n<p>在路由对象中添加一个  <code>children</code>  属性，值是一个数组，可包含多个子路由。<code>子路由 path 前面不能有 /</code>  。 父级路由对应的组件必须有路由出口，即 router-view。</p>\n<h3 id=\"命名路由\"><a class=\"markdownIt-Anchor\" href=\"#命名路由\"></a> 命名路由</h3>\n<p>路由对象中的 name 属性是路由的名字，可用该名字指定路径。<br>\n在 router-link 的 to 属性<code>动态绑定</code> <code>路由对象</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123;name:'home'&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"命名视图\"><a class=\"markdownIt-Anchor\" href=\"#命名视图\"></a> 命名视图</h3>\n<p>route-view 是路由视图，只有一个视图时，路由匹配的组件在该视图中渲染，多个视图则要对视图进行命名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 视图渲染组件,该组件内不需要房子任何内容，可写成只闭合标签--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 有多个路由视图需要匹配，则用命名视图 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sister\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">name</span>=<span class=\"string\">\"brother\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>路由对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'/name/view'</span>,</span><br><span class=\"line\">\tname:<span class=\"string\">'name_view'</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 注意命名视图的 components 和 组件的 component 的区别</span></span><br><span class=\"line\">\tcomponents:&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 不给 router-view 设置 name 属性，name 值就是 default</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/ChildPage'</span>),</span><br><span class=\"line\">\t\tsister:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/SisterPage'</span>),</span><br><span class=\"line\">\t\tbrother:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/BrotherPage'</span>),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"js-操作路由\"><a class=\"markdownIt-Anchor\" href=\"#js-操作路由\"></a> JS 操作路由</h3>\n<p>路由对象 $router 有多个函数<code>push</code>、<code>go</code>、<code>replace</code></p>\n<p>push 可导航到不同的页面，会将该路径进入历史记录。<br>\n<code>$router.push</code>  和  <code>window.history.pushSate</code>  一样。<br>\npush 可接受不同的参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串路径</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(<span class=\"string\">'home'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路由对象</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'home'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命名路由加参数</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'argu'</span>,<span class=\"attr\">params</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//  path 路由和 query</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'argu'</span>,<span class=\"attr\">query</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;&#125;);</span><br><span class=\"line\"><span class=\"comment\">//  path  和 params 不可一起使用，params 会被忽略</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'argu'</span>,<span class=\"attr\">params</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;&#125;);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'argu'</span>,<span class=\"attr\">query</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>\n<p>go 的参数是一个整数，表示回退或者前进多少历史记录。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在浏览器记录中前进一步，等同于 history.forward()</span></span><br><span class=\"line\">$router.go(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后退一步记录，等同于 history.back()</span></span><br><span class=\"line\">$router.go(<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前进 3 步记录</span></span><br><span class=\"line\">$router.go(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果 history 记录不够用，那就默默地失败呗</span></span><br><span class=\"line\">$router.go(<span class=\"number\">-100</span>)</span><br><span class=\"line\">$router.go(<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n<p><code>router.replace(location)</code> =  <code>window.history.replaceState</code><br>\n跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录</p>\n<p>使用场景：不需要用户回退的情况，比如权限验证。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由名字</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.replace(<span class=\"string\">'name_view'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 字符串路径</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.replace(<span class=\"string\">'/name/view'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 路由对象</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.replace(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'/name/view'</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 命名路由带 params </span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.replace(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'name_view'</span>,<span class=\"attr\">params</span>:&#123;<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// path 和 query</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.replace(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'name_view'</span>,<span class=\"attr\">query</span>:&#123;<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// this.$router.replace(&#123;path:'/name/view',params:&#123;age:24&#125;&#125;);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重定向和别名\"><a class=\"markdownIt-Anchor\" href=\"#重定向和别名\"></a> 重定向和别名</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由重定向:访问 /index ，重定向到 /</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'/index'</span>,</span><br><span class=\"line\">\tredirect:<span class=\"string\">'/'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>redirect 也可设置一个对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'/index'</span>,</span><br><span class=\"line\">\tredirect:&#123;</span><br><span class=\"line\">\t\tname:<span class=\"string\">'home'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>redirect  还可以设置为一个函数，传递一个参数 to,可根据该对象的不同值，重定向到不同的页面，返回一个 <code>命名路由</code>  或者 <code>字符串路径</code>  。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'/index'</span>,</span><br><span class=\"line\">\tredirect:<span class=\"function\"><span class=\"params\">to</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do something with to </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\tname:<span class=\"string\">'home'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>to</code>  是一个包含路径参数的对象：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname: \"index\",</span><br><span class=\"line\">\tmeta: &#123;&#125;,// 路由元数据，可在全局导航守卫中获取该对象，然后不同页面设置不同的值，比如设置页面的标题</span><br><span class=\"line\">\tpath: \"/index\", // 路由路径 解析为绝对路径 /a/b</span><br><span class=\"line\">\thash: \"\", // 书签</span><br><span class=\"line\">\tquery: &#123;&#125;, // 查询参数 /a?user=jack, $route.query.uer 的值为 jack</span><br><span class=\"line\">\tparams: &#123;&#125;, //</span><br><span class=\"line\">\tfullPath: \"/index\", // 完整路径</span><br><span class=\"line\">\tmatched: [&#123; // 当前路由的所有嵌套路径片段的路由记录,路由记录就是路由的副本。</span><br><span class=\"line\">\t\tpath: \"/index\",</span><br><span class=\"line\">\t\tregex: &#123;</span><br><span class=\"line\">\t\t\tkeys: []</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tcomponents: &#123;&#125;,</span><br><span class=\"line\">\t\tinstances: &#123;&#125;,</span><br><span class=\"line\">\t\tname: \"index\",</span><br><span class=\"line\">\t\tmeta: &#123;&#125;,</span><br><span class=\"line\">\t\tprops: &#123;&#125;</span><br><span class=\"line\">\t&#125;],</span><br><span class=\"line\">    redirectedForm:''// 重定向来源的名字</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'①，全局前置守卫,beforeEach'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//给每个页面设置不同的标题，标题就从 meta 中获取</span></span><br><span class=\"line\">    <span class=\"comment\">//setTitle = (title)=&gt;&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// window.document.title=title||'admin'</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\">\tto.meta &amp;&amp; setTitle(to.meta.title);</span><br><span class=\"line\">\tnext(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'②，全局前置守卫,beforeEach'</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"路径别名\"><a class=\"markdownIt-Anchor\" href=\"#路径别名\"></a> 路径别名</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'home'</span>,</span><br><span class=\"line\">\talias:<span class=\"string\">'home_page'</span>,<span class=\"comment\">// 路径别名</span></span><br><span class=\"line\">\tpath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">\tcomponent: Home</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>vue 使用 vue-router 插件处理路由，路由是开发单页应用必须掌握的知识。</p>","more":"<p>[TOC]</p>\n<h2 id=\"什么是-vue-router\"><a class=\"markdownIt-Anchor\" href=\"#什么是-vue-router\"></a> 什么是 vue-router？</h2>\n<p>（1）<strong>vue-router</strong> 是 <strong>Vue</strong> 官方提供前端路由插件，借助它我们实现可以基于路由和组件的单页面应用。</p>\n<p>（2）它与传统的页面区别在于：</p>\n<ul>\n<li>传统的页面应用采用的是<code>后端路由</code>，即通过超链接来实现页面切换和跳转的。</li>\n<li>而在 <strong>vue-router</strong> 单页面应用中，则是通过路径之间的切换（实际上就是组件的切换）。</li>\n</ul>\n<h3 id=\"router-link-和-router-view-组件\"><a class=\"markdownIt-Anchor\" href=\"#router-link-和-router-view-组件\"></a> router-link 和 router-view 组件</h3>\n<p><code>router-link</code> 是一个<code>a</code>（链接）标签的封装，<code>router-view</code> 是路由视图，渲染 router-link 匹配到的组件，可配合使用<code>&lt;transition&gt;</code> 和 <code>&lt;keep-alive&gt;</code> 使用。</p>\n<p><a href=\"https://router.vuejs.org/zh/api/#router-link\" target=\"_blank\" rel=\"noopener\">更多详细信息</a></p>\n<h2 id=\"路由配置\"><a class=\"markdownIt-Anchor\" href=\"#路由配置\"></a> 路由配置</h2>\n<h3 id=\"动态路由\"><a class=\"markdownIt-Anchor\" href=\"#动态路由\"></a> 动态路由</h3>\n<p><code>$route</code>  是当前路由，可用<code>watch</code>在组件中监它的变化，有一个  <code>params</code>  属性，值一个包含动态路由的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  <span class=\"string\">'$route'</span>(to) &#123;</span><br><span class=\"line\">\t <span class=\"built_in\">console</span>.log(to);</span><br><span class=\"line\">\t <span class=\"comment\">//将路由的 params 属性赋值给组件的 data 属性</span></span><br><span class=\"line\">\t to.params &amp;&amp; to.params.view &amp;&amp; (<span class=\"keyword\">this</span>.effect = to.params.view)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://segmentfault.com/q/1010000009289159/a-1020000018573459\" target=\"_blank\" rel=\"noopener\">route 和 router 的区别</a></p>\n<p>路由对象为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'/argu/:name'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 使用 import 动态引入路径对应的组件，起到懒加载的作用</span></span><br><span class=\"line\">    component:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/ArguPage'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可在该路由的<code>组件</code>中这样获取name的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$route.params.name <span class=\"comment\">//给同一个组件设置传递不同的params，实现组件的复用</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌套路由\"><a class=\"markdownIt-Anchor\" href=\"#嵌套路由\"></a> 嵌套路由</h3>\n<p>在路由对象中添加一个  <code>children</code>  属性，值是一个数组，可包含多个子路由。<code>子路由 path 前面不能有 /</code>  。 父级路由对应的组件必须有路由出口，即 router-view。</p>\n<h3 id=\"命名路由\"><a class=\"markdownIt-Anchor\" href=\"#命名路由\"></a> 命名路由</h3>\n<p>路由对象中的 name 属性是路由的名字，可用该名字指定路径。<br>\n在 router-link 的 to 属性<code>动态绑定</code> <code>路由对象</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123;name:'home'&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"命名视图\"><a class=\"markdownIt-Anchor\" href=\"#命名视图\"></a> 命名视图</h3>\n<p>route-view 是路由视图，只有一个视图时，路由匹配的组件在该视图中渲染，多个视图则要对视图进行命名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 视图渲染组件,该组件内不需要房子任何内容，可写成只闭合标签--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 有多个路由视图需要匹配，则用命名视图 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sister\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">name</span>=<span class=\"string\">\"brother\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>路由对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'/name/view'</span>,</span><br><span class=\"line\">\tname:<span class=\"string\">'name_view'</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 注意命名视图的 components 和 组件的 component 的区别</span></span><br><span class=\"line\">\tcomponents:&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 不给 router-view 设置 name 属性，name 值就是 default</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/ChildPage'</span>),</span><br><span class=\"line\">\t\tsister:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/SisterPage'</span>),</span><br><span class=\"line\">\t\tbrother:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/BrotherPage'</span>),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"js-操作路由\"><a class=\"markdownIt-Anchor\" href=\"#js-操作路由\"></a> JS 操作路由</h3>\n<p>路由对象 $router 有多个函数<code>push</code>、<code>go</code>、<code>replace</code></p>\n<p>push 可导航到不同的页面，会将该路径进入历史记录。<br>\n<code>$router.push</code>  和  <code>window.history.pushSate</code>  一样。<br>\npush 可接受不同的参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串路径</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(<span class=\"string\">'home'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路由对象</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'home'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命名路由加参数</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'argu'</span>,<span class=\"attr\">params</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//  path 路由和 query</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'argu'</span>,<span class=\"attr\">query</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;&#125;);</span><br><span class=\"line\"><span class=\"comment\">//  path  和 params 不可一起使用，params 会被忽略</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'argu'</span>,<span class=\"attr\">params</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;&#125;);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'argu'</span>,<span class=\"attr\">query</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>\n<p>go 的参数是一个整数，表示回退或者前进多少历史记录。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在浏览器记录中前进一步，等同于 history.forward()</span></span><br><span class=\"line\">$router.go(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后退一步记录，等同于 history.back()</span></span><br><span class=\"line\">$router.go(<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前进 3 步记录</span></span><br><span class=\"line\">$router.go(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果 history 记录不够用，那就默默地失败呗</span></span><br><span class=\"line\">$router.go(<span class=\"number\">-100</span>)</span><br><span class=\"line\">$router.go(<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n<p><code>router.replace(location)</code> =  <code>window.history.replaceState</code><br>\n跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录</p>\n<p>使用场景：不需要用户回退的情况，比如权限验证。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由名字</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.replace(<span class=\"string\">'name_view'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 字符串路径</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.replace(<span class=\"string\">'/name/view'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 路由对象</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.replace(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'/name/view'</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 命名路由带 params </span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.replace(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'name_view'</span>,<span class=\"attr\">params</span>:&#123;<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// path 和 query</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.replace(&#123;<span class=\"attr\">path</span>:<span class=\"string\">'name_view'</span>,<span class=\"attr\">query</span>:&#123;<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// this.$router.replace(&#123;path:'/name/view',params:&#123;age:24&#125;&#125;);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重定向和别名\"><a class=\"markdownIt-Anchor\" href=\"#重定向和别名\"></a> 重定向和别名</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由重定向:访问 /index ，重定向到 /</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'/index'</span>,</span><br><span class=\"line\">\tredirect:<span class=\"string\">'/'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>redirect 也可设置一个对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'/index'</span>,</span><br><span class=\"line\">\tredirect:&#123;</span><br><span class=\"line\">\t\tname:<span class=\"string\">'home'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>redirect  还可以设置为一个函数，传递一个参数 to,可根据该对象的不同值，重定向到不同的页面，返回一个 <code>命名路由</code>  或者 <code>字符串路径</code>  。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'/index'</span>,</span><br><span class=\"line\">\tredirect:<span class=\"function\"><span class=\"params\">to</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do something with to </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\tname:<span class=\"string\">'home'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>to</code>  是一个包含路径参数的对象：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname: \"index\",</span><br><span class=\"line\">\tmeta: &#123;&#125;,// 路由元数据，可在全局导航守卫中获取该对象，然后不同页面设置不同的值，比如设置页面的标题</span><br><span class=\"line\">\tpath: \"/index\", // 路由路径 解析为绝对路径 /a/b</span><br><span class=\"line\">\thash: \"\", // 书签</span><br><span class=\"line\">\tquery: &#123;&#125;, // 查询参数 /a?user=jack, $route.query.uer 的值为 jack</span><br><span class=\"line\">\tparams: &#123;&#125;, //</span><br><span class=\"line\">\tfullPath: \"/index\", // 完整路径</span><br><span class=\"line\">\tmatched: [&#123; // 当前路由的所有嵌套路径片段的路由记录,路由记录就是路由的副本。</span><br><span class=\"line\">\t\tpath: \"/index\",</span><br><span class=\"line\">\t\tregex: &#123;</span><br><span class=\"line\">\t\t\tkeys: []</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tcomponents: &#123;&#125;,</span><br><span class=\"line\">\t\tinstances: &#123;&#125;,</span><br><span class=\"line\">\t\tname: \"index\",</span><br><span class=\"line\">\t\tmeta: &#123;&#125;,</span><br><span class=\"line\">\t\tprops: &#123;&#125;</span><br><span class=\"line\">\t&#125;],</span><br><span class=\"line\">    redirectedForm:''// 重定向来源的名字</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'①，全局前置守卫,beforeEach'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//给每个页面设置不同的标题，标题就从 meta 中获取</span></span><br><span class=\"line\">    <span class=\"comment\">//setTitle = (title)=&gt;&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// window.document.title=title||'admin'</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\">\tto.meta &amp;&amp; setTitle(to.meta.title);</span><br><span class=\"line\">\tnext(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'②，全局前置守卫,beforeEach'</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"路径别名\"><a class=\"markdownIt-Anchor\" href=\"#路径别名\"></a> 路径别名</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'home'</span>,</span><br><span class=\"line\">\talias:<span class=\"string\">'home_page'</span>,<span class=\"comment\">// 路径别名</span></span><br><span class=\"line\">\tpath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">\tcomponent: Home</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"npm 语义化版本","date":"2019-06-16T13:39:58.000Z","_content":"为了在软件版本号中包含更多意义，反映代码所做的修改，产生了语义化版本，软件的使用者能从版本号中推测软件做的修改。npm 包使用语义化版控制，我们可安装一定版本范围的依赖，npm 会选择和你指定的版本相**匹配**的**(latest)最新版本**安装。\n\n<!--more-->\n\nnpm 的版本号由三部分组成：\n`主版本号`、`次版本号`、`补丁版本号`。变更不同的版本号，表示不同的意义：\n- 主版本号（major）：软件做了不兼容的变更（breaking change 重大变更）；\n-  次版本号（minor）：添加功能或者废弃功能，向下兼容；\n-  补丁版本号（patch）：bug 修复，向下兼容。\n\n有时候为了表达更加确切的版本，还会在版本号后面添加**标签**或者**扩展**，来说明是预发布版本或者测试版本等。比如 **3.2.3-beta-3**。\n\n常见的标签有 :\n\n|标签|意义|补充|\n|---|---|---|\n|demo|demo版本|可能用于验证问题的版本|\n|dev|开发版|开发阶段用的，bug 多，体积较大等特点，功能不完善|\n|alpha|α版本|用于内部交流或者测试人员测试|bug较多|\n|beta|测试版(β版本)|较α版本，有较大的改进，但是还是有bug|\n|gamma|（γ）伽马版本|较α和β版本有很大的改进，与稳定版相差无几，用户可使用|\n|trial|试用版本|本软件通常都有时间限制，过期之后用户如果希望继续使用，一般得交纳一定的费用进行注册或购买。有些试用版软件还在功能上做了一定的限制。|\n|stable|稳定版||\n|csp|内容安装版本|js库常用|\n|latest|最新版本|不指定版本和标签，npm 默认安装最新版|\n\n[更多关于标签的内容](https://docs.npmjs.com/cli/dist-tag)\n查看标签：\n\n```bash\nnpm dist-tags ls <pkg>\n```\n```bash \nnpm dist-tags ls vue\n```\n得到：\n```bash \nbeta: 2.6.0-beta.3\ncsp: 1.0.28-csp\nlatest: 2.6.10\n```\n安装带标签的版本\n```bash \nnpm i <pkg>@<tag>\n```\n```bash\nnpm i vue@beta # 安装 2.6.0-beta.3\n```\n\n## 版本号变更规则\n\n1. 版本号只升不降，不得在数字前加0，比如 2.01.2 不允许的；\n2. 0.y.z，处于开发阶段的版本；\n3. 第一个正式版版本往往命名为 1.0.0；\n4. 先行版本必须在补丁版本之后添加，比如 2.3.7-0,- 后面的是先行版本；\n5. 版本的比较依次比较**主版本**→**次版本**→**补丁版本**→**先行版本**，直到第一个能得出比较结果为止。\n6. 不小心把一个**不兼容的改版**当成了**次版本号**发行了该怎么办？一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并**发行一个新的次版本号**来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。\n\n\n[NPM版本计算器](https://semver.npmjs.com/)\n\n##  如何处理即将弃用的功能？\n\n弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。但当你弃用公共API的一部分时，你应该做两件事：\n（1）更新**文档**以便使用者知道这个变化。\n（2）发行不包含弃用功能的**次版本**。在新的主版本中完全移除弃用功能前，至少应有一个不包含弃用功能的副版本发布，以便使用者能够平滑过渡到新API。\n\n如何更新版本号？不用手动修改 package.json。而是用如下命令：\n```bash\nnpm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]\n```\n\n1. **newversion**: 直接给一个版本号；\n2. **major**:主版本增加1；\n3. **premajor**:预备主版本，主版本增加1，增加先行版本号；\n4. **prelease**:预先发布版本，先行版本号增加1；\n\n## git 和 npm version 结合\n\n### 手动更改版本号\n\n执行 `npm version <version> -m 'xx %s xx'` 改变npm版本的同时，会执行一次 `git commt  -m 'xx %s xx'`并用版本号打一个**tag**，%s 会替换成版本号，前提是版本库是**干净的（clean）**。\n\n### 自动更新版本\n\n在 `.git/hooks`目录内，新建`post-commit`,输入以下内容：\n```js\n#!/bin/sh\nCOMMIT_MSG=\"$(git log --pretty=format:\"%s\" -1 head)\"\necho \"$COMMIT_MSG\" | grep  -q  \"^[0-9]\"\nif [ $? -ne 0 ];then\n   # 自动修改 patch\n  echo $(npm version patch)\nfi\n```\n在执行 `git commit  -m 'message'`后，会检测message是否是版本号（y.x.z的形式），不是，则执行 `npm version patch`更新补丁版本，打一个tag。\n\n如果想自动修改`次版本`，修改 post-commit 的内容即可。\n## 版本运算符\n\n版本运算符指定了一定范围的版本。主要有**~**、**^**、**-**、**<**、**<=**、**>**、**>=**、**=**版本运算符。\n\n### ~ 版本号 ----- 指定主版本号或者次版本号相同\n\n~ + **只含主版本** ---  主版本相同；\n~ + **含有次版本** ---  主版本和次版本号相同。\n\n|版本范围|匹配版本|\n|---|---|\n|\\~3|3.x 或者 3.0.0 <= v < 4.0.0|\n|~3.1|3.1.x 或者 3.1.0 <= v <3.2.0|\n|~3.1.2|3.1.2 < v < 3.2.0|\n\n指定的版本范围含有预发布版本，只会匹配和完整版本号相同的预发布版本。\n~3.1.3-beta.2 匹配 3.1.3-beat.3 不匹配 3.1.4-beat-2\n\n```bash\nnpm i lodash@~3 # 安装 3.10.1\nnpm i lodash@~3.9 # 安装 3.9.3\nnpm i lodash@~3.9.1 # 安装 3.9.3\nnpm i lodash@~3.8.0 # 安装 3.8.0\n```\n\n### ^ 版本号 --- 第一个*非零* 版本号相同\n\n|版本范围|匹配版本|补充|\n|----|----|----|\n|^3.1.5|3.1.5 <= v < 4.0.0||\n|^0.3.6|0.3.6 <= v < 0.4.0||\n|^0.0.2|0.0.2 <= v < 0.0.3||\n|^3.x.x|3.0.0 <= v < 4.0.0|版本号缺少的位置，会被 0 填充|\n|^4.2.x|4.2.0 <= v < 4.3.0||\n\nnpm 安装包时，默认使用 ^ 匹配版本。\n\n安装主版本号为 3 的最新版本：\n\n```bash\nnpm i lodash@^3 # 安装 3.10.1\nnpm i lodash@^3.9 # 安装 3.10.1\nnpm i lodash@^3.8.0 # 安装 3.10.1\n```\n### ~  vs ^\n\n|版本范围|含义|匹配的版本|说明|\n|----|----|----|----|\n|~3.3.0|与3.3.0相似|3.3.0 <= v < 3.4.0|主版本和次版本相同|\n|^3.3.0|与3.3.0兼容|3.3.0 <= v < 4|主版本相同|\n\n同一个版本号，^ 能匹配的范围大些，更加激进。\n例子\n```bash\nnpm i lodash@^3.3.0 # 安装 3.10.1\nnpm i lodash@~3.3.0 # 安装 3.3.1\n```\n**~** 和 ≈ 差不多，可将 ~ 理解成**相似**，这样就分辨了和理解了，~指定的是**相似版本**。\n**^** 可理解成**兼容版本**。\n\n### - 指定精确范围\n\n|版本范围|匹配版本|补充|\n|----|----|----|\n|2.0.0 - 3.2.7|2.0.0 <= v <= 3.2.7|- 前后有空格|\n|0.4 - 3|0.4.0 <= v <= 3.0.0|缺少的版本号，被 0 填充|\n\n```bash\nnpm i vue@\"1 - 1.9\" # 安装 1.0.28\n```\n\n### 版本号比较器\n\n|版本范围|匹配版本|补充|\n|:----:|:---:|:--:|\n|<2.2.0|小于2.2.0 的版本||\n|<=2.0.0 |小于等于 2.0.0 的版本|\n|\\>4.2.0 |大于4.2.0 的版本|\n|\\>=4.2.0|大于等于 4.2.0  的版本|\n|=4.3.0| 等于 4.3.0 的版本|\n\n\\ 是转义字符。\n```bash\nnpm i lodash@\\<3.5 # 安装 3.4.0\nnpm i lodash@\\<=3.5 # 安装 3.5.0\nnpm i lodash@\\>3.5 # 安装 4.17.11\nnpm i lodash@\\>=3.5 # 安装 4.17.11\nnpm i vue@\">1 <2.3\" # 安装 2.2.6\n```\n### 分组 || (几乎不用)\n\n|版本范围|匹配版本|\n|:---:|:---:|\n|~2 \\|\\| ^0.7|匹配2.0.2<= v < 3.0.0 或者 0.7 <= v <1.0.0|\n\n```bash\nnpm i vue@\"^0.7 || ~2\" # 安装 2.6.10 最新的版本\n```\n\n## 参考\n[依赖的版本](https://yarnpkg.com/lang/zh-hans/docs/dependency-versions/)\n[版本号管理策略&&使用npm管理项目版本号](http://buzhundong.com/post/%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5-%E4%BD%BF%E7%94%A8npm%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E7%89%88%E6%9C%AC%E5%8F%B7.html)\n[语义化版本2.0](https://semver.org/lang/zh-TW/#%E5%9C%A8-0yz-%E5%88%9D%E5%A7%8B%E9%96%8B%E7%99%BC%E9%9A%8E%E6%AE%B5%E6%88%91%E8%A9%B2%E5%A6%82%E4%BD%95%E9%80%B2%E8%A1%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6)\n[whats-the-difference-between-tilde-and-caret-in-package-json](https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json)","source":"_posts/npm-语义化版本.md","raw":"---\ntitle: npm 语义化版本\ndate: 2019-06-16 21:39:58\ntags:\n- npm\ncategories:\n- [node]\n---\n为了在软件版本号中包含更多意义，反映代码所做的修改，产生了语义化版本，软件的使用者能从版本号中推测软件做的修改。npm 包使用语义化版控制，我们可安装一定版本范围的依赖，npm 会选择和你指定的版本相**匹配**的**(latest)最新版本**安装。\n\n<!--more-->\n\nnpm 的版本号由三部分组成：\n`主版本号`、`次版本号`、`补丁版本号`。变更不同的版本号，表示不同的意义：\n- 主版本号（major）：软件做了不兼容的变更（breaking change 重大变更）；\n-  次版本号（minor）：添加功能或者废弃功能，向下兼容；\n-  补丁版本号（patch）：bug 修复，向下兼容。\n\n有时候为了表达更加确切的版本，还会在版本号后面添加**标签**或者**扩展**，来说明是预发布版本或者测试版本等。比如 **3.2.3-beta-3**。\n\n常见的标签有 :\n\n|标签|意义|补充|\n|---|---|---|\n|demo|demo版本|可能用于验证问题的版本|\n|dev|开发版|开发阶段用的，bug 多，体积较大等特点，功能不完善|\n|alpha|α版本|用于内部交流或者测试人员测试|bug较多|\n|beta|测试版(β版本)|较α版本，有较大的改进，但是还是有bug|\n|gamma|（γ）伽马版本|较α和β版本有很大的改进，与稳定版相差无几，用户可使用|\n|trial|试用版本|本软件通常都有时间限制，过期之后用户如果希望继续使用，一般得交纳一定的费用进行注册或购买。有些试用版软件还在功能上做了一定的限制。|\n|stable|稳定版||\n|csp|内容安装版本|js库常用|\n|latest|最新版本|不指定版本和标签，npm 默认安装最新版|\n\n[更多关于标签的内容](https://docs.npmjs.com/cli/dist-tag)\n查看标签：\n\n```bash\nnpm dist-tags ls <pkg>\n```\n```bash \nnpm dist-tags ls vue\n```\n得到：\n```bash \nbeta: 2.6.0-beta.3\ncsp: 1.0.28-csp\nlatest: 2.6.10\n```\n安装带标签的版本\n```bash \nnpm i <pkg>@<tag>\n```\n```bash\nnpm i vue@beta # 安装 2.6.0-beta.3\n```\n\n## 版本号变更规则\n\n1. 版本号只升不降，不得在数字前加0，比如 2.01.2 不允许的；\n2. 0.y.z，处于开发阶段的版本；\n3. 第一个正式版版本往往命名为 1.0.0；\n4. 先行版本必须在补丁版本之后添加，比如 2.3.7-0,- 后面的是先行版本；\n5. 版本的比较依次比较**主版本**→**次版本**→**补丁版本**→**先行版本**，直到第一个能得出比较结果为止。\n6. 不小心把一个**不兼容的改版**当成了**次版本号**发行了该怎么办？一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并**发行一个新的次版本号**来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。\n\n\n[NPM版本计算器](https://semver.npmjs.com/)\n\n##  如何处理即将弃用的功能？\n\n弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。但当你弃用公共API的一部分时，你应该做两件事：\n（1）更新**文档**以便使用者知道这个变化。\n（2）发行不包含弃用功能的**次版本**。在新的主版本中完全移除弃用功能前，至少应有一个不包含弃用功能的副版本发布，以便使用者能够平滑过渡到新API。\n\n如何更新版本号？不用手动修改 package.json。而是用如下命令：\n```bash\nnpm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]\n```\n\n1. **newversion**: 直接给一个版本号；\n2. **major**:主版本增加1；\n3. **premajor**:预备主版本，主版本增加1，增加先行版本号；\n4. **prelease**:预先发布版本，先行版本号增加1；\n\n## git 和 npm version 结合\n\n### 手动更改版本号\n\n执行 `npm version <version> -m 'xx %s xx'` 改变npm版本的同时，会执行一次 `git commt  -m 'xx %s xx'`并用版本号打一个**tag**，%s 会替换成版本号，前提是版本库是**干净的（clean）**。\n\n### 自动更新版本\n\n在 `.git/hooks`目录内，新建`post-commit`,输入以下内容：\n```js\n#!/bin/sh\nCOMMIT_MSG=\"$(git log --pretty=format:\"%s\" -1 head)\"\necho \"$COMMIT_MSG\" | grep  -q  \"^[0-9]\"\nif [ $? -ne 0 ];then\n   # 自动修改 patch\n  echo $(npm version patch)\nfi\n```\n在执行 `git commit  -m 'message'`后，会检测message是否是版本号（y.x.z的形式），不是，则执行 `npm version patch`更新补丁版本，打一个tag。\n\n如果想自动修改`次版本`，修改 post-commit 的内容即可。\n## 版本运算符\n\n版本运算符指定了一定范围的版本。主要有**~**、**^**、**-**、**<**、**<=**、**>**、**>=**、**=**版本运算符。\n\n### ~ 版本号 ----- 指定主版本号或者次版本号相同\n\n~ + **只含主版本** ---  主版本相同；\n~ + **含有次版本** ---  主版本和次版本号相同。\n\n|版本范围|匹配版本|\n|---|---|\n|\\~3|3.x 或者 3.0.0 <= v < 4.0.0|\n|~3.1|3.1.x 或者 3.1.0 <= v <3.2.0|\n|~3.1.2|3.1.2 < v < 3.2.0|\n\n指定的版本范围含有预发布版本，只会匹配和完整版本号相同的预发布版本。\n~3.1.3-beta.2 匹配 3.1.3-beat.3 不匹配 3.1.4-beat-2\n\n```bash\nnpm i lodash@~3 # 安装 3.10.1\nnpm i lodash@~3.9 # 安装 3.9.3\nnpm i lodash@~3.9.1 # 安装 3.9.3\nnpm i lodash@~3.8.0 # 安装 3.8.0\n```\n\n### ^ 版本号 --- 第一个*非零* 版本号相同\n\n|版本范围|匹配版本|补充|\n|----|----|----|\n|^3.1.5|3.1.5 <= v < 4.0.0||\n|^0.3.6|0.3.6 <= v < 0.4.0||\n|^0.0.2|0.0.2 <= v < 0.0.3||\n|^3.x.x|3.0.0 <= v < 4.0.0|版本号缺少的位置，会被 0 填充|\n|^4.2.x|4.2.0 <= v < 4.3.0||\n\nnpm 安装包时，默认使用 ^ 匹配版本。\n\n安装主版本号为 3 的最新版本：\n\n```bash\nnpm i lodash@^3 # 安装 3.10.1\nnpm i lodash@^3.9 # 安装 3.10.1\nnpm i lodash@^3.8.0 # 安装 3.10.1\n```\n### ~  vs ^\n\n|版本范围|含义|匹配的版本|说明|\n|----|----|----|----|\n|~3.3.0|与3.3.0相似|3.3.0 <= v < 3.4.0|主版本和次版本相同|\n|^3.3.0|与3.3.0兼容|3.3.0 <= v < 4|主版本相同|\n\n同一个版本号，^ 能匹配的范围大些，更加激进。\n例子\n```bash\nnpm i lodash@^3.3.0 # 安装 3.10.1\nnpm i lodash@~3.3.0 # 安装 3.3.1\n```\n**~** 和 ≈ 差不多，可将 ~ 理解成**相似**，这样就分辨了和理解了，~指定的是**相似版本**。\n**^** 可理解成**兼容版本**。\n\n### - 指定精确范围\n\n|版本范围|匹配版本|补充|\n|----|----|----|\n|2.0.0 - 3.2.7|2.0.0 <= v <= 3.2.7|- 前后有空格|\n|0.4 - 3|0.4.0 <= v <= 3.0.0|缺少的版本号，被 0 填充|\n\n```bash\nnpm i vue@\"1 - 1.9\" # 安装 1.0.28\n```\n\n### 版本号比较器\n\n|版本范围|匹配版本|补充|\n|:----:|:---:|:--:|\n|<2.2.0|小于2.2.0 的版本||\n|<=2.0.0 |小于等于 2.0.0 的版本|\n|\\>4.2.0 |大于4.2.0 的版本|\n|\\>=4.2.0|大于等于 4.2.0  的版本|\n|=4.3.0| 等于 4.3.0 的版本|\n\n\\ 是转义字符。\n```bash\nnpm i lodash@\\<3.5 # 安装 3.4.0\nnpm i lodash@\\<=3.5 # 安装 3.5.0\nnpm i lodash@\\>3.5 # 安装 4.17.11\nnpm i lodash@\\>=3.5 # 安装 4.17.11\nnpm i vue@\">1 <2.3\" # 安装 2.2.6\n```\n### 分组 || (几乎不用)\n\n|版本范围|匹配版本|\n|:---:|:---:|\n|~2 \\|\\| ^0.7|匹配2.0.2<= v < 3.0.0 或者 0.7 <= v <1.0.0|\n\n```bash\nnpm i vue@\"^0.7 || ~2\" # 安装 2.6.10 最新的版本\n```\n\n## 参考\n[依赖的版本](https://yarnpkg.com/lang/zh-hans/docs/dependency-versions/)\n[版本号管理策略&&使用npm管理项目版本号](http://buzhundong.com/post/%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5-%E4%BD%BF%E7%94%A8npm%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E7%89%88%E6%9C%AC%E5%8F%B7.html)\n[语义化版本2.0](https://semver.org/lang/zh-TW/#%E5%9C%A8-0yz-%E5%88%9D%E5%A7%8B%E9%96%8B%E7%99%BC%E9%9A%8E%E6%AE%B5%E6%88%91%E8%A9%B2%E5%A6%82%E4%BD%95%E9%80%B2%E8%A1%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6)\n[whats-the-difference-between-tilde-and-caret-in-package-json](https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json)","slug":"npm-语义化版本","published":1,"updated":"2019-06-16T13:59:28.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccfd0018jwrnbb4aehlg","content":"<p>为了在软件版本号中包含更多意义，反映代码所做的修改，产生了语义化版本，软件的使用者能从版本号中推测软件做的修改。npm 包使用语义化版控制，我们可安装一定版本范围的依赖，npm 会选择和你指定的版本相<strong>匹配</strong>的**(latest)最新版本**安装。</p>\n<a id=\"more\"></a>\n<p>npm 的版本号由三部分组成：<br>\n<code>主版本号</code>、<code>次版本号</code>、<code>补丁版本号</code>。变更不同的版本号，表示不同的意义：</p>\n<ul>\n<li>主版本号（major）：软件做了不兼容的变更（breaking change 重大变更）；</li>\n<li>次版本号（minor）：添加功能或者废弃功能，向下兼容；</li>\n<li>补丁版本号（patch）：bug 修复，向下兼容。</li>\n</ul>\n<p>有时候为了表达更加确切的版本，还会在版本号后面添加<strong>标签</strong>或者<strong>扩展</strong>，来说明是预发布版本或者测试版本等。比如 <strong>3.2.3-beta-3</strong>。</p>\n<p>常见的标签有 :</p>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>意义</th>\n<th>补充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>demo</td>\n<td>demo版本</td>\n<td>可能用于验证问题的版本</td>\n</tr>\n<tr>\n<td>dev</td>\n<td>开发版</td>\n<td>开发阶段用的，bug 多，体积较大等特点，功能不完善</td>\n</tr>\n<tr>\n<td>alpha</td>\n<td>α版本</td>\n<td>用于内部交流或者测试人员测试</td>\n</tr>\n<tr>\n<td>beta</td>\n<td>测试版(β版本)</td>\n<td>较α版本，有较大的改进，但是还是有bug</td>\n</tr>\n<tr>\n<td>gamma</td>\n<td>（γ）伽马版本</td>\n<td>较α和β版本有很大的改进，与稳定版相差无几，用户可使用</td>\n</tr>\n<tr>\n<td>trial</td>\n<td>试用版本</td>\n<td>本软件通常都有时间限制，过期之后用户如果希望继续使用，一般得交纳一定的费用进行注册或购买。有些试用版软件还在功能上做了一定的限制。</td>\n</tr>\n<tr>\n<td>stable</td>\n<td>稳定版</td>\n<td></td>\n</tr>\n<tr>\n<td>csp</td>\n<td>内容安装版本</td>\n<td>js库常用</td>\n</tr>\n<tr>\n<td>latest</td>\n<td>最新版本</td>\n<td>不指定版本和标签，npm 默认安装最新版</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://docs.npmjs.com/cli/dist-tag\" target=\"_blank\" rel=\"noopener\">更多关于标签的内容</a><br>\n查看标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm dist-tags ls &lt;pkg&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm dist-tags ls vue</span><br></pre></td></tr></table></figure>\n<p>得到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beta: 2.6.0-beta.3</span><br><span class=\"line\">csp: 1.0.28-csp</span><br><span class=\"line\">latest: 2.6.10</span><br></pre></td></tr></table></figure>\n<p>安装带标签的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i &lt;pkg&gt;@&lt;tag&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue@beta <span class=\"comment\"># 安装 2.6.0-beta.3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"版本号变更规则\"><a class=\"markdownIt-Anchor\" href=\"#版本号变更规则\"></a> 版本号变更规则</h2>\n<ol>\n<li>版本号只升不降，不得在数字前加0，比如 2.01.2 不允许的；</li>\n<li>0.y.z，处于开发阶段的版本；</li>\n<li>第一个正式版版本往往命名为 1.0.0；</li>\n<li>先行版本必须在补丁版本之后添加，比如 2.3.7-0,- 后面的是先行版本；</li>\n<li>版本的比较依次比较<strong>主版本</strong>→<strong>次版本</strong>→<strong>补丁版本</strong>→<strong>先行版本</strong>，直到第一个能得出比较结果为止。</li>\n<li>不小心把一个<strong>不兼容的改版</strong>当成了<strong>次版本号</strong>发行了该怎么办？一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并<strong>发行一个新的次版本号</strong>来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。</li>\n</ol>\n<p><a href=\"https://semver.npmjs.com/\" target=\"_blank\" rel=\"noopener\">NPM版本计算器</a></p>\n<h2 id=\"如何处理即将弃用的功能\"><a class=\"markdownIt-Anchor\" href=\"#如何处理即将弃用的功能\"></a> 如何处理即将弃用的功能？</h2>\n<p>弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。但当你弃用公共API的一部分时，你应该做两件事：<br>\n（1）更新<strong>文档</strong>以便使用者知道这个变化。<br>\n（2）发行不包含弃用功能的<strong>次版本</strong>。在新的主版本中完全移除弃用功能前，至少应有一个不包含弃用功能的副版本发布，以便使用者能够平滑过渡到新API。</p>\n<p>如何更新版本号？不用手动修改 package.json。而是用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>newversion</strong>: 直接给一个版本号；</li>\n<li><strong>major</strong>:主版本增加1；</li>\n<li><strong>premajor</strong>:预备主版本，主版本增加1，增加先行版本号；</li>\n<li><strong>prelease</strong>:预先发布版本，先行版本号增加1；</li>\n</ol>\n<h2 id=\"git-和-npm-version-结合\"><a class=\"markdownIt-Anchor\" href=\"#git-和-npm-version-结合\"></a> git 和 npm version 结合</h2>\n<h3 id=\"手动更改版本号\"><a class=\"markdownIt-Anchor\" href=\"#手动更改版本号\"></a> 手动更改版本号</h3>\n<p>执行 <code>npm version &lt;version&gt; -m 'xx %s xx'</code> 改变npm版本的同时，会执行一次 <code>git commt -m 'xx %s xx'</code>并用版本号打一个<strong>tag</strong>，%s 会替换成版本号，前提是版本库是<strong>干净的（clean）</strong>。</p>\n<h3 id=\"自动更新版本\"><a class=\"markdownIt-Anchor\" href=\"#自动更新版本\"></a> 自动更新版本</h3>\n<p>在 <code>.git/hooks</code>目录内，新建<code>post-commit</code>,输入以下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">COMMIT_MSG=<span class=\"string\">\"$(git log --pretty=format:\"</span>%s<span class=\"string\">\" -1 head)\"</span></span><br><span class=\"line\">echo <span class=\"string\">\"$COMMIT_MSG\"</span> | grep  -q  <span class=\"string\">\"^[0-9]\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -ne <span class=\"number\">0</span> ];then</span><br><span class=\"line\">   # 自动修改 patch</span><br><span class=\"line\">  echo $(npm version patch)</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>在执行 <code>git commit -m 'message'</code>后，会检测message是否是版本号（y.x.z的形式），不是，则执行 <code>npm version patch</code>更新补丁版本，打一个tag。</p>\n<p>如果想自动修改<code>次版本</code>，修改 post-commit 的内容即可。</p>\n<h2 id=\"版本运算符\"><a class=\"markdownIt-Anchor\" href=\"#版本运算符\"></a> 版本运算符</h2>\n<p>版本运算符指定了一定范围的版本。主要有**~<strong>、</strong>^<strong>、</strong>-<strong>、</strong>&lt;<strong>、</strong>&lt;=<strong>、</strong>&gt;<strong>、</strong>&gt;=<strong>、</strong>=**版本运算符。</p>\n<h3 id=\"~-版本号-指定主版本号或者次版本号相同\"><a class=\"markdownIt-Anchor\" href=\"#~-版本号-指定主版本号或者次版本号相同\"></a> ~ 版本号 ----- 指定主版本号或者次版本号相同</h3>\n<dl>\n<dt>~ + <strong>只含主版本</strong> —  主版本相同；</dt>\n<dd>\n<ul>\n<li><strong>含有次版本</strong> —  主版本和次版本号相同。</li>\n</ul>\n</dd>\n</dl>\n<table>\n<thead>\n<tr>\n<th>版本范围</th>\n<th>匹配版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>~3</td>\n<td>3.x 或者 3.0.0 &lt;= v &lt; 4.0.0</td>\n</tr>\n<tr>\n<td>~3.1</td>\n<td>3.1.x 或者 3.1.0 &lt;= v ❤️.2.0</td>\n</tr>\n<tr>\n<td>~3.1.2</td>\n<td>3.1.2 &lt; v &lt; 3.2.0</td>\n</tr>\n</tbody>\n</table>\n<p>指定的版本范围含有预发布版本，只会匹配和完整版本号相同的预发布版本。<br>\n~3.1.3-beta.2 匹配 3.1.3-beat.3 不匹配 3.1.4-beat-2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i lodash@~3 <span class=\"comment\"># 安装 3.10.1</span></span><br><span class=\"line\">npm i lodash@~3.9 <span class=\"comment\"># 安装 3.9.3</span></span><br><span class=\"line\">npm i lodash@~3.9.1 <span class=\"comment\"># 安装 3.9.3</span></span><br><span class=\"line\">npm i lodash@~3.8.0 <span class=\"comment\"># 安装 3.8.0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"版本号-第一个非零-版本号相同\"><a class=\"markdownIt-Anchor\" href=\"#版本号-第一个非零-版本号相同\"></a> ^ 版本号 — 第一个<em>非零</em> 版本号相同</h3>\n<table>\n<thead>\n<tr>\n<th>版本范围</th>\n<th>匹配版本</th>\n<th>补充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^3.1.5</td>\n<td>3.1.5 &lt;= v &lt; 4.0.0</td>\n<td></td>\n</tr>\n<tr>\n<td>^0.3.6</td>\n<td>0.3.6 &lt;= v &lt; 0.4.0</td>\n<td></td>\n</tr>\n<tr>\n<td>^0.0.2</td>\n<td>0.0.2 &lt;= v &lt; 0.0.3</td>\n<td></td>\n</tr>\n<tr>\n<td>^3.x.x</td>\n<td>3.0.0 &lt;= v &lt; 4.0.0</td>\n<td>版本号缺少的位置，会被 0 填充</td>\n</tr>\n<tr>\n<td>^4.2.x</td>\n<td>4.2.0 &lt;= v &lt; 4.3.0</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>npm 安装包时，默认使用 ^ 匹配版本。</p>\n<p>安装主版本号为 3 的最新版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i lodash@^3 <span class=\"comment\"># 安装 3.10.1</span></span><br><span class=\"line\">npm i lodash@^3.9 <span class=\"comment\"># 安装 3.10.1</span></span><br><span class=\"line\">npm i lodash@^3.8.0 <span class=\"comment\"># 安装 3.10.1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"~-vs\"><a class=\"markdownIt-Anchor\" href=\"#~-vs\"></a> ~  vs ^</h3>\n<table>\n<thead>\n<tr>\n<th>版本范围</th>\n<th>含义</th>\n<th>匹配的版本</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>~3.3.0</td>\n<td>与3.3.0相似</td>\n<td>3.3.0 &lt;= v &lt; 3.4.0</td>\n<td>主版本和次版本相同</td>\n</tr>\n<tr>\n<td>^3.3.0</td>\n<td>与3.3.0兼容</td>\n<td>3.3.0 &lt;= v &lt; 4</td>\n<td>主版本相同</td>\n</tr>\n</tbody>\n</table>\n<p>同一个版本号，^ 能匹配的范围大些，更加激进。<br>\n例子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i lodash@^3.3.0 <span class=\"comment\"># 安装 3.10.1</span></span><br><span class=\"line\">npm i lodash@~3.3.0 <span class=\"comment\"># 安装 3.3.1</span></span><br></pre></td></tr></table></figure>\n<p><strong>~</strong> 和 ≈ 差不多，可将 ~ 理解成<strong>相似</strong>，这样就分辨了和理解了，~指定的是<strong>相似版本</strong>。<br>\n<strong>^</strong> 可理解成<strong>兼容版本</strong>。</p>\n<h3 id=\"-指定精确范围\"><a class=\"markdownIt-Anchor\" href=\"#-指定精确范围\"></a> - 指定精确范围</h3>\n<table>\n<thead>\n<tr>\n<th>版本范围</th>\n<th>匹配版本</th>\n<th>补充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2.0.0 - 3.2.7</td>\n<td>2.0.0 &lt;= v &lt;= 3.2.7</td>\n<td>- 前后有空格</td>\n</tr>\n<tr>\n<td>0.4 - 3</td>\n<td>0.4.0 &lt;= v &lt;= 3.0.0</td>\n<td>缺少的版本号，被 0 填充</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue@<span class=\"string\">\"1 - 1.9\"</span> <span class=\"comment\"># 安装 1.0.28</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"版本号比较器\"><a class=\"markdownIt-Anchor\" href=\"#版本号比较器\"></a> 版本号比较器</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">版本范围</th>\n<th style=\"text-align:center\">匹配版本</th>\n<th style=\"text-align:center\">补充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&lt;2.2.0</td>\n<td style=\"text-align:center\">小于2.2.0 的版本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=2.0.0</td>\n<td style=\"text-align:center\">小于等于 2.0.0 的版本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;4.2.0</td>\n<td style=\"text-align:center\">大于4.2.0 的版本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=4.2.0</td>\n<td style=\"text-align:center\">大于等于 4.2.0  的版本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">=4.3.0</td>\n<td style=\"text-align:center\">等于 4.3.0 的版本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>\\ 是转义字符。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i lodash@\\&lt;3.5 <span class=\"comment\"># 安装 3.4.0</span></span><br><span class=\"line\">npm i lodash@\\&lt;=3.5 <span class=\"comment\"># 安装 3.5.0</span></span><br><span class=\"line\">npm i lodash@\\&gt;3.5 <span class=\"comment\"># 安装 4.17.11</span></span><br><span class=\"line\">npm i lodash@\\&gt;=3.5 <span class=\"comment\"># 安装 4.17.11</span></span><br><span class=\"line\">npm i vue@<span class=\"string\">\"&gt;1 &lt;2.3\"</span> <span class=\"comment\"># 安装 2.2.6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"分组-几乎不用\"><a class=\"markdownIt-Anchor\" href=\"#分组-几乎不用\"></a> 分组 || (几乎不用)</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">版本范围</th>\n<th style=\"text-align:center\">匹配版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">~2 || ^0.7</td>\n<td style=\"text-align:center\">匹配2.0.2&lt;= v &lt; 3.0.0 或者 0.7 &lt;= v &lt;1.0.0</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue@<span class=\"string\">\"^0.7 || ~2\"</span> <span class=\"comment\"># 安装 2.6.10 最新的版本</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"https://yarnpkg.com/lang/zh-hans/docs/dependency-versions/\" target=\"_blank\" rel=\"noopener\">依赖的版本</a><br>\n<a href=\"http://buzhundong.com/post/%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5-%E4%BD%BF%E7%94%A8npm%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E7%89%88%E6%9C%AC%E5%8F%B7.html\" target=\"_blank\" rel=\"noopener\">版本号管理策略&amp;&amp;使用npm管理项目版本号</a><br>\n<a href=\"https://semver.org/lang/zh-TW/#%E5%9C%A8-0yz-%E5%88%9D%E5%A7%8B%E9%96%8B%E7%99%BC%E9%9A%8E%E6%AE%B5%E6%88%91%E8%A9%B2%E5%A6%82%E4%BD%95%E9%80%B2%E8%A1%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\" target=\"_blank\" rel=\"noopener\">语义化版本2.0</a><br>\n<a href=\"https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json\" target=\"_blank\" rel=\"noopener\">whats-the-difference-between-tilde-and-caret-in-package-json</a></p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>为了在软件版本号中包含更多意义，反映代码所做的修改，产生了语义化版本，软件的使用者能从版本号中推测软件做的修改。npm 包使用语义化版控制，我们可安装一定版本范围的依赖，npm 会选择和你指定的版本相<strong>匹配</strong>的**(latest)最新版本**安装。</p>","more":"<p>npm 的版本号由三部分组成：<br>\n<code>主版本号</code>、<code>次版本号</code>、<code>补丁版本号</code>。变更不同的版本号，表示不同的意义：</p>\n<ul>\n<li>主版本号（major）：软件做了不兼容的变更（breaking change 重大变更）；</li>\n<li>次版本号（minor）：添加功能或者废弃功能，向下兼容；</li>\n<li>补丁版本号（patch）：bug 修复，向下兼容。</li>\n</ul>\n<p>有时候为了表达更加确切的版本，还会在版本号后面添加<strong>标签</strong>或者<strong>扩展</strong>，来说明是预发布版本或者测试版本等。比如 <strong>3.2.3-beta-3</strong>。</p>\n<p>常见的标签有 :</p>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>意义</th>\n<th>补充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>demo</td>\n<td>demo版本</td>\n<td>可能用于验证问题的版本</td>\n</tr>\n<tr>\n<td>dev</td>\n<td>开发版</td>\n<td>开发阶段用的，bug 多，体积较大等特点，功能不完善</td>\n</tr>\n<tr>\n<td>alpha</td>\n<td>α版本</td>\n<td>用于内部交流或者测试人员测试</td>\n</tr>\n<tr>\n<td>beta</td>\n<td>测试版(β版本)</td>\n<td>较α版本，有较大的改进，但是还是有bug</td>\n</tr>\n<tr>\n<td>gamma</td>\n<td>（γ）伽马版本</td>\n<td>较α和β版本有很大的改进，与稳定版相差无几，用户可使用</td>\n</tr>\n<tr>\n<td>trial</td>\n<td>试用版本</td>\n<td>本软件通常都有时间限制，过期之后用户如果希望继续使用，一般得交纳一定的费用进行注册或购买。有些试用版软件还在功能上做了一定的限制。</td>\n</tr>\n<tr>\n<td>stable</td>\n<td>稳定版</td>\n<td></td>\n</tr>\n<tr>\n<td>csp</td>\n<td>内容安装版本</td>\n<td>js库常用</td>\n</tr>\n<tr>\n<td>latest</td>\n<td>最新版本</td>\n<td>不指定版本和标签，npm 默认安装最新版</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://docs.npmjs.com/cli/dist-tag\" target=\"_blank\" rel=\"noopener\">更多关于标签的内容</a><br>\n查看标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm dist-tags ls &lt;pkg&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm dist-tags ls vue</span><br></pre></td></tr></table></figure>\n<p>得到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beta: 2.6.0-beta.3</span><br><span class=\"line\">csp: 1.0.28-csp</span><br><span class=\"line\">latest: 2.6.10</span><br></pre></td></tr></table></figure>\n<p>安装带标签的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i &lt;pkg&gt;@&lt;tag&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue@beta <span class=\"comment\"># 安装 2.6.0-beta.3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"版本号变更规则\"><a class=\"markdownIt-Anchor\" href=\"#版本号变更规则\"></a> 版本号变更规则</h2>\n<ol>\n<li>版本号只升不降，不得在数字前加0，比如 2.01.2 不允许的；</li>\n<li>0.y.z，处于开发阶段的版本；</li>\n<li>第一个正式版版本往往命名为 1.0.0；</li>\n<li>先行版本必须在补丁版本之后添加，比如 2.3.7-0,- 后面的是先行版本；</li>\n<li>版本的比较依次比较<strong>主版本</strong>→<strong>次版本</strong>→<strong>补丁版本</strong>→<strong>先行版本</strong>，直到第一个能得出比较结果为止。</li>\n<li>不小心把一个<strong>不兼容的改版</strong>当成了<strong>次版本号</strong>发行了该怎么办？一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并<strong>发行一个新的次版本号</strong>来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。</li>\n</ol>\n<p><a href=\"https://semver.npmjs.com/\" target=\"_blank\" rel=\"noopener\">NPM版本计算器</a></p>\n<h2 id=\"如何处理即将弃用的功能\"><a class=\"markdownIt-Anchor\" href=\"#如何处理即将弃用的功能\"></a> 如何处理即将弃用的功能？</h2>\n<p>弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。但当你弃用公共API的一部分时，你应该做两件事：<br>\n（1）更新<strong>文档</strong>以便使用者知道这个变化。<br>\n（2）发行不包含弃用功能的<strong>次版本</strong>。在新的主版本中完全移除弃用功能前，至少应有一个不包含弃用功能的副版本发布，以便使用者能够平滑过渡到新API。</p>\n<p>如何更新版本号？不用手动修改 package.json。而是用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>newversion</strong>: 直接给一个版本号；</li>\n<li><strong>major</strong>:主版本增加1；</li>\n<li><strong>premajor</strong>:预备主版本，主版本增加1，增加先行版本号；</li>\n<li><strong>prelease</strong>:预先发布版本，先行版本号增加1；</li>\n</ol>\n<h2 id=\"git-和-npm-version-结合\"><a class=\"markdownIt-Anchor\" href=\"#git-和-npm-version-结合\"></a> git 和 npm version 结合</h2>\n<h3 id=\"手动更改版本号\"><a class=\"markdownIt-Anchor\" href=\"#手动更改版本号\"></a> 手动更改版本号</h3>\n<p>执行 <code>npm version &lt;version&gt; -m 'xx %s xx'</code> 改变npm版本的同时，会执行一次 <code>git commt -m 'xx %s xx'</code>并用版本号打一个<strong>tag</strong>，%s 会替换成版本号，前提是版本库是<strong>干净的（clean）</strong>。</p>\n<h3 id=\"自动更新版本\"><a class=\"markdownIt-Anchor\" href=\"#自动更新版本\"></a> 自动更新版本</h3>\n<p>在 <code>.git/hooks</code>目录内，新建<code>post-commit</code>,输入以下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">COMMIT_MSG=<span class=\"string\">\"$(git log --pretty=format:\"</span>%s<span class=\"string\">\" -1 head)\"</span></span><br><span class=\"line\">echo <span class=\"string\">\"$COMMIT_MSG\"</span> | grep  -q  <span class=\"string\">\"^[0-9]\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -ne <span class=\"number\">0</span> ];then</span><br><span class=\"line\">   # 自动修改 patch</span><br><span class=\"line\">  echo $(npm version patch)</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>在执行 <code>git commit -m 'message'</code>后，会检测message是否是版本号（y.x.z的形式），不是，则执行 <code>npm version patch</code>更新补丁版本，打一个tag。</p>\n<p>如果想自动修改<code>次版本</code>，修改 post-commit 的内容即可。</p>\n<h2 id=\"版本运算符\"><a class=\"markdownIt-Anchor\" href=\"#版本运算符\"></a> 版本运算符</h2>\n<p>版本运算符指定了一定范围的版本。主要有**~<strong>、</strong>^<strong>、</strong>-<strong>、</strong>&lt;<strong>、</strong>&lt;=<strong>、</strong>&gt;<strong>、</strong>&gt;=<strong>、</strong>=**版本运算符。</p>\n<h3 id=\"~-版本号-指定主版本号或者次版本号相同\"><a class=\"markdownIt-Anchor\" href=\"#~-版本号-指定主版本号或者次版本号相同\"></a> ~ 版本号 ----- 指定主版本号或者次版本号相同</h3>\n<dl>\n<dt>~ + <strong>只含主版本</strong> —  主版本相同；</dt>\n<dd>\n<ul>\n<li><strong>含有次版本</strong> —  主版本和次版本号相同。</li>\n</ul>\n</dd>\n</dl>\n<table>\n<thead>\n<tr>\n<th>版本范围</th>\n<th>匹配版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>~3</td>\n<td>3.x 或者 3.0.0 &lt;= v &lt; 4.0.0</td>\n</tr>\n<tr>\n<td>~3.1</td>\n<td>3.1.x 或者 3.1.0 &lt;= v ❤️.2.0</td>\n</tr>\n<tr>\n<td>~3.1.2</td>\n<td>3.1.2 &lt; v &lt; 3.2.0</td>\n</tr>\n</tbody>\n</table>\n<p>指定的版本范围含有预发布版本，只会匹配和完整版本号相同的预发布版本。<br>\n~3.1.3-beta.2 匹配 3.1.3-beat.3 不匹配 3.1.4-beat-2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i lodash@~3 <span class=\"comment\"># 安装 3.10.1</span></span><br><span class=\"line\">npm i lodash@~3.9 <span class=\"comment\"># 安装 3.9.3</span></span><br><span class=\"line\">npm i lodash@~3.9.1 <span class=\"comment\"># 安装 3.9.3</span></span><br><span class=\"line\">npm i lodash@~3.8.0 <span class=\"comment\"># 安装 3.8.0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"版本号-第一个非零-版本号相同\"><a class=\"markdownIt-Anchor\" href=\"#版本号-第一个非零-版本号相同\"></a> ^ 版本号 — 第一个<em>非零</em> 版本号相同</h3>\n<table>\n<thead>\n<tr>\n<th>版本范围</th>\n<th>匹配版本</th>\n<th>补充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^3.1.5</td>\n<td>3.1.5 &lt;= v &lt; 4.0.0</td>\n<td></td>\n</tr>\n<tr>\n<td>^0.3.6</td>\n<td>0.3.6 &lt;= v &lt; 0.4.0</td>\n<td></td>\n</tr>\n<tr>\n<td>^0.0.2</td>\n<td>0.0.2 &lt;= v &lt; 0.0.3</td>\n<td></td>\n</tr>\n<tr>\n<td>^3.x.x</td>\n<td>3.0.0 &lt;= v &lt; 4.0.0</td>\n<td>版本号缺少的位置，会被 0 填充</td>\n</tr>\n<tr>\n<td>^4.2.x</td>\n<td>4.2.0 &lt;= v &lt; 4.3.0</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>npm 安装包时，默认使用 ^ 匹配版本。</p>\n<p>安装主版本号为 3 的最新版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i lodash@^3 <span class=\"comment\"># 安装 3.10.1</span></span><br><span class=\"line\">npm i lodash@^3.9 <span class=\"comment\"># 安装 3.10.1</span></span><br><span class=\"line\">npm i lodash@^3.8.0 <span class=\"comment\"># 安装 3.10.1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"~-vs\"><a class=\"markdownIt-Anchor\" href=\"#~-vs\"></a> ~  vs ^</h3>\n<table>\n<thead>\n<tr>\n<th>版本范围</th>\n<th>含义</th>\n<th>匹配的版本</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>~3.3.0</td>\n<td>与3.3.0相似</td>\n<td>3.3.0 &lt;= v &lt; 3.4.0</td>\n<td>主版本和次版本相同</td>\n</tr>\n<tr>\n<td>^3.3.0</td>\n<td>与3.3.0兼容</td>\n<td>3.3.0 &lt;= v &lt; 4</td>\n<td>主版本相同</td>\n</tr>\n</tbody>\n</table>\n<p>同一个版本号，^ 能匹配的范围大些，更加激进。<br>\n例子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i lodash@^3.3.0 <span class=\"comment\"># 安装 3.10.1</span></span><br><span class=\"line\">npm i lodash@~3.3.0 <span class=\"comment\"># 安装 3.3.1</span></span><br></pre></td></tr></table></figure>\n<p><strong>~</strong> 和 ≈ 差不多，可将 ~ 理解成<strong>相似</strong>，这样就分辨了和理解了，~指定的是<strong>相似版本</strong>。<br>\n<strong>^</strong> 可理解成<strong>兼容版本</strong>。</p>\n<h3 id=\"-指定精确范围\"><a class=\"markdownIt-Anchor\" href=\"#-指定精确范围\"></a> - 指定精确范围</h3>\n<table>\n<thead>\n<tr>\n<th>版本范围</th>\n<th>匹配版本</th>\n<th>补充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2.0.0 - 3.2.7</td>\n<td>2.0.0 &lt;= v &lt;= 3.2.7</td>\n<td>- 前后有空格</td>\n</tr>\n<tr>\n<td>0.4 - 3</td>\n<td>0.4.0 &lt;= v &lt;= 3.0.0</td>\n<td>缺少的版本号，被 0 填充</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue@<span class=\"string\">\"1 - 1.9\"</span> <span class=\"comment\"># 安装 1.0.28</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"版本号比较器\"><a class=\"markdownIt-Anchor\" href=\"#版本号比较器\"></a> 版本号比较器</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">版本范围</th>\n<th style=\"text-align:center\">匹配版本</th>\n<th style=\"text-align:center\">补充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&lt;2.2.0</td>\n<td style=\"text-align:center\">小于2.2.0 的版本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=2.0.0</td>\n<td style=\"text-align:center\">小于等于 2.0.0 的版本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;4.2.0</td>\n<td style=\"text-align:center\">大于4.2.0 的版本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=4.2.0</td>\n<td style=\"text-align:center\">大于等于 4.2.0  的版本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">=4.3.0</td>\n<td style=\"text-align:center\">等于 4.3.0 的版本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>\\ 是转义字符。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i lodash@\\&lt;3.5 <span class=\"comment\"># 安装 3.4.0</span></span><br><span class=\"line\">npm i lodash@\\&lt;=3.5 <span class=\"comment\"># 安装 3.5.0</span></span><br><span class=\"line\">npm i lodash@\\&gt;3.5 <span class=\"comment\"># 安装 4.17.11</span></span><br><span class=\"line\">npm i lodash@\\&gt;=3.5 <span class=\"comment\"># 安装 4.17.11</span></span><br><span class=\"line\">npm i vue@<span class=\"string\">\"&gt;1 &lt;2.3\"</span> <span class=\"comment\"># 安装 2.2.6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"分组-几乎不用\"><a class=\"markdownIt-Anchor\" href=\"#分组-几乎不用\"></a> 分组 || (几乎不用)</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">版本范围</th>\n<th style=\"text-align:center\">匹配版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">~2 || ^0.7</td>\n<td style=\"text-align:center\">匹配2.0.2&lt;= v &lt; 3.0.0 或者 0.7 &lt;= v &lt;1.0.0</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue@<span class=\"string\">\"^0.7 || ~2\"</span> <span class=\"comment\"># 安装 2.6.10 最新的版本</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"https://yarnpkg.com/lang/zh-hans/docs/dependency-versions/\" target=\"_blank\" rel=\"noopener\">依赖的版本</a><br>\n<a href=\"http://buzhundong.com/post/%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5-%E4%BD%BF%E7%94%A8npm%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E7%89%88%E6%9C%AC%E5%8F%B7.html\" target=\"_blank\" rel=\"noopener\">版本号管理策略&amp;&amp;使用npm管理项目版本号</a><br>\n<a href=\"https://semver.org/lang/zh-TW/#%E5%9C%A8-0yz-%E5%88%9D%E5%A7%8B%E9%96%8B%E7%99%BC%E9%9A%8E%E6%AE%B5%E6%88%91%E8%A9%B2%E5%A6%82%E4%BD%95%E9%80%B2%E8%A1%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\" target=\"_blank\" rel=\"noopener\">语义化版本2.0</a><br>\n<a href=\"https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json\" target=\"_blank\" rel=\"noopener\">whats-the-difference-between-tilde-and-caret-in-package-json</a></p>"},{"title":"vue 路由进阶","date":"2019-05-24T17:33:51.000Z","_content":"路由可向路由匹配的组件传递参数，`不同情况`向组件传递不同的参数，从而实现组件的复用。\n\n<!--more-->\n\n[TOC]\n\n## 路由向组件传递参数\n\n和路由匹配的组件可以在组件中使用 `$route` 获取路由上的参数：\n\n### 传参方式\n\n`:`、`params`和`query`\n\n#### `:`在路径传递参数\n\n```js\n{\n\tpath: \"/argu/:id/book\",\n\tname: \"argu\",\n\tcomponent: () => import(\"@/views/ArguPage\")\n}\n```\n`路径`中的一部分是参数，`必须`传递该参数：\n```html\n<!--路径跳转-->\n<router-link to=\"/argu/123/book\">path跳转</router-link>\n<!--路由名跳转-->\n<router-link :to=\"{name:'argu',params:{id:'test'}}\" tag=\"button\">name+params跳转</router-link>\n<!--获取参数-->\n<h1>{{$route.params.id}}</h1><!--params的名字路径中的的参数名一致-->\n```\n此时 `path`+ `parmas`传递参数，`params`会被忽略。\n\n#### `params`+`name`传递参数\n\n路由：\n```js\n{\n\tpath: \"/argu\",\n\tname: \"argu\",\n\tcomponent: () => import(\"@/views/ArguPage\")\n}\n```\n跳转方式是 `name`+`params`+（query），通过`path`跳转，params 会被忽略。\n\n```html\n<router-link :to=\"{name:'argu', params:{name:'hangge'}}\">\n  跳转到 hello\n</router-link>\n// path + params ，params 会被忽略，因为路径中没有定义参数\n<router-link :to=\"{path:'/argu', params:{name:'hangge'}}\">\n  跳转到 hello\n</router-link>\n```\n\n#### query 参数\n\nquery 参数参数，表现为查询字符串，和`localtion.serach`一样的。\n\n不需要先在路径中先定义，可通过`path`、`path`+`query` 或者 `name` + `query` 传递参数。\n\n```html\n<router-link to=\"/argu?queryName=value\">跳转到 hello</router-link>\n<router-link :to=\"{path:'/argu',query:{queryName:value}}\">跳转到 argu</router-link>\n<router-link :to=\"{name:'argu',query:{queryName:value}}\">跳转到 argu</router-link>\n<h1>{{ $route.query.queryName }}</h1>\n```\n函数传递 query\n\n```js\n// 主要是  $router 不是 $route\ngo() {\n\tthis.$router.push({\n\t\tname: 'argu',\n\t\tquery: {\n\t\t\t\tqueryName: \"你好\"\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n但是这样使得 `$route` 和组件耦合在一起，不方便组件的复用，如果能将路由中的参数传递到 组件的`props` 就好了，恰恰是可以这样设置的。\n\n### props 接收路由的 `params`\n\n路由传参数的三种方式：\n\n1. 布尔模式\n\n```js\n{\n    path: '/user/:id', \n    component: User, \n    props: true //表明 将 id 作为 proos 传递到匹配的组件 User 中。\n}\n```\n\nUser 中定义 props 接收 id:\n\n```js\nexport default {\n\tprops:{\n\t\tid:{\n\t\t\ttype:String,\n\t\t\tdefault:'jackzhou'//默认值\n\t\t}\n\t}\n}\n```\n2. 对象模式\n\n将路由的 `props` 属性设置一个对象，也可在组件中获取到该值，这种方式往往用于传递静态值，即 name 值不会变化。\n\n路由对象：\n\n```js\n{\n\tname: 'home',\n\talias:'/home_page',\n\tpath: '/',\n\tprops:{name:'jack jack'},\n\tcomponent: Home\n}\n```\n\nHome 组件：\n\n```js\nprops:{\n\tname:{\n\t\ttype:String,\n\t}\n}\n```\n\n3. 函数模式\n\n以上两种方式，params 参数的名字必须和组件中的props 属性名字相同，如果想对 params 进行改造后传递到组件，就可将 `props` 设置成函数，在函数内获取路由中的 params 或者 query，或者其他属性值，对其进行处理后再传递给组件。\n\n**注意**：这种方式函数必须返回一个对象。\n\n路由：\n\n```js\n{\n\tname: 'about',\n\tpath: '/about/:years', //params 有一个参数 years\n\tprops:(route) {\n  \t\tconst now = new Date()\n  \t\treturn {\n\t\t// 将 years 改造成 name\n    \tname: (now.getFullYear() + parseInt(route.params.years)) + '!'\n        }\n\t    },\n\tcomponent: () => import('@/views/AboutPage'),\n}\n```\n\n组件中的 props:\n\n```js\nprops: {\n\tname: {\n\t\ttype: String\n\t}\n}\n```\n\n命名视图的路由，要为每个命名视图添加 `props`：\n\n```js\n{\n\tpath:'/name/:view',\n\tname:'name_view',\n\tcomponents:{\n\t\tdefault:()=>import('@/views/ChildPage'),\n\t\tsister:()=>import('@/views/SisterPage'),\n\t\tbrother:()=>import('@/views/BrotherPage'),\n\t},\n\tprops:{\n        default:true,\n        sister:false,\n        brother:(route)=>({view:route.params.view.toUpperCase()})\n    }\n}\n```\n### 完整的例子\n\n{% raw %}\n<p class=\"codepen\" data-height=\"573\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"JackZhouMine\" data-slug-hash=\"JqBzWE\" style=\"height: 573px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"route 的 params 传递组件\">\n  <span>See the Pen <a href=\"https://codepen.io/JackZhouMine/pen/JqBzWE/\">\n  route 的 params 传递组件</a> by JackZhouMine (<a href=\"https://codepen.io/JackZhouMine\">@JackZhouMine</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n{% endraw %}\n\n##  HTML5 History 模式\n\n路由配置里有一个属性 `mode` ，默认值是 `hash`，以hash来模拟一个url，url改变时，页面不会重新加载。\n\n先使用普通模式，可将 `mode` 设置成 `history`，这种模式会使用 `history.pushSate` 来完成url跳转而页面不会重新加载。这种模式需要**服务器设置一下**。\n\n使用 history 模式，因为web应用往往是单页应用，当用户访问一个不存在的路径时，需要提供一个后备页面。\n\n在路由配置的最后增加一个404路由：\n\n```js\n{\n\tpath:'*',\n\tcomponent:NotFoundPage// 前面没有匹配的路由，最后会匹配该路由。\n}\n```\n\n##  meta 元信息\n\n可在路由对象中配置 `meta` 属性，meta 是一个对象。\n\n比如，根据不同页面显示不同的 title。\n\n```js\n{\n\tname: \"about\",\n\tpath: \"/about\",\n\tmeta: {\n\t\ttitle: \"关于\"\n\t},\n   \tcomponent: () => import(\"@/views/AboutPage\")\t\n}\n```\n在路由配置文件中，设置各个页面的 title：\n\n```js\nconst router= new Router({\n    routes\n})\nrouter.beforeEach((to,from,next)=>{\n    //setTitle 函数用于设置页面标题\n\tto.meta&&setTitle(to.meta.title) //这是简化if语句的简写\n\tconsole.table(to)\n\tconsole.table(from)\n\tnext()\n})\nexport default router\n```\n\n\n##  导航守卫\n\n### 全局守卫\n\n1. 全局前置守卫\n\n```js\nconst router = new Router({\n    {\n        path:\"/\",\n        name:\"heom_page\"\n        component:Home,\n        //路由独享守卫\n        beforeEnter:(to,from,next)=>{\n            //处理逻辑\n            next()\n        }\n    }\n})\n//每次路由进入都会调用\nrouter.beforeEach((to,from,next)=>{\n    //处理逻辑，比如登录判断，可跳转到任意页面\n    //不要忘记调用 next，不调用 next，页面不会跳转\n})\n```\n2. 后置钩子\n\n```js\n//路由跳转之后做一些操作，比如去掉登录样式\nrouter.afterEach((to,form)=>{\n    //逻辑处理\n})\n```\n3. 路由独享守卫\n只在匹配某个路由时执行。\n\n4. 组件内守卫\n\n`beforeRouteEnter`, 组件创建之前调用，组件不具备`this`；\n`beforeRouteUpdate`，路由更新，而组件被复用时调用，可使用`this`；\n`beforeRouteLeave`，离开路由时调用，可使用`this`。\n```js\nexport default{\n    name:'Home',\n    data(){\n        return {}\n    },\n\t/**\n\t* 组件内路由守卫\n\t* 1. 该函数在路由进入时执行\n\t* 2. 此时 组件还未渲染，不可用 this,当可在  next 中用 vm\n\t* 3. next 晚于 mounted 执行，next 之前的代码，早于beforeCreate \t  *\t   执行\n\t* 4. 最后需要调用 next 使得路由跳转\n\t*/\n\tbeforeRouteEnter(to, from, next) {\n\t\tconsole.log(\"①，home 组件内路由守卫，beforeRouteEnter\");\n\t\t// next 晚于 mounted 执行，next 之前的代码，早于beforeCreate 执行\n\t\tnext((vm)=>{\n\t\t\tconsole.log('vm')\n\t\t\tconsole.log(vm)//有值\n\t\t\tconsole.log('this')\n\t\t\tconsole.log(this)// undefined\n\t\t\tconsole.log('②，home 组件内路由守卫，beforeRouteEnter');\n\t\t});\n\t},\n\t/**\n\t* 组件内路由守卫\n\t* 1. 该函数在路由离开时执行,最先调用,然后在调用全局守卫，再调用\t\t*\t beforeDestroy\n\t* 2. 此时，该路由守卫所在组件已渲染，可用 this\n\t* 3. 最后需要调用 next 使得路由跳转\n\t */\n\tbeforeRouteLeave(to, from, next) {\n\t\tconsole.log(\"①，home 组件内路由守卫，beforeRouteLeave\");\n\t\tlet leave = confirm(\"你确定要离开 home 页吗？\");\n\t\tif (leave) {\n\t\t// console.log(to.name, from.name);\n\t\t// console.log(this);\n\t\tnext(() => {\n\t\t\tconsole.log('②，home 组件内路由守卫，beforeRouteLeave');\n\t\t\t}); //给 next 传递 false ,路由不会跳转\n\t\t} else {\n\t\t\tnext(false);\n\t\t}\n\t},\n\t/*\n\t* 当路由发生变化，而组件被复用时调用\n\t* 1. 此时该复用组件已被渲染，可用 this\n\t* 2. 需要调用 next，组件才能渲染\n\t*/\n\tbeforeRouteUpdate(to, from, next) {\n\t\tconsole.log('①，argu，组件内路由守卫，beforeRouteUpdate');\n\t\tnext(() => {\n\t\t\tconsole.log('next，argu，组件内路由守卫，beforeRouteUpdate');\n\t\t});\n\t},\n\tbeforeCreate() {\n\t\tconsole.log('beforeCreate')\n\t},\n\tcreated() {\n\t\tconsole.log('created')\n\t},\n\tbeforeMount() {\n\t\tconsole.log('beforeMount')\n\t},\n\tmounted() {\n\t\tconsole.log('mounted')\n\t},\n\tbeforeUpdate() {\n\t\tconsole.log('beforeUpdate')\n\t},\n\tupdated() {\n\t\tconsole.log('updated')\n\t},\n\tbeforeDestroy() {\n\t\tconsole.log('beforeDestroy')\n\t},\n\tdestroyed() {\n\t\tconsole.log('destroyed')\n\t}\n}\n```\n路由全过程：\n\n1. 导航被触发\n2. 离开页面（失活的组件）里调用离开守卫 beforeRouteLeave\n3. 调用`全局前置守卫` beforeEach\n4. 在重用的组件里调用 beforeRouteUpdate (非重用组件，没有这个步骤)\n5. 调用路由独享守卫 beforeEnter\n6. 解析异步路由组件\n7. 在进入页面（激活组件）调用 beforeRouteEnter\n8. 调用`全局解析守卫` beforeResolve （导航被确认之前，组件内守卫和异步路由组件被解析之后，调用 beforeResolve）\n9. 导航被确认（什么时候被确认，全部钩子执行完了，是被确认的）\n10. 调用`全局后置守卫` afterEach\n11. 触发 DOM 更新\n12. 在 vue 实例中（此时页面解析完毕了吗？是的）调用 beforeRouterEnter 守卫里传给 next 的回调。`next`在`mounted`之后被调用。\n\n##  过渡效果\n\n可以给路由匹配的组件设置过渡效果，让页面平滑地显示，提升用户体验。\n需要用到 `transition` 标签，如果有多个视图需要过渡，则用 `transition-group`。\n\n```html\n<transition-group name='router-view'>\n<!-- 视图渲染组件,该组件内不需要房子任何内容，可写成只闭合标签-->\n\t<router-view  key='default'/>\n\t<!-- 有多个路由视图需要匹配，则用命名视图 -->\n\t<router-view key='sister' name=\"sister\"></router-view>\n\t<router-view key='brother' name=\"brother\"></router-view>\n</transition-group>\n```\ncss 过渡效果：\n\n```css\n\t.router-view-enter{\n\t\topacity: 0;\n\t}\n\t.router-view-enter-active{\n\t\ttransition: opacity 1s ease;\n\t}\n\n\t.router-view-enter-to{\n\t\topacity: 1;\n\t}\n\t.router-view-leave{\n\t\topacity: 1;\n\t}\n\t.router-view-leave-active{\n\t\ttransition: opacity 1s ease;\n\t}\n\n\t.router-view-leave-to{\n\t\topacity: 0;\n\t}\n```\n\n这些设置，每个页面的效果都是一样的，要为不同的页面设置不同的效果，可用路由传递相应的参数来，让动态绑定到 transition 的 name 属性上。\n\n或者监听路由变化：\n\n```js\nwatch: {\n\t'$route'(to){\n\t\tconsole.log(to);\n\t\tto.params&&to.params.view&&(this.effect = to.params.view)\n\t},\n}\n```\n\n## 参考\n\n[Vue.js - 路由 vue-router 的使用详解2（参数传递）](http://www.hangge.com/blog/cache/detail_2121.html)","source":"_posts/vue 路由进阶.md","raw":"---\ntitle: vue 路由进阶\ndate: 2019-05-25 01:33:51\ntags:\n- vue\n- vue-router\ncategories:\n- [vue]\n- [前端框架]\n---\n路由可向路由匹配的组件传递参数，`不同情况`向组件传递不同的参数，从而实现组件的复用。\n\n<!--more-->\n\n[TOC]\n\n## 路由向组件传递参数\n\n和路由匹配的组件可以在组件中使用 `$route` 获取路由上的参数：\n\n### 传参方式\n\n`:`、`params`和`query`\n\n#### `:`在路径传递参数\n\n```js\n{\n\tpath: \"/argu/:id/book\",\n\tname: \"argu\",\n\tcomponent: () => import(\"@/views/ArguPage\")\n}\n```\n`路径`中的一部分是参数，`必须`传递该参数：\n```html\n<!--路径跳转-->\n<router-link to=\"/argu/123/book\">path跳转</router-link>\n<!--路由名跳转-->\n<router-link :to=\"{name:'argu',params:{id:'test'}}\" tag=\"button\">name+params跳转</router-link>\n<!--获取参数-->\n<h1>{{$route.params.id}}</h1><!--params的名字路径中的的参数名一致-->\n```\n此时 `path`+ `parmas`传递参数，`params`会被忽略。\n\n#### `params`+`name`传递参数\n\n路由：\n```js\n{\n\tpath: \"/argu\",\n\tname: \"argu\",\n\tcomponent: () => import(\"@/views/ArguPage\")\n}\n```\n跳转方式是 `name`+`params`+（query），通过`path`跳转，params 会被忽略。\n\n```html\n<router-link :to=\"{name:'argu', params:{name:'hangge'}}\">\n  跳转到 hello\n</router-link>\n// path + params ，params 会被忽略，因为路径中没有定义参数\n<router-link :to=\"{path:'/argu', params:{name:'hangge'}}\">\n  跳转到 hello\n</router-link>\n```\n\n#### query 参数\n\nquery 参数参数，表现为查询字符串，和`localtion.serach`一样的。\n\n不需要先在路径中先定义，可通过`path`、`path`+`query` 或者 `name` + `query` 传递参数。\n\n```html\n<router-link to=\"/argu?queryName=value\">跳转到 hello</router-link>\n<router-link :to=\"{path:'/argu',query:{queryName:value}}\">跳转到 argu</router-link>\n<router-link :to=\"{name:'argu',query:{queryName:value}}\">跳转到 argu</router-link>\n<h1>{{ $route.query.queryName }}</h1>\n```\n函数传递 query\n\n```js\n// 主要是  $router 不是 $route\ngo() {\n\tthis.$router.push({\n\t\tname: 'argu',\n\t\tquery: {\n\t\t\t\tqueryName: \"你好\"\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n但是这样使得 `$route` 和组件耦合在一起，不方便组件的复用，如果能将路由中的参数传递到 组件的`props` 就好了，恰恰是可以这样设置的。\n\n### props 接收路由的 `params`\n\n路由传参数的三种方式：\n\n1. 布尔模式\n\n```js\n{\n    path: '/user/:id', \n    component: User, \n    props: true //表明 将 id 作为 proos 传递到匹配的组件 User 中。\n}\n```\n\nUser 中定义 props 接收 id:\n\n```js\nexport default {\n\tprops:{\n\t\tid:{\n\t\t\ttype:String,\n\t\t\tdefault:'jackzhou'//默认值\n\t\t}\n\t}\n}\n```\n2. 对象模式\n\n将路由的 `props` 属性设置一个对象，也可在组件中获取到该值，这种方式往往用于传递静态值，即 name 值不会变化。\n\n路由对象：\n\n```js\n{\n\tname: 'home',\n\talias:'/home_page',\n\tpath: '/',\n\tprops:{name:'jack jack'},\n\tcomponent: Home\n}\n```\n\nHome 组件：\n\n```js\nprops:{\n\tname:{\n\t\ttype:String,\n\t}\n}\n```\n\n3. 函数模式\n\n以上两种方式，params 参数的名字必须和组件中的props 属性名字相同，如果想对 params 进行改造后传递到组件，就可将 `props` 设置成函数，在函数内获取路由中的 params 或者 query，或者其他属性值，对其进行处理后再传递给组件。\n\n**注意**：这种方式函数必须返回一个对象。\n\n路由：\n\n```js\n{\n\tname: 'about',\n\tpath: '/about/:years', //params 有一个参数 years\n\tprops:(route) {\n  \t\tconst now = new Date()\n  \t\treturn {\n\t\t// 将 years 改造成 name\n    \tname: (now.getFullYear() + parseInt(route.params.years)) + '!'\n        }\n\t    },\n\tcomponent: () => import('@/views/AboutPage'),\n}\n```\n\n组件中的 props:\n\n```js\nprops: {\n\tname: {\n\t\ttype: String\n\t}\n}\n```\n\n命名视图的路由，要为每个命名视图添加 `props`：\n\n```js\n{\n\tpath:'/name/:view',\n\tname:'name_view',\n\tcomponents:{\n\t\tdefault:()=>import('@/views/ChildPage'),\n\t\tsister:()=>import('@/views/SisterPage'),\n\t\tbrother:()=>import('@/views/BrotherPage'),\n\t},\n\tprops:{\n        default:true,\n        sister:false,\n        brother:(route)=>({view:route.params.view.toUpperCase()})\n    }\n}\n```\n### 完整的例子\n\n{% raw %}\n<p class=\"codepen\" data-height=\"573\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"JackZhouMine\" data-slug-hash=\"JqBzWE\" style=\"height: 573px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"route 的 params 传递组件\">\n  <span>See the Pen <a href=\"https://codepen.io/JackZhouMine/pen/JqBzWE/\">\n  route 的 params 传递组件</a> by JackZhouMine (<a href=\"https://codepen.io/JackZhouMine\">@JackZhouMine</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n{% endraw %}\n\n##  HTML5 History 模式\n\n路由配置里有一个属性 `mode` ，默认值是 `hash`，以hash来模拟一个url，url改变时，页面不会重新加载。\n\n先使用普通模式，可将 `mode` 设置成 `history`，这种模式会使用 `history.pushSate` 来完成url跳转而页面不会重新加载。这种模式需要**服务器设置一下**。\n\n使用 history 模式，因为web应用往往是单页应用，当用户访问一个不存在的路径时，需要提供一个后备页面。\n\n在路由配置的最后增加一个404路由：\n\n```js\n{\n\tpath:'*',\n\tcomponent:NotFoundPage// 前面没有匹配的路由，最后会匹配该路由。\n}\n```\n\n##  meta 元信息\n\n可在路由对象中配置 `meta` 属性，meta 是一个对象。\n\n比如，根据不同页面显示不同的 title。\n\n```js\n{\n\tname: \"about\",\n\tpath: \"/about\",\n\tmeta: {\n\t\ttitle: \"关于\"\n\t},\n   \tcomponent: () => import(\"@/views/AboutPage\")\t\n}\n```\n在路由配置文件中，设置各个页面的 title：\n\n```js\nconst router= new Router({\n    routes\n})\nrouter.beforeEach((to,from,next)=>{\n    //setTitle 函数用于设置页面标题\n\tto.meta&&setTitle(to.meta.title) //这是简化if语句的简写\n\tconsole.table(to)\n\tconsole.table(from)\n\tnext()\n})\nexport default router\n```\n\n\n##  导航守卫\n\n### 全局守卫\n\n1. 全局前置守卫\n\n```js\nconst router = new Router({\n    {\n        path:\"/\",\n        name:\"heom_page\"\n        component:Home,\n        //路由独享守卫\n        beforeEnter:(to,from,next)=>{\n            //处理逻辑\n            next()\n        }\n    }\n})\n//每次路由进入都会调用\nrouter.beforeEach((to,from,next)=>{\n    //处理逻辑，比如登录判断，可跳转到任意页面\n    //不要忘记调用 next，不调用 next，页面不会跳转\n})\n```\n2. 后置钩子\n\n```js\n//路由跳转之后做一些操作，比如去掉登录样式\nrouter.afterEach((to,form)=>{\n    //逻辑处理\n})\n```\n3. 路由独享守卫\n只在匹配某个路由时执行。\n\n4. 组件内守卫\n\n`beforeRouteEnter`, 组件创建之前调用，组件不具备`this`；\n`beforeRouteUpdate`，路由更新，而组件被复用时调用，可使用`this`；\n`beforeRouteLeave`，离开路由时调用，可使用`this`。\n```js\nexport default{\n    name:'Home',\n    data(){\n        return {}\n    },\n\t/**\n\t* 组件内路由守卫\n\t* 1. 该函数在路由进入时执行\n\t* 2. 此时 组件还未渲染，不可用 this,当可在  next 中用 vm\n\t* 3. next 晚于 mounted 执行，next 之前的代码，早于beforeCreate \t  *\t   执行\n\t* 4. 最后需要调用 next 使得路由跳转\n\t*/\n\tbeforeRouteEnter(to, from, next) {\n\t\tconsole.log(\"①，home 组件内路由守卫，beforeRouteEnter\");\n\t\t// next 晚于 mounted 执行，next 之前的代码，早于beforeCreate 执行\n\t\tnext((vm)=>{\n\t\t\tconsole.log('vm')\n\t\t\tconsole.log(vm)//有值\n\t\t\tconsole.log('this')\n\t\t\tconsole.log(this)// undefined\n\t\t\tconsole.log('②，home 组件内路由守卫，beforeRouteEnter');\n\t\t});\n\t},\n\t/**\n\t* 组件内路由守卫\n\t* 1. 该函数在路由离开时执行,最先调用,然后在调用全局守卫，再调用\t\t*\t beforeDestroy\n\t* 2. 此时，该路由守卫所在组件已渲染，可用 this\n\t* 3. 最后需要调用 next 使得路由跳转\n\t */\n\tbeforeRouteLeave(to, from, next) {\n\t\tconsole.log(\"①，home 组件内路由守卫，beforeRouteLeave\");\n\t\tlet leave = confirm(\"你确定要离开 home 页吗？\");\n\t\tif (leave) {\n\t\t// console.log(to.name, from.name);\n\t\t// console.log(this);\n\t\tnext(() => {\n\t\t\tconsole.log('②，home 组件内路由守卫，beforeRouteLeave');\n\t\t\t}); //给 next 传递 false ,路由不会跳转\n\t\t} else {\n\t\t\tnext(false);\n\t\t}\n\t},\n\t/*\n\t* 当路由发生变化，而组件被复用时调用\n\t* 1. 此时该复用组件已被渲染，可用 this\n\t* 2. 需要调用 next，组件才能渲染\n\t*/\n\tbeforeRouteUpdate(to, from, next) {\n\t\tconsole.log('①，argu，组件内路由守卫，beforeRouteUpdate');\n\t\tnext(() => {\n\t\t\tconsole.log('next，argu，组件内路由守卫，beforeRouteUpdate');\n\t\t});\n\t},\n\tbeforeCreate() {\n\t\tconsole.log('beforeCreate')\n\t},\n\tcreated() {\n\t\tconsole.log('created')\n\t},\n\tbeforeMount() {\n\t\tconsole.log('beforeMount')\n\t},\n\tmounted() {\n\t\tconsole.log('mounted')\n\t},\n\tbeforeUpdate() {\n\t\tconsole.log('beforeUpdate')\n\t},\n\tupdated() {\n\t\tconsole.log('updated')\n\t},\n\tbeforeDestroy() {\n\t\tconsole.log('beforeDestroy')\n\t},\n\tdestroyed() {\n\t\tconsole.log('destroyed')\n\t}\n}\n```\n路由全过程：\n\n1. 导航被触发\n2. 离开页面（失活的组件）里调用离开守卫 beforeRouteLeave\n3. 调用`全局前置守卫` beforeEach\n4. 在重用的组件里调用 beforeRouteUpdate (非重用组件，没有这个步骤)\n5. 调用路由独享守卫 beforeEnter\n6. 解析异步路由组件\n7. 在进入页面（激活组件）调用 beforeRouteEnter\n8. 调用`全局解析守卫` beforeResolve （导航被确认之前，组件内守卫和异步路由组件被解析之后，调用 beforeResolve）\n9. 导航被确认（什么时候被确认，全部钩子执行完了，是被确认的）\n10. 调用`全局后置守卫` afterEach\n11. 触发 DOM 更新\n12. 在 vue 实例中（此时页面解析完毕了吗？是的）调用 beforeRouterEnter 守卫里传给 next 的回调。`next`在`mounted`之后被调用。\n\n##  过渡效果\n\n可以给路由匹配的组件设置过渡效果，让页面平滑地显示，提升用户体验。\n需要用到 `transition` 标签，如果有多个视图需要过渡，则用 `transition-group`。\n\n```html\n<transition-group name='router-view'>\n<!-- 视图渲染组件,该组件内不需要房子任何内容，可写成只闭合标签-->\n\t<router-view  key='default'/>\n\t<!-- 有多个路由视图需要匹配，则用命名视图 -->\n\t<router-view key='sister' name=\"sister\"></router-view>\n\t<router-view key='brother' name=\"brother\"></router-view>\n</transition-group>\n```\ncss 过渡效果：\n\n```css\n\t.router-view-enter{\n\t\topacity: 0;\n\t}\n\t.router-view-enter-active{\n\t\ttransition: opacity 1s ease;\n\t}\n\n\t.router-view-enter-to{\n\t\topacity: 1;\n\t}\n\t.router-view-leave{\n\t\topacity: 1;\n\t}\n\t.router-view-leave-active{\n\t\ttransition: opacity 1s ease;\n\t}\n\n\t.router-view-leave-to{\n\t\topacity: 0;\n\t}\n```\n\n这些设置，每个页面的效果都是一样的，要为不同的页面设置不同的效果，可用路由传递相应的参数来，让动态绑定到 transition 的 name 属性上。\n\n或者监听路由变化：\n\n```js\nwatch: {\n\t'$route'(to){\n\t\tconsole.log(to);\n\t\tto.params&&to.params.view&&(this.effect = to.params.view)\n\t},\n}\n```\n\n## 参考\n\n[Vue.js - 路由 vue-router 的使用详解2（参数传递）](http://www.hangge.com/blog/cache/detail_2121.html)","slug":"vue 路由进阶","published":1,"updated":"2019-06-01T05:30:15.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccfi001djwrnrd9n8vjv","content":"<p>路由可向路由匹配的组件传递参数，<code>不同情况</code>向组件传递不同的参数，从而实现组件的复用。</p>\n<a id=\"more\"></a>\n<p>[TOC]</p>\n<h2 id=\"路由向组件传递参数\"><a class=\"markdownIt-Anchor\" href=\"#路由向组件传递参数\"></a> 路由向组件传递参数</h2>\n<p>和路由匹配的组件可以在组件中使用 <code>$route</code> 获取路由上的参数：</p>\n<h3 id=\"传参方式\"><a class=\"markdownIt-Anchor\" href=\"#传参方式\"></a> 传参方式</h3>\n<p><code>:</code>、<code>params</code>和<code>query</code></p>\n<h4 id=\"在路径传递参数\"><a class=\"markdownIt-Anchor\" href=\"#在路径传递参数\"></a> <code>:</code>在路径传递参数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath: <span class=\"string\">\"/argu/:id/book\"</span>,</span><br><span class=\"line\">\tname: <span class=\"string\">\"argu\"</span>,</span><br><span class=\"line\">\tcomponent: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">\"@/views/ArguPage\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>路径</code>中的一部分是参数，<code>必须</code>传递该参数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--路径跳转--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/argu/123/book\"</span>&gt;</span>path跳转<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--路由名跳转--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123;name:'argu',params:&#123;id:'test'&#125;&#125;\"</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"button\"</span>&gt;</span>name+params跳转<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--获取参数--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;$route.params.id&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"comment\">&lt;!--params的名字路径中的的参数名一致--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时 <code>path</code>+ <code>parmas</code>传递参数，<code>params</code>会被忽略。</p>\n<h4 id=\"paramsname传递参数\"><a class=\"markdownIt-Anchor\" href=\"#paramsname传递参数\"></a> <code>params</code>+<code>name</code>传递参数</h4>\n<p>路由：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath: <span class=\"string\">\"/argu\"</span>,</span><br><span class=\"line\">\tname: <span class=\"string\">\"argu\"</span>,</span><br><span class=\"line\">\tcomponent: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">\"@/views/ArguPage\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>跳转方式是 <code>name</code>+<code>params</code>+（query），通过<code>path</code>跳转，params 会被忽略。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123;name:'argu', params:&#123;name:'hangge'&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">  跳转到 hello</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">// path + params ，params 会被忽略，因为路径中没有定义参数</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123;path:'/argu', params:&#123;name:'hangge'&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">  跳转到 hello</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"query-参数\"><a class=\"markdownIt-Anchor\" href=\"#query-参数\"></a> query 参数</h4>\n<p>query 参数参数，表现为查询字符串，和<code>localtion.serach</code>一样的。</p>\n<p>不需要先在路径中先定义，可通过<code>path</code>、<code>path</code>+<code>query</code> 或者 <code>name</code> + <code>query</code> 传递参数。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/argu?queryName=value\"</span>&gt;</span>跳转到 hello<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123;path:'/argu',query:&#123;queryName:value&#125;&#125;\"</span>&gt;</span>跳转到 argu<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123;name:'argu',query:&#123;queryName:value&#125;&#125;\"</span>&gt;</span>跳转到 argu<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; $route.query.queryName &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>函数传递 query</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主要是  $router 不是 $route</span></span><br><span class=\"line\">go() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.$router.push(&#123;</span><br><span class=\"line\">\t\tname: <span class=\"string\">'argu'</span>,</span><br><span class=\"line\">\t\tquery: &#123;</span><br><span class=\"line\">\t\t\t\tqueryName: <span class=\"string\">\"你好\"</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这样使得 <code>$route</code> 和组件耦合在一起，不方便组件的复用，如果能将路由中的参数传递到 组件的<code>props</code> 就好了，恰恰是可以这样设置的。</p>\n<h3 id=\"props-接收路由的-params\"><a class=\"markdownIt-Anchor\" href=\"#props-接收路由的-params\"></a> props 接收路由的 <code>params</code></h3>\n<p>路由传参数的三种方式：</p>\n<ol>\n<li>布尔模式</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/user/:id'</span>, </span><br><span class=\"line\">    component: User, </span><br><span class=\"line\">    props: <span class=\"literal\">true</span> <span class=\"comment\">//表明 将 id 作为 proos 传递到匹配的组件 User 中。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>User 中定义 props 接收 id:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tprops:&#123;</span><br><span class=\"line\">\t\tid:&#123;</span><br><span class=\"line\">\t\t\ttype:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:<span class=\"string\">'jackzhou'</span><span class=\"comment\">//默认值</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>对象模式</li>\n</ol>\n<p>将路由的 <code>props</code> 属性设置一个对象，也可在组件中获取到该值，这种方式往往用于传递静态值，即 name 值不会变化。</p>\n<p>路由对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'home'</span>,</span><br><span class=\"line\">\talias:<span class=\"string\">'/home_page'</span>,</span><br><span class=\"line\">\tpath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">\tprops:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack jack'</span>&#125;,</span><br><span class=\"line\">\tcomponent: Home</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Home 组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props:&#123;</span><br><span class=\"line\">\tname:&#123;</span><br><span class=\"line\">\t\ttype:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>函数模式</li>\n</ol>\n<p>以上两种方式，params 参数的名字必须和组件中的props 属性名字相同，如果想对 params 进行改造后传递到组件，就可将 <code>props</code> 设置成函数，在函数内获取路由中的 params 或者 query，或者其他属性值，对其进行处理后再传递给组件。</p>\n<p><strong>注意</strong>：这种方式函数必须返回一个对象。</p>\n<p>路由：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'about'</span>,</span><br><span class=\"line\">\tpath: <span class=\"string\">'/about/:years'</span>, <span class=\"comment\">//params 有一个参数 years</span></span><br><span class=\"line\">\tprops:(route) &#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将 years 改造成 name</span></span><br><span class=\"line\">    \tname: (now.getFullYear() + <span class=\"built_in\">parseInt</span>(route.params.years)) + <span class=\"string\">'!'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t    &#125;,</span><br><span class=\"line\">\tcomponent: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/AboutPage'</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组件中的 props:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">\tname: &#123;</span><br><span class=\"line\">\t\ttype: <span class=\"built_in\">String</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>命名视图的路由，要为每个命名视图添加 <code>props</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'/name/:view'</span>,</span><br><span class=\"line\">\tname:<span class=\"string\">'name_view'</span>,</span><br><span class=\"line\">\tcomponents:&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/ChildPage'</span>),</span><br><span class=\"line\">\t\tsister:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/SisterPage'</span>),</span><br><span class=\"line\">\t\tbrother:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/BrotherPage'</span>),</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tprops:&#123;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        sister:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        brother:<span class=\"function\">(<span class=\"params\">route</span>)=&gt;</span>(&#123;<span class=\"attr\">view</span>:route.params.view.toUpperCase()&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整的例子\"><a class=\"markdownIt-Anchor\" href=\"#完整的例子\"></a> 完整的例子</h3>\n\n<p class=\"codepen\" data-height=\"573\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"JackZhouMine\" data-slug-hash=\"JqBzWE\" style=\"height: 573px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"route 的 params 传递组件\">\n  <span>See the Pen <a href=\"https://codepen.io/JackZhouMine/pen/JqBzWE/\" target=\"_blank\" rel=\"noopener\">\n  route 的 params 传递组件</a> by JackZhouMine (<a href=\"https://codepen.io/JackZhouMine\" target=\"_blank\" rel=\"noopener\">@JackZhouMine</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"html5-history-模式\"><a class=\"markdownIt-Anchor\" href=\"#html5-history-模式\"></a> HTML5 History 模式</h2>\n<p>路由配置里有一个属性 <code>mode</code> ，默认值是 <code>hash</code>，以hash来模拟一个url，url改变时，页面不会重新加载。</p>\n<p>先使用普通模式，可将 <code>mode</code> 设置成 <code>history</code>，这种模式会使用 <code>history.pushSate</code> 来完成url跳转而页面不会重新加载。这种模式需要<strong>服务器设置一下</strong>。</p>\n<p>使用 history 模式，因为web应用往往是单页应用，当用户访问一个不存在的路径时，需要提供一个后备页面。</p>\n<p>在路由配置的最后增加一个404路由：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'*'</span>,</span><br><span class=\"line\">\tcomponent:NotFoundPage<span class=\"comment\">// 前面没有匹配的路由，最后会匹配该路由。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"meta-元信息\"><a class=\"markdownIt-Anchor\" href=\"#meta-元信息\"></a> meta 元信息</h2>\n<p>可在路由对象中配置 <code>meta</code> 属性，meta 是一个对象。</p>\n<p>比如，根据不同页面显示不同的 title。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">\"about\"</span>,</span><br><span class=\"line\">\tpath: <span class=\"string\">\"/about\"</span>,</span><br><span class=\"line\">\tmeta: &#123;</span><br><span class=\"line\">\t\ttitle: <span class=\"string\">\"关于\"</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">   \tcomponent: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">\"@/views/AboutPage\"</span>)\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在路由配置文件中，设置各个页面的 title：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router= <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//setTitle 函数用于设置页面标题</span></span><br><span class=\"line\">\tto.meta&amp;&amp;setTitle(to.meta.title) <span class=\"comment\">//这是简化if语句的简写</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.table(to)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.table(<span class=\"keyword\">from</span>)</span><br><span class=\"line\">\tnext()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n<h2 id=\"导航守卫\"><a class=\"markdownIt-Anchor\" href=\"#导航守卫\"></a> 导航守卫</h2>\n<h3 id=\"全局守卫\"><a class=\"markdownIt-Anchor\" href=\"#全局守卫\"></a> 全局守卫</h3>\n<ol>\n<li>全局前置守卫</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path:<span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">        name:<span class=\"string\">\"heom_page\"</span></span><br><span class=\"line\">        component:Home,</span><br><span class=\"line\">        <span class=\"comment\">//路由独享守卫</span></span><br><span class=\"line\">        beforeEnter:<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//处理逻辑</span></span><br><span class=\"line\">            next()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//每次路由进入都会调用</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理逻辑，比如登录判断，可跳转到任意页面</span></span><br><span class=\"line\">    <span class=\"comment\">//不要忘记调用 next，不调用 next，页面不会跳转</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>后置钩子</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//路由跳转之后做一些操作，比如去掉登录样式</span></span><br><span class=\"line\">router.afterEach(<span class=\"function\">(<span class=\"params\">to,form</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//逻辑处理</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>\n<p>路由独享守卫<br>\n只在匹配某个路由时执行。</p>\n</li>\n<li>\n<p>组件内守卫</p>\n</li>\n</ol>\n<p><code>beforeRouteEnter</code>, 组件创建之前调用，组件不具备<code>this</code>；<br>\n<code>beforeRouteUpdate</code>，路由更新，而组件被复用时调用，可使用<code>this</code>；<br>\n<code>beforeRouteLeave</code>，离开路由时调用，可使用<code>this</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">    name:<span class=\"string\">'Home'</span>,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* 组件内路由守卫</span></span><br><span class=\"line\"><span class=\"comment\">\t* 1. 该函数在路由进入时执行</span></span><br><span class=\"line\"><span class=\"comment\">\t* 2. 此时 组件还未渲染，不可用 this,当可在  next 中用 vm</span></span><br><span class=\"line\"><span class=\"comment\">\t* 3. next 晚于 mounted 执行，next 之前的代码，早于beforeCreate \t  *\t   执行</span></span><br><span class=\"line\"><span class=\"comment\">\t* 4. 最后需要调用 next 使得路由跳转</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\tbeforeRouteEnter(to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"①，home 组件内路由守卫，beforeRouteEnter\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// next 晚于 mounted 执行，next 之前的代码，早于beforeCreate 执行</span></span><br><span class=\"line\">\t\tnext(<span class=\"function\">(<span class=\"params\">vm</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'vm'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(vm)<span class=\"comment\">//有值</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'this'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)<span class=\"comment\">// undefined</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'②，home 组件内路由守卫，beforeRouteEnter'</span>);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* 组件内路由守卫</span></span><br><span class=\"line\"><span class=\"comment\">\t* 1. 该函数在路由离开时执行,最先调用,然后在调用全局守卫，再调用\t\t*\t beforeDestroy</span></span><br><span class=\"line\"><span class=\"comment\">\t* 2. 此时，该路由守卫所在组件已渲染，可用 this</span></span><br><span class=\"line\"><span class=\"comment\">\t* 3. 最后需要调用 next 使得路由跳转</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tbeforeRouteLeave(to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"①，home 组件内路由守卫，beforeRouteLeave\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> leave = confirm(<span class=\"string\">\"你确定要离开 home 页吗？\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (leave) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// console.log(to.name, from.name);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// console.log(this);</span></span><br><span class=\"line\">\t\tnext(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'②，home 组件内路由守卫，beforeRouteLeave'</span>);</span><br><span class=\"line\">\t\t\t&#125;); <span class=\"comment\">//给 next 传递 false ,路由不会跳转</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tnext(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t* 当路由发生变化，而组件被复用时调用</span></span><br><span class=\"line\"><span class=\"comment\">\t* 1. 此时该复用组件已被渲染，可用 this</span></span><br><span class=\"line\"><span class=\"comment\">\t* 2. 需要调用 next，组件才能渲染</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\tbeforeRouteUpdate(to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'①，argu，组件内路由守卫，beforeRouteUpdate'</span>);</span><br><span class=\"line\">\t\tnext(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'next，argu，组件内路由守卫，beforeRouteUpdate'</span>);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeCreate() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeCreate'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tcreated() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'created'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeMount() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeMount'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmounted() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'mounted'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeUpdate() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeUpdate'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tupdated() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'updated'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeDestroy() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeDestroy'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tdestroyed() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'destroyed'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>路由全过程：</p>\n<ol>\n<li>导航被触发</li>\n<li>离开页面（失活的组件）里调用离开守卫 beforeRouteLeave</li>\n<li>调用<code>全局前置守卫</code> beforeEach</li>\n<li>在重用的组件里调用 beforeRouteUpdate (非重用组件，没有这个步骤)</li>\n<li>调用路由独享守卫 beforeEnter</li>\n<li>解析异步路由组件</li>\n<li>在进入页面（激活组件）调用 beforeRouteEnter</li>\n<li>调用<code>全局解析守卫</code> beforeResolve （导航被确认之前，组件内守卫和异步路由组件被解析之后，调用 beforeResolve）</li>\n<li>导航被确认（什么时候被确认，全部钩子执行完了，是被确认的）</li>\n<li>调用<code>全局后置守卫</code> afterEach</li>\n<li>触发 DOM 更新</li>\n<li>在 vue 实例中（此时页面解析完毕了吗？是的）调用 beforeRouterEnter 守卫里传给 next 的回调。<code>next</code>在<code>mounted</code>之后被调用。</li>\n</ol>\n<h2 id=\"过渡效果\"><a class=\"markdownIt-Anchor\" href=\"#过渡效果\"></a> 过渡效果</h2>\n<p>可以给路由匹配的组件设置过渡效果，让页面平滑地显示，提升用户体验。<br>\n需要用到 <code>transition</code> 标签，如果有多个视图需要过渡，则用 <code>transition-group</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">name</span>=<span class=\"string\">'router-view'</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 视图渲染组件,该组件内不需要房子任何内容，可写成只闭合标签--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">router-view</span>  <span class=\"attr\">key</span>=<span class=\"string\">'default'</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 有多个路由视图需要匹配，则用命名视图 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">key</span>=<span class=\"string\">'sister'</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sister\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">key</span>=<span class=\"string\">'brother'</span> <span class=\"attr\">name</span>=<span class=\"string\">\"brother\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 过渡效果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.router-view-enter</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.router-view-enter-active</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">transition</span>: opacity <span class=\"number\">1s</span> ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.router-view-enter-to</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.router-view-leave</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.router-view-leave-active</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">transition</span>: opacity <span class=\"number\">1s</span> ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.router-view-leave-to</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些设置，每个页面的效果都是一样的，要为不同的页面设置不同的效果，可用路由传递相应的参数来，让动态绑定到 transition 的 name 属性上。</p>\n<p>或者监听路由变化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">\t<span class=\"string\">'$route'</span>(to)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(to);</span><br><span class=\"line\">\t\tto.params&amp;&amp;to.params.view&amp;&amp;(<span class=\"keyword\">this</span>.effect = to.params.view)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"http://www.hangge.com/blog/cache/detail_2121.html\" target=\"_blank\" rel=\"noopener\">Vue.js - 路由 vue-router 的使用详解2（参数传递）</a></p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>路由可向路由匹配的组件传递参数，<code>不同情况</code>向组件传递不同的参数，从而实现组件的复用。</p>","more":"<p>[TOC]</p>\n<h2 id=\"路由向组件传递参数\"><a class=\"markdownIt-Anchor\" href=\"#路由向组件传递参数\"></a> 路由向组件传递参数</h2>\n<p>和路由匹配的组件可以在组件中使用 <code>$route</code> 获取路由上的参数：</p>\n<h3 id=\"传参方式\"><a class=\"markdownIt-Anchor\" href=\"#传参方式\"></a> 传参方式</h3>\n<p><code>:</code>、<code>params</code>和<code>query</code></p>\n<h4 id=\"在路径传递参数\"><a class=\"markdownIt-Anchor\" href=\"#在路径传递参数\"></a> <code>:</code>在路径传递参数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath: <span class=\"string\">\"/argu/:id/book\"</span>,</span><br><span class=\"line\">\tname: <span class=\"string\">\"argu\"</span>,</span><br><span class=\"line\">\tcomponent: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">\"@/views/ArguPage\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>路径</code>中的一部分是参数，<code>必须</code>传递该参数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--路径跳转--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/argu/123/book\"</span>&gt;</span>path跳转<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--路由名跳转--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123;name:'argu',params:&#123;id:'test'&#125;&#125;\"</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"button\"</span>&gt;</span>name+params跳转<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--获取参数--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;$route.params.id&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"comment\">&lt;!--params的名字路径中的的参数名一致--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时 <code>path</code>+ <code>parmas</code>传递参数，<code>params</code>会被忽略。</p>\n<h4 id=\"paramsname传递参数\"><a class=\"markdownIt-Anchor\" href=\"#paramsname传递参数\"></a> <code>params</code>+<code>name</code>传递参数</h4>\n<p>路由：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath: <span class=\"string\">\"/argu\"</span>,</span><br><span class=\"line\">\tname: <span class=\"string\">\"argu\"</span>,</span><br><span class=\"line\">\tcomponent: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">\"@/views/ArguPage\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>跳转方式是 <code>name</code>+<code>params</code>+（query），通过<code>path</code>跳转，params 会被忽略。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123;name:'argu', params:&#123;name:'hangge'&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">  跳转到 hello</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">// path + params ，params 会被忽略，因为路径中没有定义参数</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123;path:'/argu', params:&#123;name:'hangge'&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">  跳转到 hello</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"query-参数\"><a class=\"markdownIt-Anchor\" href=\"#query-参数\"></a> query 参数</h4>\n<p>query 参数参数，表现为查询字符串，和<code>localtion.serach</code>一样的。</p>\n<p>不需要先在路径中先定义，可通过<code>path</code>、<code>path</code>+<code>query</code> 或者 <code>name</code> + <code>query</code> 传递参数。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/argu?queryName=value\"</span>&gt;</span>跳转到 hello<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123;path:'/argu',query:&#123;queryName:value&#125;&#125;\"</span>&gt;</span>跳转到 argu<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123;name:'argu',query:&#123;queryName:value&#125;&#125;\"</span>&gt;</span>跳转到 argu<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; $route.query.queryName &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>函数传递 query</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主要是  $router 不是 $route</span></span><br><span class=\"line\">go() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.$router.push(&#123;</span><br><span class=\"line\">\t\tname: <span class=\"string\">'argu'</span>,</span><br><span class=\"line\">\t\tquery: &#123;</span><br><span class=\"line\">\t\t\t\tqueryName: <span class=\"string\">\"你好\"</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这样使得 <code>$route</code> 和组件耦合在一起，不方便组件的复用，如果能将路由中的参数传递到 组件的<code>props</code> 就好了，恰恰是可以这样设置的。</p>\n<h3 id=\"props-接收路由的-params\"><a class=\"markdownIt-Anchor\" href=\"#props-接收路由的-params\"></a> props 接收路由的 <code>params</code></h3>\n<p>路由传参数的三种方式：</p>\n<ol>\n<li>布尔模式</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/user/:id'</span>, </span><br><span class=\"line\">    component: User, </span><br><span class=\"line\">    props: <span class=\"literal\">true</span> <span class=\"comment\">//表明 将 id 作为 proos 传递到匹配的组件 User 中。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>User 中定义 props 接收 id:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tprops:&#123;</span><br><span class=\"line\">\t\tid:&#123;</span><br><span class=\"line\">\t\t\ttype:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:<span class=\"string\">'jackzhou'</span><span class=\"comment\">//默认值</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>对象模式</li>\n</ol>\n<p>将路由的 <code>props</code> 属性设置一个对象，也可在组件中获取到该值，这种方式往往用于传递静态值，即 name 值不会变化。</p>\n<p>路由对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'home'</span>,</span><br><span class=\"line\">\talias:<span class=\"string\">'/home_page'</span>,</span><br><span class=\"line\">\tpath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">\tprops:&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack jack'</span>&#125;,</span><br><span class=\"line\">\tcomponent: Home</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Home 组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props:&#123;</span><br><span class=\"line\">\tname:&#123;</span><br><span class=\"line\">\t\ttype:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>函数模式</li>\n</ol>\n<p>以上两种方式，params 参数的名字必须和组件中的props 属性名字相同，如果想对 params 进行改造后传递到组件，就可将 <code>props</code> 设置成函数，在函数内获取路由中的 params 或者 query，或者其他属性值，对其进行处理后再传递给组件。</p>\n<p><strong>注意</strong>：这种方式函数必须返回一个对象。</p>\n<p>路由：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'about'</span>,</span><br><span class=\"line\">\tpath: <span class=\"string\">'/about/:years'</span>, <span class=\"comment\">//params 有一个参数 years</span></span><br><span class=\"line\">\tprops:(route) &#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将 years 改造成 name</span></span><br><span class=\"line\">    \tname: (now.getFullYear() + <span class=\"built_in\">parseInt</span>(route.params.years)) + <span class=\"string\">'!'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t    &#125;,</span><br><span class=\"line\">\tcomponent: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/AboutPage'</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组件中的 props:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">\tname: &#123;</span><br><span class=\"line\">\t\ttype: <span class=\"built_in\">String</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>命名视图的路由，要为每个命名视图添加 <code>props</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'/name/:view'</span>,</span><br><span class=\"line\">\tname:<span class=\"string\">'name_view'</span>,</span><br><span class=\"line\">\tcomponents:&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/ChildPage'</span>),</span><br><span class=\"line\">\t\tsister:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/SisterPage'</span>),</span><br><span class=\"line\">\t\tbrother:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">'@/views/BrotherPage'</span>),</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tprops:&#123;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        sister:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        brother:<span class=\"function\">(<span class=\"params\">route</span>)=&gt;</span>(&#123;<span class=\"attr\">view</span>:route.params.view.toUpperCase()&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整的例子\"><a class=\"markdownIt-Anchor\" href=\"#完整的例子\"></a> 完整的例子</h3>\n\n<p class=\"codepen\" data-height=\"573\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"JackZhouMine\" data-slug-hash=\"JqBzWE\" style=\"height: 573px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"route 的 params 传递组件\">\n  <span>See the Pen <a href=\"https://codepen.io/JackZhouMine/pen/JqBzWE/\" target=\"_blank\" rel=\"noopener\">\n  route 的 params 传递组件</a> by JackZhouMine (<a href=\"https://codepen.io/JackZhouMine\" target=\"_blank\" rel=\"noopener\">@JackZhouMine</a>)\n  on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"html5-history-模式\"><a class=\"markdownIt-Anchor\" href=\"#html5-history-模式\"></a> HTML5 History 模式</h2>\n<p>路由配置里有一个属性 <code>mode</code> ，默认值是 <code>hash</code>，以hash来模拟一个url，url改变时，页面不会重新加载。</p>\n<p>先使用普通模式，可将 <code>mode</code> 设置成 <code>history</code>，这种模式会使用 <code>history.pushSate</code> 来完成url跳转而页面不会重新加载。这种模式需要<strong>服务器设置一下</strong>。</p>\n<p>使用 history 模式，因为web应用往往是单页应用，当用户访问一个不存在的路径时，需要提供一个后备页面。</p>\n<p>在路由配置的最后增加一个404路由：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">'*'</span>,</span><br><span class=\"line\">\tcomponent:NotFoundPage<span class=\"comment\">// 前面没有匹配的路由，最后会匹配该路由。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"meta-元信息\"><a class=\"markdownIt-Anchor\" href=\"#meta-元信息\"></a> meta 元信息</h2>\n<p>可在路由对象中配置 <code>meta</code> 属性，meta 是一个对象。</p>\n<p>比如，根据不同页面显示不同的 title。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">\"about\"</span>,</span><br><span class=\"line\">\tpath: <span class=\"string\">\"/about\"</span>,</span><br><span class=\"line\">\tmeta: &#123;</span><br><span class=\"line\">\t\ttitle: <span class=\"string\">\"关于\"</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">   \tcomponent: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">\"@/views/AboutPage\"</span>)\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在路由配置文件中，设置各个页面的 title：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router= <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//setTitle 函数用于设置页面标题</span></span><br><span class=\"line\">\tto.meta&amp;&amp;setTitle(to.meta.title) <span class=\"comment\">//这是简化if语句的简写</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.table(to)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.table(<span class=\"keyword\">from</span>)</span><br><span class=\"line\">\tnext()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n<h2 id=\"导航守卫\"><a class=\"markdownIt-Anchor\" href=\"#导航守卫\"></a> 导航守卫</h2>\n<h3 id=\"全局守卫\"><a class=\"markdownIt-Anchor\" href=\"#全局守卫\"></a> 全局守卫</h3>\n<ol>\n<li>全局前置守卫</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path:<span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">        name:<span class=\"string\">\"heom_page\"</span></span><br><span class=\"line\">        component:Home,</span><br><span class=\"line\">        <span class=\"comment\">//路由独享守卫</span></span><br><span class=\"line\">        beforeEnter:<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//处理逻辑</span></span><br><span class=\"line\">            next()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//每次路由进入都会调用</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理逻辑，比如登录判断，可跳转到任意页面</span></span><br><span class=\"line\">    <span class=\"comment\">//不要忘记调用 next，不调用 next，页面不会跳转</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>后置钩子</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//路由跳转之后做一些操作，比如去掉登录样式</span></span><br><span class=\"line\">router.afterEach(<span class=\"function\">(<span class=\"params\">to,form</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//逻辑处理</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>\n<p>路由独享守卫<br>\n只在匹配某个路由时执行。</p>\n</li>\n<li>\n<p>组件内守卫</p>\n</li>\n</ol>\n<p><code>beforeRouteEnter</code>, 组件创建之前调用，组件不具备<code>this</code>；<br>\n<code>beforeRouteUpdate</code>，路由更新，而组件被复用时调用，可使用<code>this</code>；<br>\n<code>beforeRouteLeave</code>，离开路由时调用，可使用<code>this</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">    name:<span class=\"string\">'Home'</span>,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* 组件内路由守卫</span></span><br><span class=\"line\"><span class=\"comment\">\t* 1. 该函数在路由进入时执行</span></span><br><span class=\"line\"><span class=\"comment\">\t* 2. 此时 组件还未渲染，不可用 this,当可在  next 中用 vm</span></span><br><span class=\"line\"><span class=\"comment\">\t* 3. next 晚于 mounted 执行，next 之前的代码，早于beforeCreate \t  *\t   执行</span></span><br><span class=\"line\"><span class=\"comment\">\t* 4. 最后需要调用 next 使得路由跳转</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\tbeforeRouteEnter(to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"①，home 组件内路由守卫，beforeRouteEnter\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// next 晚于 mounted 执行，next 之前的代码，早于beforeCreate 执行</span></span><br><span class=\"line\">\t\tnext(<span class=\"function\">(<span class=\"params\">vm</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'vm'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(vm)<span class=\"comment\">//有值</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'this'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)<span class=\"comment\">// undefined</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'②，home 组件内路由守卫，beforeRouteEnter'</span>);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* 组件内路由守卫</span></span><br><span class=\"line\"><span class=\"comment\">\t* 1. 该函数在路由离开时执行,最先调用,然后在调用全局守卫，再调用\t\t*\t beforeDestroy</span></span><br><span class=\"line\"><span class=\"comment\">\t* 2. 此时，该路由守卫所在组件已渲染，可用 this</span></span><br><span class=\"line\"><span class=\"comment\">\t* 3. 最后需要调用 next 使得路由跳转</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tbeforeRouteLeave(to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"①，home 组件内路由守卫，beforeRouteLeave\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> leave = confirm(<span class=\"string\">\"你确定要离开 home 页吗？\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (leave) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// console.log(to.name, from.name);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// console.log(this);</span></span><br><span class=\"line\">\t\tnext(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'②，home 组件内路由守卫，beforeRouteLeave'</span>);</span><br><span class=\"line\">\t\t\t&#125;); <span class=\"comment\">//给 next 传递 false ,路由不会跳转</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tnext(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t* 当路由发生变化，而组件被复用时调用</span></span><br><span class=\"line\"><span class=\"comment\">\t* 1. 此时该复用组件已被渲染，可用 this</span></span><br><span class=\"line\"><span class=\"comment\">\t* 2. 需要调用 next，组件才能渲染</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\tbeforeRouteUpdate(to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'①，argu，组件内路由守卫，beforeRouteUpdate'</span>);</span><br><span class=\"line\">\t\tnext(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'next，argu，组件内路由守卫，beforeRouteUpdate'</span>);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeCreate() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeCreate'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tcreated() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'created'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeMount() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeMount'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmounted() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'mounted'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeUpdate() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeUpdate'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tupdated() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'updated'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeDestroy() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeDestroy'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tdestroyed() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'destroyed'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>路由全过程：</p>\n<ol>\n<li>导航被触发</li>\n<li>离开页面（失活的组件）里调用离开守卫 beforeRouteLeave</li>\n<li>调用<code>全局前置守卫</code> beforeEach</li>\n<li>在重用的组件里调用 beforeRouteUpdate (非重用组件，没有这个步骤)</li>\n<li>调用路由独享守卫 beforeEnter</li>\n<li>解析异步路由组件</li>\n<li>在进入页面（激活组件）调用 beforeRouteEnter</li>\n<li>调用<code>全局解析守卫</code> beforeResolve （导航被确认之前，组件内守卫和异步路由组件被解析之后，调用 beforeResolve）</li>\n<li>导航被确认（什么时候被确认，全部钩子执行完了，是被确认的）</li>\n<li>调用<code>全局后置守卫</code> afterEach</li>\n<li>触发 DOM 更新</li>\n<li>在 vue 实例中（此时页面解析完毕了吗？是的）调用 beforeRouterEnter 守卫里传给 next 的回调。<code>next</code>在<code>mounted</code>之后被调用。</li>\n</ol>\n<h2 id=\"过渡效果\"><a class=\"markdownIt-Anchor\" href=\"#过渡效果\"></a> 过渡效果</h2>\n<p>可以给路由匹配的组件设置过渡效果，让页面平滑地显示，提升用户体验。<br>\n需要用到 <code>transition</code> 标签，如果有多个视图需要过渡，则用 <code>transition-group</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">name</span>=<span class=\"string\">'router-view'</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 视图渲染组件,该组件内不需要房子任何内容，可写成只闭合标签--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">router-view</span>  <span class=\"attr\">key</span>=<span class=\"string\">'default'</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 有多个路由视图需要匹配，则用命名视图 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">key</span>=<span class=\"string\">'sister'</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sister\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">key</span>=<span class=\"string\">'brother'</span> <span class=\"attr\">name</span>=<span class=\"string\">\"brother\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 过渡效果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.router-view-enter</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.router-view-enter-active</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">transition</span>: opacity <span class=\"number\">1s</span> ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.router-view-enter-to</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.router-view-leave</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.router-view-leave-active</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">transition</span>: opacity <span class=\"number\">1s</span> ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.router-view-leave-to</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些设置，每个页面的效果都是一样的，要为不同的页面设置不同的效果，可用路由传递相应的参数来，让动态绑定到 transition 的 name 属性上。</p>\n<p>或者监听路由变化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">\t<span class=\"string\">'$route'</span>(to)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(to);</span><br><span class=\"line\">\t\tto.params&amp;&amp;to.params.view&amp;&amp;(<span class=\"keyword\">this</span>.effect = to.params.view)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"http://www.hangge.com/blog/cache/detail_2121.html\" target=\"_blank\" rel=\"noopener\">Vue.js - 路由 vue-router 的使用详解2（参数传递）</a></p>"},{"title":"vue 状态管理（一）","date":"2019-05-25T19:03:39.000Z","_content":"\n父子组件之间往往使用**props**和 **\\$emit** 实现数据共享，任意组件可通过**bus（一个vue实例）**作为桥梁，实现数据共享。当项目中组件越来越多时，组件之间的数据共享变得复杂，难以维护。使用 Vuex 可**集中管理**组件之间的数据（状态），使组件之间的**数据共享**变得简单。\n\n<!-- more -->\n\n## 父子组件间通信\n\n父→（props）子组件；子→（\\$meit）父组件，即子组件自定义一个事件，在父组件中监听该事件。\n\n自定义输入组件：\n```html\n<template>\n\t<input @input=\"handleInput\" :value=\"value\" :placeholder=\"placeholder\" />\n</template>\n<script>\n\texport default {\n\t\tname: \"CustomInput\",\n\t\t//props 接收父组件传递过来的数据\n\t\tprops: {\n\t\t\tvalue: {\n\t\t\t\ttype: [Number, String],\n\t\t\t\trequired: true,\n\t\t\t\tdefault: \"\"\n\t\t\t},\n\t\t\tplaceholder: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: \"提示文本\"\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\thandleInput(event) {\n\t\t\t\tlet val = event.target.value;\n\t\t\t\t// 子组件的事件监听函数中触发一个自定义事件\n\t\t\t\tthis.$emit(\"customInput\", val);\n\t\t\t}\n\t\t}\n\t};\n</script>\n```\n\n使用组件：\n```html\n<template>\n\t<div class=\"store\">\n\t\t<!-- props 传递值 -->\n\t\t<custom-input :value=\"value\" @customInput=\"handleInput\" :placeholder=\"placeholder\" />\n\t\t<p v-text=\"value\"></p>\n\t</div>\n</template>\n<script>\n\timport CustomInput from '_c/CustomInput.vue'\n\texport default {\n\t\tname: 'Store',\n\t\tcomponents: {\n\t\t\tCustomInput\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tvalue: '',\n\t\t\t\tplaceholder: '自定义事件传递值'\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\t//  自定义事假处理器\n\t\t\thandleInput(val) {\n\t\t\t\tthis.value = val\n\t\t\t}\n\t\t}\n\t}\n</script>\n```\n因为 `v-model` 指令是双向绑定的，我们也可以用其来实现值的传递：\n```html\n<template>\n\t<div class=\"store\">\n\t\t<custom-input v-model=\"inputValue\" :placeholder=\"placeholder\" />\n\t\t<p v-text=\"inputValue\"></p>\n\t</div>\n</template>\n<script>\n\timport CustomInput from '_c/CustomInput.vue'\n\texport default {\n\t\tname: 'Store',\n\t\tcomponents: {\n\t\t\tCustomInput\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tinputValue: '',\n\t\t\t\tplaceholder: 'v-mode 传递值'\n\t\t\t}\n\t\t}\n\t}\n</script>\n```\n\n## bus 任意组件通信\n\n创建一个空的 vue 实例，然后将该实例添加到 vue 的原型上，通过该实例`触发事件`和`监听事件`来在不同组件之间共享数据。\n```js\n//bus.js\nimport Vue from \"vue\";\nlet Bus = new Vue();\nexport default Bus;\n```\n在 main.js 中添加原型属性：\n```js\nimport Bus from './lib/bus'\n// 通过 bus 实现任意组件传递参数\nVue.prototype.$bus=bus\n```\n```html\n//ChildPage.vue\n<template>\n\t<div id=\"child-page\">\n\t\t<h1>{{ msg }}</h1>\n\t\t<h3 v-text=\"data\"></h3>\n\t</div>\n</template>\n<script>\n\texport default {\n\t\tname: \"ChildPage\",\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tmsg: \"I am child\",\n\t\t\t\tdata: \"\"\n\t\t\t};\n\t\t},\n\t\tmounted() {\n\t\t\t// 在挂载声明周期函数中监听自定义事件\n\t\t\tthis.$bus.$on(\"customEvent\", data => {\n\t\t\t\tthis.data = data;\n\t\t\t});\n\t\t}\n\t};\n</script>\n```\n```html\n<template>\n\t<div id=\"app\">\n\t\t<button @click=\"sendData\">给child传递数据</button>\n\t\t<p v-text=\"num\"></p>\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\tname: \"App\",\n\t\tdata() {\n\t\t\treturn { num: 0 }\n\t\t},\n\t\tmethods: {\n\t\t\tsendData(data) {\n\t\t\t\t// 由 bus 触发一个事件，在接收数据的组件中监听该事件\n\t\t\t\tthis.$bus.$emit('customEvent', ++this.num);\n\t\t\t}\n\t\t}\n\t};\n</script>\n```\n\n## Vuex 状态管理\n\n随着组件的增加，通过以上方式共享数据，会越来越复杂，vue 提供了状态管理插件 `Vuex`。\n\n> Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式；集中存储和管理应用的所有组件状态。\n\n理解：\n- **状态**：数据，相当于组件内部的**data 的返回值**，Vue 是数据驱动的，数据变化往往会表现在视图层；\n- **集中存储**：[Vue 只关注视图层](https://cn.vuejs.org/v2/guide/#Vue-js-%E6%98%AF%E4%BB%80%E4%B9%88)，Vuex 提供了一个仓库（store）来保存数据，使得数据和视图分离；\n- **管理**：处理保存数据，还可计算、处理数据；\n- **所有组件状态**：所有组件都可获取仓库中的数据，即一个项目只有一个数据源。\n\nVuex 文档中说：\n>通过定义和**隔离**状态管理中的各种概念并通过强制规则维持视图和状态间的**独立性**，我们的代码将会变得更结构化且易维护。\n\nVuex 就是通过隔离数据、拆分改变数据的方式使得数据和视图独立，数据被组件数共享。\n\n![Vuex 状态图](https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/vuex.png \"Vuex状态图\")\n\n虚线内部的三个部分组成了一个Store,组件的数据保存在 `State` 中，用户和组件交互时，通过组件内的方法分发（dispatch）一个动作（action，有点像事件），动作会提交（Commit）一个更改（Mutation，也类似事件），改变 State 中的数据，然后获取数据渲染到视图上。\n\n- actions *可以是* 异步操作，故可在action中调用后台接口获取新的数据；\n- mutations *只能是* 同步操作；\n- mutations 和 actions 都可直接更改 state，但是当 action 含有异步操作时，会使得数据变化混乱，难以跟踪，使得调试困难；\n- 基于以上原因，Vuex 规定只能是 mutations 来改变 state。\n- 在开发工具中也可提交 mutations。\n\n### 使用 vuex\n\n```js\n//main.js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);// Vuex 是 Vue 的插件\n\nlet store = new Vuex.Store({\n\tstate: {     //放置state的值\n    \tcount: 0,\n    \tstr:\"abcd234\"\n    },\n  \tgetters: {   //放置getters方法\n      \tstrLen: state => state.str.length\n  \t},\n  \t// mutations只能是同步操作\n  \tmutations: {   //放置mutations方法\n       increment(state, payload) {\n          //在这里改变state中的数据\n          state.count = payload.number;\n       }\n  \t},\n  \t// actions可以是异步操作\n  \tactions: {      //放置actions方法\n       \tactionName({ commit }) {\n          \t//dosomething\n         \tcommit('mutationName')\n       \t},\n       \tgetSong ({commit}, id) {\n\t\t\t\t\t  //请求后台数据\n          \tapi.getMusicUrlResource(id).then(res => {\n            \tlet url = res.data.data[0].url;\n          \t})\n          \t.catch((error) => {  // 错误处理\n              \tconsole.log(error);\n         \t});\n      \t}\n\t}\n});\n\nnew Vue({\n  el: '#app',\n  store  //  通过 this.store 访问 store\n});\n```\n我们看看 Vuex 和 store 是什么？\n\nVuex：\n\n![Vuex输出](https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/vuexStore.png)\n\nVuex 它实际上是一个对象，里面包含了Store这一构造函数，还有几个mapActions、mapGetters、mapMutations、mapState、install 方法。\n\nstore：\n\n![store仓库](https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/vuex-store.png)\n\nstore 是 Vuex 的实例（废话）。\n\n实际项目中往往将 store 单独放置的一个文件夹在，mutations 、getters、actions 等属性各自用一个文件保存。\n\n### state \n\nstate 对象的属性时 Vuex 管理的状态，类似单个组建的 data。\n\n访问 getters:\n\n1. `this.$store.state`；\n2. 使用 `mapState` 映射成计算属性，`推荐`。\n\n```js\n//state.js\nexport default {\n\tcount: 100,\n\tname: 'Jack*Zhou',\n\tfirstName: 'Jack',\n\tlastName: 'Zhou',\n\tage: 24,\n\tprofession: 'web deveploper',\n\tcompany: 'Baidu'\n}\n```\n组件：\n```js\nimport {mapState} from 'vuex'\nexport default {\n\tdata(){\n\t\treturn {\n\t\t\tlocalCount:0\n\t\t}\n\t},\n\tcomputed: {\n\t\t\tlocalCount() {\n\t\t\t\treturn this.$store.state.count + 1;\n\t\t\t},\n\t\t\t//计算属性名和 state 属性名相同:传入数组\n\t\t\t// ...mapState(['count','name']),\n\t\t\t// 计算属性名和 state 属性不同，传入对象\n\t\t\t...mapState({\n\t\t\t\tname: state => state.name,\n\t\t\t\tcount: state => state.count,\n\t\t\t\tcountAlias: 'count',\n\t\t\t\t//为了使用 this 不能使用箭头函数\n\t\t\t\tcountPlusLocalCount(state) {\n\t\t\t\t\treturn state.count + this.localCount;\n\t\t\t\t}\n\t\t\t})\n\t\t},\n}\n```\n### getters\n\ngetters 是对 state 的加工，类似于组件中的 data 和计算属性的关系。getters 的返回值会被缓存起来，只有当它的依赖改变，才会重新计算。\n\n访问 getters:\n\n1. `this.$store.getters`；\n2. 使用 `mapGetters` 将 getters 映射成计算属性，`推荐`；\n3. 方法访问，不会缓存。\n\n```js\n// getters.js\nexport default {\n\tfullName: state => state.firstName + ' ' + state.lastName,\n\t//在getters 中访问 getters\n\tinfo: (state, getters) => {\n\t\treturn state.age + ',' + getters.fullName;\n\t},\n\t//为了传递参数，返回一个函数，\n\tpersonInfo: (state, getters) => (city) => {\n\t\treturn {\n\t\t\tname: getters.fullName,\n\t\t\tage: state.age,\n\t\t\tcompany: state.company,\n\t\t\tcity\n\t\t}\n\t}\n}\n```\n使用 getters:\n```js\nimport { mapGetters } from 'vuex'\nexport default {\n\tname: 'Store',\n\tcomputed: {\n\t\t...mapGetters(['fullName', 'info', 'personInfo']),\n\t\tmyInfo() { return this.personInfo('杭州') },\n\t\t...mapGetters({\n\t\t\tfullNameAlias1: 'fullName',\n\t\t\t//不能写成函数\n\t\t\t// fullNameAlias2(state){\n\t\t\t// \treturn state.name+'，你好'+this.$store.getters.fullName;\n\t\t\t// }\n\t\t})\n\t},\n\tmounted() {\n\t\tconsole.log(this.personInfo('成都'))\n\t\tconsole.log(this.myInfo)\n\t}\n}\n```\n\n## 参考\n- [理解Vuex，看这篇就够了](https://mobilesite.github.io/2016/12/18/vuex-introduction/)\n- [vuex 文档](https://vuex.vuejs.org/zh/)","source":"_posts/vue-状态管理（一）.md","raw":"---\ntitle: vue 状态管理（一）\ndate: 2019-05-26 03:03:39\ntags:\n- vue\n- vuex\ncategories:\n- [vue]\n- [前端框架]\n---\n\n父子组件之间往往使用**props**和 **\\$emit** 实现数据共享，任意组件可通过**bus（一个vue实例）**作为桥梁，实现数据共享。当项目中组件越来越多时，组件之间的数据共享变得复杂，难以维护。使用 Vuex 可**集中管理**组件之间的数据（状态），使组件之间的**数据共享**变得简单。\n\n<!-- more -->\n\n## 父子组件间通信\n\n父→（props）子组件；子→（\\$meit）父组件，即子组件自定义一个事件，在父组件中监听该事件。\n\n自定义输入组件：\n```html\n<template>\n\t<input @input=\"handleInput\" :value=\"value\" :placeholder=\"placeholder\" />\n</template>\n<script>\n\texport default {\n\t\tname: \"CustomInput\",\n\t\t//props 接收父组件传递过来的数据\n\t\tprops: {\n\t\t\tvalue: {\n\t\t\t\ttype: [Number, String],\n\t\t\t\trequired: true,\n\t\t\t\tdefault: \"\"\n\t\t\t},\n\t\t\tplaceholder: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: \"提示文本\"\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\thandleInput(event) {\n\t\t\t\tlet val = event.target.value;\n\t\t\t\t// 子组件的事件监听函数中触发一个自定义事件\n\t\t\t\tthis.$emit(\"customInput\", val);\n\t\t\t}\n\t\t}\n\t};\n</script>\n```\n\n使用组件：\n```html\n<template>\n\t<div class=\"store\">\n\t\t<!-- props 传递值 -->\n\t\t<custom-input :value=\"value\" @customInput=\"handleInput\" :placeholder=\"placeholder\" />\n\t\t<p v-text=\"value\"></p>\n\t</div>\n</template>\n<script>\n\timport CustomInput from '_c/CustomInput.vue'\n\texport default {\n\t\tname: 'Store',\n\t\tcomponents: {\n\t\t\tCustomInput\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tvalue: '',\n\t\t\t\tplaceholder: '自定义事件传递值'\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\t//  自定义事假处理器\n\t\t\thandleInput(val) {\n\t\t\t\tthis.value = val\n\t\t\t}\n\t\t}\n\t}\n</script>\n```\n因为 `v-model` 指令是双向绑定的，我们也可以用其来实现值的传递：\n```html\n<template>\n\t<div class=\"store\">\n\t\t<custom-input v-model=\"inputValue\" :placeholder=\"placeholder\" />\n\t\t<p v-text=\"inputValue\"></p>\n\t</div>\n</template>\n<script>\n\timport CustomInput from '_c/CustomInput.vue'\n\texport default {\n\t\tname: 'Store',\n\t\tcomponents: {\n\t\t\tCustomInput\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tinputValue: '',\n\t\t\t\tplaceholder: 'v-mode 传递值'\n\t\t\t}\n\t\t}\n\t}\n</script>\n```\n\n## bus 任意组件通信\n\n创建一个空的 vue 实例，然后将该实例添加到 vue 的原型上，通过该实例`触发事件`和`监听事件`来在不同组件之间共享数据。\n```js\n//bus.js\nimport Vue from \"vue\";\nlet Bus = new Vue();\nexport default Bus;\n```\n在 main.js 中添加原型属性：\n```js\nimport Bus from './lib/bus'\n// 通过 bus 实现任意组件传递参数\nVue.prototype.$bus=bus\n```\n```html\n//ChildPage.vue\n<template>\n\t<div id=\"child-page\">\n\t\t<h1>{{ msg }}</h1>\n\t\t<h3 v-text=\"data\"></h3>\n\t</div>\n</template>\n<script>\n\texport default {\n\t\tname: \"ChildPage\",\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tmsg: \"I am child\",\n\t\t\t\tdata: \"\"\n\t\t\t};\n\t\t},\n\t\tmounted() {\n\t\t\t// 在挂载声明周期函数中监听自定义事件\n\t\t\tthis.$bus.$on(\"customEvent\", data => {\n\t\t\t\tthis.data = data;\n\t\t\t});\n\t\t}\n\t};\n</script>\n```\n```html\n<template>\n\t<div id=\"app\">\n\t\t<button @click=\"sendData\">给child传递数据</button>\n\t\t<p v-text=\"num\"></p>\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\tname: \"App\",\n\t\tdata() {\n\t\t\treturn { num: 0 }\n\t\t},\n\t\tmethods: {\n\t\t\tsendData(data) {\n\t\t\t\t// 由 bus 触发一个事件，在接收数据的组件中监听该事件\n\t\t\t\tthis.$bus.$emit('customEvent', ++this.num);\n\t\t\t}\n\t\t}\n\t};\n</script>\n```\n\n## Vuex 状态管理\n\n随着组件的增加，通过以上方式共享数据，会越来越复杂，vue 提供了状态管理插件 `Vuex`。\n\n> Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式；集中存储和管理应用的所有组件状态。\n\n理解：\n- **状态**：数据，相当于组件内部的**data 的返回值**，Vue 是数据驱动的，数据变化往往会表现在视图层；\n- **集中存储**：[Vue 只关注视图层](https://cn.vuejs.org/v2/guide/#Vue-js-%E6%98%AF%E4%BB%80%E4%B9%88)，Vuex 提供了一个仓库（store）来保存数据，使得数据和视图分离；\n- **管理**：处理保存数据，还可计算、处理数据；\n- **所有组件状态**：所有组件都可获取仓库中的数据，即一个项目只有一个数据源。\n\nVuex 文档中说：\n>通过定义和**隔离**状态管理中的各种概念并通过强制规则维持视图和状态间的**独立性**，我们的代码将会变得更结构化且易维护。\n\nVuex 就是通过隔离数据、拆分改变数据的方式使得数据和视图独立，数据被组件数共享。\n\n![Vuex 状态图](https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/vuex.png \"Vuex状态图\")\n\n虚线内部的三个部分组成了一个Store,组件的数据保存在 `State` 中，用户和组件交互时，通过组件内的方法分发（dispatch）一个动作（action，有点像事件），动作会提交（Commit）一个更改（Mutation，也类似事件），改变 State 中的数据，然后获取数据渲染到视图上。\n\n- actions *可以是* 异步操作，故可在action中调用后台接口获取新的数据；\n- mutations *只能是* 同步操作；\n- mutations 和 actions 都可直接更改 state，但是当 action 含有异步操作时，会使得数据变化混乱，难以跟踪，使得调试困难；\n- 基于以上原因，Vuex 规定只能是 mutations 来改变 state。\n- 在开发工具中也可提交 mutations。\n\n### 使用 vuex\n\n```js\n//main.js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);// Vuex 是 Vue 的插件\n\nlet store = new Vuex.Store({\n\tstate: {     //放置state的值\n    \tcount: 0,\n    \tstr:\"abcd234\"\n    },\n  \tgetters: {   //放置getters方法\n      \tstrLen: state => state.str.length\n  \t},\n  \t// mutations只能是同步操作\n  \tmutations: {   //放置mutations方法\n       increment(state, payload) {\n          //在这里改变state中的数据\n          state.count = payload.number;\n       }\n  \t},\n  \t// actions可以是异步操作\n  \tactions: {      //放置actions方法\n       \tactionName({ commit }) {\n          \t//dosomething\n         \tcommit('mutationName')\n       \t},\n       \tgetSong ({commit}, id) {\n\t\t\t\t\t  //请求后台数据\n          \tapi.getMusicUrlResource(id).then(res => {\n            \tlet url = res.data.data[0].url;\n          \t})\n          \t.catch((error) => {  // 错误处理\n              \tconsole.log(error);\n         \t});\n      \t}\n\t}\n});\n\nnew Vue({\n  el: '#app',\n  store  //  通过 this.store 访问 store\n});\n```\n我们看看 Vuex 和 store 是什么？\n\nVuex：\n\n![Vuex输出](https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/vuexStore.png)\n\nVuex 它实际上是一个对象，里面包含了Store这一构造函数，还有几个mapActions、mapGetters、mapMutations、mapState、install 方法。\n\nstore：\n\n![store仓库](https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/vuex-store.png)\n\nstore 是 Vuex 的实例（废话）。\n\n实际项目中往往将 store 单独放置的一个文件夹在，mutations 、getters、actions 等属性各自用一个文件保存。\n\n### state \n\nstate 对象的属性时 Vuex 管理的状态，类似单个组建的 data。\n\n访问 getters:\n\n1. `this.$store.state`；\n2. 使用 `mapState` 映射成计算属性，`推荐`。\n\n```js\n//state.js\nexport default {\n\tcount: 100,\n\tname: 'Jack*Zhou',\n\tfirstName: 'Jack',\n\tlastName: 'Zhou',\n\tage: 24,\n\tprofession: 'web deveploper',\n\tcompany: 'Baidu'\n}\n```\n组件：\n```js\nimport {mapState} from 'vuex'\nexport default {\n\tdata(){\n\t\treturn {\n\t\t\tlocalCount:0\n\t\t}\n\t},\n\tcomputed: {\n\t\t\tlocalCount() {\n\t\t\t\treturn this.$store.state.count + 1;\n\t\t\t},\n\t\t\t//计算属性名和 state 属性名相同:传入数组\n\t\t\t// ...mapState(['count','name']),\n\t\t\t// 计算属性名和 state 属性不同，传入对象\n\t\t\t...mapState({\n\t\t\t\tname: state => state.name,\n\t\t\t\tcount: state => state.count,\n\t\t\t\tcountAlias: 'count',\n\t\t\t\t//为了使用 this 不能使用箭头函数\n\t\t\t\tcountPlusLocalCount(state) {\n\t\t\t\t\treturn state.count + this.localCount;\n\t\t\t\t}\n\t\t\t})\n\t\t},\n}\n```\n### getters\n\ngetters 是对 state 的加工，类似于组件中的 data 和计算属性的关系。getters 的返回值会被缓存起来，只有当它的依赖改变，才会重新计算。\n\n访问 getters:\n\n1. `this.$store.getters`；\n2. 使用 `mapGetters` 将 getters 映射成计算属性，`推荐`；\n3. 方法访问，不会缓存。\n\n```js\n// getters.js\nexport default {\n\tfullName: state => state.firstName + ' ' + state.lastName,\n\t//在getters 中访问 getters\n\tinfo: (state, getters) => {\n\t\treturn state.age + ',' + getters.fullName;\n\t},\n\t//为了传递参数，返回一个函数，\n\tpersonInfo: (state, getters) => (city) => {\n\t\treturn {\n\t\t\tname: getters.fullName,\n\t\t\tage: state.age,\n\t\t\tcompany: state.company,\n\t\t\tcity\n\t\t}\n\t}\n}\n```\n使用 getters:\n```js\nimport { mapGetters } from 'vuex'\nexport default {\n\tname: 'Store',\n\tcomputed: {\n\t\t...mapGetters(['fullName', 'info', 'personInfo']),\n\t\tmyInfo() { return this.personInfo('杭州') },\n\t\t...mapGetters({\n\t\t\tfullNameAlias1: 'fullName',\n\t\t\t//不能写成函数\n\t\t\t// fullNameAlias2(state){\n\t\t\t// \treturn state.name+'，你好'+this.$store.getters.fullName;\n\t\t\t// }\n\t\t})\n\t},\n\tmounted() {\n\t\tconsole.log(this.personInfo('成都'))\n\t\tconsole.log(this.myInfo)\n\t}\n}\n```\n\n## 参考\n- [理解Vuex，看这篇就够了](https://mobilesite.github.io/2016/12/18/vuex-introduction/)\n- [vuex 文档](https://vuex.vuejs.org/zh/)","slug":"vue-状态管理（一）","published":1,"updated":"2019-05-25T19:10:57.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccfk001fjwrny8cht8fy","content":"<p>父子组件之间往往使用<strong>props</strong>和 <strong>$emit</strong> 实现数据共享，任意组件可通过<strong>bus（一个vue实例）<strong>作为桥梁，实现数据共享。当项目中组件越来越多时，组件之间的数据共享变得复杂，难以维护。使用 Vuex 可</strong>集中管理</strong>组件之间的数据（状态），使组件之间的<strong>数据共享</strong>变得简单。</p>\n<a id=\"more\"></a>\n<h2 id=\"父子组件间通信\"><a class=\"markdownIt-Anchor\" href=\"#父子组件间通信\"></a> 父子组件间通信</h2>\n<p>父→（props）子组件；子→（$meit）父组件，即子组件自定义一个事件，在父组件中监听该事件。</p>\n<p>自定义输入组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"handleInput\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"value\"</span> <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"placeholder\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">\"CustomInput\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">//props 接收父组件传递过来的数据</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\tprops: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tvalue: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: [<span class=\"built_in\">Number</span>, <span class=\"built_in\">String</span>],</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\trequired: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">default</span>: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tplaceholder: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">default</span>: <span class=\"string\">\"提示文本\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\thandleInput(event) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">let</span> val = event.target.value;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// 子组件的事件监听函数中触发一个自定义事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">\"customInput\"</span>, val);</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"store\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- props 传递值 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">custom-input</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"value\"</span> @<span class=\"attr\">customInput</span>=<span class=\"string\">\"handleInput\"</span> <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"placeholder\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"value\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> CustomInput <span class=\"keyword\">from</span> <span class=\"string\">'_c/CustomInput.vue'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'Store'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomponents: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tCustomInput</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tvalue: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tplaceholder: <span class=\"string\">'自定义事件传递值'</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">//  自定义事假处理器</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\thandleInput(val) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.value = val</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因为 <code>v-model</code> 指令是双向绑定的，我们也可以用其来实现值的传递：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"store\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">custom-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"inputValue\"</span> <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"placeholder\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"inputValue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> CustomInput <span class=\"keyword\">from</span> <span class=\"string\">'_c/CustomInput.vue'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'Store'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomponents: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tCustomInput</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tinputValue: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tplaceholder: <span class=\"string\">'v-mode 传递值'</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"bus-任意组件通信\"><a class=\"markdownIt-Anchor\" href=\"#bus-任意组件通信\"></a> bus 任意组件通信</h2>\n<p>创建一个空的 vue 实例，然后将该实例添加到 vue 的原型上，通过该实例<code>触发事件</code>和<code>监听事件</code>来在不同组件之间共享数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bus.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> Bus = <span class=\"keyword\">new</span> Vue();</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Bus;</span><br></pre></td></tr></table></figure>\n<p>在 main.js 中添加原型属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Bus <span class=\"keyword\">from</span> <span class=\"string\">'./lib/bus'</span></span><br><span class=\"line\"><span class=\"comment\">// 通过 bus 实现任意组件传递参数</span></span><br><span class=\"line\">Vue.prototype.$bus=bus</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ChildPage.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child-page\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"data\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">\"ChildPage\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tmsg: <span class=\"string\">\"I am child\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tdata: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmounted() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">// 在挂载声明周期函数中监听自定义事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">this</span>.$bus.$on(<span class=\"string\">\"customEvent\"</span>, data =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.data = data;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"sendData\"</span>&gt;</span>给child传递数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"num\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">\"App\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123; num: <span class=\"number\">0</span> &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tsendData(data) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// 由 bus 触发一个事件，在接收数据的组件中监听该事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.$bus.$emit(<span class=\"string\">'customEvent'</span>, ++<span class=\"keyword\">this</span>.num);</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"vuex-状态管理\"><a class=\"markdownIt-Anchor\" href=\"#vuex-状态管理\"></a> Vuex 状态管理</h2>\n<p>随着组件的增加，通过以上方式共享数据，会越来越复杂，vue 提供了状态管理插件 <code>Vuex</code>。</p>\n<blockquote>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式；集中存储和管理应用的所有组件状态。</p>\n</blockquote>\n<p>理解：</p>\n<ul>\n<li><strong>状态</strong>：数据，相当于组件内部的<strong>data 的返回值</strong>，Vue 是数据驱动的，数据变化往往会表现在视图层；</li>\n<li><strong>集中存储</strong>：<a href=\"https://cn.vuejs.org/v2/guide/#Vue-js-%E6%98%AF%E4%BB%80%E4%B9%88\" target=\"_blank\" rel=\"noopener\">Vue 只关注视图层</a>，Vuex 提供了一个仓库（store）来保存数据，使得数据和视图分离；</li>\n<li><strong>管理</strong>：处理保存数据，还可计算、处理数据；</li>\n<li><strong>所有组件状态</strong>：所有组件都可获取仓库中的数据，即一个项目只有一个数据源。</li>\n</ul>\n<p>Vuex 文档中说：</p>\n<blockquote>\n<p>通过定义和<strong>隔离</strong>状态管理中的各种概念并通过强制规则维持视图和状态间的<strong>独立性</strong>，我们的代码将会变得更结构化且易维护。</p>\n</blockquote>\n<p>Vuex 就是通过隔离数据、拆分改变数据的方式使得数据和视图独立，数据被组件数共享。</p>\n<p><img src=\"https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/vuex.png\" alt=\"Vuex 状态图\" title=\"Vuex状态图\"></p>\n<p>虚线内部的三个部分组成了一个Store,组件的数据保存在 <code>State</code> 中，用户和组件交互时，通过组件内的方法分发（dispatch）一个动作（action，有点像事件），动作会提交（Commit）一个更改（Mutation，也类似事件），改变 State 中的数据，然后获取数据渲染到视图上。</p>\n<ul>\n<li>actions <em>可以是</em> 异步操作，故可在action中调用后台接口获取新的数据；</li>\n<li>mutations <em>只能是</em> 同步操作；</li>\n<li>mutations 和 actions 都可直接更改 state，但是当 action 含有异步操作时，会使得数据变化混乱，难以跟踪，使得调试困难；</li>\n<li>基于以上原因，Vuex 规定只能是 mutations 来改变 state。</li>\n<li>在开发工具中也可提交 mutations。</li>\n</ul>\n<h3 id=\"使用-vuex\"><a class=\"markdownIt-Anchor\" href=\"#使用-vuex\"></a> 使用 vuex</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex);<span class=\"comment\">// Vuex 是 Vue 的插件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">\tstate: &#123;     <span class=\"comment\">//放置state的值</span></span><br><span class=\"line\">    \tcount: <span class=\"number\">0</span>,</span><br><span class=\"line\">    \tstr:<span class=\"string\">\"abcd234\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  \tgetters: &#123;   <span class=\"comment\">//放置getters方法</span></span><br><span class=\"line\">      \tstrLen: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.str.length</span><br><span class=\"line\">  \t&#125;,</span><br><span class=\"line\">  \t<span class=\"comment\">// mutations只能是同步操作</span></span><br><span class=\"line\">  \tmutations: &#123;   <span class=\"comment\">//放置mutations方法</span></span><br><span class=\"line\">       increment(state, payload) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//在这里改变state中的数据</span></span><br><span class=\"line\">          state.count = payload.number;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">  \t&#125;,</span><br><span class=\"line\">  \t<span class=\"comment\">// actions可以是异步操作</span></span><br><span class=\"line\">  \tactions: &#123;      <span class=\"comment\">//放置actions方法</span></span><br><span class=\"line\">       \tactionName(&#123; commit &#125;) &#123;</span><br><span class=\"line\">          \t<span class=\"comment\">//dosomething</span></span><br><span class=\"line\">         \tcommit(<span class=\"string\">'mutationName'</span>)</span><br><span class=\"line\">       \t&#125;,</span><br><span class=\"line\">       \tgetSong (&#123;commit&#125;, id) &#123;</span><br><span class=\"line\">\t\t\t\t\t  <span class=\"comment\">//请求后台数据</span></span><br><span class=\"line\">          \tapi.getMusicUrlResource(id).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            \t<span class=\"keyword\">let</span> url = res.data.data[<span class=\"number\">0</span>].url;</span><br><span class=\"line\">          \t&#125;)</span><br><span class=\"line\">          \t.catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;  <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">              \t<span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">         \t&#125;);</span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  store  <span class=\"comment\">//  通过 this.store 访问 store</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们看看 Vuex 和 store 是什么？</p>\n<p>Vuex：</p>\n<p><img src=\"https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/vuexStore.png\" alt=\"Vuex输出\"></p>\n<p>Vuex 它实际上是一个对象，里面包含了Store这一构造函数，还有几个mapActions、mapGetters、mapMutations、mapState、install 方法。</p>\n<p>store：</p>\n<p><img src=\"https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/vuex-store.png\" alt=\"store仓库\"></p>\n<p>store 是 Vuex 的实例（废话）。</p>\n<p>实际项目中往往将 store 单独放置的一个文件夹在，mutations 、getters、actions 等属性各自用一个文件保存。</p>\n<h3 id=\"state\"><a class=\"markdownIt-Anchor\" href=\"#state\"></a> state</h3>\n<p>state 对象的属性时 Vuex 管理的状态，类似单个组建的 data。</p>\n<p>访问 getters:</p>\n<ol>\n<li><code>this.$store.state</code>；</li>\n<li>使用 <code>mapState</code> 映射成计算属性，<code>推荐</code>。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//state.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tcount: <span class=\"number\">100</span>,</span><br><span class=\"line\">\tname: <span class=\"string\">'Jack*Zhou'</span>,</span><br><span class=\"line\">\tfirstName: <span class=\"string\">'Jack'</span>,</span><br><span class=\"line\">\tlastName: <span class=\"string\">'Zhou'</span>,</span><br><span class=\"line\">\tage: <span class=\"number\">24</span>,</span><br><span class=\"line\">\tprofession: <span class=\"string\">'web deveploper'</span>,</span><br><span class=\"line\">\tcompany: <span class=\"string\">'Baidu'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapState&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\tlocalCount:<span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tcomputed: &#123;</span><br><span class=\"line\">\t\t\tlocalCount() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//计算属性名和 state 属性名相同:传入数组</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ...mapState(['count','name']),</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 计算属性名和 state 属性不同，传入对象</span></span><br><span class=\"line\">\t\t\t...mapState(&#123;</span><br><span class=\"line\">\t\t\t\tname: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.name,</span><br><span class=\"line\">\t\t\t\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</span><br><span class=\"line\">\t\t\t\tcountAlias: <span class=\"string\">'count'</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//为了使用 this 不能使用箭头函数</span></span><br><span class=\"line\">\t\t\t\tcountPlusLocalCount(state) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"getters\"><a class=\"markdownIt-Anchor\" href=\"#getters\"></a> getters</h3>\n<p>getters 是对 state 的加工，类似于组件中的 data 和计算属性的关系。getters 的返回值会被缓存起来，只有当它的依赖改变，才会重新计算。</p>\n<p>访问 getters:</p>\n<ol>\n<li><code>this.$store.getters</code>；</li>\n<li>使用 <code>mapGetters</code> 将 getters 映射成计算属性，<code>推荐</code>；</li>\n<li>方法访问，不会缓存。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// getters.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tfullName: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.firstName + <span class=\"string\">' '</span> + state.lastName,</span><br><span class=\"line\">\t<span class=\"comment\">//在getters 中访问 getters</span></span><br><span class=\"line\">\tinfo: <span class=\"function\">(<span class=\"params\">state, getters</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> state.age + <span class=\"string\">','</span> + getters.fullName;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">//为了传递参数，返回一个函数，</span></span><br><span class=\"line\">\tpersonInfo: <span class=\"function\">(<span class=\"params\">state, getters</span>) =&gt;</span> (city) =&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\tname: getters.fullName,</span><br><span class=\"line\">\t\t\tage: state.age,</span><br><span class=\"line\">\t\t\tcompany: state.company,</span><br><span class=\"line\">\t\t\tcity</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 getters:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'Store'</span>,</span><br><span class=\"line\">\tcomputed: &#123;</span><br><span class=\"line\">\t\t...mapGetters([<span class=\"string\">'fullName'</span>, <span class=\"string\">'info'</span>, <span class=\"string\">'personInfo'</span>]),</span><br><span class=\"line\">\t\tmyInfo() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.personInfo(<span class=\"string\">'杭州'</span>) &#125;,</span><br><span class=\"line\">\t\t...mapGetters(&#123;</span><br><span class=\"line\">\t\t\tfullNameAlias1: <span class=\"string\">'fullName'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//不能写成函数</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// fullNameAlias2(state)&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// \treturn state.name+'，你好'+this.$store.getters.fullName;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// &#125;</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmounted() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.personInfo(<span class=\"string\">'成都'</span>))</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.myInfo)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://mobilesite.github.io/2016/12/18/vuex-introduction/\" target=\"_blank\" rel=\"noopener\">理解Vuex，看这篇就够了</a></li>\n<li><a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">vuex 文档</a></li>\n</ul>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>父子组件之间往往使用<strong>props</strong>和 <strong>$emit</strong> 实现数据共享，任意组件可通过<strong>bus（一个vue实例）<strong>作为桥梁，实现数据共享。当项目中组件越来越多时，组件之间的数据共享变得复杂，难以维护。使用 Vuex 可</strong>集中管理</strong>组件之间的数据（状态），使组件之间的<strong>数据共享</strong>变得简单。</p>","more":"<h2 id=\"父子组件间通信\"><a class=\"markdownIt-Anchor\" href=\"#父子组件间通信\"></a> 父子组件间通信</h2>\n<p>父→（props）子组件；子→（$meit）父组件，即子组件自定义一个事件，在父组件中监听该事件。</p>\n<p>自定义输入组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"handleInput\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"value\"</span> <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"placeholder\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">\"CustomInput\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">//props 接收父组件传递过来的数据</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\tprops: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tvalue: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: [<span class=\"built_in\">Number</span>, <span class=\"built_in\">String</span>],</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\trequired: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">default</span>: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tplaceholder: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">default</span>: <span class=\"string\">\"提示文本\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\thandleInput(event) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">let</span> val = event.target.value;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// 子组件的事件监听函数中触发一个自定义事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.$emit(<span class=\"string\">\"customInput\"</span>, val);</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"store\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- props 传递值 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">custom-input</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"value\"</span> @<span class=\"attr\">customInput</span>=<span class=\"string\">\"handleInput\"</span> <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"placeholder\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"value\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> CustomInput <span class=\"keyword\">from</span> <span class=\"string\">'_c/CustomInput.vue'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'Store'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomponents: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tCustomInput</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tvalue: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tplaceholder: <span class=\"string\">'自定义事件传递值'</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">//  自定义事假处理器</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\thandleInput(val) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.value = val</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因为 <code>v-model</code> 指令是双向绑定的，我们也可以用其来实现值的传递：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"store\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">custom-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"inputValue\"</span> <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"placeholder\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"inputValue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> CustomInput <span class=\"keyword\">from</span> <span class=\"string\">'_c/CustomInput.vue'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'Store'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomponents: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tCustomInput</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tinputValue: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tplaceholder: <span class=\"string\">'v-mode 传递值'</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"bus-任意组件通信\"><a class=\"markdownIt-Anchor\" href=\"#bus-任意组件通信\"></a> bus 任意组件通信</h2>\n<p>创建一个空的 vue 实例，然后将该实例添加到 vue 的原型上，通过该实例<code>触发事件</code>和<code>监听事件</code>来在不同组件之间共享数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bus.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> Bus = <span class=\"keyword\">new</span> Vue();</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Bus;</span><br></pre></td></tr></table></figure>\n<p>在 main.js 中添加原型属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Bus <span class=\"keyword\">from</span> <span class=\"string\">'./lib/bus'</span></span><br><span class=\"line\"><span class=\"comment\">// 通过 bus 实现任意组件传递参数</span></span><br><span class=\"line\">Vue.prototype.$bus=bus</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ChildPage.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child-page\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"data\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">\"ChildPage\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tmsg: <span class=\"string\">\"I am child\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tdata: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmounted() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">// 在挂载声明周期函数中监听自定义事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">this</span>.$bus.$on(<span class=\"string\">\"customEvent\"</span>, data =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.data = data;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"sendData\"</span>&gt;</span>给child传递数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"num\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">\"App\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123; num: <span class=\"number\">0</span> &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tsendData(data) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// 由 bus 触发一个事件，在接收数据的组件中监听该事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.$bus.$emit(<span class=\"string\">'customEvent'</span>, ++<span class=\"keyword\">this</span>.num);</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"vuex-状态管理\"><a class=\"markdownIt-Anchor\" href=\"#vuex-状态管理\"></a> Vuex 状态管理</h2>\n<p>随着组件的增加，通过以上方式共享数据，会越来越复杂，vue 提供了状态管理插件 <code>Vuex</code>。</p>\n<blockquote>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式；集中存储和管理应用的所有组件状态。</p>\n</blockquote>\n<p>理解：</p>\n<ul>\n<li><strong>状态</strong>：数据，相当于组件内部的<strong>data 的返回值</strong>，Vue 是数据驱动的，数据变化往往会表现在视图层；</li>\n<li><strong>集中存储</strong>：<a href=\"https://cn.vuejs.org/v2/guide/#Vue-js-%E6%98%AF%E4%BB%80%E4%B9%88\" target=\"_blank\" rel=\"noopener\">Vue 只关注视图层</a>，Vuex 提供了一个仓库（store）来保存数据，使得数据和视图分离；</li>\n<li><strong>管理</strong>：处理保存数据，还可计算、处理数据；</li>\n<li><strong>所有组件状态</strong>：所有组件都可获取仓库中的数据，即一个项目只有一个数据源。</li>\n</ul>\n<p>Vuex 文档中说：</p>\n<blockquote>\n<p>通过定义和<strong>隔离</strong>状态管理中的各种概念并通过强制规则维持视图和状态间的<strong>独立性</strong>，我们的代码将会变得更结构化且易维护。</p>\n</blockquote>\n<p>Vuex 就是通过隔离数据、拆分改变数据的方式使得数据和视图独立，数据被组件数共享。</p>\n<p><img src=\"https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/vuex.png\" alt=\"Vuex 状态图\" title=\"Vuex状态图\"></p>\n<p>虚线内部的三个部分组成了一个Store,组件的数据保存在 <code>State</code> 中，用户和组件交互时，通过组件内的方法分发（dispatch）一个动作（action，有点像事件），动作会提交（Commit）一个更改（Mutation，也类似事件），改变 State 中的数据，然后获取数据渲染到视图上。</p>\n<ul>\n<li>actions <em>可以是</em> 异步操作，故可在action中调用后台接口获取新的数据；</li>\n<li>mutations <em>只能是</em> 同步操作；</li>\n<li>mutations 和 actions 都可直接更改 state，但是当 action 含有异步操作时，会使得数据变化混乱，难以跟踪，使得调试困难；</li>\n<li>基于以上原因，Vuex 规定只能是 mutations 来改变 state。</li>\n<li>在开发工具中也可提交 mutations。</li>\n</ul>\n<h3 id=\"使用-vuex\"><a class=\"markdownIt-Anchor\" href=\"#使用-vuex\"></a> 使用 vuex</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex);<span class=\"comment\">// Vuex 是 Vue 的插件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">\tstate: &#123;     <span class=\"comment\">//放置state的值</span></span><br><span class=\"line\">    \tcount: <span class=\"number\">0</span>,</span><br><span class=\"line\">    \tstr:<span class=\"string\">\"abcd234\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  \tgetters: &#123;   <span class=\"comment\">//放置getters方法</span></span><br><span class=\"line\">      \tstrLen: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.str.length</span><br><span class=\"line\">  \t&#125;,</span><br><span class=\"line\">  \t<span class=\"comment\">// mutations只能是同步操作</span></span><br><span class=\"line\">  \tmutations: &#123;   <span class=\"comment\">//放置mutations方法</span></span><br><span class=\"line\">       increment(state, payload) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//在这里改变state中的数据</span></span><br><span class=\"line\">          state.count = payload.number;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">  \t&#125;,</span><br><span class=\"line\">  \t<span class=\"comment\">// actions可以是异步操作</span></span><br><span class=\"line\">  \tactions: &#123;      <span class=\"comment\">//放置actions方法</span></span><br><span class=\"line\">       \tactionName(&#123; commit &#125;) &#123;</span><br><span class=\"line\">          \t<span class=\"comment\">//dosomething</span></span><br><span class=\"line\">         \tcommit(<span class=\"string\">'mutationName'</span>)</span><br><span class=\"line\">       \t&#125;,</span><br><span class=\"line\">       \tgetSong (&#123;commit&#125;, id) &#123;</span><br><span class=\"line\">\t\t\t\t\t  <span class=\"comment\">//请求后台数据</span></span><br><span class=\"line\">          \tapi.getMusicUrlResource(id).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            \t<span class=\"keyword\">let</span> url = res.data.data[<span class=\"number\">0</span>].url;</span><br><span class=\"line\">          \t&#125;)</span><br><span class=\"line\">          \t.catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;  <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">              \t<span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">         \t&#125;);</span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  store  <span class=\"comment\">//  通过 this.store 访问 store</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们看看 Vuex 和 store 是什么？</p>\n<p>Vuex：</p>\n<p><img src=\"https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/vuexStore.png\" alt=\"Vuex输出\"></p>\n<p>Vuex 它实际上是一个对象，里面包含了Store这一构造函数，还有几个mapActions、mapGetters、mapMutations、mapState、install 方法。</p>\n<p>store：</p>\n<p><img src=\"https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/vuex-store.png\" alt=\"store仓库\"></p>\n<p>store 是 Vuex 的实例（废话）。</p>\n<p>实际项目中往往将 store 单独放置的一个文件夹在，mutations 、getters、actions 等属性各自用一个文件保存。</p>\n<h3 id=\"state\"><a class=\"markdownIt-Anchor\" href=\"#state\"></a> state</h3>\n<p>state 对象的属性时 Vuex 管理的状态，类似单个组建的 data。</p>\n<p>访问 getters:</p>\n<ol>\n<li><code>this.$store.state</code>；</li>\n<li>使用 <code>mapState</code> 映射成计算属性，<code>推荐</code>。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//state.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tcount: <span class=\"number\">100</span>,</span><br><span class=\"line\">\tname: <span class=\"string\">'Jack*Zhou'</span>,</span><br><span class=\"line\">\tfirstName: <span class=\"string\">'Jack'</span>,</span><br><span class=\"line\">\tlastName: <span class=\"string\">'Zhou'</span>,</span><br><span class=\"line\">\tage: <span class=\"number\">24</span>,</span><br><span class=\"line\">\tprofession: <span class=\"string\">'web deveploper'</span>,</span><br><span class=\"line\">\tcompany: <span class=\"string\">'Baidu'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapState&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\tlocalCount:<span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tcomputed: &#123;</span><br><span class=\"line\">\t\t\tlocalCount() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//计算属性名和 state 属性名相同:传入数组</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ...mapState(['count','name']),</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 计算属性名和 state 属性不同，传入对象</span></span><br><span class=\"line\">\t\t\t...mapState(&#123;</span><br><span class=\"line\">\t\t\t\tname: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.name,</span><br><span class=\"line\">\t\t\t\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</span><br><span class=\"line\">\t\t\t\tcountAlias: <span class=\"string\">'count'</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//为了使用 this 不能使用箭头函数</span></span><br><span class=\"line\">\t\t\t\tcountPlusLocalCount(state) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"getters\"><a class=\"markdownIt-Anchor\" href=\"#getters\"></a> getters</h3>\n<p>getters 是对 state 的加工，类似于组件中的 data 和计算属性的关系。getters 的返回值会被缓存起来，只有当它的依赖改变，才会重新计算。</p>\n<p>访问 getters:</p>\n<ol>\n<li><code>this.$store.getters</code>；</li>\n<li>使用 <code>mapGetters</code> 将 getters 映射成计算属性，<code>推荐</code>；</li>\n<li>方法访问，不会缓存。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// getters.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tfullName: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.firstName + <span class=\"string\">' '</span> + state.lastName,</span><br><span class=\"line\">\t<span class=\"comment\">//在getters 中访问 getters</span></span><br><span class=\"line\">\tinfo: <span class=\"function\">(<span class=\"params\">state, getters</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> state.age + <span class=\"string\">','</span> + getters.fullName;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">//为了传递参数，返回一个函数，</span></span><br><span class=\"line\">\tpersonInfo: <span class=\"function\">(<span class=\"params\">state, getters</span>) =&gt;</span> (city) =&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\tname: getters.fullName,</span><br><span class=\"line\">\t\t\tage: state.age,</span><br><span class=\"line\">\t\t\tcompany: state.company,</span><br><span class=\"line\">\t\t\tcity</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 getters:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'Store'</span>,</span><br><span class=\"line\">\tcomputed: &#123;</span><br><span class=\"line\">\t\t...mapGetters([<span class=\"string\">'fullName'</span>, <span class=\"string\">'info'</span>, <span class=\"string\">'personInfo'</span>]),</span><br><span class=\"line\">\t\tmyInfo() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.personInfo(<span class=\"string\">'杭州'</span>) &#125;,</span><br><span class=\"line\">\t\t...mapGetters(&#123;</span><br><span class=\"line\">\t\t\tfullNameAlias1: <span class=\"string\">'fullName'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//不能写成函数</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// fullNameAlias2(state)&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// \treturn state.name+'，你好'+this.$store.getters.fullName;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// &#125;</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmounted() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.personInfo(<span class=\"string\">'成都'</span>))</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.myInfo)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://mobilesite.github.io/2016/12/18/vuex-introduction/\" target=\"_blank\" rel=\"noopener\">理解Vuex，看这篇就够了</a></li>\n<li><a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">vuex 文档</a></li>\n</ul>"},{"title":"vue 状态管理（三）","date":"2019-05-26T12:35:39.000Z","_content":"我们修改 state，然后刷新浏览器，状态又变化原来的了，因为 state 是存在内存中的，为了点击刷新，状态不回到原来的，就需要 Vuex 提供的插件功能，当然插件还能实现其他复杂的功能。\n\n<!-- more -->\n\n## 插件\n\nVuex 的 store 接受 plugins 选项，这个选项暴露出每次 mutation 的钩子。Vuex 插件就是一个函数，它接收 store 作为唯一参数：\n\n```js\nconst myPlugin = store => {\n  // 当 store 初始化后调用\n  store.subscribe((mutation, state) => {\n    // 每次 mutation 之后调用\n    // mutation 的格式为 { type, payload }\n  })\n}\n```\n使用插件：\n```js\nconst store = new Vuex.Store({\n  // ...\n  plugins: [myPlugin]\n})\n```\n使用插件本地 state 持久化。\n\n```js\n//localstore.js\nexport default store => {\n\t// 当 store 初始化后调用\n\tconsole.log('store 初始化', JSON.stringify(store.state, '', 2))\n\t// 已经初始化 \n\t// 不能 store.state = '' 直接赋值方式改变 state\n\tif (localStorage.getItem('state')) store.replaceState(JSON.parse(localStorage.state))\n\tstore.subscribe((mutation, state) => {\n\t\t// 每次 mutation 之后调用\n\t\tlocalStorage.state = ''\n\t\ttry {\n\t\t\tlocalStorage.setItem('state', JSON.stringify(state))\n\t\t} catch (error) {\n\t\t\tconsole.log('持久化遇到错误')\n\t\t\tconsole.error(error)\n\t\t}\n\t\tconsole.log('mutation', mutation)\n\t\t// mutation 的格式为 { type, payload }\n\t})\n}\n```\n修改 store\n```js\n// 引入插件\nimport { localStore } from './plugins'\nVue.use(Vuex)\nexport default new Vuex.Store({\n\tstate,\n\tgetters,\n\tmutations,\n\tactions,\n\tmodules: {\n\t\tuser\n\t},\n\tplugins: [localStore]\n})\n```\n启用插件后，调用 commit 更新 state 后，会更新本地存储，即使实现浏览器，值也不会变。\n\n## 处理表单\n\n在学习 mutations 时，我们使用表单的值更新state，我们这样写\n```html\n\t\t<input type=\"text\" name=\"age\" id=\"age\" v-model=\"age\" placeholder=\"请输入年纪\" />\n\t\t<button @click=\"changeAge\">修改年纪</button>\n\t\t<p>年纪:{{this.$store.state.age}}</p>\n\t\t<input type=\"text\" v-model=\"lastName\" placeholder=\"请输入姓氏\" @input=\"changeLastName\" />\n```\n```js\n\timport { mapMutations } from 'vuex'\n\texport default {\n\t\tname: 'Store',\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tage: '',\n\t\t\t\tlastName: \"\"\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\t//方法名和 muations 相同\n\t\t\t...mapMutations(['CHANGE_LAST_NAME', 'CHANGE_AGE']),\n\t\t\t// 将 `this.changeAge2()` 映射为 `this.$store.commit('CHANGE_AGE')`\n\t\t\t...mapMutations({ changeAgeAlias: 'CHANGE_AGE' }),\n\t\t\tchangeAge2() {\n\t\t\t\tthis.changeAgeAlias({ age: Number.parseInt(this.age) })\n\t\t\t},\n\t\t\tchangeLastName() {\n\t\t\t\t// this.$store.commit('CHANGE_LAST_NAME', this.lastName)\n\t\t\t\tthis.CHANGE_LAST_NAME(this.lastName)\n\t\t\t},\n\t\t}\n\t}\n```\n以上方式都是在方法中提获取表单的输入值，需要再data里生属性。其实我们可以在计算属性中使用`setter`、`getter`中实现，充分利用 `v-model` 双向绑定的特性来简化了代码。\n\n```html\n<template>\n\t<div class=\"store\">\n\t\t<p v-text=\"this.$store.getters.fullName\"></p>\n\t\t<input type=\"text\" v-model=\"lastName\" placeholder=\"请输入姓氏\" @input=\"changeLastName\" />\n</template>\n<script>\n\texport default {\n\t\tname: 'Store',\n\t\tcomputed: {\n\t\t\tlastName: {\n\t\t\t\tget() {\n\t\t\t\t\treturn this.$store.state.lastName\n\t\t\t\t},\n\t\t\t\tset(newLastName) {\n\t\t\t\t\tthis.$store.commit('CHANGE_LAST_NAME', newLastName)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n</script>\n```\n\n","source":"_posts/vue-状态管理（三）.md","raw":"---\ntitle: vue 状态管理（三）\ndate: 2019-05-26 20:35:39\ntags:\n- vue\n- vuex\ncategories:\n- [vue]\n- [前端框架]\n---\n我们修改 state，然后刷新浏览器，状态又变化原来的了，因为 state 是存在内存中的，为了点击刷新，状态不回到原来的，就需要 Vuex 提供的插件功能，当然插件还能实现其他复杂的功能。\n\n<!-- more -->\n\n## 插件\n\nVuex 的 store 接受 plugins 选项，这个选项暴露出每次 mutation 的钩子。Vuex 插件就是一个函数，它接收 store 作为唯一参数：\n\n```js\nconst myPlugin = store => {\n  // 当 store 初始化后调用\n  store.subscribe((mutation, state) => {\n    // 每次 mutation 之后调用\n    // mutation 的格式为 { type, payload }\n  })\n}\n```\n使用插件：\n```js\nconst store = new Vuex.Store({\n  // ...\n  plugins: [myPlugin]\n})\n```\n使用插件本地 state 持久化。\n\n```js\n//localstore.js\nexport default store => {\n\t// 当 store 初始化后调用\n\tconsole.log('store 初始化', JSON.stringify(store.state, '', 2))\n\t// 已经初始化 \n\t// 不能 store.state = '' 直接赋值方式改变 state\n\tif (localStorage.getItem('state')) store.replaceState(JSON.parse(localStorage.state))\n\tstore.subscribe((mutation, state) => {\n\t\t// 每次 mutation 之后调用\n\t\tlocalStorage.state = ''\n\t\ttry {\n\t\t\tlocalStorage.setItem('state', JSON.stringify(state))\n\t\t} catch (error) {\n\t\t\tconsole.log('持久化遇到错误')\n\t\t\tconsole.error(error)\n\t\t}\n\t\tconsole.log('mutation', mutation)\n\t\t// mutation 的格式为 { type, payload }\n\t})\n}\n```\n修改 store\n```js\n// 引入插件\nimport { localStore } from './plugins'\nVue.use(Vuex)\nexport default new Vuex.Store({\n\tstate,\n\tgetters,\n\tmutations,\n\tactions,\n\tmodules: {\n\t\tuser\n\t},\n\tplugins: [localStore]\n})\n```\n启用插件后，调用 commit 更新 state 后，会更新本地存储，即使实现浏览器，值也不会变。\n\n## 处理表单\n\n在学习 mutations 时，我们使用表单的值更新state，我们这样写\n```html\n\t\t<input type=\"text\" name=\"age\" id=\"age\" v-model=\"age\" placeholder=\"请输入年纪\" />\n\t\t<button @click=\"changeAge\">修改年纪</button>\n\t\t<p>年纪:{{this.$store.state.age}}</p>\n\t\t<input type=\"text\" v-model=\"lastName\" placeholder=\"请输入姓氏\" @input=\"changeLastName\" />\n```\n```js\n\timport { mapMutations } from 'vuex'\n\texport default {\n\t\tname: 'Store',\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tage: '',\n\t\t\t\tlastName: \"\"\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\t//方法名和 muations 相同\n\t\t\t...mapMutations(['CHANGE_LAST_NAME', 'CHANGE_AGE']),\n\t\t\t// 将 `this.changeAge2()` 映射为 `this.$store.commit('CHANGE_AGE')`\n\t\t\t...mapMutations({ changeAgeAlias: 'CHANGE_AGE' }),\n\t\t\tchangeAge2() {\n\t\t\t\tthis.changeAgeAlias({ age: Number.parseInt(this.age) })\n\t\t\t},\n\t\t\tchangeLastName() {\n\t\t\t\t// this.$store.commit('CHANGE_LAST_NAME', this.lastName)\n\t\t\t\tthis.CHANGE_LAST_NAME(this.lastName)\n\t\t\t},\n\t\t}\n\t}\n```\n以上方式都是在方法中提获取表单的输入值，需要再data里生属性。其实我们可以在计算属性中使用`setter`、`getter`中实现，充分利用 `v-model` 双向绑定的特性来简化了代码。\n\n```html\n<template>\n\t<div class=\"store\">\n\t\t<p v-text=\"this.$store.getters.fullName\"></p>\n\t\t<input type=\"text\" v-model=\"lastName\" placeholder=\"请输入姓氏\" @input=\"changeLastName\" />\n</template>\n<script>\n\texport default {\n\t\tname: 'Store',\n\t\tcomputed: {\n\t\t\tlastName: {\n\t\t\t\tget() {\n\t\t\t\t\treturn this.$store.state.lastName\n\t\t\t\t},\n\t\t\t\tset(newLastName) {\n\t\t\t\t\tthis.$store.commit('CHANGE_LAST_NAME', newLastName)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n</script>\n```\n\n","slug":"vue-状态管理（三）","published":1,"updated":"2019-05-26T12:37:32.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccfn001jjwrnsyq3fbcl","content":"<p>我们修改 state，然后刷新浏览器，状态又变化原来的了，因为 state 是存在内存中的，为了点击刷新，状态不回到原来的，就需要 Vuex 提供的插件功能，当然插件还能实现其他复杂的功能。</p>\n<a id=\"more\"></a>\n<h2 id=\"插件\"><a class=\"markdownIt-Anchor\" href=\"#插件\"></a> 插件</h2>\n<p>Vuex 的 store 接受 plugins 选项，这个选项暴露出每次 mutation 的钩子。Vuex 插件就是一个函数，它接收 store 作为唯一参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myPlugin = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当 store 初始化后调用</span></span><br><span class=\"line\">  store.subscribe(<span class=\"function\">(<span class=\"params\">mutation, state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每次 mutation 之后调用</span></span><br><span class=\"line\">    <span class=\"comment\">// mutation 的格式为 &#123; type, payload &#125;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  plugins: [myPlugin]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用插件本地 state 持久化。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//localstore.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 当 store 初始化后调用</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'store 初始化'</span>, <span class=\"built_in\">JSON</span>.stringify(store.state, <span class=\"string\">''</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">\t<span class=\"comment\">// 已经初始化 </span></span><br><span class=\"line\">\t<span class=\"comment\">// 不能 store.state = '' 直接赋值方式改变 state</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (localStorage.getItem(<span class=\"string\">'state'</span>)) store.replaceState(<span class=\"built_in\">JSON</span>.parse(localStorage.state))</span><br><span class=\"line\">\tstore.subscribe(<span class=\"function\">(<span class=\"params\">mutation, state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 每次 mutation 之后调用</span></span><br><span class=\"line\">\t\tlocalStorage.state = <span class=\"string\">''</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tlocalStorage.setItem(<span class=\"string\">'state'</span>, <span class=\"built_in\">JSON</span>.stringify(state))</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'持久化遇到错误'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.error(error)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'mutation'</span>, mutation)</span><br><span class=\"line\">\t\t<span class=\"comment\">// mutation 的格式为 &#123; type, payload &#125;</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入插件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; localStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./plugins'</span></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">\tstate,</span><br><span class=\"line\">\tgetters,</span><br><span class=\"line\">\tmutations,</span><br><span class=\"line\">\tactions,</span><br><span class=\"line\">\tmodules: &#123;</span><br><span class=\"line\">\t\tuser</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins: [localStore]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>启用插件后，调用 commit 更新 state 后，会更新本地存储，即使实现浏览器，值也不会变。</p>\n<h2 id=\"处理表单\"><a class=\"markdownIt-Anchor\" href=\"#处理表单\"></a> 处理表单</h2>\n<p>在学习 mutations 时，我们使用表单的值更新state，我们这样写</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入年纪\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"changeAge\"</span>&gt;</span>修改年纪<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>年纪:&#123;&#123;this.$store.state.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"lastName\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入姓氏\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"changeLastName\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'Store'</span>,</span><br><span class=\"line\">\tdata() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\tage: <span class=\"string\">''</span>,</span><br><span class=\"line\">\t\t\tlastName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//方法名和 muations 相同</span></span><br><span class=\"line\">\t\t...mapMutations([<span class=\"string\">'CHANGE_LAST_NAME'</span>, <span class=\"string\">'CHANGE_AGE'</span>]),</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将 `this.changeAge2()` 映射为 `this.$store.commit('CHANGE_AGE')`</span></span><br><span class=\"line\">\t\t...mapMutations(&#123; <span class=\"attr\">changeAgeAlias</span>: <span class=\"string\">'CHANGE_AGE'</span> &#125;),</span><br><span class=\"line\">\t\tchangeAge2() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.changeAgeAlias(&#123; <span class=\"attr\">age</span>: <span class=\"built_in\">Number</span>.parseInt(<span class=\"keyword\">this</span>.age) &#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tchangeLastName() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// this.$store.commit('CHANGE_LAST_NAME', this.lastName)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.CHANGE_LAST_NAME(<span class=\"keyword\">this</span>.lastName)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上方式都是在方法中提获取表单的输入值，需要再data里生属性。其实我们可以在计算属性中使用<code>setter</code>、<code>getter</code>中实现，充分利用 <code>v-model</code> 双向绑定的特性来简化了代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"store\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"this.$store.getters.fullName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"lastName\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入姓氏\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"changeLastName\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'Store'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomputed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tlastName: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">get</span>() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.lastName</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">set</span>(newLastName) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'CHANGE_LAST_NAME'</span>, newLastName)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>我们修改 state，然后刷新浏览器，状态又变化原来的了，因为 state 是存在内存中的，为了点击刷新，状态不回到原来的，就需要 Vuex 提供的插件功能，当然插件还能实现其他复杂的功能。</p>","more":"<h2 id=\"插件\"><a class=\"markdownIt-Anchor\" href=\"#插件\"></a> 插件</h2>\n<p>Vuex 的 store 接受 plugins 选项，这个选项暴露出每次 mutation 的钩子。Vuex 插件就是一个函数，它接收 store 作为唯一参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myPlugin = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当 store 初始化后调用</span></span><br><span class=\"line\">  store.subscribe(<span class=\"function\">(<span class=\"params\">mutation, state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每次 mutation 之后调用</span></span><br><span class=\"line\">    <span class=\"comment\">// mutation 的格式为 &#123; type, payload &#125;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  plugins: [myPlugin]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用插件本地 state 持久化。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//localstore.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 当 store 初始化后调用</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'store 初始化'</span>, <span class=\"built_in\">JSON</span>.stringify(store.state, <span class=\"string\">''</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">\t<span class=\"comment\">// 已经初始化 </span></span><br><span class=\"line\">\t<span class=\"comment\">// 不能 store.state = '' 直接赋值方式改变 state</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (localStorage.getItem(<span class=\"string\">'state'</span>)) store.replaceState(<span class=\"built_in\">JSON</span>.parse(localStorage.state))</span><br><span class=\"line\">\tstore.subscribe(<span class=\"function\">(<span class=\"params\">mutation, state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 每次 mutation 之后调用</span></span><br><span class=\"line\">\t\tlocalStorage.state = <span class=\"string\">''</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tlocalStorage.setItem(<span class=\"string\">'state'</span>, <span class=\"built_in\">JSON</span>.stringify(state))</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'持久化遇到错误'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.error(error)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'mutation'</span>, mutation)</span><br><span class=\"line\">\t\t<span class=\"comment\">// mutation 的格式为 &#123; type, payload &#125;</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入插件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; localStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./plugins'</span></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">\tstate,</span><br><span class=\"line\">\tgetters,</span><br><span class=\"line\">\tmutations,</span><br><span class=\"line\">\tactions,</span><br><span class=\"line\">\tmodules: &#123;</span><br><span class=\"line\">\t\tuser</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins: [localStore]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>启用插件后，调用 commit 更新 state 后，会更新本地存储，即使实现浏览器，值也不会变。</p>\n<h2 id=\"处理表单\"><a class=\"markdownIt-Anchor\" href=\"#处理表单\"></a> 处理表单</h2>\n<p>在学习 mutations 时，我们使用表单的值更新state，我们这样写</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入年纪\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"changeAge\"</span>&gt;</span>修改年纪<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>年纪:&#123;&#123;this.$store.state.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"lastName\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入姓氏\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"changeLastName\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'Store'</span>,</span><br><span class=\"line\">\tdata() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\tage: <span class=\"string\">''</span>,</span><br><span class=\"line\">\t\t\tlastName: <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//方法名和 muations 相同</span></span><br><span class=\"line\">\t\t...mapMutations([<span class=\"string\">'CHANGE_LAST_NAME'</span>, <span class=\"string\">'CHANGE_AGE'</span>]),</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将 `this.changeAge2()` 映射为 `this.$store.commit('CHANGE_AGE')`</span></span><br><span class=\"line\">\t\t...mapMutations(&#123; <span class=\"attr\">changeAgeAlias</span>: <span class=\"string\">'CHANGE_AGE'</span> &#125;),</span><br><span class=\"line\">\t\tchangeAge2() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.changeAgeAlias(&#123; <span class=\"attr\">age</span>: <span class=\"built_in\">Number</span>.parseInt(<span class=\"keyword\">this</span>.age) &#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tchangeLastName() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// this.$store.commit('CHANGE_LAST_NAME', this.lastName)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.CHANGE_LAST_NAME(<span class=\"keyword\">this</span>.lastName)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上方式都是在方法中提获取表单的输入值，需要再data里生属性。其实我们可以在计算属性中使用<code>setter</code>、<code>getter</code>中实现，充分利用 <code>v-model</code> 双向绑定的特性来简化了代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"store\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"this.$store.getters.fullName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"lastName\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入姓氏\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"changeLastName\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'Store'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomputed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tlastName: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">get</span>() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.lastName</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">set</span>(newLastName) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'CHANGE_LAST_NAME'</span>, newLastName)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"vue 状态管理（二）","date":"2019-05-26T10:57:29.000Z","_content":"\n上篇文章中说了 state 和 getters，本篇文章就来说说 mutations 和 actions。\n提交 mutations 是改变 state 的唯一方式，不能用异步操作。actions 通过分发 action 来提交 mutation，可包含异步操作，比如 xhr 。\n\n<!-- more -->\n## mutations\n\n声明 mutations:\n```js\n// mutations.js\nimport vue from 'vue'\nexport default {\n\tCHANGE_LAST_NAME(state, newLastName) {\n\t\tstate.lastName = newLastName\n\t},\n\tCHANGE_AGE(state, params) {\n\t\tstate.age = params.age + 5\n\t},\n\t// 新增一个属性\n\tSET_REPOS(state,repos){\n\t\t// 给 state 新添加属性\n\t\tvue.set(state,'repoList',repos)\n\t}\n}\n```\n使用 mutations \n1. 通过 `mapMutations` 映射方法；\n2. 在方法中 调用 `this.$store.commit('mutaion')`；\n3. 可以在 mutation 种给 state 新增状态（属性），新增的状态会响应到视图上。\n\n```html\n<template>\n\t<div class=\"store\">\n\t\t<p>基本信息：{{this.info}}</p>\n\t\t<input type=\"text\" name=\"age\" id=\"age\" v-model=\"age\" placeholder=\"请输入年纪\" />\n\t\t<button @click=\"changeAge\">修改年纪</button>\n\t\t<button @click=\"changeAge2\">修改年纪2</button>\n\t\t<p>年纪:{{this.$store.state.age}}</p>\n\t\t<input type=\"text\" v-model=\"lastName\" placeholder=\"请输入姓氏\" @input=\"changeLastName\" />\n\t</div>\n</template>\n<script>\n\timport CustomInput from '_c/CustomInput.vue'\n\timport { mapState, mapGetters, mapMutations } from 'vuex'\n\texport default {\n\t\tname: 'Store',\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tage: '',\n\t\t\t\tlastName: \"\"\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\thandleInput(val) {\n\t\t\t\tthis.value = val\n\t\t\t},\n\t\t\t//方法名和 muations 相同\n\t\t\t...mapMutations(['CHANGE_LAST_NAME', 'CHANGE_AGE']),\n\t\t\t// 将 `this.changeAge2()` 映射为 `this.$store.commit('CHANGE_AGE')`\n\t\t\t...mapMutations({ changeAgeAlias: 'CHANGE_AGE' }),\n\t\t\tchangeAge() {\n\t\t\t\t// 传递载荷\n\t\t\t\t// this.$store.commit('CHANGE_AGE', { age: Number.parseInt(this.age) })\n\t\t\t\t//对象提交方式\n\t\t\t\t// this.$store.commit({ type: 'CHANGE_AGE', age: Number.parseInt(this.age) })\n\t\t\t\tthis.CHANGE_AGE({ age: Number.parseInt(this.age) })\n\t\t\t},\n\t\t\tchangeAge2() {\n\t\t\t\tthis.changeAgeAlias({ age: Number.parseInt(this.age) })\n\t\t\t},\n\t\t\tchangeLastName() {\n\t\t\t\t// this.$store.commit('CHANGE_LAST_NAME', this.lastName)\n\t\t\t\tthis.CHANGE_LAST_NAME(this.lastName)\n\t\t\t},\n\t\t}\n\t}\n</script>\n```\n## actions \n\nmutation  只能是同步操作，为了使用异步操作，Vuex 提供了 actions。\n\n- Action 提交的是 mutation，而不是直接变更状态。\n- Action 可以包含任意异步操作。\n\n声明 actions\n\n- action 接收一个和 store 具有相同属性和方法的对象，可 context.commit 提交 mutation；\n- 可以解构赋值，获取 `commit` 和 `dispatch`，commit 用于提交 mutation, dispatch  用于分发其他 action。\n\n```js\nimport http from 'axios'\nexport default {\n\t// action 接收一个和 store 具有相同属性和方法的对象，可 context.commit 提交 mutation\n\tchangeAgeAsync(context, params) {\n\t\tconsole.dir(context)\n\t\t//模拟异步操作\n\t\tsetTimeout(() => { context.commit('CHANGE_AGE', params) }, 5000)\n\t},\n\t//通过 github API 获取我的 github 仓库信息\n\tasync \trepos({ commit, dispatch }, username) {\n\t\tlet response = await http.get(`https://api.github.com/users/${username}/repos`)\n\t\tlet repoList = response.data\n\t\tcommit('SET_REPOS', repoList)\n\t\t// 分发其他 action 形成组合 action\n\t\tdispatch('changeAgeAsync', { age: 30 })\n\t\t// 给 state 新添加属性 不能直接改变 state\n\t\t// vue.set(state,'repoList',repoList)\n\t}\n}\n```\n在组件中使用 actions\n\n- 通过 `mapActions` 映射为方法。\n- `this.$store.dispatch`。\n\n```html\n<template>\n\t<div class=\"store\">\n\t\t<input type=\"text\" name=\"age\" id=\"age\" v-model=\"age\" placeholder=\"请输入年纪\" />\n\t\t<button @click=\"changeAge\">修改年纪</button>\n\t\t<p>年纪:{{this.$store.state.age}}</p>\n\t\t<input type=\"text\" v-model=\"lastName\" placeholder=\"请输入姓氏\" @input=\"changeLastName\" />\n\t\t<hr>\n\t\t<button @click=\"getRepos\">获取仓库列表</button>\n\t\t<h2>我的仓库列表：</h2>\n\t\t<ol>\n\t\t\t<li v-for=\"(item, index) in repoList\" :key=\"index\">{{item.full_name}}</li>\n\t\t</ol>\n\t</div>\n</template>\n<script>\n\timport { mapState, mapActions} from 'vuex'\n\texport default {\n\t\tname: 'Store',\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tage: '',\n\t\t\t\tlastName: \"\"\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\t...mapActions(['changeAgeAsync','repos']),\n\t\t\tchangeAge() {\n\t\t\t\t// this.$store.dispatch('changeAgeAsync',{ age: Number.parseInt(this.age) })\n\t\t\t\tthis.changeAgeAsync({age: Number.parseInt(this.age)})\n\t\t\t},\n\t\t\tgetRepos(){\n\t\t\t\t// this.$store.dispatch('repos','jackzhoumine')\n\t\t\t\tthis.repos('jackzhoumine')\n\t\t\t}\n\t\t},\n\t\tcomputed: {\n\t\t\t//计算属性名和 state 属性名相同:传入数组\n\t\t\t...mapState(['repoList'])\n\t\t}\n\t}\n</script>\n```\n\n## module\n\n状态对象很复杂时用 module 划分。\n这个似乎用得很少。需要用时看[veux 文档](https://vuex.vuejs.org/zh/guide/modules.html)即可。\n\n## 总结\n\n1. 提交 `mutation` 是改变你 state 的唯一方式；\n2. 方法执行上：\n   - `dispatch` 分发 action ;\n    - `commit` 提交mutation。\n3. 辅助方法的映射\n  - getters、state 映射为计算属性；\n  - actions、mutations 映射为法法。\n4. 分离功能：\n  - state 保存数据；\n  - getters 是对 state 的操作；\n  - actions 要提交 mutation;\n  - mutations 改变 state。\n5. 异步与同步：\n  - action 封装异步处理；\n  - mutation 只能是同步。\n6. 视图响应\n\n  ( `vue component dispatch` → ) `vue component commit` → ` state` → （ `getters` →） `vue component`\n\n7. state 对象太过复杂，使用 `module` 划分。\n\n## 参考\n\n- [理解Vuex，看这篇就够了](https://mobilesite.github.io/2016/12/18/vuex-introduction/)\n- [veux 文档](https://vuex.vuejs.org/zh/guide/forms.html)","source":"_posts/vue-状态管理（二）.md","raw":"---\ntitle: vue 状态管理（二）\ndate: 2019-05-26 18:57:29\ntags:\n- vue\n-  vuex\ncategories:\n- [vue]\n- [前端框架]\n---\n\n上篇文章中说了 state 和 getters，本篇文章就来说说 mutations 和 actions。\n提交 mutations 是改变 state 的唯一方式，不能用异步操作。actions 通过分发 action 来提交 mutation，可包含异步操作，比如 xhr 。\n\n<!-- more -->\n## mutations\n\n声明 mutations:\n```js\n// mutations.js\nimport vue from 'vue'\nexport default {\n\tCHANGE_LAST_NAME(state, newLastName) {\n\t\tstate.lastName = newLastName\n\t},\n\tCHANGE_AGE(state, params) {\n\t\tstate.age = params.age + 5\n\t},\n\t// 新增一个属性\n\tSET_REPOS(state,repos){\n\t\t// 给 state 新添加属性\n\t\tvue.set(state,'repoList',repos)\n\t}\n}\n```\n使用 mutations \n1. 通过 `mapMutations` 映射方法；\n2. 在方法中 调用 `this.$store.commit('mutaion')`；\n3. 可以在 mutation 种给 state 新增状态（属性），新增的状态会响应到视图上。\n\n```html\n<template>\n\t<div class=\"store\">\n\t\t<p>基本信息：{{this.info}}</p>\n\t\t<input type=\"text\" name=\"age\" id=\"age\" v-model=\"age\" placeholder=\"请输入年纪\" />\n\t\t<button @click=\"changeAge\">修改年纪</button>\n\t\t<button @click=\"changeAge2\">修改年纪2</button>\n\t\t<p>年纪:{{this.$store.state.age}}</p>\n\t\t<input type=\"text\" v-model=\"lastName\" placeholder=\"请输入姓氏\" @input=\"changeLastName\" />\n\t</div>\n</template>\n<script>\n\timport CustomInput from '_c/CustomInput.vue'\n\timport { mapState, mapGetters, mapMutations } from 'vuex'\n\texport default {\n\t\tname: 'Store',\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tage: '',\n\t\t\t\tlastName: \"\"\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\thandleInput(val) {\n\t\t\t\tthis.value = val\n\t\t\t},\n\t\t\t//方法名和 muations 相同\n\t\t\t...mapMutations(['CHANGE_LAST_NAME', 'CHANGE_AGE']),\n\t\t\t// 将 `this.changeAge2()` 映射为 `this.$store.commit('CHANGE_AGE')`\n\t\t\t...mapMutations({ changeAgeAlias: 'CHANGE_AGE' }),\n\t\t\tchangeAge() {\n\t\t\t\t// 传递载荷\n\t\t\t\t// this.$store.commit('CHANGE_AGE', { age: Number.parseInt(this.age) })\n\t\t\t\t//对象提交方式\n\t\t\t\t// this.$store.commit({ type: 'CHANGE_AGE', age: Number.parseInt(this.age) })\n\t\t\t\tthis.CHANGE_AGE({ age: Number.parseInt(this.age) })\n\t\t\t},\n\t\t\tchangeAge2() {\n\t\t\t\tthis.changeAgeAlias({ age: Number.parseInt(this.age) })\n\t\t\t},\n\t\t\tchangeLastName() {\n\t\t\t\t// this.$store.commit('CHANGE_LAST_NAME', this.lastName)\n\t\t\t\tthis.CHANGE_LAST_NAME(this.lastName)\n\t\t\t},\n\t\t}\n\t}\n</script>\n```\n## actions \n\nmutation  只能是同步操作，为了使用异步操作，Vuex 提供了 actions。\n\n- Action 提交的是 mutation，而不是直接变更状态。\n- Action 可以包含任意异步操作。\n\n声明 actions\n\n- action 接收一个和 store 具有相同属性和方法的对象，可 context.commit 提交 mutation；\n- 可以解构赋值，获取 `commit` 和 `dispatch`，commit 用于提交 mutation, dispatch  用于分发其他 action。\n\n```js\nimport http from 'axios'\nexport default {\n\t// action 接收一个和 store 具有相同属性和方法的对象，可 context.commit 提交 mutation\n\tchangeAgeAsync(context, params) {\n\t\tconsole.dir(context)\n\t\t//模拟异步操作\n\t\tsetTimeout(() => { context.commit('CHANGE_AGE', params) }, 5000)\n\t},\n\t//通过 github API 获取我的 github 仓库信息\n\tasync \trepos({ commit, dispatch }, username) {\n\t\tlet response = await http.get(`https://api.github.com/users/${username}/repos`)\n\t\tlet repoList = response.data\n\t\tcommit('SET_REPOS', repoList)\n\t\t// 分发其他 action 形成组合 action\n\t\tdispatch('changeAgeAsync', { age: 30 })\n\t\t// 给 state 新添加属性 不能直接改变 state\n\t\t// vue.set(state,'repoList',repoList)\n\t}\n}\n```\n在组件中使用 actions\n\n- 通过 `mapActions` 映射为方法。\n- `this.$store.dispatch`。\n\n```html\n<template>\n\t<div class=\"store\">\n\t\t<input type=\"text\" name=\"age\" id=\"age\" v-model=\"age\" placeholder=\"请输入年纪\" />\n\t\t<button @click=\"changeAge\">修改年纪</button>\n\t\t<p>年纪:{{this.$store.state.age}}</p>\n\t\t<input type=\"text\" v-model=\"lastName\" placeholder=\"请输入姓氏\" @input=\"changeLastName\" />\n\t\t<hr>\n\t\t<button @click=\"getRepos\">获取仓库列表</button>\n\t\t<h2>我的仓库列表：</h2>\n\t\t<ol>\n\t\t\t<li v-for=\"(item, index) in repoList\" :key=\"index\">{{item.full_name}}</li>\n\t\t</ol>\n\t</div>\n</template>\n<script>\n\timport { mapState, mapActions} from 'vuex'\n\texport default {\n\t\tname: 'Store',\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tage: '',\n\t\t\t\tlastName: \"\"\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\t...mapActions(['changeAgeAsync','repos']),\n\t\t\tchangeAge() {\n\t\t\t\t// this.$store.dispatch('changeAgeAsync',{ age: Number.parseInt(this.age) })\n\t\t\t\tthis.changeAgeAsync({age: Number.parseInt(this.age)})\n\t\t\t},\n\t\t\tgetRepos(){\n\t\t\t\t// this.$store.dispatch('repos','jackzhoumine')\n\t\t\t\tthis.repos('jackzhoumine')\n\t\t\t}\n\t\t},\n\t\tcomputed: {\n\t\t\t//计算属性名和 state 属性名相同:传入数组\n\t\t\t...mapState(['repoList'])\n\t\t}\n\t}\n</script>\n```\n\n## module\n\n状态对象很复杂时用 module 划分。\n这个似乎用得很少。需要用时看[veux 文档](https://vuex.vuejs.org/zh/guide/modules.html)即可。\n\n## 总结\n\n1. 提交 `mutation` 是改变你 state 的唯一方式；\n2. 方法执行上：\n   - `dispatch` 分发 action ;\n    - `commit` 提交mutation。\n3. 辅助方法的映射\n  - getters、state 映射为计算属性；\n  - actions、mutations 映射为法法。\n4. 分离功能：\n  - state 保存数据；\n  - getters 是对 state 的操作；\n  - actions 要提交 mutation;\n  - mutations 改变 state。\n5. 异步与同步：\n  - action 封装异步处理；\n  - mutation 只能是同步。\n6. 视图响应\n\n  ( `vue component dispatch` → ) `vue component commit` → ` state` → （ `getters` →） `vue component`\n\n7. state 对象太过复杂，使用 `module` 划分。\n\n## 参考\n\n- [理解Vuex，看这篇就够了](https://mobilesite.github.io/2016/12/18/vuex-introduction/)\n- [veux 文档](https://vuex.vuejs.org/zh/guide/forms.html)","slug":"vue-状态管理（二）","published":1,"updated":"2019-05-26T11:05:36.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccfp001mjwrn2x5d73su","content":"<p>上篇文章中说了 state 和 getters，本篇文章就来说说 mutations 和 actions。<br>\n提交 mutations 是改变 state 的唯一方式，不能用异步操作。actions 通过分发 action 来提交 mutation，可包含异步操作，比如 xhr 。</p>\n<a id=\"more\"></a>\n<h2 id=\"mutations\"><a class=\"markdownIt-Anchor\" href=\"#mutations\"></a> mutations</h2>\n<p>声明 mutations:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mutations.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tCHANGE_LAST_NAME(state, newLastName) &#123;</span><br><span class=\"line\">\t\tstate.lastName = newLastName</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tCHANGE_AGE(state, params) &#123;</span><br><span class=\"line\">\t\tstate.age = params.age + <span class=\"number\">5</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 新增一个属性</span></span><br><span class=\"line\">\tSET_REPOS(state,repos)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 给 state 新添加属性</span></span><br><span class=\"line\">\t\tvue.set(state,<span class=\"string\">'repoList'</span>,repos)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 mutations</p>\n<ol>\n<li>通过 <code>mapMutations</code> 映射方法；</li>\n<li>在方法中 调用 <code>this.$store.commit('mutaion')</code>；</li>\n<li>可以在 mutation 种给 state 新增状态（属性），新增的状态会响应到视图上。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"store\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>基本信息：&#123;&#123;this.info&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入年纪\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"changeAge\"</span>&gt;</span>修改年纪<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"changeAge2\"</span>&gt;</span>修改年纪2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>年纪:&#123;&#123;this.$store.state.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"lastName\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入姓氏\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"changeLastName\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> CustomInput <span class=\"keyword\">from</span> <span class=\"string\">'_c/CustomInput.vue'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> &#123; mapState, mapGetters, mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'Store'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tage: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tlastName: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\thandleInput(val) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.value = val</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">//方法名和 muations 相同</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t...mapMutations([<span class=\"string\">'CHANGE_LAST_NAME'</span>, <span class=\"string\">'CHANGE_AGE'</span>]),</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">// 将 `this.changeAge2()` 映射为 `this.$store.commit('CHANGE_AGE')`</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t...mapMutations(&#123; changeAgeAlias: <span class=\"string\">'CHANGE_AGE'</span> &#125;),</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchangeAge() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// 传递载荷</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// this.$store.commit('CHANGE_AGE', &#123; age: Number.parseInt(this.age) &#125;)</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//对象提交方式</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// this.$store.commit(&#123; type: 'CHANGE_AGE', age: Number.parseInt(this.age) &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">this</span>.CHANGE_AGE(&#123; <span class=\"attr\">age</span>: <span class=\"built_in\">Number</span>.parseInt(<span class=\"keyword\">this</span>.age) &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchangeAge2() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">this</span>.changeAgeAlias(&#123; <span class=\"attr\">age</span>: <span class=\"built_in\">Number</span>.parseInt(<span class=\"keyword\">this</span>.age) &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchangeLastName() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// this.$store.commit('CHANGE_LAST_NAME', this.lastName)</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.CHANGE_LAST_NAME(<span class=\"keyword\">this</span>.lastName)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"actions\"><a class=\"markdownIt-Anchor\" href=\"#actions\"></a> actions</h2>\n<p>mutation  只能是同步操作，为了使用异步操作，Vuex 提供了 actions。</p>\n<ul>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n<p>声明 actions</p>\n<ul>\n<li>action 接收一个和 store 具有相同属性和方法的对象，可 context.commit 提交 mutation；</li>\n<li>可以解构赋值，获取 <code>commit</code> 和 <code>dispatch</code>，commit 用于提交 mutation, dispatch  用于分发其他 action。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> http <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// action 接收一个和 store 具有相同属性和方法的对象，可 context.commit 提交 mutation</span></span><br><span class=\"line\">\tchangeAgeAsync(context, params) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.dir(context)</span><br><span class=\"line\">\t\t<span class=\"comment\">//模拟异步操作</span></span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; context.commit(<span class=\"string\">'CHANGE_AGE'</span>, params) &#125;, <span class=\"number\">5000</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">//通过 github API 获取我的 github 仓库信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> \trepos(&#123; commit, dispatch &#125;, username) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> http.get(<span class=\"string\">`https://api.github.com/users/<span class=\"subst\">$&#123;username&#125;</span>/repos`</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> repoList = response.data</span><br><span class=\"line\">\t\tcommit(<span class=\"string\">'SET_REPOS'</span>, repoList)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 分发其他 action 形成组合 action</span></span><br><span class=\"line\">\t\tdispatch(<span class=\"string\">'changeAgeAsync'</span>, &#123; <span class=\"attr\">age</span>: <span class=\"number\">30</span> &#125;)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 给 state 新添加属性 不能直接改变 state</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// vue.set(state,'repoList',repoList)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在组件中使用 actions</p>\n<ul>\n<li>通过 <code>mapActions</code> 映射为方法。</li>\n<li><code>this.$store.dispatch</code>。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"store\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入年纪\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"changeAge\"</span>&gt;</span>修改年纪<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>年纪:&#123;&#123;this.$store.state.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"lastName\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入姓氏\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"changeLastName\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"getRepos\"</span>&gt;</span>获取仓库列表<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>我的仓库列表：<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in repoList\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span>&gt;</span>&#123;&#123;item.full_name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> &#123; mapState, mapActions&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'Store'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tage: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tlastName: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t...mapActions([<span class=\"string\">'changeAgeAsync'</span>,<span class=\"string\">'repos'</span>]),</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchangeAge() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// this.$store.dispatch('changeAgeAsync',&#123; age: Number.parseInt(this.age) &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">this</span>.changeAgeAsync(&#123;<span class=\"attr\">age</span>: <span class=\"built_in\">Number</span>.parseInt(<span class=\"keyword\">this</span>.age)&#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tgetRepos()&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// this.$store.dispatch('repos','jackzhoumine')</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.repos(<span class=\"string\">'jackzhoumine'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomputed: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">//计算属性名和 state 属性名相同:传入数组</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t...mapState([<span class=\"string\">'repoList'</span>])</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"module\"><a class=\"markdownIt-Anchor\" href=\"#module\"></a> module</h2>\n<p>状态对象很复杂时用 module 划分。<br>\n这个似乎用得很少。需要用时看<a href=\"https://vuex.vuejs.org/zh/guide/modules.html\" target=\"_blank\" rel=\"noopener\">veux 文档</a>即可。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<ol>\n<li>提交 <code>mutation</code> 是改变你 state 的唯一方式；</li>\n<li>方法执行上：\n<ul>\n<li><code>dispatch</code> 分发 action ;</li>\n<li><code>commit</code> 提交mutation。</li>\n</ul>\n</li>\n<li>辅助方法的映射</li>\n</ol>\n<ul>\n<li>getters、state 映射为计算属性；</li>\n<li>actions、mutations 映射为法法。</li>\n</ul>\n<ol start=\"4\">\n<li>分离功能：</li>\n</ol>\n<ul>\n<li>state 保存数据；</li>\n<li>getters 是对 state 的操作；</li>\n<li>actions 要提交 mutation;</li>\n<li>mutations 改变 state。</li>\n</ul>\n<ol start=\"5\">\n<li>异步与同步：</li>\n</ol>\n<ul>\n<li>action 封装异步处理；</li>\n<li>mutation 只能是同步。</li>\n</ul>\n<ol start=\"6\">\n<li>视图响应</li>\n</ol>\n<p>( <code>vue component dispatch</code> → ) <code>vue component commit</code> → <code>state</code> → （ <code>getters</code> →） <code>vue component</code></p>\n<ol start=\"7\">\n<li>state 对象太过复杂，使用 <code>module</code> 划分。</li>\n</ol>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://mobilesite.github.io/2016/12/18/vuex-introduction/\" target=\"_blank\" rel=\"noopener\">理解Vuex，看这篇就够了</a></li>\n<li><a href=\"https://vuex.vuejs.org/zh/guide/forms.html\" target=\"_blank\" rel=\"noopener\">veux 文档</a></li>\n</ul>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>上篇文章中说了 state 和 getters，本篇文章就来说说 mutations 和 actions。<br>\n提交 mutations 是改变 state 的唯一方式，不能用异步操作。actions 通过分发 action 来提交 mutation，可包含异步操作，比如 xhr 。</p>","more":"<h2 id=\"mutations\"><a class=\"markdownIt-Anchor\" href=\"#mutations\"></a> mutations</h2>\n<p>声明 mutations:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mutations.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\tCHANGE_LAST_NAME(state, newLastName) &#123;</span><br><span class=\"line\">\t\tstate.lastName = newLastName</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tCHANGE_AGE(state, params) &#123;</span><br><span class=\"line\">\t\tstate.age = params.age + <span class=\"number\">5</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 新增一个属性</span></span><br><span class=\"line\">\tSET_REPOS(state,repos)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 给 state 新添加属性</span></span><br><span class=\"line\">\t\tvue.set(state,<span class=\"string\">'repoList'</span>,repos)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 mutations</p>\n<ol>\n<li>通过 <code>mapMutations</code> 映射方法；</li>\n<li>在方法中 调用 <code>this.$store.commit('mutaion')</code>；</li>\n<li>可以在 mutation 种给 state 新增状态（属性），新增的状态会响应到视图上。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"store\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>基本信息：&#123;&#123;this.info&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入年纪\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"changeAge\"</span>&gt;</span>修改年纪<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"changeAge2\"</span>&gt;</span>修改年纪2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>年纪:&#123;&#123;this.$store.state.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"lastName\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入姓氏\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"changeLastName\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> CustomInput <span class=\"keyword\">from</span> <span class=\"string\">'_c/CustomInput.vue'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> &#123; mapState, mapGetters, mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'Store'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tage: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tlastName: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\thandleInput(val) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.value = val</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">//方法名和 muations 相同</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t...mapMutations([<span class=\"string\">'CHANGE_LAST_NAME'</span>, <span class=\"string\">'CHANGE_AGE'</span>]),</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">// 将 `this.changeAge2()` 映射为 `this.$store.commit('CHANGE_AGE')`</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t...mapMutations(&#123; changeAgeAlias: <span class=\"string\">'CHANGE_AGE'</span> &#125;),</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchangeAge() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// 传递载荷</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// this.$store.commit('CHANGE_AGE', &#123; age: Number.parseInt(this.age) &#125;)</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">//对象提交方式</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// this.$store.commit(&#123; type: 'CHANGE_AGE', age: Number.parseInt(this.age) &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">this</span>.CHANGE_AGE(&#123; <span class=\"attr\">age</span>: <span class=\"built_in\">Number</span>.parseInt(<span class=\"keyword\">this</span>.age) &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchangeAge2() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">this</span>.changeAgeAlias(&#123; <span class=\"attr\">age</span>: <span class=\"built_in\">Number</span>.parseInt(<span class=\"keyword\">this</span>.age) &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchangeLastName() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// this.$store.commit('CHANGE_LAST_NAME', this.lastName)</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.CHANGE_LAST_NAME(<span class=\"keyword\">this</span>.lastName)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"actions\"><a class=\"markdownIt-Anchor\" href=\"#actions\"></a> actions</h2>\n<p>mutation  只能是同步操作，为了使用异步操作，Vuex 提供了 actions。</p>\n<ul>\n<li>Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>Action 可以包含任意异步操作。</li>\n</ul>\n<p>声明 actions</p>\n<ul>\n<li>action 接收一个和 store 具有相同属性和方法的对象，可 context.commit 提交 mutation；</li>\n<li>可以解构赋值，获取 <code>commit</code> 和 <code>dispatch</code>，commit 用于提交 mutation, dispatch  用于分发其他 action。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> http <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// action 接收一个和 store 具有相同属性和方法的对象，可 context.commit 提交 mutation</span></span><br><span class=\"line\">\tchangeAgeAsync(context, params) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.dir(context)</span><br><span class=\"line\">\t\t<span class=\"comment\">//模拟异步操作</span></span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; context.commit(<span class=\"string\">'CHANGE_AGE'</span>, params) &#125;, <span class=\"number\">5000</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">//通过 github API 获取我的 github 仓库信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> \trepos(&#123; commit, dispatch &#125;, username) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> http.get(<span class=\"string\">`https://api.github.com/users/<span class=\"subst\">$&#123;username&#125;</span>/repos`</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> repoList = response.data</span><br><span class=\"line\">\t\tcommit(<span class=\"string\">'SET_REPOS'</span>, repoList)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 分发其他 action 形成组合 action</span></span><br><span class=\"line\">\t\tdispatch(<span class=\"string\">'changeAgeAsync'</span>, &#123; <span class=\"attr\">age</span>: <span class=\"number\">30</span> &#125;)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 给 state 新添加属性 不能直接改变 state</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// vue.set(state,'repoList',repoList)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在组件中使用 actions</p>\n<ul>\n<li>通过 <code>mapActions</code> 映射为方法。</li>\n<li><code>this.$store.dispatch</code>。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"store\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入年纪\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"changeAge\"</span>&gt;</span>修改年纪<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>年纪:&#123;&#123;this.$store.state.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"lastName\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入姓氏\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"changeLastName\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"getRepos\"</span>&gt;</span>获取仓库列表<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>我的仓库列表：<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in repoList\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span>&gt;</span>&#123;&#123;item.full_name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> &#123; mapState, mapActions&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tname: <span class=\"string\">'Store'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tage: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\tlastName: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t...mapActions([<span class=\"string\">'changeAgeAsync'</span>,<span class=\"string\">'repos'</span>]),</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchangeAge() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// this.$store.dispatch('changeAgeAsync',&#123; age: Number.parseInt(this.age) &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">this</span>.changeAgeAsync(&#123;<span class=\"attr\">age</span>: <span class=\"built_in\">Number</span>.parseInt(<span class=\"keyword\">this</span>.age)&#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tgetRepos()&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// this.$store.dispatch('repos','jackzhoumine')</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"keyword\">this</span>.repos(<span class=\"string\">'jackzhoumine'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcomputed: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"comment\">//计算属性名和 state 属性名相同:传入数组</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t...mapState([<span class=\"string\">'repoList'</span>])</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"module\"><a class=\"markdownIt-Anchor\" href=\"#module\"></a> module</h2>\n<p>状态对象很复杂时用 module 划分。<br>\n这个似乎用得很少。需要用时看<a href=\"https://vuex.vuejs.org/zh/guide/modules.html\" target=\"_blank\" rel=\"noopener\">veux 文档</a>即可。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<ol>\n<li>提交 <code>mutation</code> 是改变你 state 的唯一方式；</li>\n<li>方法执行上：\n<ul>\n<li><code>dispatch</code> 分发 action ;</li>\n<li><code>commit</code> 提交mutation。</li>\n</ul>\n</li>\n<li>辅助方法的映射</li>\n</ol>\n<ul>\n<li>getters、state 映射为计算属性；</li>\n<li>actions、mutations 映射为法法。</li>\n</ul>\n<ol start=\"4\">\n<li>分离功能：</li>\n</ol>\n<ul>\n<li>state 保存数据；</li>\n<li>getters 是对 state 的操作；</li>\n<li>actions 要提交 mutation;</li>\n<li>mutations 改变 state。</li>\n</ul>\n<ol start=\"5\">\n<li>异步与同步：</li>\n</ol>\n<ul>\n<li>action 封装异步处理；</li>\n<li>mutation 只能是同步。</li>\n</ul>\n<ol start=\"6\">\n<li>视图响应</li>\n</ol>\n<p>( <code>vue component dispatch</code> → ) <code>vue component commit</code> → <code>state</code> → （ <code>getters</code> →） <code>vue component</code></p>\n<ol start=\"7\">\n<li>state 对象太过复杂，使用 <code>module</code> 划分。</li>\n</ol>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://mobilesite.github.io/2016/12/18/vuex-introduction/\" target=\"_blank\" rel=\"noopener\">理解Vuex，看这篇就够了</a></li>\n<li><a href=\"https://vuex.vuejs.org/zh/guide/forms.html\" target=\"_blank\" rel=\"noopener\">veux 文档</a></li>\n</ul>"},{"title":"web worker 实现浏览器多线程","date":"2019-06-15T12:19:31.000Z","_content":"JS 天然属于单线程环境，也就是说不能同时运行多个脚本。为何这样？因为JS的设计目标是实现网页和用户交互，试想当用户点击页面，操作 DOM 时，有两个线程同时操作了DOM，那么以谁的结果为准呢？最坏的情况一个线程需要给一个元素添加内容，另一个线程却把元素删除了，这将导致用户无法和页面交互。这就是JS只能单线程的原因，所有任务都在一个线程上执行，不必考虑多线程的问题。JS 需要同时执行两个任务的地方，可通过定时器、事件处理器等**异步技术**实现*并行*（其实依然单线程）。HTML5 引入 web worker 实现真正的多线程。通过 Web Worker 在**后台执行**一些操作，例如触发长时间运行的脚本以处理计算密集型任务，同时却不会阻碍 UI 或其他脚本处理用户互动。\nWorker 利用类似线程的消息传递实现并行。这非常适合您确保对 UI 的刷新、性能以及对用户的响应。\n<!-- more -->\n\n## web worker 的类型\n两种类型：\n- 专用 worker（Dedicated workers）：只能在创建它的脚本中使用；\n- 共享 worker（Shared workers）：可在多个脚本中使用。\n\nworker 和主线程之间通信通过消息机制进行--使用`postMessage` 函数向对方传递数据，对方通过监听`message`事件获取并处理数据。数据不是共享，而是**复制**。所以传递对象时，可以操作该对象，而不会影响另一个线程中的对象。\n\nworker 和主线程的脚本**必须同源**，简单理解成同一个网站加载到浏览中。\n\n## 专用 worker\n\n### worker 特性检测\n在主线程检测浏览器是否支持 worker,在决定是否创建 worker。\n```js\nif(window.worker){\n  //do something\n}\n```\n目前主要浏览器都支持。[更多详情](https://caniuse.com/#feat=webworkers)\n\n### 使用入门\nweb worker 在独立线程中运行，可将其代码保存在一个单独的JS文件中，然后在创建 worker 时引入该脚本。很多浏览器还不支持本地文件运行worker，我们需要结合服务器时间。可使用 express 创建一个服务器。\n\n在 **public/javascripts** 文件夹在创建 worker.js：\n```js\nthis.addEventListener('message', (event) => {\n  console.log(this)\n  console.log(event)\n  console.log(event.data)\n  console.log(event.origin)\n  console.log(event.ports)\n  console.log(event.source)\n  console.log(event.lastEventId)\n  self.postMessage({ name: 'worker.js', data: 'hello,main.js!' })\n}, false)\n```\n这就是 worker 线程的代码。\n\n在页面的 JS 代码中创建 worker，为了简单起见，在script 标签中写脚本：\n```html\n<script>\nlet worker = new Worker('/javascripts/worker.js');//创建一个 worker\nlet workerButton = document.getElementByI('workerButton');\n  workerButton.addEventListener('click', (event)=> {\n    console.log(event)\n    worker.postMessage({ name: 'main.js', data:'hello,worker.js!' });//向 worker 线程发送消息\n  }, false)\n  // 监听 worker 线程发送过来的消息\n  worker.addEventListener('message', (event) => {\n    console.log(event.data);\n }, false)\n</script>\n```\n创建 worker 时指定的脚本是异步加载的，如果加载成功，会生成一个 worker 线程。完全加载和执行之前，系统不好生成 worker。如果脚本不存在，返回404，创建 worker失败。\n\npostMessage 用来启动 worker，也用来发送消息。\n\n### 停止 worker \n\n在主线程中，通过`worker.terminate()` 停止 worker;在worker 线程中，使用`close()`来停止worker。\n\n```js\nlet stopWorker = document.getElementById('stopWorker');\nstopWorker.addEventListener('click', () => {\n  let result = worker.terminate();\n  console.log(result);\n}, false);\n```\nworker 自己停止：\n\n在主线程中通知worker停止：\n```js\nlet stopWorker = document.getElementById('stopWorker');\nstopWorker.addEventListener('click', () => {\n  let result = worker.postMessage('stop');\n  console.log(result);//undefined\n}, false)\n```\nworker.js\n```js\nthis.addEventListener('message', (event) => {\n  console.log(this)\n  console.log(event)\n  console.log(event.data)\n  console.log(event.origin)\n  console.log('cache',this.cache)\n  console.log(event.source)\n  console.log(event.lastEventId)\n  if ('stop' === event.data) {\n    let result = this.close();\n    console.log('worker stop ',result);//undefined\n  }\n  self.postMessage({ name: 'worker.js', data: 'hello,main.js!' })\n}, false)\n```\n\n### worker 环境\n\nworker 作用域：在worker脚本文件内，this 和 self 都是全局作用域。上面的`console.log(this)`的输出是：\n```js\nDedicatedWorkerGlobalScope。\n```\nworker 线程中并不能完成使用主线程的功能，只能使用部分JS功能：\n- navigator 对象；\n- location 对象；\n- XMLHttpRequest 对象；\n- 定时器；\n- 应用缓存；\n- importScripts();\n- 生成其他 worker。\n\nworker 中无法使用：\n- DOM(非线程安全)；\n- window 对象；\n- document 对象；\n- parent 对象。\n\n我们在 worker.js 发发送一个http 请求，拿到返回值后传递给主线程：\n```js\n\n\n```\n[更多详细情况](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers)\n\n### 加载外 worker 脚本\n可使用`importScripts` 函数加载外部的脚本进入 worker 脚本执行。\n\n在 worker.js 记载一个脚本：\n\n```js\nimportScripts('./importTest.js');// 可传递多个路径，路径是相对于 worker.js 的\n```\nimportTest.js\n```js\ntest(5)\nfunction test(time) {\n  setInterval(() => {\n    console.log('你好');\n  }, 1000 * time);\n```\nworker 线程停止后，加载的外部脚本也停止执行。\n\n### 错误处理\n可在主线程中处理 worker 线程的错误，在主线程中监听 worker 的 错误事件：\n```js\nworker.addEventListener('error', (event) => {\n  console.log(event.colno);\n  console.log(event.filename);\n  console.log(event.message);\n}, false);\n```\n输出该错误事件，可看到事件的一些属性：\n不冒泡、可取消等，具有普通事件的一些属性。\n\nworker 生成一个错误：\n```js\nthis.addEventListener('message', (event) => {\n  if ('stop' === event.data) {\n    let result = this.close();\n    console.log('worker stop ', result);\n  }\n  self.postMessage({ name: 'worker.js', data: 'hello,main.js!' })\n  this.postMessage(new Error('制造一个错误！'));\n}, false)\n```\n### 内嵌 worker\n\n上面的例子，将 worker 代码放在单独的文件里，这样便于管理代码，也方便修改，因为有语法高亮，可以将 worker 代码放在和主线程相关的html文件里:\n\n```html\n<script id=\"worker\" type=\"javascript/worker\">\n    this.addEventListener('message', (event) => {\n      if ('stop' === event.data) {\n        this.close();\n      }\n      console.log(event.data);\n      self.postMessage({ name: 'worker.js', data: 'hello,main.js!' });\n    }, false);\n  </script>\n  <script>\n    let workerContent = document.getElementById('worker').textContent;\n    let blob = new Blob([workerContent], { type: 'text/javacript' });\n    let url = URL.createObjectURL(blob);\n    console.log(url);\n    let worker = new Worker(url);\n    worker.addEventListener('message', (event) => {\n      console.log(event.data);\n    });\n    let workerButton = document.querySelector('#workerButton');\n    workerButton.addEventListener('click', (event) => {\n      worker.postMessage({ name: \"主线程\" });\n    }, false);\n  </script>\n```\n\n将 worker 的代码在 script 标签中，声明类型为`javascript/worker`,就不会被浏览器解析成JS代码，而是当成普通的 html 标签，可通过DOM api 获取标签内的文本，创建 worker。\n使用 Blob 生成一个blob 对象，再使用 URL.createObjectURL成连接，再生成 worker。\n```js\nlet blob = new Blob([workerContent], { type: 'text/javacript' });\nlet url = URL.createObjectURL(blob);\nconsole.log(url);\nlet worker = new Worker(url);\n```\n[关于Blob](https://www.javascripture.com/Blob)\n[关于Blob和URL](https://javascript.info/blob)\n### worker 的使用场景\n常用的场景：\n- 预先抓取和/或缓存数据以便稍后使用；\n- 突出显示代码语法或其他实时文本格式；\n- 拼写检查程序；\n- 分析视频或音频数据；\n- 背景 I/O 或网络服务轮询；\n- 处理较大数组或超大 JSON 响应；\n- \\<canvas> 中的图片过滤；\n- 更新本地网络数据库中的多行内容。\n\n## 更多参考\n\n[Web Workers 的基本信息](https://www.html5rocks.com/zh/tutorials/workers/basics/)\n\n[使用 Web Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers)\n\n[worker读取文件](https://www.html5rocks.com/en/tutorials/file/filesystem-sync/)","source":"_posts/web-worker-实现浏览器多线程.md","raw":"---\ntitle: web worker 实现浏览器多线程\ndate: 2019-06-15 20:19:31\ntags:\n- html5\ncategories:\n- [html5]\n---\nJS 天然属于单线程环境，也就是说不能同时运行多个脚本。为何这样？因为JS的设计目标是实现网页和用户交互，试想当用户点击页面，操作 DOM 时，有两个线程同时操作了DOM，那么以谁的结果为准呢？最坏的情况一个线程需要给一个元素添加内容，另一个线程却把元素删除了，这将导致用户无法和页面交互。这就是JS只能单线程的原因，所有任务都在一个线程上执行，不必考虑多线程的问题。JS 需要同时执行两个任务的地方，可通过定时器、事件处理器等**异步技术**实现*并行*（其实依然单线程）。HTML5 引入 web worker 实现真正的多线程。通过 Web Worker 在**后台执行**一些操作，例如触发长时间运行的脚本以处理计算密集型任务，同时却不会阻碍 UI 或其他脚本处理用户互动。\nWorker 利用类似线程的消息传递实现并行。这非常适合您确保对 UI 的刷新、性能以及对用户的响应。\n<!-- more -->\n\n## web worker 的类型\n两种类型：\n- 专用 worker（Dedicated workers）：只能在创建它的脚本中使用；\n- 共享 worker（Shared workers）：可在多个脚本中使用。\n\nworker 和主线程之间通信通过消息机制进行--使用`postMessage` 函数向对方传递数据，对方通过监听`message`事件获取并处理数据。数据不是共享，而是**复制**。所以传递对象时，可以操作该对象，而不会影响另一个线程中的对象。\n\nworker 和主线程的脚本**必须同源**，简单理解成同一个网站加载到浏览中。\n\n## 专用 worker\n\n### worker 特性检测\n在主线程检测浏览器是否支持 worker,在决定是否创建 worker。\n```js\nif(window.worker){\n  //do something\n}\n```\n目前主要浏览器都支持。[更多详情](https://caniuse.com/#feat=webworkers)\n\n### 使用入门\nweb worker 在独立线程中运行，可将其代码保存在一个单独的JS文件中，然后在创建 worker 时引入该脚本。很多浏览器还不支持本地文件运行worker，我们需要结合服务器时间。可使用 express 创建一个服务器。\n\n在 **public/javascripts** 文件夹在创建 worker.js：\n```js\nthis.addEventListener('message', (event) => {\n  console.log(this)\n  console.log(event)\n  console.log(event.data)\n  console.log(event.origin)\n  console.log(event.ports)\n  console.log(event.source)\n  console.log(event.lastEventId)\n  self.postMessage({ name: 'worker.js', data: 'hello,main.js!' })\n}, false)\n```\n这就是 worker 线程的代码。\n\n在页面的 JS 代码中创建 worker，为了简单起见，在script 标签中写脚本：\n```html\n<script>\nlet worker = new Worker('/javascripts/worker.js');//创建一个 worker\nlet workerButton = document.getElementByI('workerButton');\n  workerButton.addEventListener('click', (event)=> {\n    console.log(event)\n    worker.postMessage({ name: 'main.js', data:'hello,worker.js!' });//向 worker 线程发送消息\n  }, false)\n  // 监听 worker 线程发送过来的消息\n  worker.addEventListener('message', (event) => {\n    console.log(event.data);\n }, false)\n</script>\n```\n创建 worker 时指定的脚本是异步加载的，如果加载成功，会生成一个 worker 线程。完全加载和执行之前，系统不好生成 worker。如果脚本不存在，返回404，创建 worker失败。\n\npostMessage 用来启动 worker，也用来发送消息。\n\n### 停止 worker \n\n在主线程中，通过`worker.terminate()` 停止 worker;在worker 线程中，使用`close()`来停止worker。\n\n```js\nlet stopWorker = document.getElementById('stopWorker');\nstopWorker.addEventListener('click', () => {\n  let result = worker.terminate();\n  console.log(result);\n}, false);\n```\nworker 自己停止：\n\n在主线程中通知worker停止：\n```js\nlet stopWorker = document.getElementById('stopWorker');\nstopWorker.addEventListener('click', () => {\n  let result = worker.postMessage('stop');\n  console.log(result);//undefined\n}, false)\n```\nworker.js\n```js\nthis.addEventListener('message', (event) => {\n  console.log(this)\n  console.log(event)\n  console.log(event.data)\n  console.log(event.origin)\n  console.log('cache',this.cache)\n  console.log(event.source)\n  console.log(event.lastEventId)\n  if ('stop' === event.data) {\n    let result = this.close();\n    console.log('worker stop ',result);//undefined\n  }\n  self.postMessage({ name: 'worker.js', data: 'hello,main.js!' })\n}, false)\n```\n\n### worker 环境\n\nworker 作用域：在worker脚本文件内，this 和 self 都是全局作用域。上面的`console.log(this)`的输出是：\n```js\nDedicatedWorkerGlobalScope。\n```\nworker 线程中并不能完成使用主线程的功能，只能使用部分JS功能：\n- navigator 对象；\n- location 对象；\n- XMLHttpRequest 对象；\n- 定时器；\n- 应用缓存；\n- importScripts();\n- 生成其他 worker。\n\nworker 中无法使用：\n- DOM(非线程安全)；\n- window 对象；\n- document 对象；\n- parent 对象。\n\n我们在 worker.js 发发送一个http 请求，拿到返回值后传递给主线程：\n```js\n\n\n```\n[更多详细情况](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers)\n\n### 加载外 worker 脚本\n可使用`importScripts` 函数加载外部的脚本进入 worker 脚本执行。\n\n在 worker.js 记载一个脚本：\n\n```js\nimportScripts('./importTest.js');// 可传递多个路径，路径是相对于 worker.js 的\n```\nimportTest.js\n```js\ntest(5)\nfunction test(time) {\n  setInterval(() => {\n    console.log('你好');\n  }, 1000 * time);\n```\nworker 线程停止后，加载的外部脚本也停止执行。\n\n### 错误处理\n可在主线程中处理 worker 线程的错误，在主线程中监听 worker 的 错误事件：\n```js\nworker.addEventListener('error', (event) => {\n  console.log(event.colno);\n  console.log(event.filename);\n  console.log(event.message);\n}, false);\n```\n输出该错误事件，可看到事件的一些属性：\n不冒泡、可取消等，具有普通事件的一些属性。\n\nworker 生成一个错误：\n```js\nthis.addEventListener('message', (event) => {\n  if ('stop' === event.data) {\n    let result = this.close();\n    console.log('worker stop ', result);\n  }\n  self.postMessage({ name: 'worker.js', data: 'hello,main.js!' })\n  this.postMessage(new Error('制造一个错误！'));\n}, false)\n```\n### 内嵌 worker\n\n上面的例子，将 worker 代码放在单独的文件里，这样便于管理代码，也方便修改，因为有语法高亮，可以将 worker 代码放在和主线程相关的html文件里:\n\n```html\n<script id=\"worker\" type=\"javascript/worker\">\n    this.addEventListener('message', (event) => {\n      if ('stop' === event.data) {\n        this.close();\n      }\n      console.log(event.data);\n      self.postMessage({ name: 'worker.js', data: 'hello,main.js!' });\n    }, false);\n  </script>\n  <script>\n    let workerContent = document.getElementById('worker').textContent;\n    let blob = new Blob([workerContent], { type: 'text/javacript' });\n    let url = URL.createObjectURL(blob);\n    console.log(url);\n    let worker = new Worker(url);\n    worker.addEventListener('message', (event) => {\n      console.log(event.data);\n    });\n    let workerButton = document.querySelector('#workerButton');\n    workerButton.addEventListener('click', (event) => {\n      worker.postMessage({ name: \"主线程\" });\n    }, false);\n  </script>\n```\n\n将 worker 的代码在 script 标签中，声明类型为`javascript/worker`,就不会被浏览器解析成JS代码，而是当成普通的 html 标签，可通过DOM api 获取标签内的文本，创建 worker。\n使用 Blob 生成一个blob 对象，再使用 URL.createObjectURL成连接，再生成 worker。\n```js\nlet blob = new Blob([workerContent], { type: 'text/javacript' });\nlet url = URL.createObjectURL(blob);\nconsole.log(url);\nlet worker = new Worker(url);\n```\n[关于Blob](https://www.javascripture.com/Blob)\n[关于Blob和URL](https://javascript.info/blob)\n### worker 的使用场景\n常用的场景：\n- 预先抓取和/或缓存数据以便稍后使用；\n- 突出显示代码语法或其他实时文本格式；\n- 拼写检查程序；\n- 分析视频或音频数据；\n- 背景 I/O 或网络服务轮询；\n- 处理较大数组或超大 JSON 响应；\n- \\<canvas> 中的图片过滤；\n- 更新本地网络数据库中的多行内容。\n\n## 更多参考\n\n[Web Workers 的基本信息](https://www.html5rocks.com/zh/tutorials/workers/basics/)\n\n[使用 Web Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers)\n\n[worker读取文件](https://www.html5rocks.com/en/tutorials/file/filesystem-sync/)","slug":"web-worker-实现浏览器多线程","published":1,"updated":"2019-06-15T12:20:58.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccfu001rjwrn8kocc11o","content":"<p>JS 天然属于单线程环境，也就是说不能同时运行多个脚本。为何这样？因为JS的设计目标是实现网页和用户交互，试想当用户点击页面，操作 DOM 时，有两个线程同时操作了DOM，那么以谁的结果为准呢？最坏的情况一个线程需要给一个元素添加内容，另一个线程却把元素删除了，这将导致用户无法和页面交互。这就是JS只能单线程的原因，所有任务都在一个线程上执行，不必考虑多线程的问题。JS 需要同时执行两个任务的地方，可通过定时器、事件处理器等<strong>异步技术</strong>实现<em>并行</em>（其实依然单线程）。HTML5 引入 web worker 实现真正的多线程。通过 Web Worker 在<strong>后台执行</strong>一些操作，例如触发长时间运行的脚本以处理计算密集型任务，同时却不会阻碍 UI 或其他脚本处理用户互动。<br>\nWorker 利用类似线程的消息传递实现并行。这非常适合您确保对 UI 的刷新、性能以及对用户的响应。</p>\n<a id=\"more\"></a>\n<h2 id=\"web-worker-的类型\"><a class=\"markdownIt-Anchor\" href=\"#web-worker-的类型\"></a> web worker 的类型</h2>\n<p>两种类型：</p>\n<ul>\n<li>专用 worker（Dedicated workers）：只能在创建它的脚本中使用；</li>\n<li>共享 worker（Shared workers）：可在多个脚本中使用。</li>\n</ul>\n<p>worker 和主线程之间通信通过消息机制进行–使用<code>postMessage</code> 函数向对方传递数据，对方通过监听<code>message</code>事件获取并处理数据。数据不是共享，而是<strong>复制</strong>。所以传递对象时，可以操作该对象，而不会影响另一个线程中的对象。</p>\n<p>worker 和主线程的脚本<strong>必须同源</strong>，简单理解成同一个网站加载到浏览中。</p>\n<h2 id=\"专用-worker\"><a class=\"markdownIt-Anchor\" href=\"#专用-worker\"></a> 专用 worker</h2>\n<h3 id=\"worker-特性检测\"><a class=\"markdownIt-Anchor\" href=\"#worker-特性检测\"></a> worker 特性检测</h3>\n<p>在主线程检测浏览器是否支持 worker,在决定是否创建 worker。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.worker)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目前主要浏览器都支持。<a href=\"https://caniuse.com/#feat=webworkers\" target=\"_blank\" rel=\"noopener\">更多详情</a></p>\n<h3 id=\"使用入门\"><a class=\"markdownIt-Anchor\" href=\"#使用入门\"></a> 使用入门</h3>\n<p>web worker 在独立线程中运行，可将其代码保存在一个单独的JS文件中，然后在创建 worker 时引入该脚本。很多浏览器还不支持本地文件运行worker，我们需要结合服务器时间。可使用 express 创建一个服务器。</p>\n<p>在 <strong>public/javascripts</strong> 文件夹在创建 worker.js：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.data)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.origin)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.ports)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.source)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.lastEventId)</span><br><span class=\"line\">  self.postMessage(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'worker.js'</span>, <span class=\"attr\">data</span>: <span class=\"string\">'hello,main.js!'</span> &#125;)</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>这就是 worker 线程的代码。</p>\n<p>在页面的 JS 代码中创建 worker，为了简单起见，在script 标签中写脚本：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'/javascripts/worker.js'</span>);<span class=\"comment\">//创建一个 worker</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> workerButton = <span class=\"built_in\">document</span>.getElementByI(<span class=\"string\">'workerButton'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">  workerButton.addEventListener(<span class=\"string\">'click'</span>, (event)=&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(event)</span></span><br><span class=\"line\"><span class=\"actionscript\">    worker.postMessage(&#123; name: <span class=\"string\">'main.js'</span>, data:<span class=\"string\">'hello,worker.js!'</span> &#125;);<span class=\"comment\">//向 worker 线程发送消息</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  &#125;, <span class=\"literal\">false</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 监听 worker 线程发送过来的消息</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  worker.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(event.data);</span></span><br><span class=\"line\"><span class=\"actionscript\"> &#125;, <span class=\"literal\">false</span>)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>创建 worker 时指定的脚本是异步加载的，如果加载成功，会生成一个 worker 线程。完全加载和执行之前，系统不好生成 worker。如果脚本不存在，返回404，创建 worker失败。</p>\n<p>postMessage 用来启动 worker，也用来发送消息。</p>\n<h3 id=\"停止-worker\"><a class=\"markdownIt-Anchor\" href=\"#停止-worker\"></a> 停止 worker</h3>\n<p>在主线程中，通过<code>worker.terminate()</code> 停止 worker;在worker 线程中，使用<code>close()</code>来停止worker。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stopWorker = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'stopWorker'</span>);</span><br><span class=\"line\">stopWorker.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = worker.terminate();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>worker 自己停止：</p>\n<p>在主线程中通知worker停止：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stopWorker = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'stopWorker'</span>);</span><br><span class=\"line\">stopWorker.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = worker.postMessage(<span class=\"string\">'stop'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);<span class=\"comment\">//undefined</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>worker.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.data)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.origin)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'cache'</span>,<span class=\"keyword\">this</span>.cache)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.source)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.lastEventId)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">'stop'</span> === event.data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">this</span>.close();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'worker stop '</span>,result);<span class=\"comment\">//undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  self.postMessage(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'worker.js'</span>, <span class=\"attr\">data</span>: <span class=\"string\">'hello,main.js!'</span> &#125;)</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"worker-环境\"><a class=\"markdownIt-Anchor\" href=\"#worker-环境\"></a> worker 环境</h3>\n<p>worker 作用域：在worker脚本文件内，this 和 self 都是全局作用域。上面的<code>console.log(this)</code>的输出是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DedicatedWorkerGlobalScope。</span><br></pre></td></tr></table></figure>\n<p>worker 线程中并不能完成使用主线程的功能，只能使用部分JS功能：</p>\n<ul>\n<li>navigator 对象；</li>\n<li>location 对象；</li>\n<li>XMLHttpRequest 对象；</li>\n<li>定时器；</li>\n<li>应用缓存；</li>\n<li>importScripts();</li>\n<li>生成其他 worker。</li>\n</ul>\n<p>worker 中无法使用：</p>\n<ul>\n<li>DOM(非线程安全)；</li>\n<li>window 对象；</li>\n<li>document 对象；</li>\n<li>parent 对象。</li>\n</ul>\n<p>我们在 worker.js 发发送一个http 请求，拿到返回值后传递给主线程：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers\" target=\"_blank\" rel=\"noopener\">更多详细情况</a></p>\n<h3 id=\"加载外-worker-脚本\"><a class=\"markdownIt-Anchor\" href=\"#加载外-worker-脚本\"></a> 加载外 worker 脚本</h3>\n<p>可使用<code>importScripts</code> 函数加载外部的脚本进入 worker 脚本执行。</p>\n<p>在 worker.js 记载一个脚本：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importScripts(<span class=\"string\">'./importTest.js'</span>);<span class=\"comment\">// 可传递多个路径，路径是相对于 worker.js 的</span></span><br></pre></td></tr></table></figure>\n<p>importTest.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">  setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'你好'</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span> * time);</span><br></pre></td></tr></table></figure>\n<p>worker 线程停止后，加载的外部脚本也停止执行。</p>\n<h3 id=\"错误处理\"><a class=\"markdownIt-Anchor\" href=\"#错误处理\"></a> 错误处理</h3>\n<p>可在主线程中处理 worker 线程的错误，在主线程中监听 worker 的 错误事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.addEventListener(<span class=\"string\">'error'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.colno);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.filename);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.message);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>输出该错误事件，可看到事件的一些属性：<br>\n不冒泡、可取消等，具有普通事件的一些属性。</p>\n<p>worker 生成一个错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">'stop'</span> === event.data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">this</span>.close();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'worker stop '</span>, result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  self.postMessage(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'worker.js'</span>, <span class=\"attr\">data</span>: <span class=\"string\">'hello,main.js!'</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.postMessage(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'制造一个错误！'</span>));</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"内嵌-worker\"><a class=\"markdownIt-Anchor\" href=\"#内嵌-worker\"></a> 内嵌 worker</h3>\n<p>上面的例子，将 worker 代码放在单独的文件里，这样便于管理代码，也方便修改，因为有语法高亮，可以将 worker 代码放在和主线程相关的html文件里:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"worker\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"javascript/worker\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">if</span> (<span class=\"string\">'stop'</span> === event.data) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.close();</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(event.data);</span></span><br><span class=\"line\"><span class=\"actionscript\">      self.postMessage(&#123; name: <span class=\"string\">'worker.js'</span>, data: <span class=\"string\">'hello,main.js!'</span> &#125;);</span></span><br><span class=\"line\"><span class=\"actionscript\">    &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> workerContent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'worker'</span>).textContent;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> blob = <span class=\"keyword\">new</span> Blob([workerContent], &#123; <span class=\"attr\">type</span>: <span class=\"string\">'text/javacript'</span> &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> url = URL.createObjectURL(blob);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(url);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(url);</span></span><br><span class=\"line\"><span class=\"actionscript\">    worker.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(event.data);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> workerButton = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#workerButton'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">    workerButton.addEventListener(<span class=\"string\">'click'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      worker.postMessage(&#123; name: <span class=\"string\">\"主线程\"</span> &#125;);</span></span><br><span class=\"line\"><span class=\"actionscript\">    &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>将 worker 的代码在 script 标签中，声明类型为<code>javascript/worker</code>,就不会被浏览器解析成JS代码，而是当成普通的 html 标签，可通过DOM api 获取标签内的文本，创建 worker。<br>\n使用 Blob 生成一个blob 对象，再使用 URL.createObjectURL成连接，再生成 worker。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> blob = <span class=\"keyword\">new</span> Blob([workerContent], &#123; <span class=\"attr\">type</span>: <span class=\"string\">'text/javacript'</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> url = URL.createObjectURL(blob);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(url);</span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(url);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.javascripture.com/Blob\" target=\"_blank\" rel=\"noopener\">关于Blob</a><br>\n<a href=\"https://javascript.info/blob\" target=\"_blank\" rel=\"noopener\">关于Blob和URL</a></p>\n<h3 id=\"worker-的使用场景\"><a class=\"markdownIt-Anchor\" href=\"#worker-的使用场景\"></a> worker 的使用场景</h3>\n<p>常用的场景：</p>\n<ul>\n<li>预先抓取和/或缓存数据以便稍后使用；</li>\n<li>突出显示代码语法或其他实时文本格式；</li>\n<li>拼写检查程序；</li>\n<li>分析视频或音频数据；</li>\n<li>背景 I/O 或网络服务轮询；</li>\n<li>处理较大数组或超大 JSON 响应；</li>\n<li>&lt;canvas&gt; 中的图片过滤；</li>\n<li>更新本地网络数据库中的多行内容。</li>\n</ul>\n<h2 id=\"更多参考\"><a class=\"markdownIt-Anchor\" href=\"#更多参考\"></a> 更多参考</h2>\n<p><a href=\"https://www.html5rocks.com/zh/tutorials/workers/basics/\" target=\"_blank\" rel=\"noopener\">Web Workers 的基本信息</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\" target=\"_blank\" rel=\"noopener\">使用 Web Workers</a></p>\n<p><a href=\"https://www.html5rocks.com/en/tutorials/file/filesystem-sync/\" target=\"_blank\" rel=\"noopener\">worker读取文件</a></p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>JS 天然属于单线程环境，也就是说不能同时运行多个脚本。为何这样？因为JS的设计目标是实现网页和用户交互，试想当用户点击页面，操作 DOM 时，有两个线程同时操作了DOM，那么以谁的结果为准呢？最坏的情况一个线程需要给一个元素添加内容，另一个线程却把元素删除了，这将导致用户无法和页面交互。这就是JS只能单线程的原因，所有任务都在一个线程上执行，不必考虑多线程的问题。JS 需要同时执行两个任务的地方，可通过定时器、事件处理器等<strong>异步技术</strong>实现<em>并行</em>（其实依然单线程）。HTML5 引入 web worker 实现真正的多线程。通过 Web Worker 在<strong>后台执行</strong>一些操作，例如触发长时间运行的脚本以处理计算密集型任务，同时却不会阻碍 UI 或其他脚本处理用户互动。<br>\nWorker 利用类似线程的消息传递实现并行。这非常适合您确保对 UI 的刷新、性能以及对用户的响应。</p>","more":"<h2 id=\"web-worker-的类型\"><a class=\"markdownIt-Anchor\" href=\"#web-worker-的类型\"></a> web worker 的类型</h2>\n<p>两种类型：</p>\n<ul>\n<li>专用 worker（Dedicated workers）：只能在创建它的脚本中使用；</li>\n<li>共享 worker（Shared workers）：可在多个脚本中使用。</li>\n</ul>\n<p>worker 和主线程之间通信通过消息机制进行–使用<code>postMessage</code> 函数向对方传递数据，对方通过监听<code>message</code>事件获取并处理数据。数据不是共享，而是<strong>复制</strong>。所以传递对象时，可以操作该对象，而不会影响另一个线程中的对象。</p>\n<p>worker 和主线程的脚本<strong>必须同源</strong>，简单理解成同一个网站加载到浏览中。</p>\n<h2 id=\"专用-worker\"><a class=\"markdownIt-Anchor\" href=\"#专用-worker\"></a> 专用 worker</h2>\n<h3 id=\"worker-特性检测\"><a class=\"markdownIt-Anchor\" href=\"#worker-特性检测\"></a> worker 特性检测</h3>\n<p>在主线程检测浏览器是否支持 worker,在决定是否创建 worker。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.worker)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目前主要浏览器都支持。<a href=\"https://caniuse.com/#feat=webworkers\" target=\"_blank\" rel=\"noopener\">更多详情</a></p>\n<h3 id=\"使用入门\"><a class=\"markdownIt-Anchor\" href=\"#使用入门\"></a> 使用入门</h3>\n<p>web worker 在独立线程中运行，可将其代码保存在一个单独的JS文件中，然后在创建 worker 时引入该脚本。很多浏览器还不支持本地文件运行worker，我们需要结合服务器时间。可使用 express 创建一个服务器。</p>\n<p>在 <strong>public/javascripts</strong> 文件夹在创建 worker.js：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.data)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.origin)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.ports)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.source)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.lastEventId)</span><br><span class=\"line\">  self.postMessage(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'worker.js'</span>, <span class=\"attr\">data</span>: <span class=\"string\">'hello,main.js!'</span> &#125;)</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>这就是 worker 线程的代码。</p>\n<p>在页面的 JS 代码中创建 worker，为了简单起见，在script 标签中写脚本：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'/javascripts/worker.js'</span>);<span class=\"comment\">//创建一个 worker</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> workerButton = <span class=\"built_in\">document</span>.getElementByI(<span class=\"string\">'workerButton'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">  workerButton.addEventListener(<span class=\"string\">'click'</span>, (event)=&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(event)</span></span><br><span class=\"line\"><span class=\"actionscript\">    worker.postMessage(&#123; name: <span class=\"string\">'main.js'</span>, data:<span class=\"string\">'hello,worker.js!'</span> &#125;);<span class=\"comment\">//向 worker 线程发送消息</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  &#125;, <span class=\"literal\">false</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 监听 worker 线程发送过来的消息</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  worker.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(event.data);</span></span><br><span class=\"line\"><span class=\"actionscript\"> &#125;, <span class=\"literal\">false</span>)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>创建 worker 时指定的脚本是异步加载的，如果加载成功，会生成一个 worker 线程。完全加载和执行之前，系统不好生成 worker。如果脚本不存在，返回404，创建 worker失败。</p>\n<p>postMessage 用来启动 worker，也用来发送消息。</p>\n<h3 id=\"停止-worker\"><a class=\"markdownIt-Anchor\" href=\"#停止-worker\"></a> 停止 worker</h3>\n<p>在主线程中，通过<code>worker.terminate()</code> 停止 worker;在worker 线程中，使用<code>close()</code>来停止worker。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stopWorker = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'stopWorker'</span>);</span><br><span class=\"line\">stopWorker.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = worker.terminate();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>worker 自己停止：</p>\n<p>在主线程中通知worker停止：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stopWorker = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'stopWorker'</span>);</span><br><span class=\"line\">stopWorker.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = worker.postMessage(<span class=\"string\">'stop'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);<span class=\"comment\">//undefined</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>worker.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.data)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.origin)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'cache'</span>,<span class=\"keyword\">this</span>.cache)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.source)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.lastEventId)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">'stop'</span> === event.data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">this</span>.close();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'worker stop '</span>,result);<span class=\"comment\">//undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  self.postMessage(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'worker.js'</span>, <span class=\"attr\">data</span>: <span class=\"string\">'hello,main.js!'</span> &#125;)</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"worker-环境\"><a class=\"markdownIt-Anchor\" href=\"#worker-环境\"></a> worker 环境</h3>\n<p>worker 作用域：在worker脚本文件内，this 和 self 都是全局作用域。上面的<code>console.log(this)</code>的输出是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DedicatedWorkerGlobalScope。</span><br></pre></td></tr></table></figure>\n<p>worker 线程中并不能完成使用主线程的功能，只能使用部分JS功能：</p>\n<ul>\n<li>navigator 对象；</li>\n<li>location 对象；</li>\n<li>XMLHttpRequest 对象；</li>\n<li>定时器；</li>\n<li>应用缓存；</li>\n<li>importScripts();</li>\n<li>生成其他 worker。</li>\n</ul>\n<p>worker 中无法使用：</p>\n<ul>\n<li>DOM(非线程安全)；</li>\n<li>window 对象；</li>\n<li>document 对象；</li>\n<li>parent 对象。</li>\n</ul>\n<p>我们在 worker.js 发发送一个http 请求，拿到返回值后传递给主线程：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers\" target=\"_blank\" rel=\"noopener\">更多详细情况</a></p>\n<h3 id=\"加载外-worker-脚本\"><a class=\"markdownIt-Anchor\" href=\"#加载外-worker-脚本\"></a> 加载外 worker 脚本</h3>\n<p>可使用<code>importScripts</code> 函数加载外部的脚本进入 worker 脚本执行。</p>\n<p>在 worker.js 记载一个脚本：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importScripts(<span class=\"string\">'./importTest.js'</span>);<span class=\"comment\">// 可传递多个路径，路径是相对于 worker.js 的</span></span><br></pre></td></tr></table></figure>\n<p>importTest.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">  setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'你好'</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span> * time);</span><br></pre></td></tr></table></figure>\n<p>worker 线程停止后，加载的外部脚本也停止执行。</p>\n<h3 id=\"错误处理\"><a class=\"markdownIt-Anchor\" href=\"#错误处理\"></a> 错误处理</h3>\n<p>可在主线程中处理 worker 线程的错误，在主线程中监听 worker 的 错误事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.addEventListener(<span class=\"string\">'error'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.colno);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.filename);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.message);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>输出该错误事件，可看到事件的一些属性：<br>\n不冒泡、可取消等，具有普通事件的一些属性。</p>\n<p>worker 生成一个错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">'stop'</span> === event.data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">this</span>.close();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'worker stop '</span>, result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  self.postMessage(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'worker.js'</span>, <span class=\"attr\">data</span>: <span class=\"string\">'hello,main.js!'</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.postMessage(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'制造一个错误！'</span>));</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"内嵌-worker\"><a class=\"markdownIt-Anchor\" href=\"#内嵌-worker\"></a> 内嵌 worker</h3>\n<p>上面的例子，将 worker 代码放在单独的文件里，这样便于管理代码，也方便修改，因为有语法高亮，可以将 worker 代码放在和主线程相关的html文件里:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"worker\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"javascript/worker\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">if</span> (<span class=\"string\">'stop'</span> === event.data) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.close();</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(event.data);</span></span><br><span class=\"line\"><span class=\"actionscript\">      self.postMessage(&#123; name: <span class=\"string\">'worker.js'</span>, data: <span class=\"string\">'hello,main.js!'</span> &#125;);</span></span><br><span class=\"line\"><span class=\"actionscript\">    &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> workerContent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'worker'</span>).textContent;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> blob = <span class=\"keyword\">new</span> Blob([workerContent], &#123; <span class=\"attr\">type</span>: <span class=\"string\">'text/javacript'</span> &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> url = URL.createObjectURL(blob);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(url);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(url);</span></span><br><span class=\"line\"><span class=\"actionscript\">    worker.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(event.data);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> workerButton = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#workerButton'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">    workerButton.addEventListener(<span class=\"string\">'click'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      worker.postMessage(&#123; name: <span class=\"string\">\"主线程\"</span> &#125;);</span></span><br><span class=\"line\"><span class=\"actionscript\">    &#125;, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>将 worker 的代码在 script 标签中，声明类型为<code>javascript/worker</code>,就不会被浏览器解析成JS代码，而是当成普通的 html 标签，可通过DOM api 获取标签内的文本，创建 worker。<br>\n使用 Blob 生成一个blob 对象，再使用 URL.createObjectURL成连接，再生成 worker。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> blob = <span class=\"keyword\">new</span> Blob([workerContent], &#123; <span class=\"attr\">type</span>: <span class=\"string\">'text/javacript'</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> url = URL.createObjectURL(blob);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(url);</span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(url);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.javascripture.com/Blob\" target=\"_blank\" rel=\"noopener\">关于Blob</a><br>\n<a href=\"https://javascript.info/blob\" target=\"_blank\" rel=\"noopener\">关于Blob和URL</a></p>\n<h3 id=\"worker-的使用场景\"><a class=\"markdownIt-Anchor\" href=\"#worker-的使用场景\"></a> worker 的使用场景</h3>\n<p>常用的场景：</p>\n<ul>\n<li>预先抓取和/或缓存数据以便稍后使用；</li>\n<li>突出显示代码语法或其他实时文本格式；</li>\n<li>拼写检查程序；</li>\n<li>分析视频或音频数据；</li>\n<li>背景 I/O 或网络服务轮询；</li>\n<li>处理较大数组或超大 JSON 响应；</li>\n<li>&lt;canvas&gt; 中的图片过滤；</li>\n<li>更新本地网络数据库中的多行内容。</li>\n</ul>\n<h2 id=\"更多参考\"><a class=\"markdownIt-Anchor\" href=\"#更多参考\"></a> 更多参考</h2>\n<p><a href=\"https://www.html5rocks.com/zh/tutorials/workers/basics/\" target=\"_blank\" rel=\"noopener\">Web Workers 的基本信息</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\" target=\"_blank\" rel=\"noopener\">使用 Web Workers</a></p>\n<p><a href=\"https://www.html5rocks.com/en/tutorials/file/filesystem-sync/\" target=\"_blank\" rel=\"noopener\">worker读取文件</a></p>"},{"title":"yarn 常见命令","date":"2019-06-16T13:31:01.000Z","_content":"\n记录一下yarn常见命令，不至于在看到人家博客了使用，不知道什么意思，至于开发使用，npm 足够了。\n\n<!--more-->\n\n## 常用命令：\n\n```bash\nyarn init #初始化package.json\n\nyarn add packge 添加依赖 默认开发依赖\nyarn add package@version\nyarn add package@tag\nyarn # 安装项目全部依赖\n\nyarn add package --dev 安装开发依赖\nyarn add package --peer\nyarn add package --optional\n\nyarn upgrade packge\n\nyarn remove package\n```","source":"_posts/yarn-常见命令.md","raw":"---\ntitle: yarn 常见命令\ndate: 2019-06-16 21:31:01\ntags:\n- yarn\ncategories:\n- [node]\n---\n\n记录一下yarn常见命令，不至于在看到人家博客了使用，不知道什么意思，至于开发使用，npm 足够了。\n\n<!--more-->\n\n## 常用命令：\n\n```bash\nyarn init #初始化package.json\n\nyarn add packge 添加依赖 默认开发依赖\nyarn add package@version\nyarn add package@tag\nyarn # 安装项目全部依赖\n\nyarn add package --dev 安装开发依赖\nyarn add package --peer\nyarn add package --optional\n\nyarn upgrade packge\n\nyarn remove package\n```","slug":"yarn-常见命令","published":1,"updated":"2019-06-16T13:33:24.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccfy001ujwrnm4u42wod","content":"<p>记录一下yarn常见命令，不至于在看到人家博客了使用，不知道什么意思，至于开发使用，npm 足够了。</p>\n<a id=\"more\"></a>\n<h2 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\"></a> 常用命令：</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn init <span class=\"comment\">#初始化package.json</span></span><br><span class=\"line\"></span><br><span class=\"line\">yarn add packge 添加依赖 默认开发依赖</span><br><span class=\"line\">yarn add package@version</span><br><span class=\"line\">yarn add package@tag</span><br><span class=\"line\">yarn <span class=\"comment\"># 安装项目全部依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">yarn add package --dev 安装开发依赖</span><br><span class=\"line\">yarn add package --peer</span><br><span class=\"line\">yarn add package --optional</span><br><span class=\"line\"></span><br><span class=\"line\">yarn upgrade packge</span><br><span class=\"line\"></span><br><span class=\"line\">yarn remove package</span><br></pre></td></tr></table></figure>","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>记录一下yarn常见命令，不至于在看到人家博客了使用，不知道什么意思，至于开发使用，npm 足够了。</p>","more":"<h2 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\"></a> 常用命令：</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn init <span class=\"comment\">#初始化package.json</span></span><br><span class=\"line\"></span><br><span class=\"line\">yarn add packge 添加依赖 默认开发依赖</span><br><span class=\"line\">yarn add package@version</span><br><span class=\"line\">yarn add package@tag</span><br><span class=\"line\">yarn <span class=\"comment\"># 安装项目全部依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">yarn add package --dev 安装开发依赖</span><br><span class=\"line\">yarn add package --peer</span><br><span class=\"line\">yarn add package --optional</span><br><span class=\"line\"></span><br><span class=\"line\">yarn upgrade packge</span><br><span class=\"line\"></span><br><span class=\"line\">yarn remove package</span><br></pre></td></tr></table></figure>"},{"title":"xhr 全面总结","date":"2019-06-16T09:30:54.000Z","_content":"AJAX(Asynchronous JavaScript Xml)，异步的JS xml，以前客户端和服务器 通信，一般传递 xml，但是现在传递 `JSON`为主，ajax 能实现页面部分更新，使得页面性能高和体验良好。AJAX 是一种向服务器发送 HTTP 请求，实现与服务器交互的技术，已经是HTTP请的代名词，但是不只支持 http 协议，还支持 `ftp`、`file`协议。\n\n<!-- more -->\n\n## 一级xhr 二级 xhr\n\n一级xhr或者老版本的xhr，有一些缺点：\n- 只支持文本数据传输\n- 无法读取和上传二进制文件\n- 只用成功、失败、完成等状态，没进度信息\n- 不能跨域\n\n二级xhr，改进了这些问题：\n- 可设置超时\n- formData 对象管理表单数据\n- 文件上传\n- 可跨域\n- 可获取二进制文件\n- 可获取传输进度\n\n\n##  XMLHttpRequest 对象\n\najax 技术的核心是 XMLHttpRequest 对象，简称XHR，现在较为先进的浏览器都支持（低版本的IE可滚粗了）创建 xhr 对象，`new` 一个即可。\n```js \nvar xhr = new XMLHttpRequest();\n```\n### xhr 的用法\n\n\n**通常步骤：**\n第一步：`var xhr = new XMLHttpRequest()`---创建 xhr;\n第二步：`xhr.open(METHOD,URL,isAsync)`---启动xhr;\n第三步：`xhr.responseType = reposnseType`---设置返回值类型，默认 `''`,必须在返回值达到客户端前设置;\n第四步：`xhr.onreadystatechange=handleFun`---监听请求状态变化；\n第五步：`xhr.setRequestHeader('Content-Type','application/json;charset=utf-8')`---设置请求头，不需要设置，可省略，`必须在请求开启和发送之间设置`;\n第六步：`xhr.send(data)`---发送请求。\n\n完整的例子：\n```js\nvar http = new XMLHttpRequest();\nhttp.open('GET','/endpoint',true);\nhttp.responseType = 'json';\nhttp.onreaydstatechange = function(){\n\tif(http.readyState === 4){\n\t\tif(http.status === 200){\n\t\t\t console.log(http.response);\n\t\t}else{\n\t\t\tconsole.error(http.response);\n\t\t}\n\t}\n};\nhttp.onerror = function(){\n\t console.error(http.statusText);\n}\nhttp.send(null);\n```\n### 实例属性\n\n#### readyState\n\n只读属性，是一个`数字`，表示此时的 HTTP 请求状态。\n|值|状态|其他|\n|:---:|:----|:----:|\n|0|xhr创建，`open`方法还未调用|\n|1|`open`已调用，`send`未调用，此时可设置请求头|\n|2|`send`已调用，且服务器返回的`头信息`和`状态码`已经收到|\n|3|正在接收响应`body`，收到部分信息。|\n|4|已收到服务返回即请求`完成`，可能失败，可能成功|\n\n>0   UNSENT  open() has not been called yet.\n1   OPENED  send() has been called.\n2   HEADERS_RECEIVED    send() has been called, and headers and status are available.\n3   LOADING Downloading; responseText holds partial data.\n4   DONE    The operation is complete.\n>\n\n每当 `xhr`的状态发生变化，`readyState`属性就发生变化，就会触发`readyStateChange`事件，所以可在 readyStateChange 事件的监听函数里处理返回的请求信息。\n\n#### onreadystatechange\n\n事件，指向一个函数。执行`abort`方法，也会改变 readyState。\n\n#### response\n\n服务器返回的数据，只读，类型由 `responseType`决定。请求不成功或者数据不完整，值为\t`null`。\n\n#### responeType\n\n可写属性，指定响应格式，在 `open`之后`send`之前，设置返回的数据类型。\n|值|说明|\n|:----|:----|\n|''(空字符串)|默认值，等同于`text`,适用大多数情况。只是设置该值时，才可获取`responseText`|\n|json|浏览器会自动调用`JSON.parse`解析JSON字符串，此时`response`是一个对象，**不是字符串**|\n|blob|`Blob`对象，二进制对象，请求图片，下载文件等|\n|document|`Document` 对象，文档对象，HTML/XML文档对象等，收到返回值后不用解析HTML字符串，直接进行DOM操作|\n|arraybuffer|`ArrayBuffer`对象,二进制数组|\n\n#### responseText\n\n返回值类型是`String`，可用这个属性获取。也就是说 `responseType`设置`text`或者`''`，`response`和`responseText`是相同的。\n\n#### responseXML\n\n返回值时 HMTL 或者 XML 对象，可用该属性获取，只读。该属性生效的前提是，响应头信息 `Content-Type`为 `text/xml`或者`application/xml`,这要求，发送请求前，将`responseType`设置为`document`。如果响应头信息\t`Content-Type`不为 `text/xml`或者`application/xml`，就需要手动调用`overrideMimeType('text/xml')`，强制进行XML解析。\n```js\nvar http = new XMLHttpRequest();\nhttp.open('GET','/',true);\nhttp.responseType = 'document';\nhttp.onload = function(){\n\tif(http.reaydState === 4 && http.status  === 200){\n\t\tconsole.log(http.responseXML);\n\t}\n}\nhttp.send(null);\n```\n\n#### responseURL\n\n只读，返回数据的服务器的url。和 open 里的 url 不一定相同，不含锚点。\n\n#### status statusText\n\n`status`一个整数，表示 HTTP 的状态码，只读，发出请求前，为\t0。\n`statusText`是状态信息，只读，无返回状态信息，默认 `OK`。\n|status|statusText|状态|\n|:----:|:----:|:-----:|\n|200|OK|成功返回|\n|301|Moved Permanently|永久移动|\n|302|Moved Temporarily|暂时移动|\n|304|Not Modified|未修改|\n|307|Temporary Redirect|暂时重定向|\n|400|Bad request|无效请求|\n|401|Unauthorized|未授权|\n|403|Forbindden|禁止访问|\n|404|Not Found|未找到|\n|405|Method not allowed|方法不被允许|\n|500|Internal server error|服务器内部出错|\n|503|Service unavailable|服务不可用|\n\n基本上 2xx和 304，返回正常。\n```js\nif(http.readyState ===4 ){\n  if((http.status >= 200 && http.status < 300)||(http.status === 304)){\n\t\t//处理返回数据\n\t}else{\n\t\t//返回出错\n\t}\n}\n```\n\n#### timeout  ontimeout\n\n`timeout`属性是一个整数，表示多少`毫秒`后，如果请求还未返回，就会自动终止。触发`timeout`事件， 为 0 ，表示无时间限制，不是整数，会先转换，成数字，转换失败，则不生效。\n`ontimeout`指向一个函数，`timeout`触发，就执行该函数。\n\n```js\nvar http = new XMLHttpRequest();\nhttp.ontimeout = function(){\n\tconsole.log('请求超时');\n}\nhttp.onload =  function(){\n\tif(http.readyState === 4 && http.status === 200){\n\t\t//正常返回\n\t}else{\n\t\tconsole.log(http.statusText);\n\t}\n}\nhttp.open('GET','/users/12132',true);\nhttp.timeout = 1000*10;// 10 秒超时\nhttp.send(null);\n```\n#### withCredentials \n\n一个布尔值，表示跨域请求时，用户信息（Cookie、认证的 http 头信息）是否会包含在请求中，默认`false`。同源请求不需要设置。为了使得该属性生效，必须返回头信息 `Access-Control-Allow-Credentials`且值为\t`true`。\n打开了，跨域会发送 cookie，还会设置Cookie。\n\n#### upload 用 AJAX 发送文件\n\nxhr 不仅可以发送请求，还可发送送文件。发送文件后，`upload`属性可得到一个对象，通过该对象，可监听该对象的各个事件得到上传状态。\n显示上传进度：\n```html\n<progress min=\"0\" max=\"100\" value=\"0\">0% complete</progress>\n```\n监听`upload`对象的`progress`事件，可得到上传进度：\n```js\nfunction uploadFile({blodOrFile=null,type='json'}){\n\tvar http = new XMLHttpRequest();\n\thttp.open('POST','/srever',true);\n\thttp.onload = function(){};\n\tvar progressBar = document.querySelector('progress');\n\thttp.upload.onprogress = function(event){\n\t\tif(event.lengthComputable){\n\t\t\tprogressBar.value = (event.load / event.total)*100;\n\t\t\t// 兼容老式浏览器\n\t\t\tprogressBar.textContent = progressBar.value;\n\t\t}\n\t}\n\thttp.send(blodOrFile);\n}\nuploadFile({blodOrFile:new Blod(['hello ajax'])})\n```\n### 事件属性\n\n可监听 xhr 的以下事件：**书写顺序为触发顺序，监听这些事件，必须在send之前进行**\n|属性|事件|何时触发|\n|:-----:|:-----:|:-----|:-----:|\n|onloadstart|loadstart|请求发出,在 `readyState == 1` 和 `readyState == 2`之间,onloadstart 默认传入 progressEvent 对象 |\n|onprogress|progress|正在发送或者加载返回的数据,onprogress 默认传入progressEvent对象|\n|onabort|abort|终止请求，比如调用`abort`，调用该方法，readyState 被设置为 0|\n|onerror|error|请求`失败`|\n|ontimeout|timeout|请求`超时`|\n|onload|load|请求`成功`，以上四个事件互斥，触发0次或者1次|\n|onloadend|loadend|请求`完成`,可能成功，可能失败。**abort**、**load**、**timeout**、**readtState=4**都会伴随着**loadend**,onloadend 默认传入 progressEvent 对象|\n|onreadystatechange|readystatechange|xhr状态，监听该事件，可得知请求是否`完成`，这个属性时`xhr`特有的，其他属性时`xhr.upload`和`xhr`共有的|\n\n```js\nhttp.onload = function() {\n var responseText = xhr.responseText;\n console.log(responseText);\n // process the response.\n};\n\nhttp.onabort = function () {\n  console.log('The request was aborted');\n};\n// `只有 onprogress 有一个事件参数`\nhttp.onprogress = function (event) {\n  console.log(event.loaded);//已返回的数据量\n  console.log(event.total);//返回的总数据量\n  console.log(event.lengthComputable);//加载进度是否可计算\n};\n\nfunction handleError() {\n  console.log('There was an error!');\n};\n\nhttp.addEventListener('error', handleError);\n```\n### onload vs onreadyStateChange\n\n处理返回值，是在 **onload**还是在**onreadyStateChange**?\n\nonload 等于 `readyState==4 && xhr.status===200`\n\nloadend 事件的触发：\n```js\nonreadystatechange\n    readyState === 4\n             ⇓\nonload / onerror / onabort\n             ⇓\n        onloadend\n```\n\n使用 `onerror`并且不考虑老式浏览器，`推荐`用 `onload`而不用`onreadySateChange`。\n\n\n### 实例方法\n\n#### open\n\n在`open`方法中指定请求参数，返回值为`undefined`。\n`opend(METHOD,URL,isAsync,user,password)`,user 和 password 可选，统一请求，再次用`open`，就等同于调用`abort`。一般 URL 需要用 `encodeURI`或`encodeURICompent`编码。\n\n#### GET 请求绕过缓存\n\nGET 请求会缓存，在 url 后面加时间戳可绕过缓存。\n```js\nhttp://foo.com/bar.html -> http://foo.com/bar.html?12345\nhttp://foo.com/bar.html?foobar=baz -> http://foo.com/bar.html?foobar=baz&12345\nvar oReq = new XMLHttpRequest();\n\noReq.open(\"GET\", url + ((/\\?/).test(url) ? \"&\" : \"?\") + (new Date()).getTime());\noReq.send(null);\n```\n\n#### send \n\nsend 用于发送数据，可发发送多种类型的数据。\n`String`、`Bold`、`Document`、`Formdata`、`ArrayBuffer`、`null`。\n\n发送表单数据：\n```html\n<form id='registration' name='registration' action='/register'>\n  <input type='text' name='username' value='张三'>\n  <input type='email' name='email' value='zhangsan@example.com'>\n  <input type='number' name='birthDate' value='1940'>\n  <input type='submit' onclick='return sendForm(this.form);'>\n</form>\n```\n\n```js\nfunction sendForm(form) {\n  var formData = new FormData(form);//对表单进行加工\n  formData.append('csrf', 'e69a18d7db1286040586e6da1950128c');\n\n  var xhr = new XMLHttpRequest();\n  xhr.open('POST', form.action, true);\n  xhr.onload = function() {\n    // ...\n  };\n  xhr.send(formData);//发送\n\n  return false;\n}\n\nvar form = document.querySelector('#registration');\nsendForm(form);\n```\n\n#### setRequestHeader(filed,value)\n\n设置请求头信息，open 之后，send 之前调用。\n\n#### overrideMimeType()\n\n重新设置服务器返回的数据类型，必须在 send 之前调用。\n\n#### getResponseHeader(filed):String\n\n获取某个响应头信息，参数不区分大小写。\n\n#### getResponseHeaders():String\n\n获取所有响应头信息，每个头信息之间用 `\\r\\n`(换行)分割。\n```js\ndate: Fri, 08 Dec 2017 21:04:30 GMT\\r\\n\ncontent-encoding: gzip\\r\\n\nx-content-type-options: nosniff\\r\\n\nserver: meinheld/0.6.1\\r\\n\nx-frame-options: DENY\\r\\n\ncontent-type: text/html; charset=utf-8\\r\\n\nconnection: keep-alive\\r\\n\nstrict-transport-security: max-age=63072000\\r\\n\nvary: Cookie, Accept-Encoding\\r\\n\ncontent-length: 6502\\r\\n\nx-xss-protection: 1; mode=block\\r\\n\n```\n处理头信息：\n\n```js\nvar arr = headers.trim().split(/[\\r\\n]+/);\nvar headerMap = {};\n\narr.forEach(function (line) {\n  var parts = line.split(': ');//注意 '' \n  var header = parts.shift();//删除第一个元素，原数组改变，随便获取到 头字段。一举两得，妙\n  var value = parts.join(': ');//\\r\\n 去哪儿了\n  headerMap[header] = value;\n});\n\nheaderMap['content-length'] // \"6502\"\n```\n\n#### abort\n\n终止请求，使得 `readyState`为 4，`status`为 0。\n\n## 页面卸载时发送数据\n\n在页面卸载时发送数据，即在`unload`或者`beforeunload`的监听函数里，发送AJAX，但是不可靠。xhr 是异步的，可能在发送数据时，页面就卸载了，可打发送失败，那么用同步发送，但是同步发送数据，很多浏览器不支持，同步发送，用户体验不好。\n\n用 `Navigator.sendBeacon(url,data)`，该方法与当前页面脱钩，作为浏览器任务，能保证把数据发出去。data 可以是字符串、表单对象、二进制对象等，返回 布尔值，true 说明发送成功，`可跨域`，`POST`，比较多的先进浏览器支持。\n请求头信息 `Content-Type`根据发送的 data 类型设置，且不能设置其他头字段。\n|data|Content-Type|\n|:--:|:--:|\n|Blod|Blod|\n|formData|multipart/form-data|\n|String|text/plain|\n```html\n// HTML 代码如下\n<body onload=\"analytics('start')\" onunload=\"analytics('end')\">\n```\nJS:\n```js\nfunction analytics(state) {\n  if (!navigator.sendBeacon) return;\n  var URL = 'http://example.com/analytics';\n  var data = 'state=' + state + '&location=' + window.location;\n  navigator.sendBeacon(URL, data);\n}\n```\n```js\nvar headers = {type: 'application/json'};\nvar blob = new Blob(request, headers);\nnavigator.sendBeacon('url/to/send', blob);\n```\n\n## 关于 formData 对象\n\nxhr2 提供了 FormData 对象，为表单序列化和创建与表单相同的数据提供了便利。\n其主要用于发送表单数据，也可构造与表单相同的数据，还可以发送文件。\n- **formdata 发送表单**\n```js\nvar formData = new FormData();//创建 formData 对象\nformData.append('name','jack');//添加表单项\nxhr.send(formData);\n```\n```HTML\n\t<form id=\"user-info\">\n\t    <label for=\"user-name\">姓名:</label>\n        <input type=\"text\" id=\"user-name\" name=\"user-name\" /><br>\n        <label for=\"user-email\">Email:</label>\n        <input type=\"text\" id=\"user-email\" name=\"user-email\" /><br>\n        <input type=\"button\" value=\"Submit\" onclick=\"submitData()\" />\n    </form>\n    <script type=\"text/javascript\">\n        function submitData() {\n            var http = new XMLHttpRequest();\n            http.open(\"post\", \"formdata\", true);\n            http.onreadystatechange = function (event) {\n                if (http.readyState == 4) {\n                    if (http.status == 200) {\n                        console.log(http.responseText);\n                    } else {\n                        alert(\"Request was unsuccessful: \" + http.status);\n                    }\n                }\n            };\n            var form = document.getElementById(\"user-info\");\n            var formdata = new FormData(form);//用表单初始化一个 FormData 对象\n            formdata.append('额外字段', 123);//字段值不是字符串，会转为字符串\n            http.send(formdata);\n        }\n    </script>\n```\n请求头信息：\n```js\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryoCpZL9koEpmlasTW\n```\n请求体信息：\n```js\n------WebKitFormBoundaryoCpZL9koEpmlasTW\nContent-Disposition: form-data; name=\"user-name\"\n\nafafa\n------WebKitFormBoundaryoCpZL9koEpmlasTW\nContent-Disposition: form-data; name=\"user-email\"\n\nafafa@163.com\n------WebKitFormBoundaryoCpZL9koEpmlasTW\nContent-Disposition: form-data; name=\"额外字段\"\n\n123\n------WebKitFormBoundaryoCpZL9koEpmlasTW--\n```\n和表单`enctype=\"multipart/form-data\"`提交一样的。\n用 express 处理提交，服务端：\n```js\n/**\n * formData 上传表单\n * bodyParser 不能处理 formData 数据，需要额外的中间件\n */\nlet multer = require('multer');\nlet upload = multer();\napp.post(\"/formdata\", upload.fields([]), (req, res) => {\n    console.log(req['body']);\n    res.json({ success: true });\n});\n```\n- **formdata 上传文件** TODO 如何用 express 接收呢？\n客户端：\n```html\n    <form enctype=\"multipart/form-data\" method=\"post\" name=\"fileinfo\">\n        <label>Your email address:</label>\n        <input type=\"email\" autocomplete=\"on\" autofocus name=\"userid\" placeholder=\"email\" required size=\"32\" maxlength=\"64\" /><br />\n        <label>Custom file label:</label>\n        <input type=\"text\" name=\"filelabel\" size=\"12\" maxlength=\"32\" /><br />\n        <label>File to stash:</label>\n        <input type=\"file\" name=\"file\" required />\n        <input type=\"submit\" value=\"Stash the file!\" />\n      </form>\n```\n## 待完成\n\n- formData 对象\n- 浏览器 Blod\n- arrayBuffer\n\n## xhr 封装\n\n```js\n/**\n * options = {\n\t\turl\t\t提交请求的url\n\t\tmethod\t请求的类型，默认为GET\n        data\t请求体的数据\n        cache   是否缓存数据，默认为false\n\t\tasync\t是否以异步方式进行，默认为true \n\t\tsuccess\t成功后的处理方法\n\t\terror\t失败后的处理方法\n\t}\n */\nfunction ajax(options) {\n    var options = options || {};\n    options.method = options.method.toUpperCase() || 'GET';\n    options.async = options.async || true;\n    options.cache = options.cache || true;\n    // 格式化参数的函数\n    var getParams = function (data) {\n        var arr = [];\n        for (param in data) {\n            //查询字符串中每个参数的名称和值都必须使用 encodeURIComponent()进行编码\n            arr.push(encodeURIComponent(param) + \"=\" + encodeURIComponent(data[param]));\n        }\n        // 在 url 末尾加上一个随机数，避免相同值使用 IE 缓存\n        if (options['cache']) {\n            arr.push((\"randomNum=\" + Math.random()).replace(\".\", \"\"));\n        }\n        // 返回带有 & 的查询字符串\n        return arr.join(\"&\");\n    }\n    var params = getParams(options['data']);\n    var http = new XMLHttpRequest();\n    http.onload = function () {\n        if (http.status === 200 || http.status === 304) {\n            // 成功\n            options.success && options.success(http.response);\n        } else {\n            // 失败\n            options.fail && options.fail(http.status);\n        }\n    }\n    switch (options['method']) {\n        case 'GET':\n            http.open(\"GET\", options['url'] + \"?\" + params, options['async']);\n            // 发送请求\n            http.send(null);\n            break;\n        case 'POST':\n            http.open('POST', options['url'], options['async']);\n            http.setRequestHeader('content-type', 'application/x-www-form-urlencoded');\n            http.send(params)\n            break;\n        default:\n            console.log('不支持的方法');\n            //TODO: 如何支持其他方法？\n            break;\n    }\n}\n```\npromise 版本：\n```js\nfunction http({\n  url = '',\n  method = 'get',\n  data = {},\n  dataType = 'multipart',\n  responseType = 'json',\n  headers = {},\n} = {}) {\n  let body = null;\n  method = method.toUpperCase();\n  if (!url) {\n    console.error('url是必需参数！');\n    return;\n  }\n  function xhr(resolve, reject) {\n    let http = new XMLHttpRequest();\n    http.responseType = responseType;\n    http.onload = function() {\n      if (200 == http.status || 304 === http.status) {\n        resolve(http.response);\n      } else {\n        reject(http.statusText);\n      }\n    };\n    http.onerror = function(e) {\n      reject(e);\n    };\n    switch (method.toLowerCase()) {\n      case 'get':\n        var queryString = '';\n        if (JSON.stringify(data) !== '{}') {\n          queryString = Object.keys(data)\n            .map(function(key) {\n              return encodeURIComponent(key) + '=' + encodeURIComponent(data[key]);\n            })\n            .join('&');\n        }\n        if (queryString) {\n          url += '?' + queryString;\n        }\n        http.open('GET', url, true);\n        break;\n      case 'post':\n        http.open('POST', url, true);\n        if ('json' === dataType) {\n          body = JSON.stringify(data);\n          http.setRequestHeader('content-type', 'application/json;charset=UTF-8');\n        } else if ('urlencoded' === dataType) {\n          body = Object.keys(data)\n            .map(function(key) {\n              return encodeURIComponent(key) + '=' + encodeURIComponent(data[key]);\n            })\n            .join('&');\n          http.setRequestHeader('content-type', 'application/x-www-form-urlencoded');\n        } else if ('xml' === dataType) {\n          http.setRequestHeader('content-type', 'text/xml');\n        } else {\n          body = data;\n        }\n        break;\n    }\n    for (const [key, value] of Object.entries(headers)) {\n      http.setRequestHeader(key, value);\n    }\n    http.send(body);\n  }\n  let promise = new Promise(xhr);\n  return promise;\n}\n```\n\n## 参考\n\n- [XMLHttpRequest 对象 - JavaScript 教程 - 网道][1]\n- [Navigator.sendBeacon() to pass header information][2]\n- [Is onload equal to readyState==4 in XMLHttpRequest?][3]\n- [What is meaning of xhr.readystate===4][4]\n- [Why Use onload in Cross-domain Ajax][5]\n- [XMLHttpRequest Living Standard — Last Updated 28 November 2018][6]\n\n\n[1]: https://wangdoc.com/javascript/bom/xmlhttprequest.html\n[2]: https://stackoverflow.com/questions/40523469/navigator-sendbeacon-to-pass-header-information\n[3]: https://stackoverflow.com/questions/9181090/is-onload-equal-to-readystate-4-in-xmlhttprequest\n[4]: https://stackoverflow.com/questions/30522565/what-is-meaning-of-xhr-readystate-4\n[5]: https://zqzhang.github.io/blog/2016/04/18/why-use-onload-in-cross-domain-ajax.html\n[6]: https://xhr.spec.whatwg.org/#progressevent","source":"_posts/xhr-全面总结.md","raw":"---\ntitle: xhr 全面总结\ndate: 2019-06-16 17:30:54\ntags:\n- xhr\ncategories:\n- [网络]\n---\nAJAX(Asynchronous JavaScript Xml)，异步的JS xml，以前客户端和服务器 通信，一般传递 xml，但是现在传递 `JSON`为主，ajax 能实现页面部分更新，使得页面性能高和体验良好。AJAX 是一种向服务器发送 HTTP 请求，实现与服务器交互的技术，已经是HTTP请的代名词，但是不只支持 http 协议，还支持 `ftp`、`file`协议。\n\n<!-- more -->\n\n## 一级xhr 二级 xhr\n\n一级xhr或者老版本的xhr，有一些缺点：\n- 只支持文本数据传输\n- 无法读取和上传二进制文件\n- 只用成功、失败、完成等状态，没进度信息\n- 不能跨域\n\n二级xhr，改进了这些问题：\n- 可设置超时\n- formData 对象管理表单数据\n- 文件上传\n- 可跨域\n- 可获取二进制文件\n- 可获取传输进度\n\n\n##  XMLHttpRequest 对象\n\najax 技术的核心是 XMLHttpRequest 对象，简称XHR，现在较为先进的浏览器都支持（低版本的IE可滚粗了）创建 xhr 对象，`new` 一个即可。\n```js \nvar xhr = new XMLHttpRequest();\n```\n### xhr 的用法\n\n\n**通常步骤：**\n第一步：`var xhr = new XMLHttpRequest()`---创建 xhr;\n第二步：`xhr.open(METHOD,URL,isAsync)`---启动xhr;\n第三步：`xhr.responseType = reposnseType`---设置返回值类型，默认 `''`,必须在返回值达到客户端前设置;\n第四步：`xhr.onreadystatechange=handleFun`---监听请求状态变化；\n第五步：`xhr.setRequestHeader('Content-Type','application/json;charset=utf-8')`---设置请求头，不需要设置，可省略，`必须在请求开启和发送之间设置`;\n第六步：`xhr.send(data)`---发送请求。\n\n完整的例子：\n```js\nvar http = new XMLHttpRequest();\nhttp.open('GET','/endpoint',true);\nhttp.responseType = 'json';\nhttp.onreaydstatechange = function(){\n\tif(http.readyState === 4){\n\t\tif(http.status === 200){\n\t\t\t console.log(http.response);\n\t\t}else{\n\t\t\tconsole.error(http.response);\n\t\t}\n\t}\n};\nhttp.onerror = function(){\n\t console.error(http.statusText);\n}\nhttp.send(null);\n```\n### 实例属性\n\n#### readyState\n\n只读属性，是一个`数字`，表示此时的 HTTP 请求状态。\n|值|状态|其他|\n|:---:|:----|:----:|\n|0|xhr创建，`open`方法还未调用|\n|1|`open`已调用，`send`未调用，此时可设置请求头|\n|2|`send`已调用，且服务器返回的`头信息`和`状态码`已经收到|\n|3|正在接收响应`body`，收到部分信息。|\n|4|已收到服务返回即请求`完成`，可能失败，可能成功|\n\n>0   UNSENT  open() has not been called yet.\n1   OPENED  send() has been called.\n2   HEADERS_RECEIVED    send() has been called, and headers and status are available.\n3   LOADING Downloading; responseText holds partial data.\n4   DONE    The operation is complete.\n>\n\n每当 `xhr`的状态发生变化，`readyState`属性就发生变化，就会触发`readyStateChange`事件，所以可在 readyStateChange 事件的监听函数里处理返回的请求信息。\n\n#### onreadystatechange\n\n事件，指向一个函数。执行`abort`方法，也会改变 readyState。\n\n#### response\n\n服务器返回的数据，只读，类型由 `responseType`决定。请求不成功或者数据不完整，值为\t`null`。\n\n#### responeType\n\n可写属性，指定响应格式，在 `open`之后`send`之前，设置返回的数据类型。\n|值|说明|\n|:----|:----|\n|''(空字符串)|默认值，等同于`text`,适用大多数情况。只是设置该值时，才可获取`responseText`|\n|json|浏览器会自动调用`JSON.parse`解析JSON字符串，此时`response`是一个对象，**不是字符串**|\n|blob|`Blob`对象，二进制对象，请求图片，下载文件等|\n|document|`Document` 对象，文档对象，HTML/XML文档对象等，收到返回值后不用解析HTML字符串，直接进行DOM操作|\n|arraybuffer|`ArrayBuffer`对象,二进制数组|\n\n#### responseText\n\n返回值类型是`String`，可用这个属性获取。也就是说 `responseType`设置`text`或者`''`，`response`和`responseText`是相同的。\n\n#### responseXML\n\n返回值时 HMTL 或者 XML 对象，可用该属性获取，只读。该属性生效的前提是，响应头信息 `Content-Type`为 `text/xml`或者`application/xml`,这要求，发送请求前，将`responseType`设置为`document`。如果响应头信息\t`Content-Type`不为 `text/xml`或者`application/xml`，就需要手动调用`overrideMimeType('text/xml')`，强制进行XML解析。\n```js\nvar http = new XMLHttpRequest();\nhttp.open('GET','/',true);\nhttp.responseType = 'document';\nhttp.onload = function(){\n\tif(http.reaydState === 4 && http.status  === 200){\n\t\tconsole.log(http.responseXML);\n\t}\n}\nhttp.send(null);\n```\n\n#### responseURL\n\n只读，返回数据的服务器的url。和 open 里的 url 不一定相同，不含锚点。\n\n#### status statusText\n\n`status`一个整数，表示 HTTP 的状态码，只读，发出请求前，为\t0。\n`statusText`是状态信息，只读，无返回状态信息，默认 `OK`。\n|status|statusText|状态|\n|:----:|:----:|:-----:|\n|200|OK|成功返回|\n|301|Moved Permanently|永久移动|\n|302|Moved Temporarily|暂时移动|\n|304|Not Modified|未修改|\n|307|Temporary Redirect|暂时重定向|\n|400|Bad request|无效请求|\n|401|Unauthorized|未授权|\n|403|Forbindden|禁止访问|\n|404|Not Found|未找到|\n|405|Method not allowed|方法不被允许|\n|500|Internal server error|服务器内部出错|\n|503|Service unavailable|服务不可用|\n\n基本上 2xx和 304，返回正常。\n```js\nif(http.readyState ===4 ){\n  if((http.status >= 200 && http.status < 300)||(http.status === 304)){\n\t\t//处理返回数据\n\t}else{\n\t\t//返回出错\n\t}\n}\n```\n\n#### timeout  ontimeout\n\n`timeout`属性是一个整数，表示多少`毫秒`后，如果请求还未返回，就会自动终止。触发`timeout`事件， 为 0 ，表示无时间限制，不是整数，会先转换，成数字，转换失败，则不生效。\n`ontimeout`指向一个函数，`timeout`触发，就执行该函数。\n\n```js\nvar http = new XMLHttpRequest();\nhttp.ontimeout = function(){\n\tconsole.log('请求超时');\n}\nhttp.onload =  function(){\n\tif(http.readyState === 4 && http.status === 200){\n\t\t//正常返回\n\t}else{\n\t\tconsole.log(http.statusText);\n\t}\n}\nhttp.open('GET','/users/12132',true);\nhttp.timeout = 1000*10;// 10 秒超时\nhttp.send(null);\n```\n#### withCredentials \n\n一个布尔值，表示跨域请求时，用户信息（Cookie、认证的 http 头信息）是否会包含在请求中，默认`false`。同源请求不需要设置。为了使得该属性生效，必须返回头信息 `Access-Control-Allow-Credentials`且值为\t`true`。\n打开了，跨域会发送 cookie，还会设置Cookie。\n\n#### upload 用 AJAX 发送文件\n\nxhr 不仅可以发送请求，还可发送送文件。发送文件后，`upload`属性可得到一个对象，通过该对象，可监听该对象的各个事件得到上传状态。\n显示上传进度：\n```html\n<progress min=\"0\" max=\"100\" value=\"0\">0% complete</progress>\n```\n监听`upload`对象的`progress`事件，可得到上传进度：\n```js\nfunction uploadFile({blodOrFile=null,type='json'}){\n\tvar http = new XMLHttpRequest();\n\thttp.open('POST','/srever',true);\n\thttp.onload = function(){};\n\tvar progressBar = document.querySelector('progress');\n\thttp.upload.onprogress = function(event){\n\t\tif(event.lengthComputable){\n\t\t\tprogressBar.value = (event.load / event.total)*100;\n\t\t\t// 兼容老式浏览器\n\t\t\tprogressBar.textContent = progressBar.value;\n\t\t}\n\t}\n\thttp.send(blodOrFile);\n}\nuploadFile({blodOrFile:new Blod(['hello ajax'])})\n```\n### 事件属性\n\n可监听 xhr 的以下事件：**书写顺序为触发顺序，监听这些事件，必须在send之前进行**\n|属性|事件|何时触发|\n|:-----:|:-----:|:-----|:-----:|\n|onloadstart|loadstart|请求发出,在 `readyState == 1` 和 `readyState == 2`之间,onloadstart 默认传入 progressEvent 对象 |\n|onprogress|progress|正在发送或者加载返回的数据,onprogress 默认传入progressEvent对象|\n|onabort|abort|终止请求，比如调用`abort`，调用该方法，readyState 被设置为 0|\n|onerror|error|请求`失败`|\n|ontimeout|timeout|请求`超时`|\n|onload|load|请求`成功`，以上四个事件互斥，触发0次或者1次|\n|onloadend|loadend|请求`完成`,可能成功，可能失败。**abort**、**load**、**timeout**、**readtState=4**都会伴随着**loadend**,onloadend 默认传入 progressEvent 对象|\n|onreadystatechange|readystatechange|xhr状态，监听该事件，可得知请求是否`完成`，这个属性时`xhr`特有的，其他属性时`xhr.upload`和`xhr`共有的|\n\n```js\nhttp.onload = function() {\n var responseText = xhr.responseText;\n console.log(responseText);\n // process the response.\n};\n\nhttp.onabort = function () {\n  console.log('The request was aborted');\n};\n// `只有 onprogress 有一个事件参数`\nhttp.onprogress = function (event) {\n  console.log(event.loaded);//已返回的数据量\n  console.log(event.total);//返回的总数据量\n  console.log(event.lengthComputable);//加载进度是否可计算\n};\n\nfunction handleError() {\n  console.log('There was an error!');\n};\n\nhttp.addEventListener('error', handleError);\n```\n### onload vs onreadyStateChange\n\n处理返回值，是在 **onload**还是在**onreadyStateChange**?\n\nonload 等于 `readyState==4 && xhr.status===200`\n\nloadend 事件的触发：\n```js\nonreadystatechange\n    readyState === 4\n             ⇓\nonload / onerror / onabort\n             ⇓\n        onloadend\n```\n\n使用 `onerror`并且不考虑老式浏览器，`推荐`用 `onload`而不用`onreadySateChange`。\n\n\n### 实例方法\n\n#### open\n\n在`open`方法中指定请求参数，返回值为`undefined`。\n`opend(METHOD,URL,isAsync,user,password)`,user 和 password 可选，统一请求，再次用`open`，就等同于调用`abort`。一般 URL 需要用 `encodeURI`或`encodeURICompent`编码。\n\n#### GET 请求绕过缓存\n\nGET 请求会缓存，在 url 后面加时间戳可绕过缓存。\n```js\nhttp://foo.com/bar.html -> http://foo.com/bar.html?12345\nhttp://foo.com/bar.html?foobar=baz -> http://foo.com/bar.html?foobar=baz&12345\nvar oReq = new XMLHttpRequest();\n\noReq.open(\"GET\", url + ((/\\?/).test(url) ? \"&\" : \"?\") + (new Date()).getTime());\noReq.send(null);\n```\n\n#### send \n\nsend 用于发送数据，可发发送多种类型的数据。\n`String`、`Bold`、`Document`、`Formdata`、`ArrayBuffer`、`null`。\n\n发送表单数据：\n```html\n<form id='registration' name='registration' action='/register'>\n  <input type='text' name='username' value='张三'>\n  <input type='email' name='email' value='zhangsan@example.com'>\n  <input type='number' name='birthDate' value='1940'>\n  <input type='submit' onclick='return sendForm(this.form);'>\n</form>\n```\n\n```js\nfunction sendForm(form) {\n  var formData = new FormData(form);//对表单进行加工\n  formData.append('csrf', 'e69a18d7db1286040586e6da1950128c');\n\n  var xhr = new XMLHttpRequest();\n  xhr.open('POST', form.action, true);\n  xhr.onload = function() {\n    // ...\n  };\n  xhr.send(formData);//发送\n\n  return false;\n}\n\nvar form = document.querySelector('#registration');\nsendForm(form);\n```\n\n#### setRequestHeader(filed,value)\n\n设置请求头信息，open 之后，send 之前调用。\n\n#### overrideMimeType()\n\n重新设置服务器返回的数据类型，必须在 send 之前调用。\n\n#### getResponseHeader(filed):String\n\n获取某个响应头信息，参数不区分大小写。\n\n#### getResponseHeaders():String\n\n获取所有响应头信息，每个头信息之间用 `\\r\\n`(换行)分割。\n```js\ndate: Fri, 08 Dec 2017 21:04:30 GMT\\r\\n\ncontent-encoding: gzip\\r\\n\nx-content-type-options: nosniff\\r\\n\nserver: meinheld/0.6.1\\r\\n\nx-frame-options: DENY\\r\\n\ncontent-type: text/html; charset=utf-8\\r\\n\nconnection: keep-alive\\r\\n\nstrict-transport-security: max-age=63072000\\r\\n\nvary: Cookie, Accept-Encoding\\r\\n\ncontent-length: 6502\\r\\n\nx-xss-protection: 1; mode=block\\r\\n\n```\n处理头信息：\n\n```js\nvar arr = headers.trim().split(/[\\r\\n]+/);\nvar headerMap = {};\n\narr.forEach(function (line) {\n  var parts = line.split(': ');//注意 '' \n  var header = parts.shift();//删除第一个元素，原数组改变，随便获取到 头字段。一举两得，妙\n  var value = parts.join(': ');//\\r\\n 去哪儿了\n  headerMap[header] = value;\n});\n\nheaderMap['content-length'] // \"6502\"\n```\n\n#### abort\n\n终止请求，使得 `readyState`为 4，`status`为 0。\n\n## 页面卸载时发送数据\n\n在页面卸载时发送数据，即在`unload`或者`beforeunload`的监听函数里，发送AJAX，但是不可靠。xhr 是异步的，可能在发送数据时，页面就卸载了，可打发送失败，那么用同步发送，但是同步发送数据，很多浏览器不支持，同步发送，用户体验不好。\n\n用 `Navigator.sendBeacon(url,data)`，该方法与当前页面脱钩，作为浏览器任务，能保证把数据发出去。data 可以是字符串、表单对象、二进制对象等，返回 布尔值，true 说明发送成功，`可跨域`，`POST`，比较多的先进浏览器支持。\n请求头信息 `Content-Type`根据发送的 data 类型设置，且不能设置其他头字段。\n|data|Content-Type|\n|:--:|:--:|\n|Blod|Blod|\n|formData|multipart/form-data|\n|String|text/plain|\n```html\n// HTML 代码如下\n<body onload=\"analytics('start')\" onunload=\"analytics('end')\">\n```\nJS:\n```js\nfunction analytics(state) {\n  if (!navigator.sendBeacon) return;\n  var URL = 'http://example.com/analytics';\n  var data = 'state=' + state + '&location=' + window.location;\n  navigator.sendBeacon(URL, data);\n}\n```\n```js\nvar headers = {type: 'application/json'};\nvar blob = new Blob(request, headers);\nnavigator.sendBeacon('url/to/send', blob);\n```\n\n## 关于 formData 对象\n\nxhr2 提供了 FormData 对象，为表单序列化和创建与表单相同的数据提供了便利。\n其主要用于发送表单数据，也可构造与表单相同的数据，还可以发送文件。\n- **formdata 发送表单**\n```js\nvar formData = new FormData();//创建 formData 对象\nformData.append('name','jack');//添加表单项\nxhr.send(formData);\n```\n```HTML\n\t<form id=\"user-info\">\n\t    <label for=\"user-name\">姓名:</label>\n        <input type=\"text\" id=\"user-name\" name=\"user-name\" /><br>\n        <label for=\"user-email\">Email:</label>\n        <input type=\"text\" id=\"user-email\" name=\"user-email\" /><br>\n        <input type=\"button\" value=\"Submit\" onclick=\"submitData()\" />\n    </form>\n    <script type=\"text/javascript\">\n        function submitData() {\n            var http = new XMLHttpRequest();\n            http.open(\"post\", \"formdata\", true);\n            http.onreadystatechange = function (event) {\n                if (http.readyState == 4) {\n                    if (http.status == 200) {\n                        console.log(http.responseText);\n                    } else {\n                        alert(\"Request was unsuccessful: \" + http.status);\n                    }\n                }\n            };\n            var form = document.getElementById(\"user-info\");\n            var formdata = new FormData(form);//用表单初始化一个 FormData 对象\n            formdata.append('额外字段', 123);//字段值不是字符串，会转为字符串\n            http.send(formdata);\n        }\n    </script>\n```\n请求头信息：\n```js\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryoCpZL9koEpmlasTW\n```\n请求体信息：\n```js\n------WebKitFormBoundaryoCpZL9koEpmlasTW\nContent-Disposition: form-data; name=\"user-name\"\n\nafafa\n------WebKitFormBoundaryoCpZL9koEpmlasTW\nContent-Disposition: form-data; name=\"user-email\"\n\nafafa@163.com\n------WebKitFormBoundaryoCpZL9koEpmlasTW\nContent-Disposition: form-data; name=\"额外字段\"\n\n123\n------WebKitFormBoundaryoCpZL9koEpmlasTW--\n```\n和表单`enctype=\"multipart/form-data\"`提交一样的。\n用 express 处理提交，服务端：\n```js\n/**\n * formData 上传表单\n * bodyParser 不能处理 formData 数据，需要额外的中间件\n */\nlet multer = require('multer');\nlet upload = multer();\napp.post(\"/formdata\", upload.fields([]), (req, res) => {\n    console.log(req['body']);\n    res.json({ success: true });\n});\n```\n- **formdata 上传文件** TODO 如何用 express 接收呢？\n客户端：\n```html\n    <form enctype=\"multipart/form-data\" method=\"post\" name=\"fileinfo\">\n        <label>Your email address:</label>\n        <input type=\"email\" autocomplete=\"on\" autofocus name=\"userid\" placeholder=\"email\" required size=\"32\" maxlength=\"64\" /><br />\n        <label>Custom file label:</label>\n        <input type=\"text\" name=\"filelabel\" size=\"12\" maxlength=\"32\" /><br />\n        <label>File to stash:</label>\n        <input type=\"file\" name=\"file\" required />\n        <input type=\"submit\" value=\"Stash the file!\" />\n      </form>\n```\n## 待完成\n\n- formData 对象\n- 浏览器 Blod\n- arrayBuffer\n\n## xhr 封装\n\n```js\n/**\n * options = {\n\t\turl\t\t提交请求的url\n\t\tmethod\t请求的类型，默认为GET\n        data\t请求体的数据\n        cache   是否缓存数据，默认为false\n\t\tasync\t是否以异步方式进行，默认为true \n\t\tsuccess\t成功后的处理方法\n\t\terror\t失败后的处理方法\n\t}\n */\nfunction ajax(options) {\n    var options = options || {};\n    options.method = options.method.toUpperCase() || 'GET';\n    options.async = options.async || true;\n    options.cache = options.cache || true;\n    // 格式化参数的函数\n    var getParams = function (data) {\n        var arr = [];\n        for (param in data) {\n            //查询字符串中每个参数的名称和值都必须使用 encodeURIComponent()进行编码\n            arr.push(encodeURIComponent(param) + \"=\" + encodeURIComponent(data[param]));\n        }\n        // 在 url 末尾加上一个随机数，避免相同值使用 IE 缓存\n        if (options['cache']) {\n            arr.push((\"randomNum=\" + Math.random()).replace(\".\", \"\"));\n        }\n        // 返回带有 & 的查询字符串\n        return arr.join(\"&\");\n    }\n    var params = getParams(options['data']);\n    var http = new XMLHttpRequest();\n    http.onload = function () {\n        if (http.status === 200 || http.status === 304) {\n            // 成功\n            options.success && options.success(http.response);\n        } else {\n            // 失败\n            options.fail && options.fail(http.status);\n        }\n    }\n    switch (options['method']) {\n        case 'GET':\n            http.open(\"GET\", options['url'] + \"?\" + params, options['async']);\n            // 发送请求\n            http.send(null);\n            break;\n        case 'POST':\n            http.open('POST', options['url'], options['async']);\n            http.setRequestHeader('content-type', 'application/x-www-form-urlencoded');\n            http.send(params)\n            break;\n        default:\n            console.log('不支持的方法');\n            //TODO: 如何支持其他方法？\n            break;\n    }\n}\n```\npromise 版本：\n```js\nfunction http({\n  url = '',\n  method = 'get',\n  data = {},\n  dataType = 'multipart',\n  responseType = 'json',\n  headers = {},\n} = {}) {\n  let body = null;\n  method = method.toUpperCase();\n  if (!url) {\n    console.error('url是必需参数！');\n    return;\n  }\n  function xhr(resolve, reject) {\n    let http = new XMLHttpRequest();\n    http.responseType = responseType;\n    http.onload = function() {\n      if (200 == http.status || 304 === http.status) {\n        resolve(http.response);\n      } else {\n        reject(http.statusText);\n      }\n    };\n    http.onerror = function(e) {\n      reject(e);\n    };\n    switch (method.toLowerCase()) {\n      case 'get':\n        var queryString = '';\n        if (JSON.stringify(data) !== '{}') {\n          queryString = Object.keys(data)\n            .map(function(key) {\n              return encodeURIComponent(key) + '=' + encodeURIComponent(data[key]);\n            })\n            .join('&');\n        }\n        if (queryString) {\n          url += '?' + queryString;\n        }\n        http.open('GET', url, true);\n        break;\n      case 'post':\n        http.open('POST', url, true);\n        if ('json' === dataType) {\n          body = JSON.stringify(data);\n          http.setRequestHeader('content-type', 'application/json;charset=UTF-8');\n        } else if ('urlencoded' === dataType) {\n          body = Object.keys(data)\n            .map(function(key) {\n              return encodeURIComponent(key) + '=' + encodeURIComponent(data[key]);\n            })\n            .join('&');\n          http.setRequestHeader('content-type', 'application/x-www-form-urlencoded');\n        } else if ('xml' === dataType) {\n          http.setRequestHeader('content-type', 'text/xml');\n        } else {\n          body = data;\n        }\n        break;\n    }\n    for (const [key, value] of Object.entries(headers)) {\n      http.setRequestHeader(key, value);\n    }\n    http.send(body);\n  }\n  let promise = new Promise(xhr);\n  return promise;\n}\n```\n\n## 参考\n\n- [XMLHttpRequest 对象 - JavaScript 教程 - 网道][1]\n- [Navigator.sendBeacon() to pass header information][2]\n- [Is onload equal to readyState==4 in XMLHttpRequest?][3]\n- [What is meaning of xhr.readystate===4][4]\n- [Why Use onload in Cross-domain Ajax][5]\n- [XMLHttpRequest Living Standard — Last Updated 28 November 2018][6]\n\n\n[1]: https://wangdoc.com/javascript/bom/xmlhttprequest.html\n[2]: https://stackoverflow.com/questions/40523469/navigator-sendbeacon-to-pass-header-information\n[3]: https://stackoverflow.com/questions/9181090/is-onload-equal-to-readystate-4-in-xmlhttprequest\n[4]: https://stackoverflow.com/questions/30522565/what-is-meaning-of-xhr-readystate-4\n[5]: https://zqzhang.github.io/blog/2016/04/18/why-use-onload-in-cross-domain-ajax.html\n[6]: https://xhr.spec.whatwg.org/#progressevent","slug":"xhr-全面总结","published":1,"updated":"2019-06-16T09:47:40.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccg2001xjwrnglozfd0w","content":"<p>AJAX(Asynchronous JavaScript Xml)，异步的JS xml，以前客户端和服务器 通信，一般传递 xml，但是现在传递 <code>JSON</code>为主，ajax 能实现页面部分更新，使得页面性能高和体验良好。AJAX 是一种向服务器发送 HTTP 请求，实现与服务器交互的技术，已经是HTTP请的代名词，但是不只支持 http 协议，还支持 <code>ftp</code>、<code>file</code>协议。</p>\n<a id=\"more\"></a>\n<h2 id=\"一级xhr-二级-xhr\"><a class=\"markdownIt-Anchor\" href=\"#一级xhr-二级-xhr\"></a> 一级xhr 二级 xhr</h2>\n<p>一级xhr或者老版本的xhr，有一些缺点：</p>\n<ul>\n<li>只支持文本数据传输</li>\n<li>无法读取和上传二进制文件</li>\n<li>只用成功、失败、完成等状态，没进度信息</li>\n<li>不能跨域</li>\n</ul>\n<p>二级xhr，改进了这些问题：</p>\n<ul>\n<li>可设置超时</li>\n<li>formData 对象管理表单数据</li>\n<li>文件上传</li>\n<li>可跨域</li>\n<li>可获取二进制文件</li>\n<li>可获取传输进度</li>\n</ul>\n<h2 id=\"xmlhttprequest-对象\"><a class=\"markdownIt-Anchor\" href=\"#xmlhttprequest-对象\"></a> XMLHttpRequest 对象</h2>\n<p>ajax 技术的核心是 XMLHttpRequest 对象，简称XHR，现在较为先进的浏览器都支持（低版本的IE可滚粗了）创建 xhr 对象，<code>new</code> 一个即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure>\n<h3 id=\"xhr-的用法\"><a class=\"markdownIt-Anchor\" href=\"#xhr-的用法\"></a> xhr 的用法</h3>\n<p><strong>通常步骤：</strong><br>\n第一步：<code>var xhr = new XMLHttpRequest()</code>—创建 xhr;<br>\n第二步：<code>xhr.open(METHOD,URL,isAsync)</code>—启动xhr;<br>\n第三步：<code>xhr.responseType = reposnseType</code>—设置返回值类型，默认 <code>''</code>,必须在返回值达到客户端前设置;<br>\n第四步：<code>xhr.onreadystatechange=handleFun</code>—监听请求状态变化；<br>\n第五步：<code>xhr.setRequestHeader('Content-Type','application/json;charset=utf-8')</code>—设置请求头，不需要设置，可省略，<code>必须在请求开启和发送之间设置</code>;<br>\n第六步：<code>xhr.send(data)</code>—发送请求。</p>\n<p>完整的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">http.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'/endpoint'</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">http.responseType = <span class=\"string\">'json'</span>;</span><br><span class=\"line\">http.onreaydstatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(http.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(http.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">\t\t\t <span class=\"built_in\">console</span>.log(http.response);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.error(http.response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">http.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t <span class=\"built_in\">console</span>.error(http.statusText);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例属性\"><a class=\"markdownIt-Anchor\" href=\"#实例属性\"></a> 实例属性</h3>\n<h4 id=\"readystate\"><a class=\"markdownIt-Anchor\" href=\"#readystate\"></a> readyState</h4>\n<p>只读属性，是一个<code>数字</code>，表示此时的 HTTP 请求状态。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:left\">状态</th>\n<th style=\"text-align:center\">其他</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">xhr创建，<code>open</code>方法还未调用</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\"><code>open</code>已调用，<code>send</code>未调用，此时可设置请求头</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\"><code>send</code>已调用，且服务器返回的<code>头信息</code>和<code>状态码</code>已经收到</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">正在接收响应<code>body</code>，收到部分信息。</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">已收到服务返回即请求<code>完成</code>，可能失败，可能成功</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>0   UNSENT  open() has not been called yet.<br>\n1   OPENED  send() has been called.<br>\n2   HEADERS_RECEIVED    send() has been called, and headers and status are available.<br>\n3   LOADING Downloading; responseText holds partial data.<br>\n4   DONE    The operation is complete.</p>\n</blockquote>\n<p>每当 <code>xhr</code>的状态发生变化，<code>readyState</code>属性就发生变化，就会触发<code>readyStateChange</code>事件，所以可在 readyStateChange 事件的监听函数里处理返回的请求信息。</p>\n<h4 id=\"onreadystatechange\"><a class=\"markdownIt-Anchor\" href=\"#onreadystatechange\"></a> onreadystatechange</h4>\n<p>事件，指向一个函数。执行<code>abort</code>方法，也会改变 readyState。</p>\n<h4 id=\"response\"><a class=\"markdownIt-Anchor\" href=\"#response\"></a> response</h4>\n<p>服务器返回的数据，只读，类型由 <code>responseType</code>决定。请求不成功或者数据不完整，值为\t<code>null</code>。</p>\n<h4 id=\"responetype\"><a class=\"markdownIt-Anchor\" href=\"#responetype\"></a> responeType</h4>\n<p>可写属性，指定响应格式，在 <code>open</code>之后<code>send</code>之前，设置返回的数据类型。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">‘’(空字符串)</td>\n<td style=\"text-align:left\">默认值，等同于<code>text</code>,适用大多数情况。只是设置该值时，才可获取<code>responseText</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">json</td>\n<td style=\"text-align:left\">浏览器会自动调用<code>JSON.parse</code>解析JSON字符串，此时<code>response</code>是一个对象，<strong>不是字符串</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">blob</td>\n<td style=\"text-align:left\"><code>Blob</code>对象，二进制对象，请求图片，下载文件等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">document</td>\n<td style=\"text-align:left\"><code>Document</code> 对象，文档对象，HTML/XML文档对象等，收到返回值后不用解析HTML字符串，直接进行DOM操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">arraybuffer</td>\n<td style=\"text-align:left\"><code>ArrayBuffer</code>对象,二进制数组</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"responsetext\"><a class=\"markdownIt-Anchor\" href=\"#responsetext\"></a> responseText</h4>\n<p>返回值类型是<code>String</code>，可用这个属性获取。也就是说 <code>responseType</code>设置<code>text</code>或者<code>''</code>，<code>response</code>和<code>responseText</code>是相同的。</p>\n<h4 id=\"responsexml\"><a class=\"markdownIt-Anchor\" href=\"#responsexml\"></a> responseXML</h4>\n<p>返回值时 HMTL 或者 XML 对象，可用该属性获取，只读。该属性生效的前提是，响应头信息 <code>Content-Type</code>为 <code>text/xml</code>或者<code>application/xml</code>,这要求，发送请求前，将<code>responseType</code>设置为<code>document</code>。如果响应头信息\t<code>Content-Type</code>不为 <code>text/xml</code>或者<code>application/xml</code>，就需要手动调用<code>overrideMimeType('text/xml')</code>，强制进行XML解析。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">http.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'/'</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">http.responseType = <span class=\"string\">'document'</span>;</span><br><span class=\"line\">http.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(http.reaydState === <span class=\"number\">4</span> &amp;&amp; http.status  === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(http.responseXML);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"responseurl\"><a class=\"markdownIt-Anchor\" href=\"#responseurl\"></a> responseURL</h4>\n<p>只读，返回数据的服务器的url。和 open 里的 url 不一定相同，不含锚点。</p>\n<h4 id=\"status-statustext\"><a class=\"markdownIt-Anchor\" href=\"#status-statustext\"></a> status statusText</h4>\n<p><code>status</code>一个整数，表示 HTTP 的状态码，只读，发出请求前，为\t0。<br>\n<code>statusText</code>是状态信息，只读，无返回状态信息，默认 <code>OK</code>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">status</th>\n<th style=\"text-align:center\">statusText</th>\n<th style=\"text-align:center\">状态</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">200</td>\n<td style=\"text-align:center\">OK</td>\n<td style=\"text-align:center\">成功返回</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">301</td>\n<td style=\"text-align:center\">Moved Permanently</td>\n<td style=\"text-align:center\">永久移动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">302</td>\n<td style=\"text-align:center\">Moved Temporarily</td>\n<td style=\"text-align:center\">暂时移动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">304</td>\n<td style=\"text-align:center\">Not Modified</td>\n<td style=\"text-align:center\">未修改</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">307</td>\n<td style=\"text-align:center\">Temporary Redirect</td>\n<td style=\"text-align:center\">暂时重定向</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">400</td>\n<td style=\"text-align:center\">Bad request</td>\n<td style=\"text-align:center\">无效请求</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">401</td>\n<td style=\"text-align:center\">Unauthorized</td>\n<td style=\"text-align:center\">未授权</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">403</td>\n<td style=\"text-align:center\">Forbindden</td>\n<td style=\"text-align:center\">禁止访问</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">404</td>\n<td style=\"text-align:center\">Not Found</td>\n<td style=\"text-align:center\">未找到</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">405</td>\n<td style=\"text-align:center\">Method not allowed</td>\n<td style=\"text-align:center\">方法不被允许</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">500</td>\n<td style=\"text-align:center\">Internal server error</td>\n<td style=\"text-align:center\">服务器内部出错</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">503</td>\n<td style=\"text-align:center\">Service unavailable</td>\n<td style=\"text-align:center\">服务不可用</td>\n</tr>\n</tbody>\n</table>\n<p>基本上 2xx和 304，返回正常。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(http.readyState ===<span class=\"number\">4</span> )&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((http.status &gt;= <span class=\"number\">200</span> &amp;&amp; http.status &lt; <span class=\"number\">300</span>)||(http.status === <span class=\"number\">304</span>))&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//处理返回数据</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回出错</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"timeout-ontimeout\"><a class=\"markdownIt-Anchor\" href=\"#timeout-ontimeout\"></a> timeout  ontimeout</h4>\n<p><code>timeout</code>属性是一个整数，表示多少<code>毫秒</code>后，如果请求还未返回，就会自动终止。触发<code>timeout</code>事件， 为 0 ，表示无时间限制，不是整数，会先转换，成数字，转换失败，则不生效。<br>\n<code>ontimeout</code>指向一个函数，<code>timeout</code>触发，就执行该函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">http.ontimeout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'请求超时'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.onload =  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(http.readyState === <span class=\"number\">4</span> &amp;&amp; http.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//正常返回</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(http.statusText);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'/users/12132'</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">http.timeout = <span class=\"number\">1000</span>*<span class=\"number\">10</span>;<span class=\"comment\">// 10 秒超时</span></span><br><span class=\"line\">http.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"withcredentials\"><a class=\"markdownIt-Anchor\" href=\"#withcredentials\"></a> withCredentials</h4>\n<p>一个布尔值，表示跨域请求时，用户信息（Cookie、认证的 http 头信息）是否会包含在请求中，默认<code>false</code>。同源请求不需要设置。为了使得该属性生效，必须返回头信息 <code>Access-Control-Allow-Credentials</code>且值为\t<code>true</code>。<br>\n打开了，跨域会发送 cookie，还会设置Cookie。</p>\n<h4 id=\"upload-用-ajax-发送文件\"><a class=\"markdownIt-Anchor\" href=\"#upload-用-ajax-发送文件\"></a> upload 用 AJAX 发送文件</h4>\n<p>xhr 不仅可以发送请求，还可发送送文件。发送文件后，<code>upload</code>属性可得到一个对象，通过该对象，可监听该对象的各个事件得到上传状态。<br>\n显示上传进度：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">progress</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>&gt;</span>0% complete<span class=\"tag\">&lt;/<span class=\"name\">progress</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>监听<code>upload</code>对象的<code>progress</code>事件，可得到上传进度：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uploadFile</span>(<span class=\"params\">&#123;blodOrFile=null,type=<span class=\"string\">'json'</span>&#125;</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">\thttp.open(<span class=\"string\">'POST'</span>,<span class=\"string\">'/srever'</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">\thttp.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> progressBar = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'progress'</span>);</span><br><span class=\"line\">\thttp.upload.onprogress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(event.lengthComputable)&#123;</span><br><span class=\"line\">\t\t\tprogressBar.value = (event.load / event.total)*<span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 兼容老式浏览器</span></span><br><span class=\"line\">\t\t\tprogressBar.textContent = progressBar.value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thttp.send(blodOrFile);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">uploadFile(&#123;<span class=\"attr\">blodOrFile</span>:<span class=\"keyword\">new</span> Blod([<span class=\"string\">'hello ajax'</span>])&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件属性\"><a class=\"markdownIt-Anchor\" href=\"#事件属性\"></a> 事件属性</h3>\n<p>可监听 xhr 的以下事件：<strong>书写顺序为触发顺序，监听这些事件，必须在send之前进行</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">事件</th>\n<th style=\"text-align:left\">何时触发</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">onloadstart</td>\n<td style=\"text-align:center\">loadstart</td>\n<td style=\"text-align:left\">请求发出,在 <code>readyState == 1</code> 和 <code>readyState == 2</code>之间,onloadstart 默认传入 progressEvent 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onprogress</td>\n<td style=\"text-align:center\">progress</td>\n<td style=\"text-align:left\">正在发送或者加载返回的数据,onprogress 默认传入progressEvent对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onabort</td>\n<td style=\"text-align:center\">abort</td>\n<td style=\"text-align:left\">终止请求，比如调用<code>abort</code>，调用该方法，readyState 被设置为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onerror</td>\n<td style=\"text-align:center\">error</td>\n<td style=\"text-align:left\">请求<code>失败</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ontimeout</td>\n<td style=\"text-align:center\">timeout</td>\n<td style=\"text-align:left\">请求<code>超时</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onload</td>\n<td style=\"text-align:center\">load</td>\n<td style=\"text-align:left\">请求<code>成功</code>，以上四个事件互斥，触发0次或者1次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onloadend</td>\n<td style=\"text-align:center\">loadend</td>\n<td style=\"text-align:left\">请求<code>完成</code>,可能成功，可能失败。<strong>abort</strong>、<strong>load</strong>、<strong>timeout</strong>、<strong>readtState=4</strong>都会伴随着<strong>loadend</strong>,onloadend 默认传入 progressEvent 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onreadystatechange</td>\n<td style=\"text-align:center\">readystatechange</td>\n<td style=\"text-align:left\">xhr状态，监听该事件，可得知请求是否<code>完成</code>，这个属性时<code>xhr</code>特有的，其他属性时<code>xhr.upload</code>和<code>xhr</code>共有的</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> responseText = xhr.responseText;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(responseText);</span><br><span class=\"line\"> <span class=\"comment\">// process the response.</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">http.onabort = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'The request was aborted'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// `只有 onprogress 有一个事件参数`</span></span><br><span class=\"line\">http.onprogress = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.loaded);<span class=\"comment\">//已返回的数据量</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.total);<span class=\"comment\">//返回的总数据量</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.lengthComputable);<span class=\"comment\">//加载进度是否可计算</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleError</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'There was an error!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">http.addEventListener(<span class=\"string\">'error'</span>, handleError);</span><br></pre></td></tr></table></figure>\n<h3 id=\"onload-vs-onreadystatechange\"><a class=\"markdownIt-Anchor\" href=\"#onload-vs-onreadystatechange\"></a> onload vs onreadyStateChange</h3>\n<p>处理返回值，是在 <strong>onload</strong>还是在<strong>onreadyStateChange</strong>?</p>\n<p>onload 等于 <code>readyState==4 &amp;&amp; xhr.status===200</code></p>\n<p>loadend 事件的触发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onreadystatechange</span><br><span class=\"line\">    readyState === <span class=\"number\">4</span></span><br><span class=\"line\">             ⇓</span><br><span class=\"line\">onload / onerror / onabort</span><br><span class=\"line\">             ⇓</span><br><span class=\"line\">        onloadend</span><br></pre></td></tr></table></figure>\n<p>使用 <code>onerror</code>并且不考虑老式浏览器，<code>推荐</code>用 <code>onload</code>而不用<code>onreadySateChange</code>。</p>\n<h3 id=\"实例方法\"><a class=\"markdownIt-Anchor\" href=\"#实例方法\"></a> 实例方法</h3>\n<h4 id=\"open\"><a class=\"markdownIt-Anchor\" href=\"#open\"></a> open</h4>\n<p>在<code>open</code>方法中指定请求参数，返回值为<code>undefined</code>。<br>\n<code>opend(METHOD,URL,isAsync,user,password)</code>,user 和 password 可选，统一请求，再次用<code>open</code>，就等同于调用<code>abort</code>。一般 URL 需要用 <code>encodeURI</code>或<code>encodeURICompent</code>编码。</p>\n<h4 id=\"get-请求绕过缓存\"><a class=\"markdownIt-Anchor\" href=\"#get-请求绕过缓存\"></a> GET 请求绕过缓存</h4>\n<p>GET 请求会缓存，在 url 后面加时间戳可绕过缓存。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//foo.com/bar.html -&gt; http://foo.com/bar.html?12345</span></span><br><span class=\"line\">http:<span class=\"comment\">//foo.com/bar.html?foobar=baz -&gt; http://foo.com/bar.html?foobar=baz&amp;12345</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> oReq = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">oReq.open(<span class=\"string\">\"GET\"</span>, url + ((<span class=\"regexp\">/\\?/</span>).test(url) ? <span class=\"string\">\"&amp;\"</span> : <span class=\"string\">\"?\"</span>) + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).getTime());</span><br><span class=\"line\">oReq.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"send\"><a class=\"markdownIt-Anchor\" href=\"#send\"></a> send</h4>\n<p>send 用于发送数据，可发发送多种类型的数据。<br>\n<code>String</code>、<code>Bold</code>、<code>Document</code>、<code>Formdata</code>、<code>ArrayBuffer</code>、<code>null</code>。</p>\n<p>发送表单数据：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">'registration'</span> <span class=\"attr\">name</span>=<span class=\"string\">'registration'</span> <span class=\"attr\">action</span>=<span class=\"string\">'/register'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'username'</span> <span class=\"attr\">value</span>=<span class=\"string\">'张三'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'email'</span> <span class=\"attr\">name</span>=<span class=\"string\">'email'</span> <span class=\"attr\">value</span>=<span class=\"string\">'zhangsan@example.com'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'number'</span> <span class=\"attr\">name</span>=<span class=\"string\">'birthDate'</span> <span class=\"attr\">value</span>=<span class=\"string\">'1940'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'submit'</span> <span class=\"attr\">onclick</span>=<span class=\"string\">'return sendForm(this.form);'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendForm</span>(<span class=\"params\">form</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(form);<span class=\"comment\">//对表单进行加工</span></span><br><span class=\"line\">  formData.append(<span class=\"string\">'csrf'</span>, <span class=\"string\">'e69a18d7db1286040586e6da1950128c'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">  xhr.open(<span class=\"string\">'POST'</span>, form.action, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  xhr.send(formData);<span class=\"comment\">//发送</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#registration'</span>);</span><br><span class=\"line\">sendForm(form);</span><br></pre></td></tr></table></figure>\n<h4 id=\"setrequestheaderfiledvalue\"><a class=\"markdownIt-Anchor\" href=\"#setrequestheaderfiledvalue\"></a> setRequestHeader(filed,value)</h4>\n<p>设置请求头信息，open 之后，send 之前调用。</p>\n<h4 id=\"overridemimetype\"><a class=\"markdownIt-Anchor\" href=\"#overridemimetype\"></a> overrideMimeType()</h4>\n<p>重新设置服务器返回的数据类型，必须在 send 之前调用。</p>\n<h4 id=\"getresponseheaderfiledstring\"><a class=\"markdownIt-Anchor\" href=\"#getresponseheaderfiledstring\"></a> getResponseHeader(filed):String</h4>\n<p>获取某个响应头信息，参数不区分大小写。</p>\n<h4 id=\"getresponseheadersstring\"><a class=\"markdownIt-Anchor\" href=\"#getresponseheadersstring\"></a> getResponseHeaders():String</h4>\n<p>获取所有响应头信息，每个头信息之间用 <code>\\r\\n</code>(换行)分割。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date: Fri, <span class=\"number\">08</span> Dec <span class=\"number\">2017</span> <span class=\"number\">21</span>:<span class=\"number\">04</span>:<span class=\"number\">30</span> GMT\\r\\n</span><br><span class=\"line\">content-encoding: gzip\\r\\n</span><br><span class=\"line\">x-content-type-options: nosniff\\r\\n</span><br><span class=\"line\">server: meinheld/<span class=\"number\">0.6</span><span class=\"number\">.1</span>\\r\\n</span><br><span class=\"line\">x-frame-options: DENY\\r\\n</span><br><span class=\"line\">content-type: text/html; charset=utf<span class=\"number\">-8</span>\\r\\n</span><br><span class=\"line\">connection: keep-alive\\r\\n</span><br><span class=\"line\">strict-transport-security: max-age=<span class=\"number\">63072000</span>\\r\\n</span><br><span class=\"line\">vary: Cookie, Accept-Encoding\\r\\n</span><br><span class=\"line\">content-length: <span class=\"number\">6502</span>\\r\\n</span><br><span class=\"line\">x-xss-protection: <span class=\"number\">1</span>; mode=block\\r\\n</span><br></pre></td></tr></table></figure>\n<p>处理头信息：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = headers.trim().split(<span class=\"regexp\">/[\\r\\n]+/</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> headerMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">line</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parts = line.split(<span class=\"string\">': '</span>);<span class=\"comment\">//注意 '' </span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> header = parts.shift();<span class=\"comment\">//删除第一个元素，原数组改变，随便获取到 头字段。一举两得，妙</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = parts.join(<span class=\"string\">': '</span>);<span class=\"comment\">//\\r\\n 去哪儿了</span></span><br><span class=\"line\">  headerMap[header] = value;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">headerMap[<span class=\"string\">'content-length'</span>] <span class=\"comment\">// \"6502\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"abort\"><a class=\"markdownIt-Anchor\" href=\"#abort\"></a> abort</h4>\n<p>终止请求，使得 <code>readyState</code>为 4，<code>status</code>为 0。</p>\n<h2 id=\"页面卸载时发送数据\"><a class=\"markdownIt-Anchor\" href=\"#页面卸载时发送数据\"></a> 页面卸载时发送数据</h2>\n<p>在页面卸载时发送数据，即在<code>unload</code>或者<code>beforeunload</code>的监听函数里，发送AJAX，但是不可靠。xhr 是异步的，可能在发送数据时，页面就卸载了，可打发送失败，那么用同步发送，但是同步发送数据，很多浏览器不支持，同步发送，用户体验不好。</p>\n<p>用 <code>Navigator.sendBeacon(url,data)</code>，该方法与当前页面脱钩，作为浏览器任务，能保证把数据发出去。data 可以是字符串、表单对象、二进制对象等，返回 布尔值，true 说明发送成功，<code>可跨域</code>，<code>POST</code>，比较多的先进浏览器支持。<br>\n请求头信息 <code>Content-Type</code>根据发送的 data 类型设置，且不能设置其他头字段。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">data</th>\n<th style=\"text-align:center\">Content-Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Blod</td>\n<td style=\"text-align:center\">Blod</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">formData</td>\n<td style=\"text-align:center\">multipart/form-data</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">text/plain</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// HTML 代码如下</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"analytics('start')\"</span> <span class=\"attr\">onunload</span>=<span class=\"string\">\"analytics('end')\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JS:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">analytics</span>(<span class=\"params\">state</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!navigator.sendBeacon) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> URL = <span class=\"string\">'http://example.com/analytics'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">'state='</span> + state + <span class=\"string\">'&amp;location='</span> + <span class=\"built_in\">window</span>.location;</span><br><span class=\"line\">  navigator.sendBeacon(URL, data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> headers = &#123;<span class=\"attr\">type</span>: <span class=\"string\">'application/json'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob(request, headers);</span><br><span class=\"line\">navigator.sendBeacon(<span class=\"string\">'url/to/send'</span>, blob);</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于-formdata-对象\"><a class=\"markdownIt-Anchor\" href=\"#关于-formdata-对象\"></a> 关于 formData 对象</h2>\n<p>xhr2 提供了 FormData 对象，为表单序列化和创建与表单相同的数据提供了便利。<br>\n其主要用于发送表单数据，也可构造与表单相同的数据，还可以发送文件。</p>\n<ul>\n<li><strong>formdata 发送表单</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData();<span class=\"comment\">//创建 formData 对象</span></span><br><span class=\"line\">formData.append(<span class=\"string\">'name'</span>,<span class=\"string\">'jack'</span>);<span class=\"comment\">//添加表单项</span></span><br><span class=\"line\">xhr.send(formData);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"user-info\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"user-name\"</span>&gt;</span>姓名:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"user-name\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user-name\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"user-email\"</span>&gt;</span>Email:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"user-email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user-email\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"submitData()\"</span> /&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">       <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">submitData</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">           <span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span></span><br><span class=\"line\"><span class=\"actionscript\">           http.open(<span class=\"string\">\"post\"</span>, <span class=\"string\">\"formdata\"</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">           http.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(event)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">               <span class=\"keyword\">if</span> (http.readyState == <span class=\"number\">4</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                   <span class=\"keyword\">if</span> (http.status == <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                       <span class=\"built_in\">console</span>.log(http.responseText);</span></span><br><span class=\"line\"><span class=\"actionscript\">                   &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                       alert(<span class=\"string\">\"Request was unsuccessful: \"</span> + http.status);</span></span><br><span class=\"line\"><span class=\"undefined\">                   &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">               &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">           &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"user-info\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">           <span class=\"keyword\">var</span> formdata = <span class=\"keyword\">new</span> FormData(form);<span class=\"comment\">//用表单初始化一个 FormData 对象</span></span></span><br><span class=\"line\"><span class=\"actionscript\">           formdata.append(<span class=\"string\">'额外字段'</span>, <span class=\"number\">123</span>);<span class=\"comment\">//字段值不是字符串，会转为字符串</span></span></span><br><span class=\"line\"><span class=\"undefined\">           http.send(formdata);</span></span><br><span class=\"line\"><span class=\"undefined\">       &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">   </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>请求头信息：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryoCpZL9koEpmlasTW</span><br></pre></td></tr></table></figure>\n<p>请求体信息：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------WebKitFormBoundaryoCpZL9koEpmlasTW</span><br><span class=\"line\">Content-Disposition: form-data; name=<span class=\"string\">\"user-name\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">afafa</span><br><span class=\"line\">------WebKitFormBoundaryoCpZL9koEpmlasTW</span><br><span class=\"line\">Content-Disposition: form-data; name=<span class=\"string\">\"user-email\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">afafa@<span class=\"number\">163.</span>com</span><br><span class=\"line\">------WebKitFormBoundaryoCpZL9koEpmlasTW</span><br><span class=\"line\">Content-Disposition: form-data; name=<span class=\"string\">\"额外字段\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">123</span></span><br><span class=\"line\">------WebKitFormBoundaryoCpZL9koEpmlasTW--</span><br></pre></td></tr></table></figure>\n<p>和表单<code>enctype=&quot;multipart/form-data&quot;</code>提交一样的。<br>\n用 express 处理提交，服务端：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * formData 上传表单</span></span><br><span class=\"line\"><span class=\"comment\"> * bodyParser 不能处理 formData 数据，需要额外的中间件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> multer = <span class=\"built_in\">require</span>(<span class=\"string\">'multer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> upload = multer();</span><br><span class=\"line\">app.post(<span class=\"string\">\"/formdata\"</span>, upload.fields([]), (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(req[<span class=\"string\">'body'</span>]);</span><br><span class=\"line\">    res.json(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>formdata 上传文件</strong> TODO 如何用 express 接收呢？<br>\n客户端：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileinfo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Your email address:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"on\"</span> <span class=\"attr\">autofocus</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userid\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">required</span> <span class=\"attr\">size</span>=<span class=\"string\">\"32\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"64\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Custom file label:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"filelabel\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"12\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"32\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>File to stash:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Stash the file!\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"待完成\"><a class=\"markdownIt-Anchor\" href=\"#待完成\"></a> 待完成</h2>\n<ul>\n<li>formData 对象</li>\n<li>浏览器 Blod</li>\n<li>arrayBuffer</li>\n</ul>\n<h2 id=\"xhr-封装\"><a class=\"markdownIt-Anchor\" href=\"#xhr-封装\"></a> xhr 封装</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * options = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\turl\t\t提交请求的url</span></span><br><span class=\"line\"><span class=\"comment\">\t\tmethod\t请求的类型，默认为GET</span></span><br><span class=\"line\"><span class=\"comment\">        data\t请求体的数据</span></span><br><span class=\"line\"><span class=\"comment\">        cache   是否缓存数据，默认为false</span></span><br><span class=\"line\"><span class=\"comment\">\t\tasync\t是否以异步方式进行，默认为true </span></span><br><span class=\"line\"><span class=\"comment\">\t\tsuccess\t成功后的处理方法</span></span><br><span class=\"line\"><span class=\"comment\">\t\terror\t失败后的处理方法</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = options || &#123;&#125;;</span><br><span class=\"line\">    options.method = options.method.toUpperCase() || <span class=\"string\">'GET'</span>;</span><br><span class=\"line\">    options.async = options.async || <span class=\"literal\">true</span>;</span><br><span class=\"line\">    options.cache = options.cache || <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 格式化参数的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> getParams = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (param <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//查询字符串中每个参数的名称和值都必须使用 encodeURIComponent()进行编码</span></span><br><span class=\"line\">            arr.push(<span class=\"built_in\">encodeURIComponent</span>(param) + <span class=\"string\">\"=\"</span> + <span class=\"built_in\">encodeURIComponent</span>(data[param]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在 url 末尾加上一个随机数，避免相同值使用 IE 缓存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options[<span class=\"string\">'cache'</span>]) &#123;</span><br><span class=\"line\">            arr.push((<span class=\"string\">\"randomNum=\"</span> + <span class=\"built_in\">Math</span>.random()).replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回带有 &amp; 的查询字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr.join(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = getParams(options[<span class=\"string\">'data'</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    http.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (http.status === <span class=\"number\">200</span> || http.status === <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 成功</span></span><br><span class=\"line\">            options.success &amp;&amp; options.success(http.response);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 失败</span></span><br><span class=\"line\">            options.fail &amp;&amp; options.fail(http.status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (options[<span class=\"string\">'method'</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'GET'</span>:</span><br><span class=\"line\">            http.open(<span class=\"string\">\"GET\"</span>, options[<span class=\"string\">'url'</span>] + <span class=\"string\">\"?\"</span> + params, options[<span class=\"string\">'async'</span>]);</span><br><span class=\"line\">            <span class=\"comment\">// 发送请求</span></span><br><span class=\"line\">            http.send(<span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">            http.open(<span class=\"string\">'POST'</span>, options[<span class=\"string\">'url'</span>], options[<span class=\"string\">'async'</span>]);</span><br><span class=\"line\">            http.setRequestHeader(<span class=\"string\">'content-type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\">            http.send(params)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'不支持的方法'</span>);</span><br><span class=\"line\">            <span class=\"comment\">//<span class=\"doctag\">TODO:</span> 如何支持其他方法？</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>promise 版本：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">http</span>(<span class=\"params\">&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  url = <span class=\"string\">''</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  method = <span class=\"string\">'get'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  data = &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  dataType = <span class=\"string\">'multipart'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  responseType = <span class=\"string\">'json'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  headers = &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> body = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  method = method.toUpperCase();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!url) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'url是必需参数！'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">xhr</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    http.responseType = responseType;</span><br><span class=\"line\">    http.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"number\">200</span> == http.status || <span class=\"number\">304</span> === http.status) &#123;</span><br><span class=\"line\">        resolve(http.response);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(http.statusText);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    http.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method.toLowerCase()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'get'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">var</span> queryString = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">JSON</span>.stringify(data) !== <span class=\"string\">'&#123;&#125;'</span>) &#123;</span><br><span class=\"line\">          queryString = <span class=\"built_in\">Object</span>.keys(data)</span><br><span class=\"line\">            .map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"built_in\">encodeURIComponent</span>(key) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(data[key]);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .join(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (queryString) &#123;</span><br><span class=\"line\">          url += <span class=\"string\">'?'</span> + queryString;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        http.open(<span class=\"string\">'GET'</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'post'</span>:</span><br><span class=\"line\">        http.open(<span class=\"string\">'POST'</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">'json'</span> === dataType) &#123;</span><br><span class=\"line\">          body = <span class=\"built_in\">JSON</span>.stringify(data);</span><br><span class=\"line\">          http.setRequestHeader(<span class=\"string\">'content-type'</span>, <span class=\"string\">'application/json;charset=UTF-8'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'urlencoded'</span> === dataType) &#123;</span><br><span class=\"line\">          body = <span class=\"built_in\">Object</span>.keys(data)</span><br><span class=\"line\">            .map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"built_in\">encodeURIComponent</span>(key) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(data[key]);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .join(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">          http.setRequestHeader(<span class=\"string\">'content-type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'xml'</span> === dataType) &#123;</span><br><span class=\"line\">          http.setRequestHeader(<span class=\"string\">'content-type'</span>, <span class=\"string\">'text/xml'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          body = data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(headers)) &#123;</span><br><span class=\"line\">      http.setRequestHeader(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    http.send(body);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(xhr);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://wangdoc.com/javascript/bom/xmlhttprequest.html\" target=\"_blank\" rel=\"noopener\">XMLHttpRequest 对象 - JavaScript 教程 - 网道</a></li>\n<li><a href=\"https://stackoverflow.com/questions/40523469/navigator-sendbeacon-to-pass-header-information\" target=\"_blank\" rel=\"noopener\">Navigator.sendBeacon() to pass header information</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9181090/is-onload-equal-to-readystate-4-in-xmlhttprequest\" target=\"_blank\" rel=\"noopener\">Is onload equal to readyState==4 in XMLHttpRequest?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/30522565/what-is-meaning-of-xhr-readystate-4\" target=\"_blank\" rel=\"noopener\">What is meaning of xhr.readystate===4</a></li>\n<li><a href=\"https://zqzhang.github.io/blog/2016/04/18/why-use-onload-in-cross-domain-ajax.html\" target=\"_blank\" rel=\"noopener\">Why Use onload in Cross-domain Ajax</a></li>\n<li><a href=\"https://xhr.spec.whatwg.org/#progressevent\" target=\"_blank\" rel=\"noopener\">XMLHttpRequest Living Standard — Last Updated 28 November 2018</a></li>\n</ul>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>AJAX(Asynchronous JavaScript Xml)，异步的JS xml，以前客户端和服务器 通信，一般传递 xml，但是现在传递 <code>JSON</code>为主，ajax 能实现页面部分更新，使得页面性能高和体验良好。AJAX 是一种向服务器发送 HTTP 请求，实现与服务器交互的技术，已经是HTTP请的代名词，但是不只支持 http 协议，还支持 <code>ftp</code>、<code>file</code>协议。</p>","more":"<h2 id=\"一级xhr-二级-xhr\"><a class=\"markdownIt-Anchor\" href=\"#一级xhr-二级-xhr\"></a> 一级xhr 二级 xhr</h2>\n<p>一级xhr或者老版本的xhr，有一些缺点：</p>\n<ul>\n<li>只支持文本数据传输</li>\n<li>无法读取和上传二进制文件</li>\n<li>只用成功、失败、完成等状态，没进度信息</li>\n<li>不能跨域</li>\n</ul>\n<p>二级xhr，改进了这些问题：</p>\n<ul>\n<li>可设置超时</li>\n<li>formData 对象管理表单数据</li>\n<li>文件上传</li>\n<li>可跨域</li>\n<li>可获取二进制文件</li>\n<li>可获取传输进度</li>\n</ul>\n<h2 id=\"xmlhttprequest-对象\"><a class=\"markdownIt-Anchor\" href=\"#xmlhttprequest-对象\"></a> XMLHttpRequest 对象</h2>\n<p>ajax 技术的核心是 XMLHttpRequest 对象，简称XHR，现在较为先进的浏览器都支持（低版本的IE可滚粗了）创建 xhr 对象，<code>new</code> 一个即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure>\n<h3 id=\"xhr-的用法\"><a class=\"markdownIt-Anchor\" href=\"#xhr-的用法\"></a> xhr 的用法</h3>\n<p><strong>通常步骤：</strong><br>\n第一步：<code>var xhr = new XMLHttpRequest()</code>—创建 xhr;<br>\n第二步：<code>xhr.open(METHOD,URL,isAsync)</code>—启动xhr;<br>\n第三步：<code>xhr.responseType = reposnseType</code>—设置返回值类型，默认 <code>''</code>,必须在返回值达到客户端前设置;<br>\n第四步：<code>xhr.onreadystatechange=handleFun</code>—监听请求状态变化；<br>\n第五步：<code>xhr.setRequestHeader('Content-Type','application/json;charset=utf-8')</code>—设置请求头，不需要设置，可省略，<code>必须在请求开启和发送之间设置</code>;<br>\n第六步：<code>xhr.send(data)</code>—发送请求。</p>\n<p>完整的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">http.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'/endpoint'</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">http.responseType = <span class=\"string\">'json'</span>;</span><br><span class=\"line\">http.onreaydstatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(http.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(http.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">\t\t\t <span class=\"built_in\">console</span>.log(http.response);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.error(http.response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">http.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t <span class=\"built_in\">console</span>.error(http.statusText);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例属性\"><a class=\"markdownIt-Anchor\" href=\"#实例属性\"></a> 实例属性</h3>\n<h4 id=\"readystate\"><a class=\"markdownIt-Anchor\" href=\"#readystate\"></a> readyState</h4>\n<p>只读属性，是一个<code>数字</code>，表示此时的 HTTP 请求状态。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:left\">状态</th>\n<th style=\"text-align:center\">其他</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">xhr创建，<code>open</code>方法还未调用</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\"><code>open</code>已调用，<code>send</code>未调用，此时可设置请求头</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\"><code>send</code>已调用，且服务器返回的<code>头信息</code>和<code>状态码</code>已经收到</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">正在接收响应<code>body</code>，收到部分信息。</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">已收到服务返回即请求<code>完成</code>，可能失败，可能成功</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>0   UNSENT  open() has not been called yet.<br>\n1   OPENED  send() has been called.<br>\n2   HEADERS_RECEIVED    send() has been called, and headers and status are available.<br>\n3   LOADING Downloading; responseText holds partial data.<br>\n4   DONE    The operation is complete.</p>\n</blockquote>\n<p>每当 <code>xhr</code>的状态发生变化，<code>readyState</code>属性就发生变化，就会触发<code>readyStateChange</code>事件，所以可在 readyStateChange 事件的监听函数里处理返回的请求信息。</p>\n<h4 id=\"onreadystatechange\"><a class=\"markdownIt-Anchor\" href=\"#onreadystatechange\"></a> onreadystatechange</h4>\n<p>事件，指向一个函数。执行<code>abort</code>方法，也会改变 readyState。</p>\n<h4 id=\"response\"><a class=\"markdownIt-Anchor\" href=\"#response\"></a> response</h4>\n<p>服务器返回的数据，只读，类型由 <code>responseType</code>决定。请求不成功或者数据不完整，值为\t<code>null</code>。</p>\n<h4 id=\"responetype\"><a class=\"markdownIt-Anchor\" href=\"#responetype\"></a> responeType</h4>\n<p>可写属性，指定响应格式，在 <code>open</code>之后<code>send</code>之前，设置返回的数据类型。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">‘’(空字符串)</td>\n<td style=\"text-align:left\">默认值，等同于<code>text</code>,适用大多数情况。只是设置该值时，才可获取<code>responseText</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">json</td>\n<td style=\"text-align:left\">浏览器会自动调用<code>JSON.parse</code>解析JSON字符串，此时<code>response</code>是一个对象，<strong>不是字符串</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">blob</td>\n<td style=\"text-align:left\"><code>Blob</code>对象，二进制对象，请求图片，下载文件等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">document</td>\n<td style=\"text-align:left\"><code>Document</code> 对象，文档对象，HTML/XML文档对象等，收到返回值后不用解析HTML字符串，直接进行DOM操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">arraybuffer</td>\n<td style=\"text-align:left\"><code>ArrayBuffer</code>对象,二进制数组</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"responsetext\"><a class=\"markdownIt-Anchor\" href=\"#responsetext\"></a> responseText</h4>\n<p>返回值类型是<code>String</code>，可用这个属性获取。也就是说 <code>responseType</code>设置<code>text</code>或者<code>''</code>，<code>response</code>和<code>responseText</code>是相同的。</p>\n<h4 id=\"responsexml\"><a class=\"markdownIt-Anchor\" href=\"#responsexml\"></a> responseXML</h4>\n<p>返回值时 HMTL 或者 XML 对象，可用该属性获取，只读。该属性生效的前提是，响应头信息 <code>Content-Type</code>为 <code>text/xml</code>或者<code>application/xml</code>,这要求，发送请求前，将<code>responseType</code>设置为<code>document</code>。如果响应头信息\t<code>Content-Type</code>不为 <code>text/xml</code>或者<code>application/xml</code>，就需要手动调用<code>overrideMimeType('text/xml')</code>，强制进行XML解析。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">http.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'/'</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">http.responseType = <span class=\"string\">'document'</span>;</span><br><span class=\"line\">http.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(http.reaydState === <span class=\"number\">4</span> &amp;&amp; http.status  === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(http.responseXML);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"responseurl\"><a class=\"markdownIt-Anchor\" href=\"#responseurl\"></a> responseURL</h4>\n<p>只读，返回数据的服务器的url。和 open 里的 url 不一定相同，不含锚点。</p>\n<h4 id=\"status-statustext\"><a class=\"markdownIt-Anchor\" href=\"#status-statustext\"></a> status statusText</h4>\n<p><code>status</code>一个整数，表示 HTTP 的状态码，只读，发出请求前，为\t0。<br>\n<code>statusText</code>是状态信息，只读，无返回状态信息，默认 <code>OK</code>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">status</th>\n<th style=\"text-align:center\">statusText</th>\n<th style=\"text-align:center\">状态</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">200</td>\n<td style=\"text-align:center\">OK</td>\n<td style=\"text-align:center\">成功返回</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">301</td>\n<td style=\"text-align:center\">Moved Permanently</td>\n<td style=\"text-align:center\">永久移动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">302</td>\n<td style=\"text-align:center\">Moved Temporarily</td>\n<td style=\"text-align:center\">暂时移动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">304</td>\n<td style=\"text-align:center\">Not Modified</td>\n<td style=\"text-align:center\">未修改</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">307</td>\n<td style=\"text-align:center\">Temporary Redirect</td>\n<td style=\"text-align:center\">暂时重定向</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">400</td>\n<td style=\"text-align:center\">Bad request</td>\n<td style=\"text-align:center\">无效请求</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">401</td>\n<td style=\"text-align:center\">Unauthorized</td>\n<td style=\"text-align:center\">未授权</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">403</td>\n<td style=\"text-align:center\">Forbindden</td>\n<td style=\"text-align:center\">禁止访问</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">404</td>\n<td style=\"text-align:center\">Not Found</td>\n<td style=\"text-align:center\">未找到</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">405</td>\n<td style=\"text-align:center\">Method not allowed</td>\n<td style=\"text-align:center\">方法不被允许</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">500</td>\n<td style=\"text-align:center\">Internal server error</td>\n<td style=\"text-align:center\">服务器内部出错</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">503</td>\n<td style=\"text-align:center\">Service unavailable</td>\n<td style=\"text-align:center\">服务不可用</td>\n</tr>\n</tbody>\n</table>\n<p>基本上 2xx和 304，返回正常。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(http.readyState ===<span class=\"number\">4</span> )&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((http.status &gt;= <span class=\"number\">200</span> &amp;&amp; http.status &lt; <span class=\"number\">300</span>)||(http.status === <span class=\"number\">304</span>))&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//处理返回数据</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回出错</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"timeout-ontimeout\"><a class=\"markdownIt-Anchor\" href=\"#timeout-ontimeout\"></a> timeout  ontimeout</h4>\n<p><code>timeout</code>属性是一个整数，表示多少<code>毫秒</code>后，如果请求还未返回，就会自动终止。触发<code>timeout</code>事件， 为 0 ，表示无时间限制，不是整数，会先转换，成数字，转换失败，则不生效。<br>\n<code>ontimeout</code>指向一个函数，<code>timeout</code>触发，就执行该函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">http.ontimeout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'请求超时'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.onload =  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(http.readyState === <span class=\"number\">4</span> &amp;&amp; http.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//正常返回</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(http.statusText);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'/users/12132'</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">http.timeout = <span class=\"number\">1000</span>*<span class=\"number\">10</span>;<span class=\"comment\">// 10 秒超时</span></span><br><span class=\"line\">http.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"withcredentials\"><a class=\"markdownIt-Anchor\" href=\"#withcredentials\"></a> withCredentials</h4>\n<p>一个布尔值，表示跨域请求时，用户信息（Cookie、认证的 http 头信息）是否会包含在请求中，默认<code>false</code>。同源请求不需要设置。为了使得该属性生效，必须返回头信息 <code>Access-Control-Allow-Credentials</code>且值为\t<code>true</code>。<br>\n打开了，跨域会发送 cookie，还会设置Cookie。</p>\n<h4 id=\"upload-用-ajax-发送文件\"><a class=\"markdownIt-Anchor\" href=\"#upload-用-ajax-发送文件\"></a> upload 用 AJAX 发送文件</h4>\n<p>xhr 不仅可以发送请求，还可发送送文件。发送文件后，<code>upload</code>属性可得到一个对象，通过该对象，可监听该对象的各个事件得到上传状态。<br>\n显示上传进度：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">progress</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>&gt;</span>0% complete<span class=\"tag\">&lt;/<span class=\"name\">progress</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>监听<code>upload</code>对象的<code>progress</code>事件，可得到上传进度：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uploadFile</span>(<span class=\"params\">&#123;blodOrFile=null,type=<span class=\"string\">'json'</span>&#125;</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">\thttp.open(<span class=\"string\">'POST'</span>,<span class=\"string\">'/srever'</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">\thttp.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> progressBar = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'progress'</span>);</span><br><span class=\"line\">\thttp.upload.onprogress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(event.lengthComputable)&#123;</span><br><span class=\"line\">\t\t\tprogressBar.value = (event.load / event.total)*<span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 兼容老式浏览器</span></span><br><span class=\"line\">\t\t\tprogressBar.textContent = progressBar.value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thttp.send(blodOrFile);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">uploadFile(&#123;<span class=\"attr\">blodOrFile</span>:<span class=\"keyword\">new</span> Blod([<span class=\"string\">'hello ajax'</span>])&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件属性\"><a class=\"markdownIt-Anchor\" href=\"#事件属性\"></a> 事件属性</h3>\n<p>可监听 xhr 的以下事件：<strong>书写顺序为触发顺序，监听这些事件，必须在send之前进行</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">事件</th>\n<th style=\"text-align:left\">何时触发</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">onloadstart</td>\n<td style=\"text-align:center\">loadstart</td>\n<td style=\"text-align:left\">请求发出,在 <code>readyState == 1</code> 和 <code>readyState == 2</code>之间,onloadstart 默认传入 progressEvent 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onprogress</td>\n<td style=\"text-align:center\">progress</td>\n<td style=\"text-align:left\">正在发送或者加载返回的数据,onprogress 默认传入progressEvent对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onabort</td>\n<td style=\"text-align:center\">abort</td>\n<td style=\"text-align:left\">终止请求，比如调用<code>abort</code>，调用该方法，readyState 被设置为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onerror</td>\n<td style=\"text-align:center\">error</td>\n<td style=\"text-align:left\">请求<code>失败</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ontimeout</td>\n<td style=\"text-align:center\">timeout</td>\n<td style=\"text-align:left\">请求<code>超时</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onload</td>\n<td style=\"text-align:center\">load</td>\n<td style=\"text-align:left\">请求<code>成功</code>，以上四个事件互斥，触发0次或者1次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onloadend</td>\n<td style=\"text-align:center\">loadend</td>\n<td style=\"text-align:left\">请求<code>完成</code>,可能成功，可能失败。<strong>abort</strong>、<strong>load</strong>、<strong>timeout</strong>、<strong>readtState=4</strong>都会伴随着<strong>loadend</strong>,onloadend 默认传入 progressEvent 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onreadystatechange</td>\n<td style=\"text-align:center\">readystatechange</td>\n<td style=\"text-align:left\">xhr状态，监听该事件，可得知请求是否<code>完成</code>，这个属性时<code>xhr</code>特有的，其他属性时<code>xhr.upload</code>和<code>xhr</code>共有的</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> responseText = xhr.responseText;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(responseText);</span><br><span class=\"line\"> <span class=\"comment\">// process the response.</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">http.onabort = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'The request was aborted'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// `只有 onprogress 有一个事件参数`</span></span><br><span class=\"line\">http.onprogress = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.loaded);<span class=\"comment\">//已返回的数据量</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.total);<span class=\"comment\">//返回的总数据量</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.lengthComputable);<span class=\"comment\">//加载进度是否可计算</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleError</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'There was an error!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">http.addEventListener(<span class=\"string\">'error'</span>, handleError);</span><br></pre></td></tr></table></figure>\n<h3 id=\"onload-vs-onreadystatechange\"><a class=\"markdownIt-Anchor\" href=\"#onload-vs-onreadystatechange\"></a> onload vs onreadyStateChange</h3>\n<p>处理返回值，是在 <strong>onload</strong>还是在<strong>onreadyStateChange</strong>?</p>\n<p>onload 等于 <code>readyState==4 &amp;&amp; xhr.status===200</code></p>\n<p>loadend 事件的触发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onreadystatechange</span><br><span class=\"line\">    readyState === <span class=\"number\">4</span></span><br><span class=\"line\">             ⇓</span><br><span class=\"line\">onload / onerror / onabort</span><br><span class=\"line\">             ⇓</span><br><span class=\"line\">        onloadend</span><br></pre></td></tr></table></figure>\n<p>使用 <code>onerror</code>并且不考虑老式浏览器，<code>推荐</code>用 <code>onload</code>而不用<code>onreadySateChange</code>。</p>\n<h3 id=\"实例方法\"><a class=\"markdownIt-Anchor\" href=\"#实例方法\"></a> 实例方法</h3>\n<h4 id=\"open\"><a class=\"markdownIt-Anchor\" href=\"#open\"></a> open</h4>\n<p>在<code>open</code>方法中指定请求参数，返回值为<code>undefined</code>。<br>\n<code>opend(METHOD,URL,isAsync,user,password)</code>,user 和 password 可选，统一请求，再次用<code>open</code>，就等同于调用<code>abort</code>。一般 URL 需要用 <code>encodeURI</code>或<code>encodeURICompent</code>编码。</p>\n<h4 id=\"get-请求绕过缓存\"><a class=\"markdownIt-Anchor\" href=\"#get-请求绕过缓存\"></a> GET 请求绕过缓存</h4>\n<p>GET 请求会缓存，在 url 后面加时间戳可绕过缓存。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//foo.com/bar.html -&gt; http://foo.com/bar.html?12345</span></span><br><span class=\"line\">http:<span class=\"comment\">//foo.com/bar.html?foobar=baz -&gt; http://foo.com/bar.html?foobar=baz&amp;12345</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> oReq = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">oReq.open(<span class=\"string\">\"GET\"</span>, url + ((<span class=\"regexp\">/\\?/</span>).test(url) ? <span class=\"string\">\"&amp;\"</span> : <span class=\"string\">\"?\"</span>) + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).getTime());</span><br><span class=\"line\">oReq.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"send\"><a class=\"markdownIt-Anchor\" href=\"#send\"></a> send</h4>\n<p>send 用于发送数据，可发发送多种类型的数据。<br>\n<code>String</code>、<code>Bold</code>、<code>Document</code>、<code>Formdata</code>、<code>ArrayBuffer</code>、<code>null</code>。</p>\n<p>发送表单数据：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">'registration'</span> <span class=\"attr\">name</span>=<span class=\"string\">'registration'</span> <span class=\"attr\">action</span>=<span class=\"string\">'/register'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'username'</span> <span class=\"attr\">value</span>=<span class=\"string\">'张三'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'email'</span> <span class=\"attr\">name</span>=<span class=\"string\">'email'</span> <span class=\"attr\">value</span>=<span class=\"string\">'zhangsan@example.com'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'number'</span> <span class=\"attr\">name</span>=<span class=\"string\">'birthDate'</span> <span class=\"attr\">value</span>=<span class=\"string\">'1940'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'submit'</span> <span class=\"attr\">onclick</span>=<span class=\"string\">'return sendForm(this.form);'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendForm</span>(<span class=\"params\">form</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(form);<span class=\"comment\">//对表单进行加工</span></span><br><span class=\"line\">  formData.append(<span class=\"string\">'csrf'</span>, <span class=\"string\">'e69a18d7db1286040586e6da1950128c'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">  xhr.open(<span class=\"string\">'POST'</span>, form.action, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  xhr.send(formData);<span class=\"comment\">//发送</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#registration'</span>);</span><br><span class=\"line\">sendForm(form);</span><br></pre></td></tr></table></figure>\n<h4 id=\"setrequestheaderfiledvalue\"><a class=\"markdownIt-Anchor\" href=\"#setrequestheaderfiledvalue\"></a> setRequestHeader(filed,value)</h4>\n<p>设置请求头信息，open 之后，send 之前调用。</p>\n<h4 id=\"overridemimetype\"><a class=\"markdownIt-Anchor\" href=\"#overridemimetype\"></a> overrideMimeType()</h4>\n<p>重新设置服务器返回的数据类型，必须在 send 之前调用。</p>\n<h4 id=\"getresponseheaderfiledstring\"><a class=\"markdownIt-Anchor\" href=\"#getresponseheaderfiledstring\"></a> getResponseHeader(filed):String</h4>\n<p>获取某个响应头信息，参数不区分大小写。</p>\n<h4 id=\"getresponseheadersstring\"><a class=\"markdownIt-Anchor\" href=\"#getresponseheadersstring\"></a> getResponseHeaders():String</h4>\n<p>获取所有响应头信息，每个头信息之间用 <code>\\r\\n</code>(换行)分割。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date: Fri, <span class=\"number\">08</span> Dec <span class=\"number\">2017</span> <span class=\"number\">21</span>:<span class=\"number\">04</span>:<span class=\"number\">30</span> GMT\\r\\n</span><br><span class=\"line\">content-encoding: gzip\\r\\n</span><br><span class=\"line\">x-content-type-options: nosniff\\r\\n</span><br><span class=\"line\">server: meinheld/<span class=\"number\">0.6</span><span class=\"number\">.1</span>\\r\\n</span><br><span class=\"line\">x-frame-options: DENY\\r\\n</span><br><span class=\"line\">content-type: text/html; charset=utf<span class=\"number\">-8</span>\\r\\n</span><br><span class=\"line\">connection: keep-alive\\r\\n</span><br><span class=\"line\">strict-transport-security: max-age=<span class=\"number\">63072000</span>\\r\\n</span><br><span class=\"line\">vary: Cookie, Accept-Encoding\\r\\n</span><br><span class=\"line\">content-length: <span class=\"number\">6502</span>\\r\\n</span><br><span class=\"line\">x-xss-protection: <span class=\"number\">1</span>; mode=block\\r\\n</span><br></pre></td></tr></table></figure>\n<p>处理头信息：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = headers.trim().split(<span class=\"regexp\">/[\\r\\n]+/</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> headerMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">line</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parts = line.split(<span class=\"string\">': '</span>);<span class=\"comment\">//注意 '' </span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> header = parts.shift();<span class=\"comment\">//删除第一个元素，原数组改变，随便获取到 头字段。一举两得，妙</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = parts.join(<span class=\"string\">': '</span>);<span class=\"comment\">//\\r\\n 去哪儿了</span></span><br><span class=\"line\">  headerMap[header] = value;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">headerMap[<span class=\"string\">'content-length'</span>] <span class=\"comment\">// \"6502\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"abort\"><a class=\"markdownIt-Anchor\" href=\"#abort\"></a> abort</h4>\n<p>终止请求，使得 <code>readyState</code>为 4，<code>status</code>为 0。</p>\n<h2 id=\"页面卸载时发送数据\"><a class=\"markdownIt-Anchor\" href=\"#页面卸载时发送数据\"></a> 页面卸载时发送数据</h2>\n<p>在页面卸载时发送数据，即在<code>unload</code>或者<code>beforeunload</code>的监听函数里，发送AJAX，但是不可靠。xhr 是异步的，可能在发送数据时，页面就卸载了，可打发送失败，那么用同步发送，但是同步发送数据，很多浏览器不支持，同步发送，用户体验不好。</p>\n<p>用 <code>Navigator.sendBeacon(url,data)</code>，该方法与当前页面脱钩，作为浏览器任务，能保证把数据发出去。data 可以是字符串、表单对象、二进制对象等，返回 布尔值，true 说明发送成功，<code>可跨域</code>，<code>POST</code>，比较多的先进浏览器支持。<br>\n请求头信息 <code>Content-Type</code>根据发送的 data 类型设置，且不能设置其他头字段。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">data</th>\n<th style=\"text-align:center\">Content-Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Blod</td>\n<td style=\"text-align:center\">Blod</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">formData</td>\n<td style=\"text-align:center\">multipart/form-data</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">text/plain</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// HTML 代码如下</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"analytics('start')\"</span> <span class=\"attr\">onunload</span>=<span class=\"string\">\"analytics('end')\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JS:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">analytics</span>(<span class=\"params\">state</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!navigator.sendBeacon) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> URL = <span class=\"string\">'http://example.com/analytics'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">'state='</span> + state + <span class=\"string\">'&amp;location='</span> + <span class=\"built_in\">window</span>.location;</span><br><span class=\"line\">  navigator.sendBeacon(URL, data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> headers = &#123;<span class=\"attr\">type</span>: <span class=\"string\">'application/json'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob(request, headers);</span><br><span class=\"line\">navigator.sendBeacon(<span class=\"string\">'url/to/send'</span>, blob);</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于-formdata-对象\"><a class=\"markdownIt-Anchor\" href=\"#关于-formdata-对象\"></a> 关于 formData 对象</h2>\n<p>xhr2 提供了 FormData 对象，为表单序列化和创建与表单相同的数据提供了便利。<br>\n其主要用于发送表单数据，也可构造与表单相同的数据，还可以发送文件。</p>\n<ul>\n<li><strong>formdata 发送表单</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData();<span class=\"comment\">//创建 formData 对象</span></span><br><span class=\"line\">formData.append(<span class=\"string\">'name'</span>,<span class=\"string\">'jack'</span>);<span class=\"comment\">//添加表单项</span></span><br><span class=\"line\">xhr.send(formData);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"user-info\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"user-name\"</span>&gt;</span>姓名:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"user-name\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user-name\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"user-email\"</span>&gt;</span>Email:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"user-email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user-email\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"submitData()\"</span> /&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">       <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">submitData</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">           <span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span></span><br><span class=\"line\"><span class=\"actionscript\">           http.open(<span class=\"string\">\"post\"</span>, <span class=\"string\">\"formdata\"</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">           http.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(event)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">               <span class=\"keyword\">if</span> (http.readyState == <span class=\"number\">4</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                   <span class=\"keyword\">if</span> (http.status == <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                       <span class=\"built_in\">console</span>.log(http.responseText);</span></span><br><span class=\"line\"><span class=\"actionscript\">                   &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                       alert(<span class=\"string\">\"Request was unsuccessful: \"</span> + http.status);</span></span><br><span class=\"line\"><span class=\"undefined\">                   &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">               &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">           &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"user-info\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">           <span class=\"keyword\">var</span> formdata = <span class=\"keyword\">new</span> FormData(form);<span class=\"comment\">//用表单初始化一个 FormData 对象</span></span></span><br><span class=\"line\"><span class=\"actionscript\">           formdata.append(<span class=\"string\">'额外字段'</span>, <span class=\"number\">123</span>);<span class=\"comment\">//字段值不是字符串，会转为字符串</span></span></span><br><span class=\"line\"><span class=\"undefined\">           http.send(formdata);</span></span><br><span class=\"line\"><span class=\"undefined\">       &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">   </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>请求头信息：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryoCpZL9koEpmlasTW</span><br></pre></td></tr></table></figure>\n<p>请求体信息：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------WebKitFormBoundaryoCpZL9koEpmlasTW</span><br><span class=\"line\">Content-Disposition: form-data; name=<span class=\"string\">\"user-name\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">afafa</span><br><span class=\"line\">------WebKitFormBoundaryoCpZL9koEpmlasTW</span><br><span class=\"line\">Content-Disposition: form-data; name=<span class=\"string\">\"user-email\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">afafa@<span class=\"number\">163.</span>com</span><br><span class=\"line\">------WebKitFormBoundaryoCpZL9koEpmlasTW</span><br><span class=\"line\">Content-Disposition: form-data; name=<span class=\"string\">\"额外字段\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">123</span></span><br><span class=\"line\">------WebKitFormBoundaryoCpZL9koEpmlasTW--</span><br></pre></td></tr></table></figure>\n<p>和表单<code>enctype=&quot;multipart/form-data&quot;</code>提交一样的。<br>\n用 express 处理提交，服务端：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * formData 上传表单</span></span><br><span class=\"line\"><span class=\"comment\"> * bodyParser 不能处理 formData 数据，需要额外的中间件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> multer = <span class=\"built_in\">require</span>(<span class=\"string\">'multer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> upload = multer();</span><br><span class=\"line\">app.post(<span class=\"string\">\"/formdata\"</span>, upload.fields([]), (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(req[<span class=\"string\">'body'</span>]);</span><br><span class=\"line\">    res.json(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>formdata 上传文件</strong> TODO 如何用 express 接收呢？<br>\n客户端：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileinfo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Your email address:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"on\"</span> <span class=\"attr\">autofocus</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userid\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">required</span> <span class=\"attr\">size</span>=<span class=\"string\">\"32\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"64\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Custom file label:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"filelabel\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"12\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"32\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>File to stash:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Stash the file!\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"待完成\"><a class=\"markdownIt-Anchor\" href=\"#待完成\"></a> 待完成</h2>\n<ul>\n<li>formData 对象</li>\n<li>浏览器 Blod</li>\n<li>arrayBuffer</li>\n</ul>\n<h2 id=\"xhr-封装\"><a class=\"markdownIt-Anchor\" href=\"#xhr-封装\"></a> xhr 封装</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * options = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\turl\t\t提交请求的url</span></span><br><span class=\"line\"><span class=\"comment\">\t\tmethod\t请求的类型，默认为GET</span></span><br><span class=\"line\"><span class=\"comment\">        data\t请求体的数据</span></span><br><span class=\"line\"><span class=\"comment\">        cache   是否缓存数据，默认为false</span></span><br><span class=\"line\"><span class=\"comment\">\t\tasync\t是否以异步方式进行，默认为true </span></span><br><span class=\"line\"><span class=\"comment\">\t\tsuccess\t成功后的处理方法</span></span><br><span class=\"line\"><span class=\"comment\">\t\terror\t失败后的处理方法</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = options || &#123;&#125;;</span><br><span class=\"line\">    options.method = options.method.toUpperCase() || <span class=\"string\">'GET'</span>;</span><br><span class=\"line\">    options.async = options.async || <span class=\"literal\">true</span>;</span><br><span class=\"line\">    options.cache = options.cache || <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 格式化参数的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> getParams = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (param <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//查询字符串中每个参数的名称和值都必须使用 encodeURIComponent()进行编码</span></span><br><span class=\"line\">            arr.push(<span class=\"built_in\">encodeURIComponent</span>(param) + <span class=\"string\">\"=\"</span> + <span class=\"built_in\">encodeURIComponent</span>(data[param]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在 url 末尾加上一个随机数，避免相同值使用 IE 缓存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options[<span class=\"string\">'cache'</span>]) &#123;</span><br><span class=\"line\">            arr.push((<span class=\"string\">\"randomNum=\"</span> + <span class=\"built_in\">Math</span>.random()).replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回带有 &amp; 的查询字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr.join(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = getParams(options[<span class=\"string\">'data'</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    http.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (http.status === <span class=\"number\">200</span> || http.status === <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 成功</span></span><br><span class=\"line\">            options.success &amp;&amp; options.success(http.response);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 失败</span></span><br><span class=\"line\">            options.fail &amp;&amp; options.fail(http.status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (options[<span class=\"string\">'method'</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'GET'</span>:</span><br><span class=\"line\">            http.open(<span class=\"string\">\"GET\"</span>, options[<span class=\"string\">'url'</span>] + <span class=\"string\">\"?\"</span> + params, options[<span class=\"string\">'async'</span>]);</span><br><span class=\"line\">            <span class=\"comment\">// 发送请求</span></span><br><span class=\"line\">            http.send(<span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">            http.open(<span class=\"string\">'POST'</span>, options[<span class=\"string\">'url'</span>], options[<span class=\"string\">'async'</span>]);</span><br><span class=\"line\">            http.setRequestHeader(<span class=\"string\">'content-type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\">            http.send(params)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'不支持的方法'</span>);</span><br><span class=\"line\">            <span class=\"comment\">//<span class=\"doctag\">TODO:</span> 如何支持其他方法？</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>promise 版本：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">http</span>(<span class=\"params\">&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  url = <span class=\"string\">''</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  method = <span class=\"string\">'get'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  data = &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  dataType = <span class=\"string\">'multipart'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  responseType = <span class=\"string\">'json'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  headers = &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> body = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  method = method.toUpperCase();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!url) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'url是必需参数！'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">xhr</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    http.responseType = responseType;</span><br><span class=\"line\">    http.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"number\">200</span> == http.status || <span class=\"number\">304</span> === http.status) &#123;</span><br><span class=\"line\">        resolve(http.response);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(http.statusText);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    http.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method.toLowerCase()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'get'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">var</span> queryString = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">JSON</span>.stringify(data) !== <span class=\"string\">'&#123;&#125;'</span>) &#123;</span><br><span class=\"line\">          queryString = <span class=\"built_in\">Object</span>.keys(data)</span><br><span class=\"line\">            .map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"built_in\">encodeURIComponent</span>(key) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(data[key]);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .join(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (queryString) &#123;</span><br><span class=\"line\">          url += <span class=\"string\">'?'</span> + queryString;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        http.open(<span class=\"string\">'GET'</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'post'</span>:</span><br><span class=\"line\">        http.open(<span class=\"string\">'POST'</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">'json'</span> === dataType) &#123;</span><br><span class=\"line\">          body = <span class=\"built_in\">JSON</span>.stringify(data);</span><br><span class=\"line\">          http.setRequestHeader(<span class=\"string\">'content-type'</span>, <span class=\"string\">'application/json;charset=UTF-8'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'urlencoded'</span> === dataType) &#123;</span><br><span class=\"line\">          body = <span class=\"built_in\">Object</span>.keys(data)</span><br><span class=\"line\">            .map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"built_in\">encodeURIComponent</span>(key) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(data[key]);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .join(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">          http.setRequestHeader(<span class=\"string\">'content-type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">'xml'</span> === dataType) &#123;</span><br><span class=\"line\">          http.setRequestHeader(<span class=\"string\">'content-type'</span>, <span class=\"string\">'text/xml'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          body = data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(headers)) &#123;</span><br><span class=\"line\">      http.setRequestHeader(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    http.send(body);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(xhr);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<ul>\n<li><a href=\"https://wangdoc.com/javascript/bom/xmlhttprequest.html\" target=\"_blank\" rel=\"noopener\">XMLHttpRequest 对象 - JavaScript 教程 - 网道</a></li>\n<li><a href=\"https://stackoverflow.com/questions/40523469/navigator-sendbeacon-to-pass-header-information\" target=\"_blank\" rel=\"noopener\">Navigator.sendBeacon() to pass header information</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9181090/is-onload-equal-to-readystate-4-in-xmlhttprequest\" target=\"_blank\" rel=\"noopener\">Is onload equal to readyState==4 in XMLHttpRequest?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/30522565/what-is-meaning-of-xhr-readystate-4\" target=\"_blank\" rel=\"noopener\">What is meaning of xhr.readystate===4</a></li>\n<li><a href=\"https://zqzhang.github.io/blog/2016/04/18/why-use-onload-in-cross-domain-ajax.html\" target=\"_blank\" rel=\"noopener\">Why Use onload in Cross-domain Ajax</a></li>\n<li><a href=\"https://xhr.spec.whatwg.org/#progressevent\" target=\"_blank\" rel=\"noopener\">XMLHttpRequest Living Standard — Last Updated 28 November 2018</a></li>\n</ul>"},{"title":"几种重定向","date":"2019-06-16T09:51:16.000Z","_content":"\n## 几种重定向\n\n总结几种重定向的区别。\n\n<!--more-->\n\n[TOC]\n\n## 307 Temporary Redirect(临时重定向)\n\n通过响应头字段`Location`告诉浏览器资源暂时移动到别处，原来的方法和消息被用用来先新的URL发送请求。\n307和302之间的唯一区别在于307该方法和主体将不会被重定向的请求时改变保证。使用302，一些老客户错误地将方法改变为GET：使用非GET方法的行为，然后302在Web上不可预知，而使用307的行为则是可预测的。对于GET请求，它们的行为是相同的。\n\n## 301 Moved Permanently（永久移动）\n资源已明确**移动**到`Location`标题给定的URL。浏览器重定向到这个页面，搜索引擎更新它们到资源的链接。规范要求方法和主体在执行重定向时**不会被更改**，但并非所有浏览器都与它一致。推荐**301**仅作为响应**GET**或**HEAD**方法，在其他方法下使用`301`,必须向用户询问是否重定向。\n\n对于GET方法，chrome 和火狐浏览器，会使用`GET`再次向Location地址发起请求，但是远程IP却是原来的,响应状态码为`301`，其他请求头信息两者不仅相同。\n可使用`308`代替301，因为 308 下明确禁止更改请求方法。会使用`GET`再次向Location地址发起请求，但是远程IP却是原来的,狐火的响应状态是 `Connection Established`，chrome 是`301`,其他头信息也有差别。\n\n## 302 Found（找到）\n资源已明确**移动**到`Location`标题给定的URL。浏览器重定向到这个页面，搜索引擎`不会`更新它们到资源的链接。规范要求方法和主体在执行重定向时**不会被更改**，但并非所有浏览器都与它一致。建议设置302代码仅作为一个响应GET或HEAD方法和想要明确禁止更改方法，使用**307 Temporary Redirect**代替。\n想要改变方法的情况下，改为GET使用`303 See Also`，这样如果你想给`PUT`请求一个确认信息，改了`303`就很有用了。\n\n## 303 See Other（见其他）\n**HTTP 303 See Other**重定向状态响应代码（通常作为一个 **PUT**或**POST**操作的结果发回）表示重定向不链接到新上载的资源，而是链接到其他页面，如确认页面或上载进度页面。用于显示此重定向页面的方法始终是GET。\n[重定向](https://itbilu.com/nodejs/npm/EJD5cyg3l.html)","source":"_posts/几种重定向.md","raw":"---\ntitle: 几种重定向\ndate: 2019-06-16 17:51:16\ntags:\n- 网络\ncategories:\n- [网络]\n---\n\n## 几种重定向\n\n总结几种重定向的区别。\n\n<!--more-->\n\n[TOC]\n\n## 307 Temporary Redirect(临时重定向)\n\n通过响应头字段`Location`告诉浏览器资源暂时移动到别处，原来的方法和消息被用用来先新的URL发送请求。\n307和302之间的唯一区别在于307该方法和主体将不会被重定向的请求时改变保证。使用302，一些老客户错误地将方法改变为GET：使用非GET方法的行为，然后302在Web上不可预知，而使用307的行为则是可预测的。对于GET请求，它们的行为是相同的。\n\n## 301 Moved Permanently（永久移动）\n资源已明确**移动**到`Location`标题给定的URL。浏览器重定向到这个页面，搜索引擎更新它们到资源的链接。规范要求方法和主体在执行重定向时**不会被更改**，但并非所有浏览器都与它一致。推荐**301**仅作为响应**GET**或**HEAD**方法，在其他方法下使用`301`,必须向用户询问是否重定向。\n\n对于GET方法，chrome 和火狐浏览器，会使用`GET`再次向Location地址发起请求，但是远程IP却是原来的,响应状态码为`301`，其他请求头信息两者不仅相同。\n可使用`308`代替301，因为 308 下明确禁止更改请求方法。会使用`GET`再次向Location地址发起请求，但是远程IP却是原来的,狐火的响应状态是 `Connection Established`，chrome 是`301`,其他头信息也有差别。\n\n## 302 Found（找到）\n资源已明确**移动**到`Location`标题给定的URL。浏览器重定向到这个页面，搜索引擎`不会`更新它们到资源的链接。规范要求方法和主体在执行重定向时**不会被更改**，但并非所有浏览器都与它一致。建议设置302代码仅作为一个响应GET或HEAD方法和想要明确禁止更改方法，使用**307 Temporary Redirect**代替。\n想要改变方法的情况下，改为GET使用`303 See Also`，这样如果你想给`PUT`请求一个确认信息，改了`303`就很有用了。\n\n## 303 See Other（见其他）\n**HTTP 303 See Other**重定向状态响应代码（通常作为一个 **PUT**或**POST**操作的结果发回）表示重定向不链接到新上载的资源，而是链接到其他页面，如确认页面或上载进度页面。用于显示此重定向页面的方法始终是GET。\n[重定向](https://itbilu.com/nodejs/npm/EJD5cyg3l.html)","slug":"几种重定向","published":1,"updated":"2019-06-16T10:19:06.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccg50020jwrnftz5l8es","content":"<h2 id=\"几种重定向\"><a class=\"markdownIt-Anchor\" href=\"#几种重定向\"></a> 几种重定向</h2>\n<p>总结几种重定向的区别。</p>\n<a id=\"more\"></a>\n<p>[TOC]</p>\n<h2 id=\"307-temporary-redirect临时重定向\"><a class=\"markdownIt-Anchor\" href=\"#307-temporary-redirect临时重定向\"></a> 307 Temporary Redirect(临时重定向)</h2>\n<p>通过响应头字段<code>Location</code>告诉浏览器资源暂时移动到别处，原来的方法和消息被用用来先新的URL发送请求。<br>\n307和302之间的唯一区别在于307该方法和主体将不会被重定向的请求时改变保证。使用302，一些老客户错误地将方法改变为GET：使用非GET方法的行为，然后302在Web上不可预知，而使用307的行为则是可预测的。对于GET请求，它们的行为是相同的。</p>\n<h2 id=\"301-moved-permanently永久移动\"><a class=\"markdownIt-Anchor\" href=\"#301-moved-permanently永久移动\"></a> 301 Moved Permanently（永久移动）</h2>\n<p>资源已明确<strong>移动</strong>到<code>Location</code>标题给定的URL。浏览器重定向到这个页面，搜索引擎更新它们到资源的链接。规范要求方法和主体在执行重定向时<strong>不会被更改</strong>，但并非所有浏览器都与它一致。推荐<strong>301</strong>仅作为响应<strong>GET</strong>或<strong>HEAD</strong>方法，在其他方法下使用<code>301</code>,必须向用户询问是否重定向。</p>\n<p>对于GET方法，chrome 和火狐浏览器，会使用<code>GET</code>再次向Location地址发起请求，但是远程IP却是原来的,响应状态码为<code>301</code>，其他请求头信息两者不仅相同。<br>\n可使用<code>308</code>代替301，因为 308 下明确禁止更改请求方法。会使用<code>GET</code>再次向Location地址发起请求，但是远程IP却是原来的,狐火的响应状态是 <code>Connection Established</code>，chrome 是<code>301</code>,其他头信息也有差别。</p>\n<h2 id=\"302-found找到\"><a class=\"markdownIt-Anchor\" href=\"#302-found找到\"></a> 302 Found（找到）</h2>\n<p>资源已明确<strong>移动</strong>到<code>Location</code>标题给定的URL。浏览器重定向到这个页面，搜索引擎<code>不会</code>更新它们到资源的链接。规范要求方法和主体在执行重定向时<strong>不会被更改</strong>，但并非所有浏览器都与它一致。建议设置302代码仅作为一个响应GET或HEAD方法和想要明确禁止更改方法，使用<strong>307 Temporary Redirect</strong>代替。<br>\n想要改变方法的情况下，改为GET使用<code>303 See Also</code>，这样如果你想给<code>PUT</code>请求一个确认信息，改了<code>303</code>就很有用了。</p>\n<h2 id=\"303-see-other见其他\"><a class=\"markdownIt-Anchor\" href=\"#303-see-other见其他\"></a> 303 See Other（见其他）</h2>\n<p><strong>HTTP 303 See Other</strong>重定向状态响应代码（通常作为一个 <strong>PUT</strong>或<strong>POST</strong>操作的结果发回）表示重定向不链接到新上载的资源，而是链接到其他页面，如确认页面或上载进度页面。用于显示此重定向页面的方法始终是GET。<br>\n<a href=\"https://itbilu.com/nodejs/npm/EJD5cyg3l.html\" target=\"_blank\" rel=\"noopener\">重定向</a></p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<h2 id=\"几种重定向\"><a class=\"markdownIt-Anchor\" href=\"#几种重定向\"></a> 几种重定向</h2>\n<p>总结几种重定向的区别。</p>","more":"<p>[TOC]</p>\n<h2 id=\"307-temporary-redirect临时重定向\"><a class=\"markdownIt-Anchor\" href=\"#307-temporary-redirect临时重定向\"></a> 307 Temporary Redirect(临时重定向)</h2>\n<p>通过响应头字段<code>Location</code>告诉浏览器资源暂时移动到别处，原来的方法和消息被用用来先新的URL发送请求。<br>\n307和302之间的唯一区别在于307该方法和主体将不会被重定向的请求时改变保证。使用302，一些老客户错误地将方法改变为GET：使用非GET方法的行为，然后302在Web上不可预知，而使用307的行为则是可预测的。对于GET请求，它们的行为是相同的。</p>\n<h2 id=\"301-moved-permanently永久移动\"><a class=\"markdownIt-Anchor\" href=\"#301-moved-permanently永久移动\"></a> 301 Moved Permanently（永久移动）</h2>\n<p>资源已明确<strong>移动</strong>到<code>Location</code>标题给定的URL。浏览器重定向到这个页面，搜索引擎更新它们到资源的链接。规范要求方法和主体在执行重定向时<strong>不会被更改</strong>，但并非所有浏览器都与它一致。推荐<strong>301</strong>仅作为响应<strong>GET</strong>或<strong>HEAD</strong>方法，在其他方法下使用<code>301</code>,必须向用户询问是否重定向。</p>\n<p>对于GET方法，chrome 和火狐浏览器，会使用<code>GET</code>再次向Location地址发起请求，但是远程IP却是原来的,响应状态码为<code>301</code>，其他请求头信息两者不仅相同。<br>\n可使用<code>308</code>代替301，因为 308 下明确禁止更改请求方法。会使用<code>GET</code>再次向Location地址发起请求，但是远程IP却是原来的,狐火的响应状态是 <code>Connection Established</code>，chrome 是<code>301</code>,其他头信息也有差别。</p>\n<h2 id=\"302-found找到\"><a class=\"markdownIt-Anchor\" href=\"#302-found找到\"></a> 302 Found（找到）</h2>\n<p>资源已明确<strong>移动</strong>到<code>Location</code>标题给定的URL。浏览器重定向到这个页面，搜索引擎<code>不会</code>更新它们到资源的链接。规范要求方法和主体在执行重定向时<strong>不会被更改</strong>，但并非所有浏览器都与它一致。建议设置302代码仅作为一个响应GET或HEAD方法和想要明确禁止更改方法，使用<strong>307 Temporary Redirect</strong>代替。<br>\n想要改变方法的情况下，改为GET使用<code>303 See Also</code>，这样如果你想给<code>PUT</code>请求一个确认信息，改了<code>303</code>就很有用了。</p>\n<h2 id=\"303-see-other见其他\"><a class=\"markdownIt-Anchor\" href=\"#303-see-other见其他\"></a> 303 See Other（见其他）</h2>\n<p><strong>HTTP 303 See Other</strong>重定向状态响应代码（通常作为一个 <strong>PUT</strong>或<strong>POST</strong>操作的结果发回）表示重定向不链接到新上载的资源，而是链接到其他页面，如确认页面或上载进度页面。用于显示此重定向页面的方法始终是GET。<br>\n<a href=\"https://itbilu.com/nodejs/npm/EJD5cyg3l.html\" target=\"_blank\" rel=\"noopener\">重定向</a></p>"},{"title":"注册一个美区的 Apple ID","date":"2019-06-25T13:16:01.000Z","_content":"众所周知的原因，app store 某些应用在国内下载不了，需要一个美国的 apple id 才能下载。以前试过，没成功就，就用共享的账号，不仅麻烦，还有安全隐私泄露的隐患，今天又试着注册一个，成功了，记录一下我的操作过程，给需要的人一些指南。\n\n<!--more-->\n\n## 需要准备的东西\n\n- 一个 IP 在美国的梯子；\n- 美国个人信息，使用[fakeaddressgenerato](https://www.fakeaddressgenerator.com/)，生成；\n- chorme 浏览器，需要使用匿名模式；\n- iphone；\n- 邮箱，推荐 gmail；\n- ip检测网站（可选），推荐[ipip](<https://en.ipip.net/>)；\n- 美国信用卡，没有就不能下载付费应用，可选。\n\n## 操作步骤\n\n- 使用梯子，ip 必须在美国的，全局模式访问，为了确保正确，可使用ip检测网站检测一下；\n- 生成假的美国信息，推荐使用免税区的地址\n  - Oregon 俄勒冈、\n  - Alaska 阿拉斯加\n  - Delaware 特拉华州\n  - Montana 蒙大拿 \n  - New Hampshire 新罕布什尔\n  - 目前我还没遇到付款相关问题\n- 浏览器开启匿名模式【Ctrl + Shift + N】，不然苹果会根据你的访记录，不让访问美区的那内容。这里可清除浏览器缓存再开启匿名模式，确保万无一失嘛。\n- 网站苹果网站，正常注册账号就好了，需要填信息，就用刚才的假信息。**以上步骤都顺利，是不要求添加银行卡号的。**\n- 使用新的账号登录 App Store\n- 登录成功后，[改变Apple id 地区](<https://support.apple.com/zh-cn/HT201389>)，使用假信息填写账单信息；\n- App Store 变成英文界面，就可以了。\n- 为了以后方便使用，可以把假信息记录下来，可能以后会用到。\n\n\n\n## 我的美国信息\n\n```js\nBASIC INFORMATION\n\nFull name       \t\tEunice G Gifford\nGender\t    \t\t\tfemale\nTitle\t    \t\t\tMs.\nRace\t    \t\t\tWhite\nBirthday\t\t\t\t7/3/1989\nSocial Security Number\t503-46-3607\n\nADDRESS\n\nStreet \t\t\t\t2509  Hartway Street\nCity \t\t\t\tANTELOPE\nState \t\t\t\tOR\nState Full\t\t\tOregon\nZip Code\t\t\t97001\nPhone Number\t\t605-720-5251\nMobile Number\t\t541-813-5999\nTemporary email\t\tw7v8guupr2c@claimab.com \n```\n\n[This is a real email address, click here to recieve mails](https://www.fakemailgenerator.net/)\n\n貌似以上信息就够了，先保存这么多吧。\n\n","source":"_posts/注册一个美区appleID.md","raw":"---\ntitle: 注册一个美区的 Apple ID\ndate: 2019-06-25 21:16:01\ntags:\n- 数码产品\ncategories:\n- [数字生活]\n---\n众所周知的原因，app store 某些应用在国内下载不了，需要一个美国的 apple id 才能下载。以前试过，没成功就，就用共享的账号，不仅麻烦，还有安全隐私泄露的隐患，今天又试着注册一个，成功了，记录一下我的操作过程，给需要的人一些指南。\n\n<!--more-->\n\n## 需要准备的东西\n\n- 一个 IP 在美国的梯子；\n- 美国个人信息，使用[fakeaddressgenerato](https://www.fakeaddressgenerator.com/)，生成；\n- chorme 浏览器，需要使用匿名模式；\n- iphone；\n- 邮箱，推荐 gmail；\n- ip检测网站（可选），推荐[ipip](<https://en.ipip.net/>)；\n- 美国信用卡，没有就不能下载付费应用，可选。\n\n## 操作步骤\n\n- 使用梯子，ip 必须在美国的，全局模式访问，为了确保正确，可使用ip检测网站检测一下；\n- 生成假的美国信息，推荐使用免税区的地址\n  - Oregon 俄勒冈、\n  - Alaska 阿拉斯加\n  - Delaware 特拉华州\n  - Montana 蒙大拿 \n  - New Hampshire 新罕布什尔\n  - 目前我还没遇到付款相关问题\n- 浏览器开启匿名模式【Ctrl + Shift + N】，不然苹果会根据你的访记录，不让访问美区的那内容。这里可清除浏览器缓存再开启匿名模式，确保万无一失嘛。\n- 网站苹果网站，正常注册账号就好了，需要填信息，就用刚才的假信息。**以上步骤都顺利，是不要求添加银行卡号的。**\n- 使用新的账号登录 App Store\n- 登录成功后，[改变Apple id 地区](<https://support.apple.com/zh-cn/HT201389>)，使用假信息填写账单信息；\n- App Store 变成英文界面，就可以了。\n- 为了以后方便使用，可以把假信息记录下来，可能以后会用到。\n\n\n\n## 我的美国信息\n\n```js\nBASIC INFORMATION\n\nFull name       \t\tEunice G Gifford\nGender\t    \t\t\tfemale\nTitle\t    \t\t\tMs.\nRace\t    \t\t\tWhite\nBirthday\t\t\t\t7/3/1989\nSocial Security Number\t503-46-3607\n\nADDRESS\n\nStreet \t\t\t\t2509  Hartway Street\nCity \t\t\t\tANTELOPE\nState \t\t\t\tOR\nState Full\t\t\tOregon\nZip Code\t\t\t97001\nPhone Number\t\t605-720-5251\nMobile Number\t\t541-813-5999\nTemporary email\t\tw7v8guupr2c@claimab.com \n```\n\n[This is a real email address, click here to recieve mails](https://www.fakemailgenerator.net/)\n\n貌似以上信息就够了，先保存这么多吧。\n\n","slug":"注册一个美区appleID","published":1,"updated":"2019-06-25T13:16:54.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccg70022jwrnexulyt2q","content":"<p>众所周知的原因，app store 某些应用在国内下载不了，需要一个美国的 apple id 才能下载。以前试过，没成功就，就用共享的账号，不仅麻烦，还有安全隐私泄露的隐患，今天又试着注册一个，成功了，记录一下我的操作过程，给需要的人一些指南。</p>\n<a id=\"more\"></a>\n<h2 id=\"需要准备的东西\"><a class=\"markdownIt-Anchor\" href=\"#需要准备的东西\"></a> 需要准备的东西</h2>\n<ul>\n<li>一个 IP 在美国的梯子；</li>\n<li>美国个人信息，使用<a href=\"https://www.fakeaddressgenerator.com/\" target=\"_blank\" rel=\"noopener\">fakeaddressgenerato</a>，生成；</li>\n<li>chorme 浏览器，需要使用匿名模式；</li>\n<li>iphone；</li>\n<li>邮箱，推荐 gmail；</li>\n<li>ip检测网站（可选），推荐<a href=\"https://en.ipip.net/\" target=\"_blank\" rel=\"noopener\">ipip</a>；</li>\n<li>美国信用卡，没有就不能下载付费应用，可选。</li>\n</ul>\n<h2 id=\"操作步骤\"><a class=\"markdownIt-Anchor\" href=\"#操作步骤\"></a> 操作步骤</h2>\n<ul>\n<li>使用梯子，ip 必须在美国的，全局模式访问，为了确保正确，可使用ip检测网站检测一下；</li>\n<li>生成假的美国信息，推荐使用免税区的地址\n<ul>\n<li>Oregon 俄勒冈、</li>\n<li>Alaska 阿拉斯加</li>\n<li>Delaware 特拉华州</li>\n<li>Montana 蒙大拿</li>\n<li>New Hampshire 新罕布什尔</li>\n<li>目前我还没遇到付款相关问题</li>\n</ul>\n</li>\n<li>浏览器开启匿名模式【Ctrl + Shift + N】，不然苹果会根据你的访记录，不让访问美区的那内容。这里可清除浏览器缓存再开启匿名模式，确保万无一失嘛。</li>\n<li>网站苹果网站，正常注册账号就好了，需要填信息，就用刚才的假信息。<strong>以上步骤都顺利，是不要求添加银行卡号的。</strong></li>\n<li>使用新的账号登录 App Store</li>\n<li>登录成功后，<a href=\"https://support.apple.com/zh-cn/HT201389\" target=\"_blank\" rel=\"noopener\">改变Apple id 地区</a>，使用假信息填写账单信息；</li>\n<li>App Store 变成英文界面，就可以了。</li>\n<li>为了以后方便使用，可以把假信息记录下来，可能以后会用到。</li>\n</ul>\n<h2 id=\"我的美国信息\"><a class=\"markdownIt-Anchor\" href=\"#我的美国信息\"></a> 我的美国信息</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BASIC INFORMATION</span><br><span class=\"line\"></span><br><span class=\"line\">Full name       \t\tEunice G Gifford</span><br><span class=\"line\">Gender\t    \t\t\tfemale</span><br><span class=\"line\">Title\t    \t\t\tMs.</span><br><span class=\"line\">Race\t    \t\t\tWhite</span><br><span class=\"line\">Birthday\t\t\t\t<span class=\"number\">7</span>/<span class=\"number\">3</span>/<span class=\"number\">1989</span></span><br><span class=\"line\">Social Security <span class=\"built_in\">Number</span>\t<span class=\"number\">503</span><span class=\"number\">-46</span><span class=\"number\">-3607</span></span><br><span class=\"line\"></span><br><span class=\"line\">ADDRESS</span><br><span class=\"line\"></span><br><span class=\"line\">Street \t\t\t\t<span class=\"number\">2509</span>  Hartway Street</span><br><span class=\"line\">City \t\t\t\tANTELOPE</span><br><span class=\"line\">State \t\t\t\tOR</span><br><span class=\"line\">State Full\t\t\tOregon</span><br><span class=\"line\">Zip Code\t\t\t<span class=\"number\">97001</span></span><br><span class=\"line\">Phone <span class=\"built_in\">Number</span>\t\t<span class=\"number\">605</span><span class=\"number\">-720</span><span class=\"number\">-5251</span></span><br><span class=\"line\">Mobile <span class=\"built_in\">Number</span>\t\t<span class=\"number\">541</span><span class=\"number\">-813</span><span class=\"number\">-5999</span></span><br><span class=\"line\">Temporary email\t\tw7v8guupr2c@claimab.com</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.fakemailgenerator.net/\" target=\"_blank\" rel=\"noopener\">This is a real email address, click here to recieve mails</a></p>\n<p>貌似以上信息就够了，先保存这么多吧。</p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>众所周知的原因，app store 某些应用在国内下载不了，需要一个美国的 apple id 才能下载。以前试过，没成功就，就用共享的账号，不仅麻烦，还有安全隐私泄露的隐患，今天又试着注册一个，成功了，记录一下我的操作过程，给需要的人一些指南。</p>","more":"<h2 id=\"需要准备的东西\"><a class=\"markdownIt-Anchor\" href=\"#需要准备的东西\"></a> 需要准备的东西</h2>\n<ul>\n<li>一个 IP 在美国的梯子；</li>\n<li>美国个人信息，使用<a href=\"https://www.fakeaddressgenerator.com/\" target=\"_blank\" rel=\"noopener\">fakeaddressgenerato</a>，生成；</li>\n<li>chorme 浏览器，需要使用匿名模式；</li>\n<li>iphone；</li>\n<li>邮箱，推荐 gmail；</li>\n<li>ip检测网站（可选），推荐<a href=\"https://en.ipip.net/\" target=\"_blank\" rel=\"noopener\">ipip</a>；</li>\n<li>美国信用卡，没有就不能下载付费应用，可选。</li>\n</ul>\n<h2 id=\"操作步骤\"><a class=\"markdownIt-Anchor\" href=\"#操作步骤\"></a> 操作步骤</h2>\n<ul>\n<li>使用梯子，ip 必须在美国的，全局模式访问，为了确保正确，可使用ip检测网站检测一下；</li>\n<li>生成假的美国信息，推荐使用免税区的地址\n<ul>\n<li>Oregon 俄勒冈、</li>\n<li>Alaska 阿拉斯加</li>\n<li>Delaware 特拉华州</li>\n<li>Montana 蒙大拿</li>\n<li>New Hampshire 新罕布什尔</li>\n<li>目前我还没遇到付款相关问题</li>\n</ul>\n</li>\n<li>浏览器开启匿名模式【Ctrl + Shift + N】，不然苹果会根据你的访记录，不让访问美区的那内容。这里可清除浏览器缓存再开启匿名模式，确保万无一失嘛。</li>\n<li>网站苹果网站，正常注册账号就好了，需要填信息，就用刚才的假信息。<strong>以上步骤都顺利，是不要求添加银行卡号的。</strong></li>\n<li>使用新的账号登录 App Store</li>\n<li>登录成功后，<a href=\"https://support.apple.com/zh-cn/HT201389\" target=\"_blank\" rel=\"noopener\">改变Apple id 地区</a>，使用假信息填写账单信息；</li>\n<li>App Store 变成英文界面，就可以了。</li>\n<li>为了以后方便使用，可以把假信息记录下来，可能以后会用到。</li>\n</ul>\n<h2 id=\"我的美国信息\"><a class=\"markdownIt-Anchor\" href=\"#我的美国信息\"></a> 我的美国信息</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BASIC INFORMATION</span><br><span class=\"line\"></span><br><span class=\"line\">Full name       \t\tEunice G Gifford</span><br><span class=\"line\">Gender\t    \t\t\tfemale</span><br><span class=\"line\">Title\t    \t\t\tMs.</span><br><span class=\"line\">Race\t    \t\t\tWhite</span><br><span class=\"line\">Birthday\t\t\t\t<span class=\"number\">7</span>/<span class=\"number\">3</span>/<span class=\"number\">1989</span></span><br><span class=\"line\">Social Security <span class=\"built_in\">Number</span>\t<span class=\"number\">503</span><span class=\"number\">-46</span><span class=\"number\">-3607</span></span><br><span class=\"line\"></span><br><span class=\"line\">ADDRESS</span><br><span class=\"line\"></span><br><span class=\"line\">Street \t\t\t\t<span class=\"number\">2509</span>  Hartway Street</span><br><span class=\"line\">City \t\t\t\tANTELOPE</span><br><span class=\"line\">State \t\t\t\tOR</span><br><span class=\"line\">State Full\t\t\tOregon</span><br><span class=\"line\">Zip Code\t\t\t<span class=\"number\">97001</span></span><br><span class=\"line\">Phone <span class=\"built_in\">Number</span>\t\t<span class=\"number\">605</span><span class=\"number\">-720</span><span class=\"number\">-5251</span></span><br><span class=\"line\">Mobile <span class=\"built_in\">Number</span>\t\t<span class=\"number\">541</span><span class=\"number\">-813</span><span class=\"number\">-5999</span></span><br><span class=\"line\">Temporary email\t\tw7v8guupr2c@claimab.com</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.fakemailgenerator.net/\" target=\"_blank\" rel=\"noopener\">This is a real email address, click here to recieve mails</a></p>\n<p>貌似以上信息就够了，先保存这么多吧。</p>"},{"title":"跨域请求","date":"2019-06-16T13:16:01.000Z","_content":"一个域上的文档或者脚本试图请求另一个域下的资源，就是跨域。比如\n- 资源跳转：a链接、重定向、表单提交；\n- 资源引入：link、script、img、iframe等标签，css background:url()、font-face;\n\n<!--more-->\n\n[TOC]\n\n## 同源限制--狭义的跨域\n\n同源策略（same origin policy）是一种**浏览器**安全策略，即只允许浏览器向同源的服务器请求资源（*请求还是会发送，服务器也会响应，只是响应被浏览器拦截了*），可避免浏览器遭到xss、csfr等攻击。同源：协议+域名+端口 三者相同，即使不同的域指向同一个ip，也非同源。\n\n同源限制了几种行为：\n- Cookie、LocalStroage 和 IndexDB 无法获取；\n- DOM 和 JS 对象无法获得；\n- AJAX 返回值不能获取。\n\n容易混淆的跨域：\n\nhttp://www.domain.com/a.js\nhttp://192.168.4.12/b.js           域名和域名对应相同ip              不允许\n\nhttp://www.domain.com/a.js\nhttp://x.domain.com/b.js           主域相同，子域不同                不允许\nhttp://domain.com/c.js\n\n## 跨域解决方案\n\n- JSONP\n- CORS\n- WebSocket\n- node 中间件代理\n\n还有其他一些方法，本文主要介绍 JSONP 和 CORS。\n\n### jsonp 实现跨域\n\n**原理**：具有 **src** 属性的标签在请求资源时，不受同源策略限制（历史遗留问题），可以通过这些标签（img、script 等）加载外域的脚本，在本域执行。\n例如：\n```HTML\n<!-- 在 http://127.0.0.1:8016/ 的页面内有一下标签 -->\n<script>\nfunction localHandler(data) {\n  alert(data.name)\n }\n</script>\n<!-- jsonp.js 脚本里有 localHandler 函数，该函数在本域有定义，加载该脚本后就会执行本域的 localHandler 处理数据  -->\n<script src=\"http://localhost:3001/jsonp.js\"></script>\n```\n```javascript\n//http://localhost:3001 域下有如下脚本 jsonp.js\nlocalHandler({name:'jack',age:24})\n```\n> `关键`：外域上的脚本是一个执行函数，函数参数是一个对象或者 JSON ,且与本域的处理函数同名。\n\n问题：外域的脚本是写死了，我们如何统一本域和外域的函数名呢？\n改进1：在 src 传递过去就好，其实还可传递其他参数。\n```HTML\n<script>\nfunction localHandler(data) {\nalert(data.name)\n}\n</script>\n<!-- 在本域传递参数 -->\n<script src=\"http://localhost:3001/jsonp.js?callback=localHandler&id=abc8848\"></script>\n```\n外域服务端处理：\n```javascript\n//node 代码\nlet query    = Url.parse(req.url, true).query\nlet callback = query.callback   //本地传递过来的本地函数名\nlet id       = query.id         //假设根据id，查询数据库，获取用户信息 userInfo\nlet userInfo = { id, name: 'jack', age: 24 }\nlet response = callback + '(' + JSON.stringify(userInfo) + ')'//将处理函数和传递的数据组合\nres.write(response)\nres.end()\n```\n问题：在本域 script 标签写死了，动态插入，会更加好。\n改进2：动态插入 script 标签。\n```javascript\n//本域动态插入 script 标签\n//处理返回数据\nvar localHandler = function (data) {\n console.log(data)\n};\n// 提供jsonp服务的url地址（生成的返回值都是一段javascript代码）\n// 将处理函数传递给服务端，这里查询 id 为 abc8848 的用户信息\nvar url = \"http://localhost:3001/jsonp?callback=localHandler&id=abc8848\";\n// 创建script标签，设置其属性\nvar script = document.createElement('script');\nscript.setAttribute('src', url);\n// 把script标签加入head，此时调用开始\ndocument.getElementsByTagName('head')[0].appendChild(script);\n```\n外域服务端处理：\n```javascript\n// node 代码\nlet query    = Url.parse(req.url, true).query\nlet callback = query.callback   //本地传递过来的本地函数名\nlet id       = query.id         //假设根据id，查询数据库，获取用户信息 userInfo\nlet userInfo = { id, name: 'jack', age: 24 }\nlet response = callback + '(' + JSON.stringify(userInfo) + ')'//将处理函数和传递的数据组合\nres.write(response)\nres.end()\n```\njquery AJAX 跨域\n```HTML \n<script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"></script>\n    <script>\n        $(document).ready(function () {\n            $.ajax({\n                type: \"get\",\n                async: false,\n                url: \"http://localhost:3001/jsonp?id=abc8848\",\n                dataType: \"jsonp\",\n                jsonp: \"callback\",//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)\n                jsonpCallback: \"localHandler\",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写\"?\"，jQuery会自动为你处理数据\n            })\n            .done(json=>{console.log(json)})\n            .fail(err=>{console.log(err)})\n        })\n    </script>\n```\n外域服务处理同上。\n\njsonp 的优缺点：\n**优点**\n- 所有浏览器都支持。\n- 简单。\n\n**缺点**\n- 由于返回的数据当成脚本执行，会存在脚本注入的安全问题。\n- 只能发一次请求。\n- 只能使用 GET 方法。\n- 不好处理请求错误。\n\n### cors 跨域\n\nCORS 需要浏览器和服务器同时支持。目前主流浏览器都都支持 cors，cors 通信过程浏览器自动完成，和同源通信无差别。cors 关键是服务器，只要服务器设置了CORS，就能实现跨域请求。\n\n#### 两种请求\n\n满足以下两个条件的是简单请求，否则为非简单请求。\n\n- 请求方法为：GET|POST|HEAD\n- 请求头部超出以下字段：\n    - Accept|Accept-Language|Content-Language|Last-Event-ID\n    - Content-Type的值限制在`application/x-www-form-urlencoded`|`multipart/form-data`|`text/plain`。\n\n简单请求和非简单请求，浏览器处理不同。\n\n#### 简单请求\n\n简单请求，浏览器器直接发出CORS请求，会**自动**在请求头中增加 `Origin` 字段，告诉服务器，本次请求从哪个源（**协议+域名+端口号**）发起，服务器根据该源，决定是否同意本次请求。\n\n服务响应头信息`Access-Control-Allow-Origin`包含源，则同意请求，否则出错，触发 XHR 的 error 事件。注意，这种错误无法根据状态码识别，因为可能为200。\n\n简单请求，响应头信息除了`Access-Control-Allow-Origin`字段必须设置外，可选地设置以下字段：\n\n`Access-Control-Allow-Credentials`：布尔值，是否允许发起者获取响应内容。CORS 默认发送 Cookie，但是响应不携带`Access-Control-Allow-Credential:true`，浏览器不会把响应内容返回给请求的发起者（即该请求拿不到响应）。不需要携带认证信息，可设置请求`xhr.withCredentials = false;`。附带认证的请求，`Access-Control-Allow-Origin`必须设置一个具体的值，否则请求将失败。响应中携带 `Set-Cookie`字段，尝试对Cookie进行修改，失败会抛出异常。\n\n`Access-Control-Expose-Headers`：CORS请求时，XHR的`getResponseHeader()`只能拿到6个头信息：`Cache-Control`|`Content-Language`|`Content-Type`|`Expires`|`Last-Midified`|`Pragma`。想获取到其他字段，必须在这个响应头里指定。\n\n\n#### 非简单请求\n\n非简单请求，在发送实际请求之前，会发送一个预请求（preflight），以确定跨域信息。跨域信息包括：**允许跨域的域 + 方法  + 请求URL + 特殊的请求头字段 + credentials **。跨域信息符合实际请求，才会发起实际请求，否则报错。通过预检请求会，在跨域缓存时间内，不会再发起预检请求。\n\n实际请求：\n```js\nvar url = 'http://api.alice.com/cors';\nvar xhr = new XMLHttpRequest();\nxhr.open('PUT', url, true);// PUT \nxhr.setRequestHeader('X-Custom-Header', 'value');//自定义请求头\nxhr.send()\n```\n浏览器检测到非简单请求，会发情预检请求：\n```js\nOPTIONS /cors HTTP/1.1    // OPTIONS 方法，询问跨域信息\nOrigin: http://api.bob.com // 将要跨域的源\nAccess-Control-Request-Method: PUT  // 将要跨域的方法\nAccess-Control-Request-Headers: X-Custom-Header // 跨域自定义字段，用逗号分隔的字符串。\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n```\n预请求响应：\n```js\nHTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 01:15:39 GMT\nServer: Apache/2.0.61 (Unix)\nAccess-Control-Allow-Origin: http://api.bob.com // 允许跨域的源 必需的\nAccess-Control-Allow-Methods: GET, POST, PUT // 允许跨域的请求方法 必需的\nAccess-Control-Allow-Headers: X-Custom-Header // 允许跨域的请求头字段 必需的\nAccess-Control-Max-Age: 1728000  // 缓存跨域请求的时间，单位为秒，非必需\nAccess-Control-Allow-Credentials: false // 响应内容控制，非必需\nContent-Type: text/html; charset=utf-8\nContent-Encoding: gzip\nContent-Length: 0\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nContent-Type: text/plain\n```\n实际请求满足预请求响应，会自动发送实际请求，否则触发 error 事件。通过了预检请求，以后只要在跨域缓存时间内（注意，URL变了，跨域缓存信息也会失效），就和简单请求一样，携带 `Origin` 字段，服务器响应，有`Access-Control-Allow-Origin`字段。\n\n实际请求：\n```js\nPUT /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nX-Custom-Header: value\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n```\n实际响应（部分字段）：\n```js\nAccess-Control-Allow-Origin: http://api.bob.com\nContent-Type: text/html; charset=utf-8\n```\n\n#### CORS 优劣\n\n优点：\n- 支持的方法多；\n- 更加安全。\n\n缺点：\n- 老旧浏览器不支持；\n- 会多发请求。\n\n相比 CORS 的优点，缺点可忽略。","source":"_posts/跨域请求.md","raw":"---\ntitle: 跨域请求\ndate: 2019-06-16 21:16:01\ntags:\n- http\ncategories:\n- [网络]\n---\n一个域上的文档或者脚本试图请求另一个域下的资源，就是跨域。比如\n- 资源跳转：a链接、重定向、表单提交；\n- 资源引入：link、script、img、iframe等标签，css background:url()、font-face;\n\n<!--more-->\n\n[TOC]\n\n## 同源限制--狭义的跨域\n\n同源策略（same origin policy）是一种**浏览器**安全策略，即只允许浏览器向同源的服务器请求资源（*请求还是会发送，服务器也会响应，只是响应被浏览器拦截了*），可避免浏览器遭到xss、csfr等攻击。同源：协议+域名+端口 三者相同，即使不同的域指向同一个ip，也非同源。\n\n同源限制了几种行为：\n- Cookie、LocalStroage 和 IndexDB 无法获取；\n- DOM 和 JS 对象无法获得；\n- AJAX 返回值不能获取。\n\n容易混淆的跨域：\n\nhttp://www.domain.com/a.js\nhttp://192.168.4.12/b.js           域名和域名对应相同ip              不允许\n\nhttp://www.domain.com/a.js\nhttp://x.domain.com/b.js           主域相同，子域不同                不允许\nhttp://domain.com/c.js\n\n## 跨域解决方案\n\n- JSONP\n- CORS\n- WebSocket\n- node 中间件代理\n\n还有其他一些方法，本文主要介绍 JSONP 和 CORS。\n\n### jsonp 实现跨域\n\n**原理**：具有 **src** 属性的标签在请求资源时，不受同源策略限制（历史遗留问题），可以通过这些标签（img、script 等）加载外域的脚本，在本域执行。\n例如：\n```HTML\n<!-- 在 http://127.0.0.1:8016/ 的页面内有一下标签 -->\n<script>\nfunction localHandler(data) {\n  alert(data.name)\n }\n</script>\n<!-- jsonp.js 脚本里有 localHandler 函数，该函数在本域有定义，加载该脚本后就会执行本域的 localHandler 处理数据  -->\n<script src=\"http://localhost:3001/jsonp.js\"></script>\n```\n```javascript\n//http://localhost:3001 域下有如下脚本 jsonp.js\nlocalHandler({name:'jack',age:24})\n```\n> `关键`：外域上的脚本是一个执行函数，函数参数是一个对象或者 JSON ,且与本域的处理函数同名。\n\n问题：外域的脚本是写死了，我们如何统一本域和外域的函数名呢？\n改进1：在 src 传递过去就好，其实还可传递其他参数。\n```HTML\n<script>\nfunction localHandler(data) {\nalert(data.name)\n}\n</script>\n<!-- 在本域传递参数 -->\n<script src=\"http://localhost:3001/jsonp.js?callback=localHandler&id=abc8848\"></script>\n```\n外域服务端处理：\n```javascript\n//node 代码\nlet query    = Url.parse(req.url, true).query\nlet callback = query.callback   //本地传递过来的本地函数名\nlet id       = query.id         //假设根据id，查询数据库，获取用户信息 userInfo\nlet userInfo = { id, name: 'jack', age: 24 }\nlet response = callback + '(' + JSON.stringify(userInfo) + ')'//将处理函数和传递的数据组合\nres.write(response)\nres.end()\n```\n问题：在本域 script 标签写死了，动态插入，会更加好。\n改进2：动态插入 script 标签。\n```javascript\n//本域动态插入 script 标签\n//处理返回数据\nvar localHandler = function (data) {\n console.log(data)\n};\n// 提供jsonp服务的url地址（生成的返回值都是一段javascript代码）\n// 将处理函数传递给服务端，这里查询 id 为 abc8848 的用户信息\nvar url = \"http://localhost:3001/jsonp?callback=localHandler&id=abc8848\";\n// 创建script标签，设置其属性\nvar script = document.createElement('script');\nscript.setAttribute('src', url);\n// 把script标签加入head，此时调用开始\ndocument.getElementsByTagName('head')[0].appendChild(script);\n```\n外域服务端处理：\n```javascript\n// node 代码\nlet query    = Url.parse(req.url, true).query\nlet callback = query.callback   //本地传递过来的本地函数名\nlet id       = query.id         //假设根据id，查询数据库，获取用户信息 userInfo\nlet userInfo = { id, name: 'jack', age: 24 }\nlet response = callback + '(' + JSON.stringify(userInfo) + ')'//将处理函数和传递的数据组合\nres.write(response)\nres.end()\n```\njquery AJAX 跨域\n```HTML \n<script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"></script>\n    <script>\n        $(document).ready(function () {\n            $.ajax({\n                type: \"get\",\n                async: false,\n                url: \"http://localhost:3001/jsonp?id=abc8848\",\n                dataType: \"jsonp\",\n                jsonp: \"callback\",//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)\n                jsonpCallback: \"localHandler\",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写\"?\"，jQuery会自动为你处理数据\n            })\n            .done(json=>{console.log(json)})\n            .fail(err=>{console.log(err)})\n        })\n    </script>\n```\n外域服务处理同上。\n\njsonp 的优缺点：\n**优点**\n- 所有浏览器都支持。\n- 简单。\n\n**缺点**\n- 由于返回的数据当成脚本执行，会存在脚本注入的安全问题。\n- 只能发一次请求。\n- 只能使用 GET 方法。\n- 不好处理请求错误。\n\n### cors 跨域\n\nCORS 需要浏览器和服务器同时支持。目前主流浏览器都都支持 cors，cors 通信过程浏览器自动完成，和同源通信无差别。cors 关键是服务器，只要服务器设置了CORS，就能实现跨域请求。\n\n#### 两种请求\n\n满足以下两个条件的是简单请求，否则为非简单请求。\n\n- 请求方法为：GET|POST|HEAD\n- 请求头部超出以下字段：\n    - Accept|Accept-Language|Content-Language|Last-Event-ID\n    - Content-Type的值限制在`application/x-www-form-urlencoded`|`multipart/form-data`|`text/plain`。\n\n简单请求和非简单请求，浏览器处理不同。\n\n#### 简单请求\n\n简单请求，浏览器器直接发出CORS请求，会**自动**在请求头中增加 `Origin` 字段，告诉服务器，本次请求从哪个源（**协议+域名+端口号**）发起，服务器根据该源，决定是否同意本次请求。\n\n服务响应头信息`Access-Control-Allow-Origin`包含源，则同意请求，否则出错，触发 XHR 的 error 事件。注意，这种错误无法根据状态码识别，因为可能为200。\n\n简单请求，响应头信息除了`Access-Control-Allow-Origin`字段必须设置外，可选地设置以下字段：\n\n`Access-Control-Allow-Credentials`：布尔值，是否允许发起者获取响应内容。CORS 默认发送 Cookie，但是响应不携带`Access-Control-Allow-Credential:true`，浏览器不会把响应内容返回给请求的发起者（即该请求拿不到响应）。不需要携带认证信息，可设置请求`xhr.withCredentials = false;`。附带认证的请求，`Access-Control-Allow-Origin`必须设置一个具体的值，否则请求将失败。响应中携带 `Set-Cookie`字段，尝试对Cookie进行修改，失败会抛出异常。\n\n`Access-Control-Expose-Headers`：CORS请求时，XHR的`getResponseHeader()`只能拿到6个头信息：`Cache-Control`|`Content-Language`|`Content-Type`|`Expires`|`Last-Midified`|`Pragma`。想获取到其他字段，必须在这个响应头里指定。\n\n\n#### 非简单请求\n\n非简单请求，在发送实际请求之前，会发送一个预请求（preflight），以确定跨域信息。跨域信息包括：**允许跨域的域 + 方法  + 请求URL + 特殊的请求头字段 + credentials **。跨域信息符合实际请求，才会发起实际请求，否则报错。通过预检请求会，在跨域缓存时间内，不会再发起预检请求。\n\n实际请求：\n```js\nvar url = 'http://api.alice.com/cors';\nvar xhr = new XMLHttpRequest();\nxhr.open('PUT', url, true);// PUT \nxhr.setRequestHeader('X-Custom-Header', 'value');//自定义请求头\nxhr.send()\n```\n浏览器检测到非简单请求，会发情预检请求：\n```js\nOPTIONS /cors HTTP/1.1    // OPTIONS 方法，询问跨域信息\nOrigin: http://api.bob.com // 将要跨域的源\nAccess-Control-Request-Method: PUT  // 将要跨域的方法\nAccess-Control-Request-Headers: X-Custom-Header // 跨域自定义字段，用逗号分隔的字符串。\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n```\n预请求响应：\n```js\nHTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 01:15:39 GMT\nServer: Apache/2.0.61 (Unix)\nAccess-Control-Allow-Origin: http://api.bob.com // 允许跨域的源 必需的\nAccess-Control-Allow-Methods: GET, POST, PUT // 允许跨域的请求方法 必需的\nAccess-Control-Allow-Headers: X-Custom-Header // 允许跨域的请求头字段 必需的\nAccess-Control-Max-Age: 1728000  // 缓存跨域请求的时间，单位为秒，非必需\nAccess-Control-Allow-Credentials: false // 响应内容控制，非必需\nContent-Type: text/html; charset=utf-8\nContent-Encoding: gzip\nContent-Length: 0\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nContent-Type: text/plain\n```\n实际请求满足预请求响应，会自动发送实际请求，否则触发 error 事件。通过了预检请求，以后只要在跨域缓存时间内（注意，URL变了，跨域缓存信息也会失效），就和简单请求一样，携带 `Origin` 字段，服务器响应，有`Access-Control-Allow-Origin`字段。\n\n实际请求：\n```js\nPUT /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nX-Custom-Header: value\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n```\n实际响应（部分字段）：\n```js\nAccess-Control-Allow-Origin: http://api.bob.com\nContent-Type: text/html; charset=utf-8\n```\n\n#### CORS 优劣\n\n优点：\n- 支持的方法多；\n- 更加安全。\n\n缺点：\n- 老旧浏览器不支持；\n- 会多发请求。\n\n相比 CORS 的优点，缺点可忽略。","slug":"跨域请求","published":1,"updated":"2019-06-16T13:19:05.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccg90026jwrnkgqil9v3","content":"<p>一个域上的文档或者脚本试图请求另一个域下的资源，就是跨域。比如</p>\n<ul>\n<li>资源跳转：a链接、重定向、表单提交；</li>\n<li>资源引入：link、script、img、iframe等标签，css background:url()、font-face;</li>\n</ul>\n<a id=\"more\"></a>\n<p>[TOC]</p>\n<h2 id=\"同源限制狭义的跨域\"><a class=\"markdownIt-Anchor\" href=\"#同源限制狭义的跨域\"></a> 同源限制–狭义的跨域</h2>\n<p>同源策略（same origin policy）是一种<strong>浏览器</strong>安全策略，即只允许浏览器向同源的服务器请求资源（<em>请求还是会发送，服务器也会响应，只是响应被浏览器拦截了</em>），可避免浏览器遭到xss、csfr等攻击。同源：协议+域名+端口 三者相同，即使不同的域指向同一个ip，也非同源。</p>\n<p>同源限制了几种行为：</p>\n<ul>\n<li>Cookie、LocalStroage 和 IndexDB 无法获取；</li>\n<li>DOM 和 JS 对象无法获得；</li>\n<li>AJAX 返回值不能获取。</li>\n</ul>\n<p>容易混淆的跨域：</p>\n<p><a href=\"http://www.domain.com/a.js\" target=\"_blank\" rel=\"noopener\">http://www.domain.com/a.js</a><br>\n<a href=\"http://192.168.4.12/b.js\" target=\"_blank\" rel=\"noopener\">http://192.168.4.12/b.js</a>           域名和域名对应相同ip              不允许</p>\n<p><a href=\"http://www.domain.com/a.js\" target=\"_blank\" rel=\"noopener\">http://www.domain.com/a.js</a><br>\n<a href=\"http://x.domain.com/b.js\" target=\"_blank\" rel=\"noopener\">http://x.domain.com/b.js</a>           主域相同，子域不同                不允许<br>\n<a href=\"http://domain.com/c.js\" target=\"_blank\" rel=\"noopener\">http://domain.com/c.js</a></p>\n<h2 id=\"跨域解决方案\"><a class=\"markdownIt-Anchor\" href=\"#跨域解决方案\"></a> 跨域解决方案</h2>\n<ul>\n<li>JSONP</li>\n<li>CORS</li>\n<li>WebSocket</li>\n<li>node 中间件代理</li>\n</ul>\n<p>还有其他一些方法，本文主要介绍 JSONP 和 CORS。</p>\n<h3 id=\"jsonp-实现跨域\"><a class=\"markdownIt-Anchor\" href=\"#jsonp-实现跨域\"></a> jsonp 实现跨域</h3>\n<p><strong>原理</strong>：具有 <strong>src</strong> 属性的标签在请求资源时，不受同源策略限制（历史遗留问题），可以通过这些标签（img、script 等）加载外域的脚本，在本域执行。<br>\n例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在 http://127.0.0.1:8016/ 的页面内有一下标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">localHandler</span><span class=\"params\">(data)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  alert(data.name)</span></span><br><span class=\"line\"><span class=\"undefined\"> &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- jsonp.js 脚本里有 localHandler 函数，该函数在本域有定义，加载该脚本后就会执行本域的 localHandler 处理数据  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://localhost:3001/jsonp.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//http://localhost:3001 域下有如下脚本 jsonp.js</span></span><br><span class=\"line\">localHandler(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>关键</code>：外域上的脚本是一个执行函数，函数参数是一个对象或者 JSON ,且与本域的处理函数同名。</p>\n</blockquote>\n<p>问题：外域的脚本是写死了，我们如何统一本域和外域的函数名呢？<br>\n改进1：在 src 传递过去就好，其实还可传递其他参数。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">localHandler</span><span class=\"params\">(data)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">alert(data.name)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在本域传递参数 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://localhost:3001/jsonp.js?callback=localHandler&amp;id=abc8848\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>外域服务端处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//node 代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> query    = Url.parse(req.url, <span class=\"literal\">true</span>).query</span><br><span class=\"line\"><span class=\"keyword\">let</span> callback = query.callback   <span class=\"comment\">//本地传递过来的本地函数名</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> id       = query.id         <span class=\"comment\">//假设根据id，查询数据库，获取用户信息 userInfo</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userInfo = &#123; id, <span class=\"attr\">name</span>: <span class=\"string\">'jack'</span>, <span class=\"attr\">age</span>: <span class=\"number\">24</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> response = callback + <span class=\"string\">'('</span> + <span class=\"built_in\">JSON</span>.stringify(userInfo) + <span class=\"string\">')'</span><span class=\"comment\">//将处理函数和传递的数据组合</span></span><br><span class=\"line\">res.write(response)</span><br><span class=\"line\">res.end()</span><br></pre></td></tr></table></figure>\n<p>问题：在本域 script 标签写死了，动态插入，会更加好。<br>\n改进2：动态插入 script 标签。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//本域动态插入 script 标签</span></span><br><span class=\"line\"><span class=\"comment\">//处理返回数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> localHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 提供jsonp服务的url地址（生成的返回值都是一段javascript代码）</span></span><br><span class=\"line\"><span class=\"comment\">// 将处理函数传递给服务端，这里查询 id 为 abc8848 的用户信息</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"http://localhost:3001/jsonp?callback=localHandler&amp;id=abc8848\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 创建script标签，设置其属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">script.setAttribute(<span class=\"string\">'src'</span>, url);</span><br><span class=\"line\"><span class=\"comment\">// 把script标签加入head，此时调用开始</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure>\n<p>外域服务端处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// node 代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> query    = Url.parse(req.url, <span class=\"literal\">true</span>).query</span><br><span class=\"line\"><span class=\"keyword\">let</span> callback = query.callback   <span class=\"comment\">//本地传递过来的本地函数名</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> id       = query.id         <span class=\"comment\">//假设根据id，查询数据库，获取用户信息 userInfo</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userInfo = &#123; id, <span class=\"attr\">name</span>: <span class=\"string\">'jack'</span>, <span class=\"attr\">age</span>: <span class=\"number\">24</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> response = callback + <span class=\"string\">'('</span> + <span class=\"built_in\">JSON</span>.stringify(userInfo) + <span class=\"string\">')'</span><span class=\"comment\">//将处理函数和传递的数据组合</span></span><br><span class=\"line\">res.write(response)</span><br><span class=\"line\">res.end()</span><br></pre></td></tr></table></figure>\n<p>jquery AJAX 跨域</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                type: <span class=\"string\">\"get\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">async</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                url: <span class=\"string\">\"http://localhost:3001/jsonp?id=abc8848\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                dataType: <span class=\"string\">\"jsonp\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                jsonp: <span class=\"string\">\"callback\"</span>,<span class=\"comment\">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                jsonpCallback: <span class=\"string\">\"localHandler\"</span>,<span class=\"comment\">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写\"?\"，jQuery会自动为你处理数据</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">            .done(<span class=\"function\"><span class=\"params\">json</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(json)&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">            .fail(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(err)&#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>外域服务处理同上。</p>\n<p>jsonp 的优缺点：<br>\n<strong>优点</strong></p>\n<ul>\n<li>所有浏览器都支持。</li>\n<li>简单。</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>由于返回的数据当成脚本执行，会存在脚本注入的安全问题。</li>\n<li>只能发一次请求。</li>\n<li>只能使用 GET 方法。</li>\n<li>不好处理请求错误。</li>\n</ul>\n<h3 id=\"cors-跨域\"><a class=\"markdownIt-Anchor\" href=\"#cors-跨域\"></a> cors 跨域</h3>\n<p>CORS 需要浏览器和服务器同时支持。目前主流浏览器都都支持 cors，cors 通信过程浏览器自动完成，和同源通信无差别。cors 关键是服务器，只要服务器设置了CORS，就能实现跨域请求。</p>\n<h4 id=\"两种请求\"><a class=\"markdownIt-Anchor\" href=\"#两种请求\"></a> 两种请求</h4>\n<p>满足以下两个条件的是简单请求，否则为非简单请求。</p>\n<ul>\n<li>请求方法为：GET|POST|HEAD</li>\n<li>请求头部超出以下字段：\n<ul>\n<li>Accept|Accept-Language|Content-Language|Last-Event-ID</li>\n<li>Content-Type的值限制在<code>application/x-www-form-urlencoded</code>|<code>multipart/form-data</code>|<code>text/plain</code>。</li>\n</ul>\n</li>\n</ul>\n<p>简单请求和非简单请求，浏览器处理不同。</p>\n<h4 id=\"简单请求\"><a class=\"markdownIt-Anchor\" href=\"#简单请求\"></a> 简单请求</h4>\n<p>简单请求，浏览器器直接发出CORS请求，会<strong>自动</strong>在请求头中增加 <code>Origin</code> 字段，告诉服务器，本次请求从哪个源（<strong>协议+域名+端口号</strong>）发起，服务器根据该源，决定是否同意本次请求。</p>\n<p>服务响应头信息<code>Access-Control-Allow-Origin</code>包含源，则同意请求，否则出错，触发 XHR 的 error 事件。注意，这种错误无法根据状态码识别，因为可能为200。</p>\n<p>简单请求，响应头信息除了<code>Access-Control-Allow-Origin</code>字段必须设置外，可选地设置以下字段：</p>\n<p><code>Access-Control-Allow-Credentials</code>：布尔值，是否允许发起者获取响应内容。CORS 默认发送 Cookie，但是响应不携带<code>Access-Control-Allow-Credential:true</code>，浏览器不会把响应内容返回给请求的发起者（即该请求拿不到响应）。不需要携带认证信息，可设置请求<code>xhr.withCredentials = false;</code>。附带认证的请求，<code>Access-Control-Allow-Origin</code>必须设置一个具体的值，否则请求将失败。响应中携带 <code>Set-Cookie</code>字段，尝试对Cookie进行修改，失败会抛出异常。</p>\n<p><code>Access-Control-Expose-Headers</code>：CORS请求时，XHR的<code>getResponseHeader()</code>只能拿到6个头信息：<code>Cache-Control</code>|<code>Content-Language</code>|<code>Content-Type</code>|<code>Expires</code>|<code>Last-Midified</code>|<code>Pragma</code>。想获取到其他字段，必须在这个响应头里指定。</p>\n<h4 id=\"非简单请求\"><a class=\"markdownIt-Anchor\" href=\"#非简单请求\"></a> 非简单请求</h4>\n<p>非简单请求，在发送实际请求之前，会发送一个预请求（preflight），以确定跨域信息。跨域信息包括：**允许跨域的域 + 方法  + 请求URL + 特殊的请求头字段 + credentials **。跨域信息符合实际请求，才会发起实际请求，否则报错。通过预检请求会，在跨域缓存时间内，不会再发起预检请求。</p>\n<p>实际请求：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'http://api.alice.com/cors'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.open(<span class=\"string\">'PUT'</span>, url, <span class=\"literal\">true</span>);<span class=\"comment\">// PUT </span></span><br><span class=\"line\">xhr.setRequestHeader(<span class=\"string\">'X-Custom-Header'</span>, <span class=\"string\">'value'</span>);<span class=\"comment\">//自定义请求头</span></span><br><span class=\"line\">xhr.send()</span><br></pre></td></tr></table></figure>\n<p>浏览器检测到非简单请求，会发情预检请求：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS /cors HTTP/<span class=\"number\">1.1</span>    <span class=\"comment\">// OPTIONS 方法，询问跨域信息</span></span><br><span class=\"line\">Origin: http:<span class=\"comment\">//api.bob.com // 将要跨域的源</span></span><br><span class=\"line\">Access-Control-Request-Method: PUT  <span class=\"comment\">// 将要跨域的方法</span></span><br><span class=\"line\">Access-Control-Request-Headers: X-Custom-Header <span class=\"comment\">// 跨域自定义字段，用逗号分隔的字符串。</span></span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">5.0</span>...</span><br></pre></td></tr></table></figure>\n<p>预请求响应：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/<span class=\"number\">1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"built_in\">Date</span>: Mon, <span class=\"number\">01</span> Dec <span class=\"number\">2008</span> <span class=\"number\">01</span>:<span class=\"number\">15</span>:<span class=\"number\">39</span> GMT</span><br><span class=\"line\">Server: Apache/<span class=\"number\">2.0</span><span class=\"number\">.61</span> (Unix)</span><br><span class=\"line\">Access-Control-Allow-Origin: http:<span class=\"comment\">//api.bob.com // 允许跨域的源 必需的</span></span><br><span class=\"line\">Access-Control-Allow-Methods: GET, POST, PUT <span class=\"comment\">// 允许跨域的请求方法 必需的</span></span><br><span class=\"line\">Access-Control-Allow-Headers: X-Custom-Header <span class=\"comment\">// 允许跨域的请求头字段 必需的</span></span><br><span class=\"line\">Access-Control-Max-Age: <span class=\"number\">1728000</span>  <span class=\"comment\">// 缓存跨域请求的时间，单位为秒，非必需</span></span><br><span class=\"line\">Access-Control-Allow-Credentials: <span class=\"literal\">false</span> <span class=\"comment\">// 响应内容控制，非必需</span></span><br><span class=\"line\">Content-Type: text/html; charset=utf<span class=\"number\">-8</span></span><br><span class=\"line\">Content-Encoding: gzip</span><br><span class=\"line\">Content-Length: <span class=\"number\">0</span></span><br><span class=\"line\">Keep-Alive: timeout=<span class=\"number\">2</span>, max=<span class=\"number\">100</span></span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Content-Type: text/plain</span><br></pre></td></tr></table></figure>\n<p>实际请求满足预请求响应，会自动发送实际请求，否则触发 error 事件。通过了预检请求，以后只要在跨域缓存时间内（注意，URL变了，跨域缓存信息也会失效），就和简单请求一样，携带 <code>Origin</code> 字段，服务器响应，有<code>Access-Control-Allow-Origin</code>字段。</p>\n<p>实际请求：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /cors HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Origin: http:<span class=\"comment\">//api.bob.com</span></span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">X-Custom-Header: value</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">5.0</span>...</span><br></pre></td></tr></table></figure>\n<p>实际响应（部分字段）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http:<span class=\"comment\">//api.bob.com</span></span><br><span class=\"line\">Content-Type: text/html; charset=utf<span class=\"number\">-8</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"cors-优劣\"><a class=\"markdownIt-Anchor\" href=\"#cors-优劣\"></a> CORS 优劣</h4>\n<p>优点：</p>\n<ul>\n<li>支持的方法多；</li>\n<li>更加安全。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>老旧浏览器不支持；</li>\n<li>会多发请求。</li>\n</ul>\n<p>相比 CORS 的优点，缺点可忽略。</p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>一个域上的文档或者脚本试图请求另一个域下的资源，就是跨域。比如</p>\n<ul>\n<li>资源跳转：a链接、重定向、表单提交；</li>\n<li>资源引入：link、script、img、iframe等标签，css background:url()、font-face;</li>\n</ul>","more":"<p>[TOC]</p>\n<h2 id=\"同源限制狭义的跨域\"><a class=\"markdownIt-Anchor\" href=\"#同源限制狭义的跨域\"></a> 同源限制–狭义的跨域</h2>\n<p>同源策略（same origin policy）是一种<strong>浏览器</strong>安全策略，即只允许浏览器向同源的服务器请求资源（<em>请求还是会发送，服务器也会响应，只是响应被浏览器拦截了</em>），可避免浏览器遭到xss、csfr等攻击。同源：协议+域名+端口 三者相同，即使不同的域指向同一个ip，也非同源。</p>\n<p>同源限制了几种行为：</p>\n<ul>\n<li>Cookie、LocalStroage 和 IndexDB 无法获取；</li>\n<li>DOM 和 JS 对象无法获得；</li>\n<li>AJAX 返回值不能获取。</li>\n</ul>\n<p>容易混淆的跨域：</p>\n<p><a href=\"http://www.domain.com/a.js\" target=\"_blank\" rel=\"noopener\">http://www.domain.com/a.js</a><br>\n<a href=\"http://192.168.4.12/b.js\" target=\"_blank\" rel=\"noopener\">http://192.168.4.12/b.js</a>           域名和域名对应相同ip              不允许</p>\n<p><a href=\"http://www.domain.com/a.js\" target=\"_blank\" rel=\"noopener\">http://www.domain.com/a.js</a><br>\n<a href=\"http://x.domain.com/b.js\" target=\"_blank\" rel=\"noopener\">http://x.domain.com/b.js</a>           主域相同，子域不同                不允许<br>\n<a href=\"http://domain.com/c.js\" target=\"_blank\" rel=\"noopener\">http://domain.com/c.js</a></p>\n<h2 id=\"跨域解决方案\"><a class=\"markdownIt-Anchor\" href=\"#跨域解决方案\"></a> 跨域解决方案</h2>\n<ul>\n<li>JSONP</li>\n<li>CORS</li>\n<li>WebSocket</li>\n<li>node 中间件代理</li>\n</ul>\n<p>还有其他一些方法，本文主要介绍 JSONP 和 CORS。</p>\n<h3 id=\"jsonp-实现跨域\"><a class=\"markdownIt-Anchor\" href=\"#jsonp-实现跨域\"></a> jsonp 实现跨域</h3>\n<p><strong>原理</strong>：具有 <strong>src</strong> 属性的标签在请求资源时，不受同源策略限制（历史遗留问题），可以通过这些标签（img、script 等）加载外域的脚本，在本域执行。<br>\n例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在 http://127.0.0.1:8016/ 的页面内有一下标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">localHandler</span><span class=\"params\">(data)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  alert(data.name)</span></span><br><span class=\"line\"><span class=\"undefined\"> &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- jsonp.js 脚本里有 localHandler 函数，该函数在本域有定义，加载该脚本后就会执行本域的 localHandler 处理数据  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://localhost:3001/jsonp.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//http://localhost:3001 域下有如下脚本 jsonp.js</span></span><br><span class=\"line\">localHandler(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>关键</code>：外域上的脚本是一个执行函数，函数参数是一个对象或者 JSON ,且与本域的处理函数同名。</p>\n</blockquote>\n<p>问题：外域的脚本是写死了，我们如何统一本域和外域的函数名呢？<br>\n改进1：在 src 传递过去就好，其实还可传递其他参数。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">localHandler</span><span class=\"params\">(data)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">alert(data.name)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在本域传递参数 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://localhost:3001/jsonp.js?callback=localHandler&amp;id=abc8848\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>外域服务端处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//node 代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> query    = Url.parse(req.url, <span class=\"literal\">true</span>).query</span><br><span class=\"line\"><span class=\"keyword\">let</span> callback = query.callback   <span class=\"comment\">//本地传递过来的本地函数名</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> id       = query.id         <span class=\"comment\">//假设根据id，查询数据库，获取用户信息 userInfo</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userInfo = &#123; id, <span class=\"attr\">name</span>: <span class=\"string\">'jack'</span>, <span class=\"attr\">age</span>: <span class=\"number\">24</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> response = callback + <span class=\"string\">'('</span> + <span class=\"built_in\">JSON</span>.stringify(userInfo) + <span class=\"string\">')'</span><span class=\"comment\">//将处理函数和传递的数据组合</span></span><br><span class=\"line\">res.write(response)</span><br><span class=\"line\">res.end()</span><br></pre></td></tr></table></figure>\n<p>问题：在本域 script 标签写死了，动态插入，会更加好。<br>\n改进2：动态插入 script 标签。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//本域动态插入 script 标签</span></span><br><span class=\"line\"><span class=\"comment\">//处理返回数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> localHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 提供jsonp服务的url地址（生成的返回值都是一段javascript代码）</span></span><br><span class=\"line\"><span class=\"comment\">// 将处理函数传递给服务端，这里查询 id 为 abc8848 的用户信息</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"http://localhost:3001/jsonp?callback=localHandler&amp;id=abc8848\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 创建script标签，设置其属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">script.setAttribute(<span class=\"string\">'src'</span>, url);</span><br><span class=\"line\"><span class=\"comment\">// 把script标签加入head，此时调用开始</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure>\n<p>外域服务端处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// node 代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> query    = Url.parse(req.url, <span class=\"literal\">true</span>).query</span><br><span class=\"line\"><span class=\"keyword\">let</span> callback = query.callback   <span class=\"comment\">//本地传递过来的本地函数名</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> id       = query.id         <span class=\"comment\">//假设根据id，查询数据库，获取用户信息 userInfo</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userInfo = &#123; id, <span class=\"attr\">name</span>: <span class=\"string\">'jack'</span>, <span class=\"attr\">age</span>: <span class=\"number\">24</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> response = callback + <span class=\"string\">'('</span> + <span class=\"built_in\">JSON</span>.stringify(userInfo) + <span class=\"string\">')'</span><span class=\"comment\">//将处理函数和传递的数据组合</span></span><br><span class=\"line\">res.write(response)</span><br><span class=\"line\">res.end()</span><br></pre></td></tr></table></figure>\n<p>jquery AJAX 跨域</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                type: <span class=\"string\">\"get\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">async</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                url: <span class=\"string\">\"http://localhost:3001/jsonp?id=abc8848\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                dataType: <span class=\"string\">\"jsonp\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                jsonp: <span class=\"string\">\"callback\"</span>,<span class=\"comment\">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                jsonpCallback: <span class=\"string\">\"localHandler\"</span>,<span class=\"comment\">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写\"?\"，jQuery会自动为你处理数据</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">            .done(<span class=\"function\"><span class=\"params\">json</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(json)&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">            .fail(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(err)&#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>外域服务处理同上。</p>\n<p>jsonp 的优缺点：<br>\n<strong>优点</strong></p>\n<ul>\n<li>所有浏览器都支持。</li>\n<li>简单。</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>由于返回的数据当成脚本执行，会存在脚本注入的安全问题。</li>\n<li>只能发一次请求。</li>\n<li>只能使用 GET 方法。</li>\n<li>不好处理请求错误。</li>\n</ul>\n<h3 id=\"cors-跨域\"><a class=\"markdownIt-Anchor\" href=\"#cors-跨域\"></a> cors 跨域</h3>\n<p>CORS 需要浏览器和服务器同时支持。目前主流浏览器都都支持 cors，cors 通信过程浏览器自动完成，和同源通信无差别。cors 关键是服务器，只要服务器设置了CORS，就能实现跨域请求。</p>\n<h4 id=\"两种请求\"><a class=\"markdownIt-Anchor\" href=\"#两种请求\"></a> 两种请求</h4>\n<p>满足以下两个条件的是简单请求，否则为非简单请求。</p>\n<ul>\n<li>请求方法为：GET|POST|HEAD</li>\n<li>请求头部超出以下字段：\n<ul>\n<li>Accept|Accept-Language|Content-Language|Last-Event-ID</li>\n<li>Content-Type的值限制在<code>application/x-www-form-urlencoded</code>|<code>multipart/form-data</code>|<code>text/plain</code>。</li>\n</ul>\n</li>\n</ul>\n<p>简单请求和非简单请求，浏览器处理不同。</p>\n<h4 id=\"简单请求\"><a class=\"markdownIt-Anchor\" href=\"#简单请求\"></a> 简单请求</h4>\n<p>简单请求，浏览器器直接发出CORS请求，会<strong>自动</strong>在请求头中增加 <code>Origin</code> 字段，告诉服务器，本次请求从哪个源（<strong>协议+域名+端口号</strong>）发起，服务器根据该源，决定是否同意本次请求。</p>\n<p>服务响应头信息<code>Access-Control-Allow-Origin</code>包含源，则同意请求，否则出错，触发 XHR 的 error 事件。注意，这种错误无法根据状态码识别，因为可能为200。</p>\n<p>简单请求，响应头信息除了<code>Access-Control-Allow-Origin</code>字段必须设置外，可选地设置以下字段：</p>\n<p><code>Access-Control-Allow-Credentials</code>：布尔值，是否允许发起者获取响应内容。CORS 默认发送 Cookie，但是响应不携带<code>Access-Control-Allow-Credential:true</code>，浏览器不会把响应内容返回给请求的发起者（即该请求拿不到响应）。不需要携带认证信息，可设置请求<code>xhr.withCredentials = false;</code>。附带认证的请求，<code>Access-Control-Allow-Origin</code>必须设置一个具体的值，否则请求将失败。响应中携带 <code>Set-Cookie</code>字段，尝试对Cookie进行修改，失败会抛出异常。</p>\n<p><code>Access-Control-Expose-Headers</code>：CORS请求时，XHR的<code>getResponseHeader()</code>只能拿到6个头信息：<code>Cache-Control</code>|<code>Content-Language</code>|<code>Content-Type</code>|<code>Expires</code>|<code>Last-Midified</code>|<code>Pragma</code>。想获取到其他字段，必须在这个响应头里指定。</p>\n<h4 id=\"非简单请求\"><a class=\"markdownIt-Anchor\" href=\"#非简单请求\"></a> 非简单请求</h4>\n<p>非简单请求，在发送实际请求之前，会发送一个预请求（preflight），以确定跨域信息。跨域信息包括：**允许跨域的域 + 方法  + 请求URL + 特殊的请求头字段 + credentials **。跨域信息符合实际请求，才会发起实际请求，否则报错。通过预检请求会，在跨域缓存时间内，不会再发起预检请求。</p>\n<p>实际请求：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'http://api.alice.com/cors'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.open(<span class=\"string\">'PUT'</span>, url, <span class=\"literal\">true</span>);<span class=\"comment\">// PUT </span></span><br><span class=\"line\">xhr.setRequestHeader(<span class=\"string\">'X-Custom-Header'</span>, <span class=\"string\">'value'</span>);<span class=\"comment\">//自定义请求头</span></span><br><span class=\"line\">xhr.send()</span><br></pre></td></tr></table></figure>\n<p>浏览器检测到非简单请求，会发情预检请求：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS /cors HTTP/<span class=\"number\">1.1</span>    <span class=\"comment\">// OPTIONS 方法，询问跨域信息</span></span><br><span class=\"line\">Origin: http:<span class=\"comment\">//api.bob.com // 将要跨域的源</span></span><br><span class=\"line\">Access-Control-Request-Method: PUT  <span class=\"comment\">// 将要跨域的方法</span></span><br><span class=\"line\">Access-Control-Request-Headers: X-Custom-Header <span class=\"comment\">// 跨域自定义字段，用逗号分隔的字符串。</span></span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">5.0</span>...</span><br></pre></td></tr></table></figure>\n<p>预请求响应：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/<span class=\"number\">1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"built_in\">Date</span>: Mon, <span class=\"number\">01</span> Dec <span class=\"number\">2008</span> <span class=\"number\">01</span>:<span class=\"number\">15</span>:<span class=\"number\">39</span> GMT</span><br><span class=\"line\">Server: Apache/<span class=\"number\">2.0</span><span class=\"number\">.61</span> (Unix)</span><br><span class=\"line\">Access-Control-Allow-Origin: http:<span class=\"comment\">//api.bob.com // 允许跨域的源 必需的</span></span><br><span class=\"line\">Access-Control-Allow-Methods: GET, POST, PUT <span class=\"comment\">// 允许跨域的请求方法 必需的</span></span><br><span class=\"line\">Access-Control-Allow-Headers: X-Custom-Header <span class=\"comment\">// 允许跨域的请求头字段 必需的</span></span><br><span class=\"line\">Access-Control-Max-Age: <span class=\"number\">1728000</span>  <span class=\"comment\">// 缓存跨域请求的时间，单位为秒，非必需</span></span><br><span class=\"line\">Access-Control-Allow-Credentials: <span class=\"literal\">false</span> <span class=\"comment\">// 响应内容控制，非必需</span></span><br><span class=\"line\">Content-Type: text/html; charset=utf<span class=\"number\">-8</span></span><br><span class=\"line\">Content-Encoding: gzip</span><br><span class=\"line\">Content-Length: <span class=\"number\">0</span></span><br><span class=\"line\">Keep-Alive: timeout=<span class=\"number\">2</span>, max=<span class=\"number\">100</span></span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Content-Type: text/plain</span><br></pre></td></tr></table></figure>\n<p>实际请求满足预请求响应，会自动发送实际请求，否则触发 error 事件。通过了预检请求，以后只要在跨域缓存时间内（注意，URL变了，跨域缓存信息也会失效），就和简单请求一样，携带 <code>Origin</code> 字段，服务器响应，有<code>Access-Control-Allow-Origin</code>字段。</p>\n<p>实际请求：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /cors HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Origin: http:<span class=\"comment\">//api.bob.com</span></span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">X-Custom-Header: value</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">5.0</span>...</span><br></pre></td></tr></table></figure>\n<p>实际响应（部分字段）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http:<span class=\"comment\">//api.bob.com</span></span><br><span class=\"line\">Content-Type: text/html; charset=utf<span class=\"number\">-8</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"cors-优劣\"><a class=\"markdownIt-Anchor\" href=\"#cors-优劣\"></a> CORS 优劣</h4>\n<p>优点：</p>\n<ul>\n<li>支持的方法多；</li>\n<li>更加安全。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>老旧浏览器不支持；</li>\n<li>会多发请求。</li>\n</ul>\n<p>相比 CORS 的优点，缺点可忽略。</p>"},{"title":"防抖和节流","date":"2019-06-20T15:50:31.000Z","_content":"连续触发（触发频率很高）的事件，不进行优化，会出现页面卡顿现象。\n常见的需要优化的事件：\n- 鼠标事件:\n\t- mousemove（拖拽）\n\t- mouseover(划过)\n\t- mouseWheel(滚屏)\n- 键盘事件：\n\t- keydown(按下键盘)\n\t- keypress（按下字符键盘）\n\t- keyup(弹起键盘)\n- window resize/scroll\n\t- DOM 元素动态定位\n\n<!--more-->\n优化方式是控制事件处理器**在一段时间内的执行次**。\n\n## 防抖\n\n频繁（连续）触发事件（比如用户触发输入事件`input`），不执行**目标动作**，当不在触发事件了，再执行。\n\n实现思路，在事件处理器内，使用  **setTimeout** 包裹目标动作，一直触发事件，就清除**上次**的定时器，不再触发触发事件，会执行最后一个定时器，目标动作也执行一次了。\n\n```html\n<input type=\"text\" id=\"input\" />\n```\nJS代码：\n```js\nfunction debounce(callback, delay) {\n  let timeout = 0;\n  return e => {\n    console.log('清除', timeout, new Date());\n    clearTimeout(timeout); //input 一直触发，就清除上一次的定时器，防止执行目标函数，直到事件不触发事件，最后一个定时器没有清除，delay 时间后就会执定时器，就确保了目标函数只执行一次。\n    timeout = setTimeout(() => {\n      callback(e);\n    }, delay);\n    console.log('新的', timeout, e.target.value, new Date());\n  };\n}\nlet print = debounce(e => {\n  let value = e.target.value;\n  console.log(value, new Date());\n}, 1000);\ndocument\n  .querySelector('#input')\n  .addEventListener('input', print, false);\n```\n清除定时器的时机很关键，**在新定时器生成之前**，如果在之后，会将所有定时器都清除，目标函数一次都不执行。\n## 节流\n\n防抖是多次触发事件，目标函数只执行一次，不管触发这些事件用了多少时间。而节流是在一段时间内，确保目标函数只执行一次，实现缓慢执行目标函数的效果。\n\n上面的输入使用节流实现：\n```js\nlet thorttle = (callback, delay) => {\n  let timeout = 0;\n  let now = new Date() - 0;\n  return e => {\n    console.log('now', now);\n    let last = new Date() - 0;\n    clearTimeout(timeout);\n    if (last - now >= delay) {\n      console.log('时间间隔', last - now);\n      callback(e);\n      now = last;//将上执行的时间赋值给 now\n    } else {\n      //将 delay 时间内多次触发事件，目标函数合并到这里执行\n      timeout = setTimeout(() => {\n        callback(e);\n      }, delay);\n    }\n  };\n};\nlet write = thorttle(e => {\n  console.log(e.target.value, new Date());\n}, 5000);\ndocument\n  .querySelector('#input')\n  .addEventListener('input', write, false);\n```\n\n## 两者比较\n\n节流在**某个时间段内**，目标函数能执行一次，限制目标函数的**执行频率**，不管事件触发了多少次；\n防抖是**多次触发事件**，目标函数只执行一次，不管触发了这些事件用了多少时间。\n\n节流函数限制目标函数的执行频率，有连续变化的效果，适用于**关注变化过程的操作**，可以调整目标函数执行频率使得变化更加平滑，比如动画、改变窗口时执行某些操作等，常用事件`resize`、`scroll`、`mouseWheel`、`touchmove`、`mouseover`等；\n\n防抖函数适用于**更关注结果的操作**，不太关注操作过程，常见的事件有 `input`、`keyup`等。\n\n最后看一个 将 防抖 和 节流都用 `resize` 事件的效果，更能体会两者的区别：\n```js\nfunction debounce(callback, delay) {\n  let timeout = 0;\n  return e => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      callback(e);\n    }, delay);\n  };\n}\nlet print = debounce(e => {\n  let value = e.target.value;\n  console.log('debounce', window.innerWidth);\n}, 500);\nlet thorttle = (callback, delay) => {\n  let timeout = 0;\n  let now = new Date() - 0;\n  return e => {\n    let last = new Date() - 0;\n    clearTimeout(timeout);\n    if (last - now >= delay) {\n      callback(e);\n      now = last;\n    } else {\n      timeout = setTimeout(() => {\n        callback(e);\n      }, delay);\n    }\n  };\n};\nlet write = thorttle(e => {\n  console.log('thorttle', window.innerWidth);\n}, 500);\nwindow.addEventListener('resize', write, false);\nwindow.addEventListener('resize', print, false);\n```\n##  参考\n\n[函数节流与函数防抖](https://chanshiyu.com/#/post/24)\n[函数防抖与函数节流](https://zhuanlan.zhihu.com/p/38313717)\n","source":"_posts/防抖和节流.md","raw":"---\ntitle: 防抖和节流\ndate: 2019-06-20 23:50:31\ntags:\n- js\ncategories:\n- [概念深入]\n---\n连续触发（触发频率很高）的事件，不进行优化，会出现页面卡顿现象。\n常见的需要优化的事件：\n- 鼠标事件:\n\t- mousemove（拖拽）\n\t- mouseover(划过)\n\t- mouseWheel(滚屏)\n- 键盘事件：\n\t- keydown(按下键盘)\n\t- keypress（按下字符键盘）\n\t- keyup(弹起键盘)\n- window resize/scroll\n\t- DOM 元素动态定位\n\n<!--more-->\n优化方式是控制事件处理器**在一段时间内的执行次**。\n\n## 防抖\n\n频繁（连续）触发事件（比如用户触发输入事件`input`），不执行**目标动作**，当不在触发事件了，再执行。\n\n实现思路，在事件处理器内，使用  **setTimeout** 包裹目标动作，一直触发事件，就清除**上次**的定时器，不再触发触发事件，会执行最后一个定时器，目标动作也执行一次了。\n\n```html\n<input type=\"text\" id=\"input\" />\n```\nJS代码：\n```js\nfunction debounce(callback, delay) {\n  let timeout = 0;\n  return e => {\n    console.log('清除', timeout, new Date());\n    clearTimeout(timeout); //input 一直触发，就清除上一次的定时器，防止执行目标函数，直到事件不触发事件，最后一个定时器没有清除，delay 时间后就会执定时器，就确保了目标函数只执行一次。\n    timeout = setTimeout(() => {\n      callback(e);\n    }, delay);\n    console.log('新的', timeout, e.target.value, new Date());\n  };\n}\nlet print = debounce(e => {\n  let value = e.target.value;\n  console.log(value, new Date());\n}, 1000);\ndocument\n  .querySelector('#input')\n  .addEventListener('input', print, false);\n```\n清除定时器的时机很关键，**在新定时器生成之前**，如果在之后，会将所有定时器都清除，目标函数一次都不执行。\n## 节流\n\n防抖是多次触发事件，目标函数只执行一次，不管触发这些事件用了多少时间。而节流是在一段时间内，确保目标函数只执行一次，实现缓慢执行目标函数的效果。\n\n上面的输入使用节流实现：\n```js\nlet thorttle = (callback, delay) => {\n  let timeout = 0;\n  let now = new Date() - 0;\n  return e => {\n    console.log('now', now);\n    let last = new Date() - 0;\n    clearTimeout(timeout);\n    if (last - now >= delay) {\n      console.log('时间间隔', last - now);\n      callback(e);\n      now = last;//将上执行的时间赋值给 now\n    } else {\n      //将 delay 时间内多次触发事件，目标函数合并到这里执行\n      timeout = setTimeout(() => {\n        callback(e);\n      }, delay);\n    }\n  };\n};\nlet write = thorttle(e => {\n  console.log(e.target.value, new Date());\n}, 5000);\ndocument\n  .querySelector('#input')\n  .addEventListener('input', write, false);\n```\n\n## 两者比较\n\n节流在**某个时间段内**，目标函数能执行一次，限制目标函数的**执行频率**，不管事件触发了多少次；\n防抖是**多次触发事件**，目标函数只执行一次，不管触发了这些事件用了多少时间。\n\n节流函数限制目标函数的执行频率，有连续变化的效果，适用于**关注变化过程的操作**，可以调整目标函数执行频率使得变化更加平滑，比如动画、改变窗口时执行某些操作等，常用事件`resize`、`scroll`、`mouseWheel`、`touchmove`、`mouseover`等；\n\n防抖函数适用于**更关注结果的操作**，不太关注操作过程，常见的事件有 `input`、`keyup`等。\n\n最后看一个 将 防抖 和 节流都用 `resize` 事件的效果，更能体会两者的区别：\n```js\nfunction debounce(callback, delay) {\n  let timeout = 0;\n  return e => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      callback(e);\n    }, delay);\n  };\n}\nlet print = debounce(e => {\n  let value = e.target.value;\n  console.log('debounce', window.innerWidth);\n}, 500);\nlet thorttle = (callback, delay) => {\n  let timeout = 0;\n  let now = new Date() - 0;\n  return e => {\n    let last = new Date() - 0;\n    clearTimeout(timeout);\n    if (last - now >= delay) {\n      callback(e);\n      now = last;\n    } else {\n      timeout = setTimeout(() => {\n        callback(e);\n      }, delay);\n    }\n  };\n};\nlet write = thorttle(e => {\n  console.log('thorttle', window.innerWidth);\n}, 500);\nwindow.addEventListener('resize', write, false);\nwindow.addEventListener('resize', print, false);\n```\n##  参考\n\n[函数节流与函数防抖](https://chanshiyu.com/#/post/24)\n[函数防抖与函数节流](https://zhuanlan.zhihu.com/p/38313717)\n","slug":"防抖和节流","published":1,"updated":"2019-06-23T14:23:40.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccgb0028jwrn55z8j9mz","content":"<p>连续触发（触发频率很高）的事件，不进行优化，会出现页面卡顿现象。<br>\n常见的需要优化的事件：</p>\n<ul>\n<li>鼠标事件:\n<ul>\n<li>mousemove（拖拽）</li>\n<li>mouseover(划过)</li>\n<li>mouseWheel(滚屏)</li>\n</ul>\n</li>\n<li>键盘事件：\n<ul>\n<li>keydown(按下键盘)</li>\n<li>keypress（按下字符键盘）</li>\n<li>keyup(弹起键盘)</li>\n</ul>\n</li>\n<li>window resize/scroll\n<ul>\n<li>DOM 元素动态定位</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>优化方式是控制事件处理器<strong>在一段时间内的执行次</strong>。</p>\n<h2 id=\"防抖\"><a class=\"markdownIt-Anchor\" href=\"#防抖\"></a> 防抖</h2>\n<p>频繁（连续）触发事件（比如用户触发输入事件<code>input</code>），不执行<strong>目标动作</strong>，当不在触发事件了，再执行。</p>\n<p>实现思路，在事件处理器内，使用  <strong>setTimeout</strong> 包裹目标动作，一直触发事件，就清除<strong>上次</strong>的定时器，不再触发触发事件，会执行最后一个定时器，目标动作也执行一次了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JS代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">callback, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'清除'</span>, timeout, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">    clearTimeout(timeout); <span class=\"comment\">//input 一直触发，就清除上一次的定时器，防止执行目标函数，直到事件不触发事件，最后一个定时器没有清除，delay 时间后就会执定时器，就确保了目标函数只执行一次。</span></span><br><span class=\"line\">    timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      callback(e);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'新的'</span>, timeout, e.target.value, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> print = debounce(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = e.target.value;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span></span><br><span class=\"line\">  .querySelector(<span class=\"string\">'#input'</span>)</span><br><span class=\"line\">  .addEventListener(<span class=\"string\">'input'</span>, print, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>清除定时器的时机很关键，<strong>在新定时器生成之前</strong>，如果在之后，会将所有定时器都清除，目标函数一次都不执行。</p>\n<h2 id=\"节流\"><a class=\"markdownIt-Anchor\" href=\"#节流\"></a> 节流</h2>\n<p>防抖是多次触发事件，目标函数只执行一次，不管触发这些事件用了多少时间。而节流是在一段时间内，确保目标函数只执行一次，实现缓慢执行目标函数的效果。</p>\n<p>上面的输入使用节流实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thorttle = <span class=\"function\">(<span class=\"params\">callback, delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'now'</span>, now);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> last = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - <span class=\"number\">0</span>;</span><br><span class=\"line\">    clearTimeout(timeout);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last - now &gt;= delay) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'时间间隔'</span>, last - now);</span><br><span class=\"line\">      callback(e);</span><br><span class=\"line\">      now = last;<span class=\"comment\">//将上执行的时间赋值给 now</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//将 delay 时间内多次触发事件，目标函数合并到这里执行</span></span><br><span class=\"line\">      timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        callback(e);</span><br><span class=\"line\">      &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> write = thorttle(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.target.value, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">&#125;, <span class=\"number\">5000</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span></span><br><span class=\"line\">  .querySelector(<span class=\"string\">'#input'</span>)</span><br><span class=\"line\">  .addEventListener(<span class=\"string\">'input'</span>, write, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"两者比较\"><a class=\"markdownIt-Anchor\" href=\"#两者比较\"></a> 两者比较</h2>\n<p>节流在<strong>某个时间段内</strong>，目标函数能执行一次，限制目标函数的<strong>执行频率</strong>，不管事件触发了多少次；<br>\n防抖是<strong>多次触发事件</strong>，目标函数只执行一次，不管触发了这些事件用了多少时间。</p>\n<p>节流函数限制目标函数的执行频率，有连续变化的效果，适用于<strong>关注变化过程的操作</strong>，可以调整目标函数执行频率使得变化更加平滑，比如动画、改变窗口时执行某些操作等，常用事件<code>resize</code>、<code>scroll</code>、<code>mouseWheel</code>、<code>touchmove</code>、<code>mouseover</code>等；</p>\n<p>防抖函数适用于<strong>更关注结果的操作</strong>，不太关注操作过程，常见的事件有 <code>input</code>、<code>keyup</code>等。</p>\n<p>最后看一个 将 防抖 和 节流都用 <code>resize</code> 事件的效果，更能体会两者的区别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">callback, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    clearTimeout(timeout);</span><br><span class=\"line\">    timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      callback(e);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> print = debounce(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = e.target.value;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'debounce'</span>, <span class=\"built_in\">window</span>.innerWidth);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> thorttle = <span class=\"function\">(<span class=\"params\">callback, delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> last = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - <span class=\"number\">0</span>;</span><br><span class=\"line\">    clearTimeout(timeout);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last - now &gt;= delay) &#123;</span><br><span class=\"line\">      callback(e);</span><br><span class=\"line\">      now = last;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        callback(e);</span><br><span class=\"line\">      &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> write = thorttle(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'thorttle'</span>, <span class=\"built_in\">window</span>.innerWidth);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, write, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, print, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"https://chanshiyu.com/#/post/24\" target=\"_blank\" rel=\"noopener\">函数节流与函数防抖</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/38313717\" target=\"_blank\" rel=\"noopener\">函数防抖与函数节流</a></p>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>连续触发（触发频率很高）的事件，不进行优化，会出现页面卡顿现象。<br>\n常见的需要优化的事件：</p>\n<ul>\n<li>鼠标事件:\n<ul>\n<li>mousemove（拖拽）</li>\n<li>mouseover(划过)</li>\n<li>mouseWheel(滚屏)</li>\n</ul>\n</li>\n<li>键盘事件：\n<ul>\n<li>keydown(按下键盘)</li>\n<li>keypress（按下字符键盘）</li>\n<li>keyup(弹起键盘)</li>\n</ul>\n</li>\n<li>window resize/scroll\n<ul>\n<li>DOM 元素动态定位</li>\n</ul>\n</li>\n</ul>","more":"<p>优化方式是控制事件处理器<strong>在一段时间内的执行次</strong>。</p>\n<h2 id=\"防抖\"><a class=\"markdownIt-Anchor\" href=\"#防抖\"></a> 防抖</h2>\n<p>频繁（连续）触发事件（比如用户触发输入事件<code>input</code>），不执行<strong>目标动作</strong>，当不在触发事件了，再执行。</p>\n<p>实现思路，在事件处理器内，使用  <strong>setTimeout</strong> 包裹目标动作，一直触发事件，就清除<strong>上次</strong>的定时器，不再触发触发事件，会执行最后一个定时器，目标动作也执行一次了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JS代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">callback, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'清除'</span>, timeout, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">    clearTimeout(timeout); <span class=\"comment\">//input 一直触发，就清除上一次的定时器，防止执行目标函数，直到事件不触发事件，最后一个定时器没有清除，delay 时间后就会执定时器，就确保了目标函数只执行一次。</span></span><br><span class=\"line\">    timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      callback(e);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'新的'</span>, timeout, e.target.value, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> print = debounce(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = e.target.value;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span></span><br><span class=\"line\">  .querySelector(<span class=\"string\">'#input'</span>)</span><br><span class=\"line\">  .addEventListener(<span class=\"string\">'input'</span>, print, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>清除定时器的时机很关键，<strong>在新定时器生成之前</strong>，如果在之后，会将所有定时器都清除，目标函数一次都不执行。</p>\n<h2 id=\"节流\"><a class=\"markdownIt-Anchor\" href=\"#节流\"></a> 节流</h2>\n<p>防抖是多次触发事件，目标函数只执行一次，不管触发这些事件用了多少时间。而节流是在一段时间内，确保目标函数只执行一次，实现缓慢执行目标函数的效果。</p>\n<p>上面的输入使用节流实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thorttle = <span class=\"function\">(<span class=\"params\">callback, delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'now'</span>, now);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> last = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - <span class=\"number\">0</span>;</span><br><span class=\"line\">    clearTimeout(timeout);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last - now &gt;= delay) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'时间间隔'</span>, last - now);</span><br><span class=\"line\">      callback(e);</span><br><span class=\"line\">      now = last;<span class=\"comment\">//将上执行的时间赋值给 now</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//将 delay 时间内多次触发事件，目标函数合并到这里执行</span></span><br><span class=\"line\">      timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        callback(e);</span><br><span class=\"line\">      &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> write = thorttle(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.target.value, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">&#125;, <span class=\"number\">5000</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span></span><br><span class=\"line\">  .querySelector(<span class=\"string\">'#input'</span>)</span><br><span class=\"line\">  .addEventListener(<span class=\"string\">'input'</span>, write, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"两者比较\"><a class=\"markdownIt-Anchor\" href=\"#两者比较\"></a> 两者比较</h2>\n<p>节流在<strong>某个时间段内</strong>，目标函数能执行一次，限制目标函数的<strong>执行频率</strong>，不管事件触发了多少次；<br>\n防抖是<strong>多次触发事件</strong>，目标函数只执行一次，不管触发了这些事件用了多少时间。</p>\n<p>节流函数限制目标函数的执行频率，有连续变化的效果，适用于<strong>关注变化过程的操作</strong>，可以调整目标函数执行频率使得变化更加平滑，比如动画、改变窗口时执行某些操作等，常用事件<code>resize</code>、<code>scroll</code>、<code>mouseWheel</code>、<code>touchmove</code>、<code>mouseover</code>等；</p>\n<p>防抖函数适用于<strong>更关注结果的操作</strong>，不太关注操作过程，常见的事件有 <code>input</code>、<code>keyup</code>等。</p>\n<p>最后看一个 将 防抖 和 节流都用 <code>resize</code> 事件的效果，更能体会两者的区别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">callback, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    clearTimeout(timeout);</span><br><span class=\"line\">    timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      callback(e);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> print = debounce(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = e.target.value;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'debounce'</span>, <span class=\"built_in\">window</span>.innerWidth);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> thorttle = <span class=\"function\">(<span class=\"params\">callback, delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> last = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() - <span class=\"number\">0</span>;</span><br><span class=\"line\">    clearTimeout(timeout);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last - now &gt;= delay) &#123;</span><br><span class=\"line\">      callback(e);</span><br><span class=\"line\">      now = last;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        callback(e);</span><br><span class=\"line\">      &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> write = thorttle(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'thorttle'</span>, <span class=\"built_in\">window</span>.innerWidth);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, write, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, print, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"https://chanshiyu.com/#/post/24\" target=\"_blank\" rel=\"noopener\">函数节流与函数防抖</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/38313717\" target=\"_blank\" rel=\"noopener\">函数防抖与函数节流</a></p>"},{"title":"阴阳五行之来历","date":"2020-01-18T15:52:31.000Z","_content":"\n\n因为谭秦东被鸿茅药酒“跨省抓捕”事件，开始注意到中药，然后了解到中医，才发现中医的荒谬。这篇文章是梁启超1921年批判阴阳五行的，然作为中医的基本理论，有必要了解它的来历。我在360图书馆找到，[梁启超：阴阳五行说之来历](http://www.360doc.com/showwebdoc/0/0/882999442.aspx), 识图软件扫描提取文字，批注一些生涩的词语，可能有误，欢迎指正。格式可能乱了，[百度网盘获取原文](https://pan.baidu.com/s/1XWbZ-z5CgtogYcipwP2Vkg) 提取码：wpf6\n<!-- more -->\n***\n\n@[TOC]\n\n#  阴阳五行说之来历[^1]\n\n![阴阳五行](https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/%E9%98%B4%E9%98%B3%E4%BA%94%E8%A1%8C.jpg)\n\n\n​\t**阴阳五行说，为二千年来迷信之大本营，直至今日，在社会上犹有莫大势力今当辞而辟之，故考其来历如次。**\n\n## 阴阳二字语意之变迁\n\n​\t阴阳两字义之见于《说文》者，《阜部》云：“陰，阖也。水之南，山之北也。从月，侌[^2]声。”，“陽，高明也。从日，昜声。“  ，然阜（fù）旁[^3]乃孳乳后起[^4]，其原字实为侌昜。《雲部》云：“黔，云覆日也。从雲，今声。侌，古文。”《勿部》云：“昜，开也。从日、一、勿。一曰飞扬，一曰长也，一曰疆者众兒。”  侌字所从之 “云”，即古雲字，侌为云覆日，此其本义。引申为凡覆蔽之义。覆蔽必阖，因又引申为阖义。背日之地必阖，城市多倚北而背日，因又引申为背面、或里面、或北方之义。此  “陰” 字 字义变迁之大凡也。昜，从日从一者，日在地上，即日出之意。从勿者，《说文》云：“勿，州里所建旗象。……”  日出地上而建旗焉，气象极发扬，此其本义。引申以表日之光彩，故日称太阳，朝日称朝阳，夕日称夕阳。日出则暖，故又引申谓和暖之气为阳气。向日乃能见阳光，故又引申为正面、或表面、或南方之义。此 ”陽“ 字字义变迁之大凡也。南北向背相对待，故阴阳二字连用，常以表南北或表里外[^5]之义。\n\n​\t阴阳两字相连属成一名辞，表示无形无象之两种对待的性质，盖自孔子或老子始。孔、老以前之书确实可信者，一日《诗经》，二曰《书经》，三日《仪礼》，四曰《易经》之卦辞爻辞[^6]。《仪礼》全书中无阴阳二字，可置勿论。其他三经所有阴字、阳字之文句及意义，列举诠释如下：\n\n《诗经》\n“其阴，虺虺[^7]其雷。”（《卫风·终风）\n“习习谷风，以阴以雨。”（《卫风·谷风》）\n“阴续。”（《秦风·小》）\n“黍苗，阴雨之”（《曹风·下泉》）\n“迨天之未阴雨”（《豳风·鸦》）\n“二之日，纳于凌阴。”（豳风·七月》）\n“又窘阴雨。”（《小雅·正月》）\n“既之阴女，反我赫”（大雅·桑柔））\n“其雷，在南山之阳。”《《周南·殷其需》\n“君子阳阳，左执簧，右招我由房。”（《王风·君子扬扬》）\n“我送舅氏，曰至渭阳。”《秦风·渭阳》）\n“春日载阳。”（《豳风·七月》）\n“载立载黄，我朱孔阳。”（同上）\n“湛湛露斯，匪阳不晞。”（《小雅·湛露》）\n“日归归，岁亦阳止。”（《小雅·采薇》）\n“日月阳止，女心伤止。”（《小雅·杕杜》）\n“在洽之阳。”（《大雅·大明》）\n“居岐之阳。”（《大雅·皇矣》）\n“度其夕阳，豳居允荒。”（《大雅·公刘》）\n“桐梧生矣，于彼朝阳。”（《大雅·卷阿》）\n“龙阳阳。”（《周颂·载见》）\n“居岐之阳。”（《鲁颂·宫》\n“既景乃冈，相其阴阳。”（《大雅·公刘》\n\n《书经》：\n“阳鸟攸居。”（《禹贡》）\n“华阳黑水惟梁州。”（同上）\n“岷山之阳。”（同上）\n“南至于华阴。”（同上）\n“惟天阴下民。”（《洪范》）\n“乃或亮阴，三年不言。”（《无逸》）\n\n《易》[^8]爻辞：\n“鹤鸣在阴，其子和之。”（《中孚》九二）\n\n   \t右[^9]《诗经》言阴者八，阳者十四，言阴阳者一。《书经）言阴言阳各三。最奇者《易经》一书，庄子所谓  “《易》以道阴阳“ 者，卦辞爻辞中，仅有此“中孚[^10]九二[^11]之一条，单举一阴字。\n\n   \t右列诸文中阴字，《谷风》、《下泉》、《鸱》、《正月》之 “阴雨“ 及《终风》之 ”瞪瞪其阴“，皆用“云覆日”之义，即最初本义也《桑柔》之“既之阴女”，孔疏云：“往阴覆汝”。《洪范》之 “惟天阴骘（zhì）[^12]下民”，马注云：“阴，覆也。“  皆用覆蔽之引申义。“阴靷鋈（wù）续”，《毛诗》云：“阴靷（yǐn），掩轨也。”  掩亦覆义。《无逸》之 “亮阴”,《尚书大传》作 “梁阖”，言凶庐之阖也，即《说文》以释阴之义。《七月）之“纳于凌阴”，《毛诗》云：”凌阴，冰室也。”，盖深邃黑暗之室。《中孚》之 “鹤鸣在阴”，谓鹤鸣于其子所不及见之处，而其子能和之也，亦覆蔽之引申义。《禹》之“华阴”，谓华山之背面，亦从阖覆义引申来。凡三经所有阴字，意义尽于此。\n\n​          其阳字，《闷官》之“龙族阳阳”，正昜字从勿之本义，谓在日下飞扬也。“君子阳阳[^13]” 者，《史记·晏子传》：“意气阳阳甚自得”。亦如日下旗，神气飞扬也。此皆最初之义，《湛露》之“匪阳不晞”，《卷阿》之 “于彼朝阳”，《公刘》之“度其夕阳”，皆节彼日在地上之义，直以阳为日。《七月》之“我朱孔阳”，言朱色之光如日，亦同前解。《七月》之“春日载阳”，《采薇》之”岁亦阳止”，《杜》之“日月阳止”，《禹贡》之 “阳鸟攸居”，皆用向日和暖之引申义。《殷其雷》之“南山之阳”，《渭阳》之“曰至渭阳”，《大明》之“在洽之阳”，《皇矣》，《闷官》之 “居岐之阳”，《禹贡》之“华阳”、“岷山之阳”，皆言某山某水之正面、或表面、或南方，盖从向日之一面得名也。凡三经所有阳字，意义尽于此。\n\n​         阴阳二字连用者，惟《公刘》“既景乃冈，相其阴阳” 一语，谓在山冈上测日影，察其向背云尔，与后世所谓阴阳之义迥别。\n\n​\t由此观之，**商周以前所谓阴阳者，不过自然界中一种粗浅微末之现象，绝不含有何等深邃之意义。**阴阳二字意义之剧变，盖自老子始。老子曰：“*万物负阴而抱阳。*”[^14] 此语当作何解，未易断言[^15]，抑[^16]固有以异于古所云矣。虽然，五千言中言阴阳者只此一句，且亦非书中重要语。故谓老子与阴阳说有何等关系，吾未敢承。\n\n​\t庄子言“《易》以道阴阳”，《易》卦辞、爻辞皆未尝言阴阳，既如前述。然则此语只能作孔子所赞之《易》解耳。今所传《十翼》，其确出孔子手著最可信者，莫如《彖传》、《象传》，然此两传中，惟《乾》初九《象传》云：“潜龙勿用，阳在下也。”《坤》初六《象传》云：“履霜坚冰，阴始凝也。”《彖》、《象》两传中，刚柔、内外、上下、大小等对待名词，几于[^17]无卦不有，独阴阳二字仅于此两卦各一见，可谓大奇。至《系辞》、《说卦》、《文言》诸传，则言之较多。今列举其文如下：\n\n​\t“一阴一阳之谓道。”\n\n​\t“阳卦多阴，阴卦多阳。其故何也？阳卦奇，阴卦偶。”\n\n​\t“乾，阳物也；坤，阴物也。阴阳合德，而刚柔有体。”\n\n​\t“阴阳之义配日月，易简之善配至德。”（以上《系辞传》）\n\n​\t“观变于阴阳而立卦。”\n\n​\t“立天之道，曰阴与阳。立地之道，曰柔与刚。立人之道，曰仁与义。”（以上《说卦传》）\n\n​\t“潜龙勿用，阳气潜藏。”\n\n​\t“阴虽有美含之。”\n\n​\t“阴疑于阳必战，为其嫌于无阳也，故称龙焉。”（以上《文言传》）\n\n​\t[《系辞》](<https://baike.baidu.com/item/%E7%B3%BB%E8%BE%9E>)、[《文言》](<https://baike.baidu.com/item/%E6%96%87%E8%A8%80%E4%BC%A0>)诸传，不敢遂认为直接出孔子手。因传中多有“子曰”字样，论体例应为七十子后学者所记也。姑置不论，即将以上诸条全认为孔子学说，其所谓阴阳者亦不过如此。盖孔子之哲学，谓宇宙间有两种力相对待，相摩荡，如电气之有正负，斯为万有之缘起。此两种力难于表示，故以种种对待名辞形容之，如刚柔、动静、消息、屈伸、往来、进退、翕辟[^18]等皆是，而阴阳亦其一也。就中言阴阳者，远不如言刚柔、消息、往来者之多。与其谓《易》以道阴阳，母宁[^19]谓《易》以道刚柔，道消息也。**要之阴阳两字，不过孔子“二元哲学”之一种符号，而其所用符号，又并不止此一种，其中并不含有何等神秘意味，与矫诬[^20]之术数更相远。**故谓后世之阴阳说导源于孔子，吾亦未敢承[^21]。\n\n## 五行二字语意之变迁\n\n \t五行二字最初见于经典者，则《尚书·甘誓》，云：“有扈氏威侮五行，怠弃三正。”[^22]此语作何解，颇难臆断。后世注家，多指五行为金、木、水、火、土，三正为建子、建丑、建寅。然据彼辈所信，子、丑、寅建，分配周、商、夏。《甘誓》为夏书，则时无子、丑二建，何得云三正？且金、木、水、火、土之五行，何得言威侮，又何从而威侮者？窃疑此文应解为威侮五种应行之道[^23]，怠弃三种正义。其何者为五，何者为三，固无可考。然与后世五行说绝不相蒙，盖无疑。\n\n​\t次则为《洪范》。自汉人作《洪范五行传》后，于是言五行者必联想《洪范》，此两名词几成不可离之关系。虽然，实际上《洪范》所谓五行果有何等神秘意味否耶？请勘视原文：\n\n​\t“我闻在昔，鲧（gǔn）堙（yīn）洪水，汩陈其五行。”\n\n​\t“一五行：一曰水，二曰火，三曰木，四曰金，五曰土。水曰润下，火曰炎上，木曰曲直，金曰从革，土爱稼稿。润下作咸，炎上作苦，曲直作酸，从革作辛，稼作甘。“[^24]\n\n​\t此不过将物质区分为五类，言其功用及性质耳，何尝有丝毫哲学的或术数的意味？ \" 鲧湮洪水，汩陈其五行 ” 者，言因湮水之故，致一切物质不能供人用。若谓汩乱五行原理，则与堙水何关耶？**《洪范》本为政治书，其九畴先列五行者，因其为物质的要素，人与经济所攸命耳。**《左传》所谓 **“天生五材，民并用之”，即此义也。然则《洪范》本意，并非以此一畴统贯生八畴甚明，后世愚儒，欲取凡百事物皆纳入五行中，于是首将第二畴之五事貌、言、视、听、思分配水、火、木、金、土。**试问，第四畴之五纪，第九畴之五福，数固同为五，然有法分配否？ 第三畴之八政，第六畴之三德，数不止五，或不及五者，又有法分配否？ 第五畴之皇极，第七畴之稽疑，第八畴之庶，并无数目者，又有法分配否？以一贯八，而所贯者亦仅一而止。愚儒之心劳日拙，大可怜也。\n\n​\t  除《书经》此两文外，《诗经》、《仪礼》、《易》经传乃至《老子》、《论语》、《孟子》皆不见有以五行二字连文者。（此凭吾记忆所及耳，读者如有所发见望指正） 惟《墨子·经下》及《经说下》云：“五行毋常胜，说在宜。”   “五合，水火土，火离然。火烁金，火多也。金靡炭，金多也。合之府水，木离木。……”  此确与《洪范》所言五行为同物，且其言“无常胜”之义，注家或以后世五行生说解之。实则胜训贵，意谓此五种物质无常贵，但适宜应需则为贵，其说甚平实，不待穿凿也。\n\n​\t《荀子·非十二子篇》，其非子思、孟轲也，有颇奇异之数语。曰：“案往旧造说，谓之**五行**，甚僻违而无类，幽隐而无说，闭约而无解。案饰其辞而衹敬之，曰：此真先君子之言也。子思唱之，孟轲和之。”\n\n​\t此五行不知作何解，若谓即《洪范》之五行耶？子思、孟轲书中只字未尝道及。《中庸》以君臣、父子、兄弟、夫妇、朋友五者为天下之达道，道有行义，五行或指此耶？然此为儒家常言，非思、轲所创，且无所谓“僻违、幽隐、闭约”。杨倞注释为仁、义、礼、智、信之五常[^25]，或者近是然子思说虽无可考，或《中庸》外尚有著述。孟子则恒言仁义礼智，未尝以信与之并列也。此文何指，姑勿深论但决非如后世之五行说，则可断言耳。\n\n​\t古籍中可信者，其言五行之说，以吾记忆所及，尽于是矣。此外，尚有应怀疑者一段，则《左传》昭二十五年记郑子大叔与晋赵简子问答语：\n\n​\t“吉也闻诸先大夫子产日：天地之经，而民实则之…用其五行气为五味，发为五色，章为五声。……”[^26]\n\n​\t此与后世所谓“《洪范》五行”者甚相类。此文如可信，则是孔子之先辈子产时已有此说矣。然《左传》真伪，在学界久成问题，藉日非全伪，然其作者最早应为战国时人，且最少有一部分为汉人窜乱，此殆无可讳者。谓子产有是言，吾以当时所有学说旁证之，不能置信也。\n\n​\t五行说之极怪诞而有组织者，始见于《吕氏春秋》之十二览。其后《小戴礼记》采之，即《月令篇），《淮南子》又采之，其说略如下：\n\n​\t“孟春之月……其日甲乙，其帝太皞，其神句芒，其虫鳞，其音角……其味酸，其臭，其祀户，祭先脾。……天子居青阳左个，驾苍龙，载青旂，衣青衣，服青玉，食麦与羊。……“\n\n​\t如此将一年四季分配五行：春木、夏火、秋金，冬水，所余之土无可归，则于夏秋交界时为拓一位置。于是五方之东、西、、北、中，五色之青、赤、黄、白、黑，五声之宫、商、角、、羽，五味之酸、苦、咸、甘，五虫之毛、介、鳞、羽、倮，五祀之井、灶、行，户、中，五谷之黍、稷、稻、麦、，五畜之马、牛、羊、犬、豕，五脏之心、肝、肺、脾、肾，五帝之太皞（hào）、炎帝、黄帝、少昊、颛顼，五神之句芒、祝融、后上、蓐收、玄冥，皆一一如法分配。《洪范》五事抑未编入。**乃至如十天、六律、六吕等数目不与五符者，亦割裂以隶[^27]之。如是将宇宙间无量无数之物象事理[^28]，皆硬分为五类，而以纳诸所谓五行者之中，此种诡异之组织遂[^29]二千年蟠据全国人之心理，且支配全国人之行事。嘻！吾辈死生关系之医药，皆此种观念之产物，吾辈最爱敬之中华民国国旗，实为此种观念最显著之表象，他更何论也。**\n\n## 阴阳家之成立及阴阳五行说之传播\n\n​\t**由此观之，春秋战国以前，所谓阴阳，所谓五行，其语甚希见，其义极平淡，且此二事从未尝并为一谈。 请经及孔、老、墨、孟、韩诸大哲皆未尝齿及。** 然则造此邪说以惑世诬民者谁耶？其始起于燕、齐方士[^30]。而其建设之，传播之，宜负罪责者三人焉：日邹衍，曰董仲舒，曰刘向。\n\n​\t《史记·孟子荀卿列传》云：“邹衍乃深观阴阳消息而作迁怪之变，《终始》、《大圣》之篇十余万言。”  又云：“ 称引天地剖判以来，五德转移，治各有宜，而符应若兹。”   又《封禅书》云：“齐威、宣之时，驺子[^31]之徒，论著终始五德之运，及秦帝，齐人奏[^32]之。” 《文选·魏都赋》注引《七略》云：“邹子有终始五德，从所不胜，土德后木德继之，金德次之，火德次之，水德次之。”  邹衍之书，见于《汉书·艺文志》者，有《邹子》四十九篇、《邹子终始》五十六篇，今虽已佚，然据《史记》及《七略》所说，可知其概。**妖言之作俑者，实此人也。**\n\n​\t**衍倡此妖言，乘秦、汉间学术颓废之隙，遂以万斛[^33]狂澜之势，横领思想界之全部。**司马谈[^34]作《六家要旨》，以阴阳家与儒、道、墨、名、法并列，其势力可想。今将《汉书·艺文志》所著录此类书，照录如下：书目下括中文字皆《汉书》原注：\n\n《宋司星子韦》三篇（景公之史）\n\n《公生终始》十四篇（传邹爽终始书）\n\n《公孙发》二十二篇（六国时）\n\n《子》四十九篇（名衍，齐人，为燕昭王师居稷下，号“谈天衍”）《邹子终始》五十六篇\n\n《乘丘子》五篇（六国时）\n\n《杜文公》五篇（六国时）\n\n《黄帝秦素》二十篇（六国时，韩请公子所作）\n\n《南公》三十一篇（六国时）\n\n《容成子》十四篇\n\n《张苍》十六篇（承相北平侯）\n\n《邹爽子》十二篇（齐人，号曰“雕龙爽”）\n\n《间丘子》十三篇（名快，魏人，在南公前）\n\n《冯促》十三篇（郑人）\n\n《将巨子》五（六国时，先南公，南公称之）\n\n《五曹官制》五篇（汉制，似贾谊所条）\n\n《周伯》十一篇（齐人，六国时）\n\n《卫侯官》十二篇（近世，不知作者）\n\n《于长天下忠臣）九篇（平阴人，近世）\n\n《公孙浑邪》十五篇（平）\n\n《阴阳》三十八篇（不知作者）\n\n《公孙浑邪》十五（平曲侯）\n\n《杂阴阳》三十八篇（不知作者）\n\n 右《诸子略》阴阳家二十一家三百大十九篇   《大壹兵法》一篇[^35]\n\n《天一兵法》三十五篇\n\n《神农兵法》一篇\n\n《黄帝》十六篇（图三卷）\n\n《封胡》五篇（黄帝臣，依讬也）\n\n《风后》十三篇（图二卷黄帝臣，依讬也）\n\n《力牧》十五篇（黄帝臣，依讬也）\n\n《冶子》一篇（图一卷）\n\n《鬼容区》三篇（图一卷，黄帝臣，依讬也）\n\n《地典》六篇\n\n《孟子》一篇\n\n《东父》三十一篇\n\n《师旷》八篇（晋平公臣）\n\n《弘》十五篇（周史）\n\n《别成子望军气》六篇（图三卷）\n\n《辟兵威胜方》七十篇\n\n右《兵书略》阴阳家十六家二百四十九篇《泰一阴阳》二十三卷\n\n《黄帝阴阳》二十五卷\n\n《诸王子论阴阳》二十五卷\n\n《大元阴阳》二十六卷\n\n《三典阴阳谈论》二十七卷\n\n《神农大幽五行》二十七卷\n\n《四时五行经》二十六卷\n\n《猛子昭》二十五卷\n\n《阴阳五行时令》十九卷\n\n《堪舆金》四卷\n\n《务成子灾异应》十四卷\n\n《十二典灾异应》十二卷\n\n《钟律灾异》二十六卷\n\n《钟律丛辰日苑》二十三卷\n\n《钟律消息》二十九卷\n\n《黄钟》七卷\n\n《天一》六卷\n\n《泰一》二十九卷\n\n《刑德》七卷\n\n《风鼓六甲》二十四卷\n\n《风后孤虚》二十卷\n\n《六合随典》二十五卷\n\n《转位十二神》二十五卷\n\n《羡门式法》二十卷\n\n《门式》二十卷\n\n《文解六甲》十八卷\n\n《文解二十八宿》二十八卷\n\n《五音奇腋用兵》二十三卷\n\n《五音奇胲刑德》二十一卷\n\n《五音定名》十五卷\n\n右《数术略）五行家三十一家六百五十二卷 【上面所列的总结】\n\n​\t此外，如《数术略》医经、房中[^36]两门，亦大抵属此类，观今所传《黄帝内经》可知也。即以此三门论，为书一千三百余篇，对于《艺文志》总数万三千二百六十九卷，已占十分一而强。其实细绎全志目录，揣度其与此等书同性质者，恐占四分之一乃至三分之一。嘻！学术界之耻辱，莫此为甚矣。\n\n​\t邹衍书及他诸书皆不可见，可见者有董仲舒之《春秋繁露》，仲舒二千年来受醇儒之徽号[^37]，然其书祖述[^38]阴阳家言者几居半。今无暇一一胪列内容，但举其篇目：\n\n《五行对》第三十八\n\n《五行之义》第四十二\n\n《阴尊阳卑》第四十三\n\n《王道通三》第四十四\n\n《天辨在人》第四十六\n\n《阴阳位》第四十七\n\n《阴阳终始》第四十八\n\n《阴阳义》第四十九\n\n《阴阳出入》第五十\n\n《天道无二》第五十\n\n《暖敦多》第五十二\n\n《基义》第五十三\n\n《同类相动》第五十七\n\n\n《五行相胜》第五十九\n\n《五行逆顺》第六十\n\n《治水五行》第六十一\n\n《治乱五行》第六十二\n\n《五行变救》第六十三\n\n《五行五事》第六十四\n\n《天地之行》第七十八\n\n《如天之为》第八十\n\n《天地阴阳》第八十一\n\n​\t以上二十三篇，皆言阴阳五行，殆占全书之半。其中，所含精深之哲理固甚多，要之半袭阴阳家言，最少亦受其影响，而绝非孔、孟、荀以来之学术，则可断言也。**仲舒以儒家大师，而态度如此，故一时经学家皆从风而靡。**仲舒自以此术治《春秋》，京房、焦赣之徒以此术治《易》，夏侯胜、李寻之徒以此术治《书》，翼奉、孟之徒以此术治《诗》，王史氏之徒以此术治《礼》。于是庄严纯洁之六经被邹衍余毒所蹂躏，无复完肤矣。《艺文志·六艺略》所著录之书，其属于此类者以吾所推度，最少有如下之各种：\n\n《易》：\n\n《古五子》十八篇（自甲子至壬子说《易》阴阳）\n\n《淮南道训》二篇（淮南王安聘明《易》者九人，号九师说）《杂灾异》三十五篇\n\n《神输》五篇（师古曰，刘向《别录》云，神输者，王道失则灾害生得则四海输之祥瑞）\n\n《孟氏京房》十一篇\n\n《灾异孟氏京房》六十六篇\n\n《京氏段嘉》十二篇\n\n《书》：\n\n 刘向《五行传记》十一卷\n\n 许商《五行传记》一卷\n\n《诗》：\n\n《齐后氏传》三十九卷\n\n《齐孙氏传》二十八卷\n\n《齐杂记》十八卷\n\n《礼》：\n\n《明堂阴阳》三十三篇\n\n《王史氏》二十一篇（？）\n\n《明堂阴阳说》五篇\n\n《古封群祀》二十二篇\n\n《封禅议对》十九篇\n\n《汉封样群祀》三十六篇\n\n《春秋》：\n\n《公羊外传》五十篇（？）\n\n《谷梁外传》二十篇（？）\n\n《公羊杂记》八十三篇（？）\n\n《诸子略》儒家\n\n《董仲舒》百二十三篇（？）\n\n​\t右诸书虽什九[^39]已佚，然经近人辑出，尚多能得其梗概。要之，两汉所谓今文家经说，其能脱阴阳五行臭味者，什无二三，大率自仲舒启之。\n\n​\t《汉书·五行志》云：“汉兴，承秦灭学之后，景武之世，董仲舒治《公羊春秋》，始推阴阳，为儒者宗。宣、元之世，刘向治《谷梁春秋》，数其祸福，傅以《洪范》，与仲舒错[^40]。至向子歆，……言《五行传》，又颇不同。是以揽仲舒、别向、歆……所陈行事，……著于篇。”  **据此知汉儒阴阳五行之学，开于仲舒而成于向、歆父子。**《五行志》所载，大抵即刘向《洪范·五行传》之言也。吾侪试一籀[^41]读，当审其内容为何如。**而后此所谓正史者，大率皆列此一篇，千余年莫之易呜呼！ 禨[^42]祥灾之迷信，深中于士大夫，智日以昏，而志日以偷，谁之咎也。吾故略疏证其来历如右，俾诵法[^43]孔子之君子得省览焉。**\n\n\n\n[^1]: 说明：梁启超写于1921年，由知 [乎用户Jack Lei](<https://www.zhihu.com/people/JackZhouMine/activities>) 校对，批注。\n\n[^2]:侌：yīn，古同阴。\n\n[^3]: 阜旁：耳朵旁。\n\n[^4]: 孳乳后起：派生而来。\n\n[^5]:  外：原文没有外，认为作者笔误。\n\n[^6]: 卦辞爻辞：卦辞，说明《易经》六十四卦要义的文字，即占卜是解释卦象的文字。爻（yaó）辞，占卜时用以解释爻的文字，一卦有六爻。阳爻称之为九，阴爻称为六。从上到下，初九（六），九二（六二），九三（六三），九四（六四），九五（六五），上九（上六）。\n\n[^7]:  虺虺：拼音（huǐ huǐ ） , 表雷声。\n\n[^8]: 《易》：《易经》的简称，下同。\n\n[^9]: 右：清末文字还是从上往下，从右到左读，同下。\n\n[^10]: 中孚：中孚卦，象征诚信、诚实。图片网上自行搜索。\n\n[^11]: 九二：爻的一种。\n\n[^12]:骘（zhì）：安定。惟天[阴骘](https://baike.baidu.com/item/%E9%98%B4%E9%AA%98)下民，相协厥居。——《书·洪范》。[孔传](https://baike.baidu.com/item/%E5%AD%94%E4%BC%A0)：“骘，定也。夫不言而默定下民。”\n\n[^13]:阳阳：今作“扬扬”。\n\n[^14]:中医因此说中医起源于道。\n\n[^15]: 断言:可以肯定地说。\n\n[^16]: 抑：语气词，在句首，无义。\n\n[^17]:几于：几乎。\n\n[^18]:翕辟：开合。\n\n[^19]: 母宁：毋宁，作者笔误。\n\n[^20]:矫诬：故弄玄虚。\n\n[^21]:承：奉也，受也，接受。\n\n[^22]:引自《尚书·甘誓》：大战于甘，乃召六卿。王曰：嗟！六事之人，予誓告汝：有扈氏威侮五行，怠弃三正，天用剿绝其命。今予惟恭行天之罚。左不攻于左，汝不恭命；右不攻于右，汝不恭命；御非其马之正，汝不恭命。用命，赏于祖；不用命，戮于社。\n\n[^23]:五行：应行之道：首要行业，金，铁器，生产铁器的行业；木，打柴行业；水，取水行业；土，播种，生产行业。泛指社会产业、生活物资。\n\n[^24]:  五味：五行配五味出现了。\n\n[^25]: 五常：五常配五行，有别于儒家的五德。\n\n[^26]: 五声：五声配五行。\n\n[^27]:隶：通 “离”，动词，使之离，离开，废弃之意。\n\n[^28]:物象事理：事物的现象，事物的原理，指自然运行的原理。\n\n[^29]:遂：竟然。\n\n[^30]: 方士：术士，修习方术的人，包括占卜、预言、法术、气功、炼丹等，达到趋吉避凶、[通灵](https://www.wikiwand.com/zh-hans/%E9%80%9A%E9%9D%88)、[长生不老](https://www.wikiwand.com/zh-hans/%E9%95%B7%E7%94%9F%E4%B8%8D%E8%80%81)、[羽化飞升](https://www.wikiwand.com/zh-hans/%E7%BE%BD%E5%8C%96)等目的。\n\n[^31]:驺子：邹衍的尊称。\n\n[^32]:奏：奉上，上奏。\n\n[^33]: 万斛（hú）: 容量之多。斛，体积单位，十斗或五斗为一斛。\n[^34]:司马谈：司马迁的父亲。\n\n[^35]:  上面所列的总结，下同。\n\n[^36]:房中：房中术，包括优学、性学和性保健，御女之术，多由男性对女性实施。女性对男性实施的，又叫媚术。 \n\n[^37]:醇儒之徽号：醇儒，纯在的儒生。徽号，尊号。\n\n[^38]:祖述：效法前人。\n\n[^39]:什九：十之九。\n\n[^40]:错：打磨。\n\n[^41]:籀（zhòu）：读书。\n\n[^42]:禨（jī）：迷信鬼神，向鬼神求福。\n\n[^43]:诵法：称颂并效法。","source":"_posts/阴阳五行之来历.md","raw":"---\ntitle: 阴阳五行之来历\ntags:\n  - 中医\n  - 阴阳五行\n  - 伪科学\ncategories:\n  - [中医]\ndate: 2020-01-18 23:52:31\n---\n\n\n因为谭秦东被鸿茅药酒“跨省抓捕”事件，开始注意到中药，然后了解到中医，才发现中医的荒谬。这篇文章是梁启超1921年批判阴阳五行的，然作为中医的基本理论，有必要了解它的来历。我在360图书馆找到，[梁启超：阴阳五行说之来历](http://www.360doc.com/showwebdoc/0/0/882999442.aspx), 识图软件扫描提取文字，批注一些生涩的词语，可能有误，欢迎指正。格式可能乱了，[百度网盘获取原文](https://pan.baidu.com/s/1XWbZ-z5CgtogYcipwP2Vkg) 提取码：wpf6\n<!-- more -->\n***\n\n@[TOC]\n\n#  阴阳五行说之来历[^1]\n\n![阴阳五行](https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/%E9%98%B4%E9%98%B3%E4%BA%94%E8%A1%8C.jpg)\n\n\n​\t**阴阳五行说，为二千年来迷信之大本营，直至今日，在社会上犹有莫大势力今当辞而辟之，故考其来历如次。**\n\n## 阴阳二字语意之变迁\n\n​\t阴阳两字义之见于《说文》者，《阜部》云：“陰，阖也。水之南，山之北也。从月，侌[^2]声。”，“陽，高明也。从日，昜声。“  ，然阜（fù）旁[^3]乃孳乳后起[^4]，其原字实为侌昜。《雲部》云：“黔，云覆日也。从雲，今声。侌，古文。”《勿部》云：“昜，开也。从日、一、勿。一曰飞扬，一曰长也，一曰疆者众兒。”  侌字所从之 “云”，即古雲字，侌为云覆日，此其本义。引申为凡覆蔽之义。覆蔽必阖，因又引申为阖义。背日之地必阖，城市多倚北而背日，因又引申为背面、或里面、或北方之义。此  “陰” 字 字义变迁之大凡也。昜，从日从一者，日在地上，即日出之意。从勿者，《说文》云：“勿，州里所建旗象。……”  日出地上而建旗焉，气象极发扬，此其本义。引申以表日之光彩，故日称太阳，朝日称朝阳，夕日称夕阳。日出则暖，故又引申谓和暖之气为阳气。向日乃能见阳光，故又引申为正面、或表面、或南方之义。此 ”陽“ 字字义变迁之大凡也。南北向背相对待，故阴阳二字连用，常以表南北或表里外[^5]之义。\n\n​\t阴阳两字相连属成一名辞，表示无形无象之两种对待的性质，盖自孔子或老子始。孔、老以前之书确实可信者，一日《诗经》，二曰《书经》，三日《仪礼》，四曰《易经》之卦辞爻辞[^6]。《仪礼》全书中无阴阳二字，可置勿论。其他三经所有阴字、阳字之文句及意义，列举诠释如下：\n\n《诗经》\n“其阴，虺虺[^7]其雷。”（《卫风·终风）\n“习习谷风，以阴以雨。”（《卫风·谷风》）\n“阴续。”（《秦风·小》）\n“黍苗，阴雨之”（《曹风·下泉》）\n“迨天之未阴雨”（《豳风·鸦》）\n“二之日，纳于凌阴。”（豳风·七月》）\n“又窘阴雨。”（《小雅·正月》）\n“既之阴女，反我赫”（大雅·桑柔））\n“其雷，在南山之阳。”《《周南·殷其需》\n“君子阳阳，左执簧，右招我由房。”（《王风·君子扬扬》）\n“我送舅氏，曰至渭阳。”《秦风·渭阳》）\n“春日载阳。”（《豳风·七月》）\n“载立载黄，我朱孔阳。”（同上）\n“湛湛露斯，匪阳不晞。”（《小雅·湛露》）\n“日归归，岁亦阳止。”（《小雅·采薇》）\n“日月阳止，女心伤止。”（《小雅·杕杜》）\n“在洽之阳。”（《大雅·大明》）\n“居岐之阳。”（《大雅·皇矣》）\n“度其夕阳，豳居允荒。”（《大雅·公刘》）\n“桐梧生矣，于彼朝阳。”（《大雅·卷阿》）\n“龙阳阳。”（《周颂·载见》）\n“居岐之阳。”（《鲁颂·宫》\n“既景乃冈，相其阴阳。”（《大雅·公刘》\n\n《书经》：\n“阳鸟攸居。”（《禹贡》）\n“华阳黑水惟梁州。”（同上）\n“岷山之阳。”（同上）\n“南至于华阴。”（同上）\n“惟天阴下民。”（《洪范》）\n“乃或亮阴，三年不言。”（《无逸》）\n\n《易》[^8]爻辞：\n“鹤鸣在阴，其子和之。”（《中孚》九二）\n\n   \t右[^9]《诗经》言阴者八，阳者十四，言阴阳者一。《书经）言阴言阳各三。最奇者《易经》一书，庄子所谓  “《易》以道阴阳“ 者，卦辞爻辞中，仅有此“中孚[^10]九二[^11]之一条，单举一阴字。\n\n   \t右列诸文中阴字，《谷风》、《下泉》、《鸱》、《正月》之 “阴雨“ 及《终风》之 ”瞪瞪其阴“，皆用“云覆日”之义，即最初本义也《桑柔》之“既之阴女”，孔疏云：“往阴覆汝”。《洪范》之 “惟天阴骘（zhì）[^12]下民”，马注云：“阴，覆也。“  皆用覆蔽之引申义。“阴靷鋈（wù）续”，《毛诗》云：“阴靷（yǐn），掩轨也。”  掩亦覆义。《无逸》之 “亮阴”,《尚书大传》作 “梁阖”，言凶庐之阖也，即《说文》以释阴之义。《七月）之“纳于凌阴”，《毛诗》云：”凌阴，冰室也。”，盖深邃黑暗之室。《中孚》之 “鹤鸣在阴”，谓鹤鸣于其子所不及见之处，而其子能和之也，亦覆蔽之引申义。《禹》之“华阴”，谓华山之背面，亦从阖覆义引申来。凡三经所有阴字，意义尽于此。\n\n​          其阳字，《闷官》之“龙族阳阳”，正昜字从勿之本义，谓在日下飞扬也。“君子阳阳[^13]” 者，《史记·晏子传》：“意气阳阳甚自得”。亦如日下旗，神气飞扬也。此皆最初之义，《湛露》之“匪阳不晞”，《卷阿》之 “于彼朝阳”，《公刘》之“度其夕阳”，皆节彼日在地上之义，直以阳为日。《七月》之“我朱孔阳”，言朱色之光如日，亦同前解。《七月》之“春日载阳”，《采薇》之”岁亦阳止”，《杜》之“日月阳止”，《禹贡》之 “阳鸟攸居”，皆用向日和暖之引申义。《殷其雷》之“南山之阳”，《渭阳》之“曰至渭阳”，《大明》之“在洽之阳”，《皇矣》，《闷官》之 “居岐之阳”，《禹贡》之“华阳”、“岷山之阳”，皆言某山某水之正面、或表面、或南方，盖从向日之一面得名也。凡三经所有阳字，意义尽于此。\n\n​         阴阳二字连用者，惟《公刘》“既景乃冈，相其阴阳” 一语，谓在山冈上测日影，察其向背云尔，与后世所谓阴阳之义迥别。\n\n​\t由此观之，**商周以前所谓阴阳者，不过自然界中一种粗浅微末之现象，绝不含有何等深邃之意义。**阴阳二字意义之剧变，盖自老子始。老子曰：“*万物负阴而抱阳。*”[^14] 此语当作何解，未易断言[^15]，抑[^16]固有以异于古所云矣。虽然，五千言中言阴阳者只此一句，且亦非书中重要语。故谓老子与阴阳说有何等关系，吾未敢承。\n\n​\t庄子言“《易》以道阴阳”，《易》卦辞、爻辞皆未尝言阴阳，既如前述。然则此语只能作孔子所赞之《易》解耳。今所传《十翼》，其确出孔子手著最可信者，莫如《彖传》、《象传》，然此两传中，惟《乾》初九《象传》云：“潜龙勿用，阳在下也。”《坤》初六《象传》云：“履霜坚冰，阴始凝也。”《彖》、《象》两传中，刚柔、内外、上下、大小等对待名词，几于[^17]无卦不有，独阴阳二字仅于此两卦各一见，可谓大奇。至《系辞》、《说卦》、《文言》诸传，则言之较多。今列举其文如下：\n\n​\t“一阴一阳之谓道。”\n\n​\t“阳卦多阴，阴卦多阳。其故何也？阳卦奇，阴卦偶。”\n\n​\t“乾，阳物也；坤，阴物也。阴阳合德，而刚柔有体。”\n\n​\t“阴阳之义配日月，易简之善配至德。”（以上《系辞传》）\n\n​\t“观变于阴阳而立卦。”\n\n​\t“立天之道，曰阴与阳。立地之道，曰柔与刚。立人之道，曰仁与义。”（以上《说卦传》）\n\n​\t“潜龙勿用，阳气潜藏。”\n\n​\t“阴虽有美含之。”\n\n​\t“阴疑于阳必战，为其嫌于无阳也，故称龙焉。”（以上《文言传》）\n\n​\t[《系辞》](<https://baike.baidu.com/item/%E7%B3%BB%E8%BE%9E>)、[《文言》](<https://baike.baidu.com/item/%E6%96%87%E8%A8%80%E4%BC%A0>)诸传，不敢遂认为直接出孔子手。因传中多有“子曰”字样，论体例应为七十子后学者所记也。姑置不论，即将以上诸条全认为孔子学说，其所谓阴阳者亦不过如此。盖孔子之哲学，谓宇宙间有两种力相对待，相摩荡，如电气之有正负，斯为万有之缘起。此两种力难于表示，故以种种对待名辞形容之，如刚柔、动静、消息、屈伸、往来、进退、翕辟[^18]等皆是，而阴阳亦其一也。就中言阴阳者，远不如言刚柔、消息、往来者之多。与其谓《易》以道阴阳，母宁[^19]谓《易》以道刚柔，道消息也。**要之阴阳两字，不过孔子“二元哲学”之一种符号，而其所用符号，又并不止此一种，其中并不含有何等神秘意味，与矫诬[^20]之术数更相远。**故谓后世之阴阳说导源于孔子，吾亦未敢承[^21]。\n\n## 五行二字语意之变迁\n\n \t五行二字最初见于经典者，则《尚书·甘誓》，云：“有扈氏威侮五行，怠弃三正。”[^22]此语作何解，颇难臆断。后世注家，多指五行为金、木、水、火、土，三正为建子、建丑、建寅。然据彼辈所信，子、丑、寅建，分配周、商、夏。《甘誓》为夏书，则时无子、丑二建，何得云三正？且金、木、水、火、土之五行，何得言威侮，又何从而威侮者？窃疑此文应解为威侮五种应行之道[^23]，怠弃三种正义。其何者为五，何者为三，固无可考。然与后世五行说绝不相蒙，盖无疑。\n\n​\t次则为《洪范》。自汉人作《洪范五行传》后，于是言五行者必联想《洪范》，此两名词几成不可离之关系。虽然，实际上《洪范》所谓五行果有何等神秘意味否耶？请勘视原文：\n\n​\t“我闻在昔，鲧（gǔn）堙（yīn）洪水，汩陈其五行。”\n\n​\t“一五行：一曰水，二曰火，三曰木，四曰金，五曰土。水曰润下，火曰炎上，木曰曲直，金曰从革，土爱稼稿。润下作咸，炎上作苦，曲直作酸，从革作辛，稼作甘。“[^24]\n\n​\t此不过将物质区分为五类，言其功用及性质耳，何尝有丝毫哲学的或术数的意味？ \" 鲧湮洪水，汩陈其五行 ” 者，言因湮水之故，致一切物质不能供人用。若谓汩乱五行原理，则与堙水何关耶？**《洪范》本为政治书，其九畴先列五行者，因其为物质的要素，人与经济所攸命耳。**《左传》所谓 **“天生五材，民并用之”，即此义也。然则《洪范》本意，并非以此一畴统贯生八畴甚明，后世愚儒，欲取凡百事物皆纳入五行中，于是首将第二畴之五事貌、言、视、听、思分配水、火、木、金、土。**试问，第四畴之五纪，第九畴之五福，数固同为五，然有法分配否？ 第三畴之八政，第六畴之三德，数不止五，或不及五者，又有法分配否？ 第五畴之皇极，第七畴之稽疑，第八畴之庶，并无数目者，又有法分配否？以一贯八，而所贯者亦仅一而止。愚儒之心劳日拙，大可怜也。\n\n​\t  除《书经》此两文外，《诗经》、《仪礼》、《易》经传乃至《老子》、《论语》、《孟子》皆不见有以五行二字连文者。（此凭吾记忆所及耳，读者如有所发见望指正） 惟《墨子·经下》及《经说下》云：“五行毋常胜，说在宜。”   “五合，水火土，火离然。火烁金，火多也。金靡炭，金多也。合之府水，木离木。……”  此确与《洪范》所言五行为同物，且其言“无常胜”之义，注家或以后世五行生说解之。实则胜训贵，意谓此五种物质无常贵，但适宜应需则为贵，其说甚平实，不待穿凿也。\n\n​\t《荀子·非十二子篇》，其非子思、孟轲也，有颇奇异之数语。曰：“案往旧造说，谓之**五行**，甚僻违而无类，幽隐而无说，闭约而无解。案饰其辞而衹敬之，曰：此真先君子之言也。子思唱之，孟轲和之。”\n\n​\t此五行不知作何解，若谓即《洪范》之五行耶？子思、孟轲书中只字未尝道及。《中庸》以君臣、父子、兄弟、夫妇、朋友五者为天下之达道，道有行义，五行或指此耶？然此为儒家常言，非思、轲所创，且无所谓“僻违、幽隐、闭约”。杨倞注释为仁、义、礼、智、信之五常[^25]，或者近是然子思说虽无可考，或《中庸》外尚有著述。孟子则恒言仁义礼智，未尝以信与之并列也。此文何指，姑勿深论但决非如后世之五行说，则可断言耳。\n\n​\t古籍中可信者，其言五行之说，以吾记忆所及，尽于是矣。此外，尚有应怀疑者一段，则《左传》昭二十五年记郑子大叔与晋赵简子问答语：\n\n​\t“吉也闻诸先大夫子产日：天地之经，而民实则之…用其五行气为五味，发为五色，章为五声。……”[^26]\n\n​\t此与后世所谓“《洪范》五行”者甚相类。此文如可信，则是孔子之先辈子产时已有此说矣。然《左传》真伪，在学界久成问题，藉日非全伪，然其作者最早应为战国时人，且最少有一部分为汉人窜乱，此殆无可讳者。谓子产有是言，吾以当时所有学说旁证之，不能置信也。\n\n​\t五行说之极怪诞而有组织者，始见于《吕氏春秋》之十二览。其后《小戴礼记》采之，即《月令篇），《淮南子》又采之，其说略如下：\n\n​\t“孟春之月……其日甲乙，其帝太皞，其神句芒，其虫鳞，其音角……其味酸，其臭，其祀户，祭先脾。……天子居青阳左个，驾苍龙，载青旂，衣青衣，服青玉，食麦与羊。……“\n\n​\t如此将一年四季分配五行：春木、夏火、秋金，冬水，所余之土无可归，则于夏秋交界时为拓一位置。于是五方之东、西、、北、中，五色之青、赤、黄、白、黑，五声之宫、商、角、、羽，五味之酸、苦、咸、甘，五虫之毛、介、鳞、羽、倮，五祀之井、灶、行，户、中，五谷之黍、稷、稻、麦、，五畜之马、牛、羊、犬、豕，五脏之心、肝、肺、脾、肾，五帝之太皞（hào）、炎帝、黄帝、少昊、颛顼，五神之句芒、祝融、后上、蓐收、玄冥，皆一一如法分配。《洪范》五事抑未编入。**乃至如十天、六律、六吕等数目不与五符者，亦割裂以隶[^27]之。如是将宇宙间无量无数之物象事理[^28]，皆硬分为五类，而以纳诸所谓五行者之中，此种诡异之组织遂[^29]二千年蟠据全国人之心理，且支配全国人之行事。嘻！吾辈死生关系之医药，皆此种观念之产物，吾辈最爱敬之中华民国国旗，实为此种观念最显著之表象，他更何论也。**\n\n## 阴阳家之成立及阴阳五行说之传播\n\n​\t**由此观之，春秋战国以前，所谓阴阳，所谓五行，其语甚希见，其义极平淡，且此二事从未尝并为一谈。 请经及孔、老、墨、孟、韩诸大哲皆未尝齿及。** 然则造此邪说以惑世诬民者谁耶？其始起于燕、齐方士[^30]。而其建设之，传播之，宜负罪责者三人焉：日邹衍，曰董仲舒，曰刘向。\n\n​\t《史记·孟子荀卿列传》云：“邹衍乃深观阴阳消息而作迁怪之变，《终始》、《大圣》之篇十余万言。”  又云：“ 称引天地剖判以来，五德转移，治各有宜，而符应若兹。”   又《封禅书》云：“齐威、宣之时，驺子[^31]之徒，论著终始五德之运，及秦帝，齐人奏[^32]之。” 《文选·魏都赋》注引《七略》云：“邹子有终始五德，从所不胜，土德后木德继之，金德次之，火德次之，水德次之。”  邹衍之书，见于《汉书·艺文志》者，有《邹子》四十九篇、《邹子终始》五十六篇，今虽已佚，然据《史记》及《七略》所说，可知其概。**妖言之作俑者，实此人也。**\n\n​\t**衍倡此妖言，乘秦、汉间学术颓废之隙，遂以万斛[^33]狂澜之势，横领思想界之全部。**司马谈[^34]作《六家要旨》，以阴阳家与儒、道、墨、名、法并列，其势力可想。今将《汉书·艺文志》所著录此类书，照录如下：书目下括中文字皆《汉书》原注：\n\n《宋司星子韦》三篇（景公之史）\n\n《公生终始》十四篇（传邹爽终始书）\n\n《公孙发》二十二篇（六国时）\n\n《子》四十九篇（名衍，齐人，为燕昭王师居稷下，号“谈天衍”）《邹子终始》五十六篇\n\n《乘丘子》五篇（六国时）\n\n《杜文公》五篇（六国时）\n\n《黄帝秦素》二十篇（六国时，韩请公子所作）\n\n《南公》三十一篇（六国时）\n\n《容成子》十四篇\n\n《张苍》十六篇（承相北平侯）\n\n《邹爽子》十二篇（齐人，号曰“雕龙爽”）\n\n《间丘子》十三篇（名快，魏人，在南公前）\n\n《冯促》十三篇（郑人）\n\n《将巨子》五（六国时，先南公，南公称之）\n\n《五曹官制》五篇（汉制，似贾谊所条）\n\n《周伯》十一篇（齐人，六国时）\n\n《卫侯官》十二篇（近世，不知作者）\n\n《于长天下忠臣）九篇（平阴人，近世）\n\n《公孙浑邪》十五篇（平）\n\n《阴阳》三十八篇（不知作者）\n\n《公孙浑邪》十五（平曲侯）\n\n《杂阴阳》三十八篇（不知作者）\n\n 右《诸子略》阴阳家二十一家三百大十九篇   《大壹兵法》一篇[^35]\n\n《天一兵法》三十五篇\n\n《神农兵法》一篇\n\n《黄帝》十六篇（图三卷）\n\n《封胡》五篇（黄帝臣，依讬也）\n\n《风后》十三篇（图二卷黄帝臣，依讬也）\n\n《力牧》十五篇（黄帝臣，依讬也）\n\n《冶子》一篇（图一卷）\n\n《鬼容区》三篇（图一卷，黄帝臣，依讬也）\n\n《地典》六篇\n\n《孟子》一篇\n\n《东父》三十一篇\n\n《师旷》八篇（晋平公臣）\n\n《弘》十五篇（周史）\n\n《别成子望军气》六篇（图三卷）\n\n《辟兵威胜方》七十篇\n\n右《兵书略》阴阳家十六家二百四十九篇《泰一阴阳》二十三卷\n\n《黄帝阴阳》二十五卷\n\n《诸王子论阴阳》二十五卷\n\n《大元阴阳》二十六卷\n\n《三典阴阳谈论》二十七卷\n\n《神农大幽五行》二十七卷\n\n《四时五行经》二十六卷\n\n《猛子昭》二十五卷\n\n《阴阳五行时令》十九卷\n\n《堪舆金》四卷\n\n《务成子灾异应》十四卷\n\n《十二典灾异应》十二卷\n\n《钟律灾异》二十六卷\n\n《钟律丛辰日苑》二十三卷\n\n《钟律消息》二十九卷\n\n《黄钟》七卷\n\n《天一》六卷\n\n《泰一》二十九卷\n\n《刑德》七卷\n\n《风鼓六甲》二十四卷\n\n《风后孤虚》二十卷\n\n《六合随典》二十五卷\n\n《转位十二神》二十五卷\n\n《羡门式法》二十卷\n\n《门式》二十卷\n\n《文解六甲》十八卷\n\n《文解二十八宿》二十八卷\n\n《五音奇腋用兵》二十三卷\n\n《五音奇胲刑德》二十一卷\n\n《五音定名》十五卷\n\n右《数术略）五行家三十一家六百五十二卷 【上面所列的总结】\n\n​\t此外，如《数术略》医经、房中[^36]两门，亦大抵属此类，观今所传《黄帝内经》可知也。即以此三门论，为书一千三百余篇，对于《艺文志》总数万三千二百六十九卷，已占十分一而强。其实细绎全志目录，揣度其与此等书同性质者，恐占四分之一乃至三分之一。嘻！学术界之耻辱，莫此为甚矣。\n\n​\t邹衍书及他诸书皆不可见，可见者有董仲舒之《春秋繁露》，仲舒二千年来受醇儒之徽号[^37]，然其书祖述[^38]阴阳家言者几居半。今无暇一一胪列内容，但举其篇目：\n\n《五行对》第三十八\n\n《五行之义》第四十二\n\n《阴尊阳卑》第四十三\n\n《王道通三》第四十四\n\n《天辨在人》第四十六\n\n《阴阳位》第四十七\n\n《阴阳终始》第四十八\n\n《阴阳义》第四十九\n\n《阴阳出入》第五十\n\n《天道无二》第五十\n\n《暖敦多》第五十二\n\n《基义》第五十三\n\n《同类相动》第五十七\n\n\n《五行相胜》第五十九\n\n《五行逆顺》第六十\n\n《治水五行》第六十一\n\n《治乱五行》第六十二\n\n《五行变救》第六十三\n\n《五行五事》第六十四\n\n《天地之行》第七十八\n\n《如天之为》第八十\n\n《天地阴阳》第八十一\n\n​\t以上二十三篇，皆言阴阳五行，殆占全书之半。其中，所含精深之哲理固甚多，要之半袭阴阳家言，最少亦受其影响，而绝非孔、孟、荀以来之学术，则可断言也。**仲舒以儒家大师，而态度如此，故一时经学家皆从风而靡。**仲舒自以此术治《春秋》，京房、焦赣之徒以此术治《易》，夏侯胜、李寻之徒以此术治《书》，翼奉、孟之徒以此术治《诗》，王史氏之徒以此术治《礼》。于是庄严纯洁之六经被邹衍余毒所蹂躏，无复完肤矣。《艺文志·六艺略》所著录之书，其属于此类者以吾所推度，最少有如下之各种：\n\n《易》：\n\n《古五子》十八篇（自甲子至壬子说《易》阴阳）\n\n《淮南道训》二篇（淮南王安聘明《易》者九人，号九师说）《杂灾异》三十五篇\n\n《神输》五篇（师古曰，刘向《别录》云，神输者，王道失则灾害生得则四海输之祥瑞）\n\n《孟氏京房》十一篇\n\n《灾异孟氏京房》六十六篇\n\n《京氏段嘉》十二篇\n\n《书》：\n\n 刘向《五行传记》十一卷\n\n 许商《五行传记》一卷\n\n《诗》：\n\n《齐后氏传》三十九卷\n\n《齐孙氏传》二十八卷\n\n《齐杂记》十八卷\n\n《礼》：\n\n《明堂阴阳》三十三篇\n\n《王史氏》二十一篇（？）\n\n《明堂阴阳说》五篇\n\n《古封群祀》二十二篇\n\n《封禅议对》十九篇\n\n《汉封样群祀》三十六篇\n\n《春秋》：\n\n《公羊外传》五十篇（？）\n\n《谷梁外传》二十篇（？）\n\n《公羊杂记》八十三篇（？）\n\n《诸子略》儒家\n\n《董仲舒》百二十三篇（？）\n\n​\t右诸书虽什九[^39]已佚，然经近人辑出，尚多能得其梗概。要之，两汉所谓今文家经说，其能脱阴阳五行臭味者，什无二三，大率自仲舒启之。\n\n​\t《汉书·五行志》云：“汉兴，承秦灭学之后，景武之世，董仲舒治《公羊春秋》，始推阴阳，为儒者宗。宣、元之世，刘向治《谷梁春秋》，数其祸福，傅以《洪范》，与仲舒错[^40]。至向子歆，……言《五行传》，又颇不同。是以揽仲舒、别向、歆……所陈行事，……著于篇。”  **据此知汉儒阴阳五行之学，开于仲舒而成于向、歆父子。**《五行志》所载，大抵即刘向《洪范·五行传》之言也。吾侪试一籀[^41]读，当审其内容为何如。**而后此所谓正史者，大率皆列此一篇，千余年莫之易呜呼！ 禨[^42]祥灾之迷信，深中于士大夫，智日以昏，而志日以偷，谁之咎也。吾故略疏证其来历如右，俾诵法[^43]孔子之君子得省览焉。**\n\n\n\n[^1]: 说明：梁启超写于1921年，由知 [乎用户Jack Lei](<https://www.zhihu.com/people/JackZhouMine/activities>) 校对，批注。\n\n[^2]:侌：yīn，古同阴。\n\n[^3]: 阜旁：耳朵旁。\n\n[^4]: 孳乳后起：派生而来。\n\n[^5]:  外：原文没有外，认为作者笔误。\n\n[^6]: 卦辞爻辞：卦辞，说明《易经》六十四卦要义的文字，即占卜是解释卦象的文字。爻（yaó）辞，占卜时用以解释爻的文字，一卦有六爻。阳爻称之为九，阴爻称为六。从上到下，初九（六），九二（六二），九三（六三），九四（六四），九五（六五），上九（上六）。\n\n[^7]:  虺虺：拼音（huǐ huǐ ） , 表雷声。\n\n[^8]: 《易》：《易经》的简称，下同。\n\n[^9]: 右：清末文字还是从上往下，从右到左读，同下。\n\n[^10]: 中孚：中孚卦，象征诚信、诚实。图片网上自行搜索。\n\n[^11]: 九二：爻的一种。\n\n[^12]:骘（zhì）：安定。惟天[阴骘](https://baike.baidu.com/item/%E9%98%B4%E9%AA%98)下民，相协厥居。——《书·洪范》。[孔传](https://baike.baidu.com/item/%E5%AD%94%E4%BC%A0)：“骘，定也。夫不言而默定下民。”\n\n[^13]:阳阳：今作“扬扬”。\n\n[^14]:中医因此说中医起源于道。\n\n[^15]: 断言:可以肯定地说。\n\n[^16]: 抑：语气词，在句首，无义。\n\n[^17]:几于：几乎。\n\n[^18]:翕辟：开合。\n\n[^19]: 母宁：毋宁，作者笔误。\n\n[^20]:矫诬：故弄玄虚。\n\n[^21]:承：奉也，受也，接受。\n\n[^22]:引自《尚书·甘誓》：大战于甘，乃召六卿。王曰：嗟！六事之人，予誓告汝：有扈氏威侮五行，怠弃三正，天用剿绝其命。今予惟恭行天之罚。左不攻于左，汝不恭命；右不攻于右，汝不恭命；御非其马之正，汝不恭命。用命，赏于祖；不用命，戮于社。\n\n[^23]:五行：应行之道：首要行业，金，铁器，生产铁器的行业；木，打柴行业；水，取水行业；土，播种，生产行业。泛指社会产业、生活物资。\n\n[^24]:  五味：五行配五味出现了。\n\n[^25]: 五常：五常配五行，有别于儒家的五德。\n\n[^26]: 五声：五声配五行。\n\n[^27]:隶：通 “离”，动词，使之离，离开，废弃之意。\n\n[^28]:物象事理：事物的现象，事物的原理，指自然运行的原理。\n\n[^29]:遂：竟然。\n\n[^30]: 方士：术士，修习方术的人，包括占卜、预言、法术、气功、炼丹等，达到趋吉避凶、[通灵](https://www.wikiwand.com/zh-hans/%E9%80%9A%E9%9D%88)、[长生不老](https://www.wikiwand.com/zh-hans/%E9%95%B7%E7%94%9F%E4%B8%8D%E8%80%81)、[羽化飞升](https://www.wikiwand.com/zh-hans/%E7%BE%BD%E5%8C%96)等目的。\n\n[^31]:驺子：邹衍的尊称。\n\n[^32]:奏：奉上，上奏。\n\n[^33]: 万斛（hú）: 容量之多。斛，体积单位，十斗或五斗为一斛。\n[^34]:司马谈：司马迁的父亲。\n\n[^35]:  上面所列的总结，下同。\n\n[^36]:房中：房中术，包括优学、性学和性保健，御女之术，多由男性对女性实施。女性对男性实施的，又叫媚术。 \n\n[^37]:醇儒之徽号：醇儒，纯在的儒生。徽号，尊号。\n\n[^38]:祖述：效法前人。\n\n[^39]:什九：十之九。\n\n[^40]:错：打磨。\n\n[^41]:籀（zhòu）：读书。\n\n[^42]:禨（jī）：迷信鬼神，向鬼神求福。\n\n[^43]:诵法：称颂并效法。","slug":"阴阳五行之来历","published":1,"updated":"2020-01-21T12:46:38.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd7cccgd002djwrnnwmvdmzx","content":"<p>因为谭秦东被鸿茅药酒“跨省抓捕”事件，开始注意到中药，然后了解到中医，才发现中医的荒谬。这篇文章是梁启超1921年批判阴阳五行的，然作为中医的基本理论，有必要了解它的来历。我在360图书馆找到，<a href=\"http://www.360doc.com/showwebdoc/0/0/882999442.aspx\" target=\"_blank\" rel=\"noopener\">梁启超：阴阳五行说之来历</a>, 识图软件扫描提取文字，批注一些生涩的词语，可能有误，欢迎指正。格式可能乱了，<a href=\"https://pan.baidu.com/s/1XWbZ-z5CgtogYcipwP2Vkg\" target=\"_blank\" rel=\"noopener\">百度网盘获取原文</a> 提取码：wpf6</p>\n<a id=\"more\"></a>\n<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E9%98%B4%E9%98%B3%E4%BA%8C%E5%AD%97%E8%AF%AD%E6%84%8F%E4%B9%8B%E5%8F%98%E8%BF%81\">阴阳二字语意之变迁</a></li>\n<li><a href=\"#%E4%BA%94%E8%A1%8C%E4%BA%8C%E5%AD%97%E8%AF%AD%E6%84%8F%E4%B9%8B%E5%8F%98%E8%BF%81\">五行二字语意之变迁</a></li>\n<li><a href=\"#%E9%98%B4%E9%98%B3%E5%AE%B6%E4%B9%8B%E6%88%90%E7%AB%8B%E5%8F%8A%E9%98%B4%E9%98%B3%E4%BA%94%E8%A1%8C%E8%AF%B4%E4%B9%8B%E4%BC%A0%E6%92%AD\">阴阳家之成立及阴阳五行说之传播</a></li>\n</ul>\n</p>\n<h1 id=\"阴阳五行说之来历\"><a class=\"markdownIt-Anchor\" href=\"#阴阳五行说之来历\"></a> 阴阳五行说之来历<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></h1>\n<p><img src=\"https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/%E9%98%B4%E9%98%B3%E4%BA%94%E8%A1%8C.jpg\" alt=\"阴阳五行\"></p>\n<p>​\t<strong>阴阳五行说，为二千年来迷信之大本营，直至今日，在社会上犹有莫大势力今当辞而辟之，故考其来历如次。</strong></p>\n<h2 id=\"阴阳二字语意之变迁\"><a class=\"markdownIt-Anchor\" href=\"#阴阳二字语意之变迁\"></a> 阴阳二字语意之变迁</h2>\n<p>​\t阴阳两字义之见于《说文》者，《阜部》云：“陰，阖也。水之南，山之北也。从月，侌<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>声。”，“陽，高明也。从日，昜声。“  ，然阜（fù）旁<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>乃孳乳后起<sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup>，其原字实为侌昜。《雲部》云：“黔，云覆日也。从雲，今声。侌，古文。”《勿部》云：“昜，开也。从日、一、勿。一曰飞扬，一曰长也，一曰疆者众兒。”  侌字所从之 “云”，即古雲字，侌为云覆日，此其本义。引申为凡覆蔽之义。覆蔽必阖，因又引申为阖义。背日之地必阖，城市多倚北而背日，因又引申为背面、或里面、或北方之义。此  “陰” 字 字义变迁之大凡也。昜，从日从一者，日在地上，即日出之意。从勿者，《说文》云：“勿，州里所建旗象。……”  日出地上而建旗焉，气象极发扬，此其本义。引申以表日之光彩，故日称太阳，朝日称朝阳，夕日称夕阳。日出则暖，故又引申谓和暖之气为阳气。向日乃能见阳光，故又引申为正面、或表面、或南方之义。此 ”陽“ 字字义变迁之大凡也。南北向背相对待，故阴阳二字连用，常以表南北或表里外<sup class=\"footnote-ref\"><a href=\"#fn5\" id=\"fnref5\">[5]</a></sup>之义。</p>\n<p>​\t阴阳两字相连属成一名辞，表示无形无象之两种对待的性质，盖自孔子或老子始。孔、老以前之书确实可信者，一日《诗经》，二曰《书经》，三日《仪礼》，四曰《易经》之卦辞爻辞<sup class=\"footnote-ref\"><a href=\"#fn6\" id=\"fnref6\">[6]</a></sup>。《仪礼》全书中无阴阳二字，可置勿论。其他三经所有阴字、阳字之文句及意义，列举诠释如下：</p>\n<p>《诗经》<br>\n“其阴，虺虺<sup class=\"footnote-ref\"><a href=\"#fn7\" id=\"fnref7\">[7]</a></sup>其雷。”（《卫风·终风）<br>\n“习习谷风，以阴以雨。”（《卫风·谷风》）<br>\n“阴续。”（《秦风·小》）<br>\n“黍苗，阴雨之”（《曹风·下泉》）<br>\n“迨天之未阴雨”（《豳风·鸦》）<br>\n“二之日，纳于凌阴。”（豳风·七月》）<br>\n“又窘阴雨。”（《小雅·正月》）<br>\n“既之阴女，反我赫”（大雅·桑柔））<br>\n“其雷，在南山之阳。”《《周南·殷其需》<br>\n“君子阳阳，左执簧，右招我由房。”（《王风·君子扬扬》）<br>\n“我送舅氏，曰至渭阳。”《秦风·渭阳》）<br>\n“春日载阳。”（《豳风·七月》）<br>\n“载立载黄，我朱孔阳。”（同上）<br>\n“湛湛露斯，匪阳不晞。”（《小雅·湛露》）<br>\n“日归归，岁亦阳止。”（《小雅·采薇》）<br>\n“日月阳止，女心伤止。”（《小雅·杕杜》）<br>\n“在洽之阳。”（《大雅·大明》）<br>\n“居岐之阳。”（《大雅·皇矣》）<br>\n“度其夕阳，豳居允荒。”（《大雅·公刘》）<br>\n“桐梧生矣，于彼朝阳。”（《大雅·卷阿》）<br>\n“龙阳阳。”（《周颂·载见》）<br>\n“居岐之阳。”（《鲁颂·宫》<br>\n“既景乃冈，相其阴阳。”（《大雅·公刘》</p>\n<p>《书经》：<br>\n“阳鸟攸居。”（《禹贡》）<br>\n“华阳黑水惟梁州。”（同上）<br>\n“岷山之阳。”（同上）<br>\n“南至于华阴。”（同上）<br>\n“惟天阴下民。”（《洪范》）<br>\n“乃或亮阴，三年不言。”（《无逸》）</p>\n<p>《易》<sup class=\"footnote-ref\"><a href=\"#fn8\" id=\"fnref8\">[8]</a></sup>爻辞：<br>\n“鹤鸣在阴，其子和之。”（《中孚》九二）</p>\n<pre><code>右[^9]《诗经》言阴者八，阳者十四，言阴阳者一。《书经）言阴言阳各三。最奇者《易经》一书，庄子所谓  “《易》以道阴阳“ 者，卦辞爻辞中，仅有此“中孚[^10]九二[^11]之一条，单举一阴字。\n\n右列诸文中阴字，《谷风》、《下泉》、《鸱》、《正月》之 “阴雨“ 及《终风》之 ”瞪瞪其阴“，皆用“云覆日”之义，即最初本义也《桑柔》之“既之阴女”，孔疏云：“往阴覆汝”。《洪范》之 “惟天阴骘（zhì）[^12]下民”，马注云：“阴，覆也。“  皆用覆蔽之引申义。“阴靷鋈（wù）续”，《毛诗》云：“阴靷（yǐn），掩轨也。”  掩亦覆义。《无逸》之 “亮阴”,《尚书大传》作 “梁阖”，言凶庐之阖也，即《说文》以释阴之义。《七月）之“纳于凌阴”，《毛诗》云：”凌阴，冰室也。”，盖深邃黑暗之室。《中孚》之 “鹤鸣在阴”，谓鹤鸣于其子所不及见之处，而其子能和之也，亦覆蔽之引申义。《禹》之“华阴”，谓华山之背面，亦从阖覆义引申来。凡三经所有阴字，意义尽于此。\n</code></pre>\n<p>​          其阳字，《闷官》之“龙族阳阳”，正昜字从勿之本义，谓在日下飞扬也。“君子阳阳<sup class=\"footnote-ref\"><a href=\"#fn9\" id=\"fnref9\">[9]</a></sup>” 者，《史记·晏子传》：“意气阳阳甚自得”。亦如日下旗，神气飞扬也。此皆最初之义，《湛露》之“匪阳不晞”，《卷阿》之 “于彼朝阳”，《公刘》之“度其夕阳”，皆节彼日在地上之义，直以阳为日。《七月》之“我朱孔阳”，言朱色之光如日，亦同前解。《七月》之“春日载阳”，《采薇》之”岁亦阳止”，《杜》之“日月阳止”，《禹贡》之 “阳鸟攸居”，皆用向日和暖之引申义。《殷其雷》之“南山之阳”，《渭阳》之“曰至渭阳”，《大明》之“在洽之阳”，《皇矣》，《闷官》之 “居岐之阳”，《禹贡》之“华阳”、“岷山之阳”，皆言某山某水之正面、或表面、或南方，盖从向日之一面得名也。凡三经所有阳字，意义尽于此。</p>\n<p>​         阴阳二字连用者，惟《公刘》“既景乃冈，相其阴阳” 一语，谓在山冈上测日影，察其向背云尔，与后世所谓阴阳之义迥别。</p>\n<p>​\t由此观之，**商周以前所谓阴阳者，不过自然界中一种粗浅微末之现象，绝不含有何等深邃之意义。**阴阳二字意义之剧变，盖自老子始。老子曰：“<em>万物负阴而抱阳。</em>”<sup class=\"footnote-ref\"><a href=\"#fn10\" id=\"fnref10\">[10]</a></sup> 此语当作何解，未易断言<sup class=\"footnote-ref\"><a href=\"#fn11\" id=\"fnref11\">[11]</a></sup>，抑<sup class=\"footnote-ref\"><a href=\"#fn12\" id=\"fnref12\">[12]</a></sup>固有以异于古所云矣。虽然，五千言中言阴阳者只此一句，且亦非书中重要语。故谓老子与阴阳说有何等关系，吾未敢承。</p>\n<p>​\t庄子言“《易》以道阴阳”，《易》卦辞、爻辞皆未尝言阴阳，既如前述。然则此语只能作孔子所赞之《易》解耳。今所传《十翼》，其确出孔子手著最可信者，莫如《彖传》、《象传》，然此两传中，惟《乾》初九《象传》云：“潜龙勿用，阳在下也。”《坤》初六《象传》云：“履霜坚冰，阴始凝也。”《彖》、《象》两传中，刚柔、内外、上下、大小等对待名词，几于<sup class=\"footnote-ref\"><a href=\"#fn13\" id=\"fnref13\">[13]</a></sup>无卦不有，独阴阳二字仅于此两卦各一见，可谓大奇。至《系辞》、《说卦》、《文言》诸传，则言之较多。今列举其文如下：</p>\n<p>​\t“一阴一阳之谓道。”</p>\n<p>​\t“阳卦多阴，阴卦多阳。其故何也？阳卦奇，阴卦偶。”</p>\n<p>​\t“乾，阳物也；坤，阴物也。阴阳合德，而刚柔有体。”</p>\n<p>​\t“阴阳之义配日月，易简之善配至德。”（以上《系辞传》）</p>\n<p>​\t“观变于阴阳而立卦。”</p>\n<p>​\t“立天之道，曰阴与阳。立地之道，曰柔与刚。立人之道，曰仁与义。”（以上《说卦传》）</p>\n<p>​\t“潜龙勿用，阳气潜藏。”</p>\n<p>​\t“阴虽有美含之。”</p>\n<p>​\t“阴疑于阳必战，为其嫌于无阳也，故称龙焉。”（以上《文言传》）</p>\n<p>​\t<a href=\"https://baike.baidu.com/item/%E7%B3%BB%E8%BE%9E\" target=\"_blank\" rel=\"noopener\">《系辞》</a>、<a href=\"https://baike.baidu.com/item/%E6%96%87%E8%A8%80%E4%BC%A0\" target=\"_blank\" rel=\"noopener\">《文言》</a>诸传，不敢遂认为直接出孔子手。因传中多有“子曰”字样，论体例应为七十子后学者所记也。姑置不论，即将以上诸条全认为孔子学说，其所谓阴阳者亦不过如此。盖孔子之哲学，谓宇宙间有两种力相对待，相摩荡，如电气之有正负，斯为万有之缘起。此两种力难于表示，故以种种对待名辞形容之，如刚柔、动静、消息、屈伸、往来、进退、翕辟<sup class=\"footnote-ref\"><a href=\"#fn14\" id=\"fnref14\">[14]</a></sup>等皆是，而阴阳亦其一也。就中言阴阳者，远不如言刚柔、消息、往来者之多。与其谓《易》以道阴阳，母宁<sup class=\"footnote-ref\"><a href=\"#fn15\" id=\"fnref15\">[15]</a></sup>谓《易》以道刚柔，道消息也。**要之阴阳两字，不过孔子“二元哲学”之一种符号，而其所用符号，又并不止此一种，其中并不含有何等神秘意味，与矫诬<sup class=\"footnote-ref\"><a href=\"#fn16\" id=\"fnref16\">[16]</a></sup>之术数更相远。**故谓后世之阴阳说导源于孔子，吾亦未敢承<sup class=\"footnote-ref\"><a href=\"#fn17\" id=\"fnref17\">[17]</a></sup>。</p>\n<h2 id=\"五行二字语意之变迁\"><a class=\"markdownIt-Anchor\" href=\"#五行二字语意之变迁\"></a> 五行二字语意之变迁</h2>\n<pre><code>五行二字最初见于经典者，则《尚书·甘誓》，云：“有扈氏威侮五行，怠弃三正。”[^22]此语作何解，颇难臆断。后世注家，多指五行为金、木、水、火、土，三正为建子、建丑、建寅。然据彼辈所信，子、丑、寅建，分配周、商、夏。《甘誓》为夏书，则时无子、丑二建，何得云三正？且金、木、水、火、土之五行，何得言威侮，又何从而威侮者？窃疑此文应解为威侮五种应行之道[^23]，怠弃三种正义。其何者为五，何者为三，固无可考。然与后世五行说绝不相蒙，盖无疑。\n</code></pre>\n<p>​\t次则为《洪范》。自汉人作《洪范五行传》后，于是言五行者必联想《洪范》，此两名词几成不可离之关系。虽然，实际上《洪范》所谓五行果有何等神秘意味否耶？请勘视原文：</p>\n<p>​\t“我闻在昔，鲧（gǔn）堙（yīn）洪水，汩陈其五行。”</p>\n<p>​\t“一五行：一曰水，二曰火，三曰木，四曰金，五曰土。水曰润下，火曰炎上，木曰曲直，金曰从革，土爱稼稿。润下作咸，炎上作苦，曲直作酸，从革作辛，稼作甘。“<sup class=\"footnote-ref\"><a href=\"#fn18\" id=\"fnref18\">[18]</a></sup></p>\n<p>​\t此不过将物质区分为五类，言其功用及性质耳，何尝有丝毫哲学的或术数的意味？ &quot; 鲧湮洪水，汩陈其五行 ” 者，言因湮水之故，致一切物质不能供人用。若谓汩乱五行原理，则与堙水何关耶？<strong>《洪范》本为政治书，其九畴先列五行者，因其为物质的要素，人与经济所攸命耳。</strong>《左传》所谓 **“天生五材，民并用之”，即此义也。然则《洪范》本意，并非以此一畴统贯生八畴甚明，后世愚儒，欲取凡百事物皆纳入五行中，于是首将第二畴之五事貌、言、视、听、思分配水、火、木、金、土。**试问，第四畴之五纪，第九畴之五福，数固同为五，然有法分配否？ 第三畴之八政，第六畴之三德，数不止五，或不及五者，又有法分配否？ 第五畴之皇极，第七畴之稽疑，第八畴之庶，并无数目者，又有法分配否？以一贯八，而所贯者亦仅一而止。愚儒之心劳日拙，大可怜也。</p>\n<p>​\t  除《书经》此两文外，《诗经》、《仪礼》、《易》经传乃至《老子》、《论语》、《孟子》皆不见有以五行二字连文者。（此凭吾记忆所及耳，读者如有所发见望指正） 惟《墨子·经下》及《经说下》云：“五行毋常胜，说在宜。”   “五合，水火土，火离然。火烁金，火多也。金靡炭，金多也。合之府水，木离木。……”  此确与《洪范》所言五行为同物，且其言“无常胜”之义，注家或以后世五行生说解之。实则胜训贵，意谓此五种物质无常贵，但适宜应需则为贵，其说甚平实，不待穿凿也。</p>\n<p>​\t《荀子·非十二子篇》，其非子思、孟轲也，有颇奇异之数语。曰：“案往旧造说，谓之<strong>五行</strong>，甚僻违而无类，幽隐而无说，闭约而无解。案饰其辞而衹敬之，曰：此真先君子之言也。子思唱之，孟轲和之。”</p>\n<p>​\t此五行不知作何解，若谓即《洪范》之五行耶？子思、孟轲书中只字未尝道及。《中庸》以君臣、父子、兄弟、夫妇、朋友五者为天下之达道，道有行义，五行或指此耶？然此为儒家常言，非思、轲所创，且无所谓“僻违、幽隐、闭约”。杨倞注释为仁、义、礼、智、信之五常<sup class=\"footnote-ref\"><a href=\"#fn19\" id=\"fnref19\">[19]</a></sup>，或者近是然子思说虽无可考，或《中庸》外尚有著述。孟子则恒言仁义礼智，未尝以信与之并列也。此文何指，姑勿深论但决非如后世之五行说，则可断言耳。</p>\n<p>​\t古籍中可信者，其言五行之说，以吾记忆所及，尽于是矣。此外，尚有应怀疑者一段，则《左传》昭二十五年记郑子大叔与晋赵简子问答语：</p>\n<p>​\t“吉也闻诸先大夫子产日：天地之经，而民实则之…用其五行气为五味，发为五色，章为五声。……”<sup class=\"footnote-ref\"><a href=\"#fn20\" id=\"fnref20\">[20]</a></sup></p>\n<p>​\t此与后世所谓“《洪范》五行”者甚相类。此文如可信，则是孔子之先辈子产时已有此说矣。然《左传》真伪，在学界久成问题，藉日非全伪，然其作者最早应为战国时人，且最少有一部分为汉人窜乱，此殆无可讳者。谓子产有是言，吾以当时所有学说旁证之，不能置信也。</p>\n<p>​\t五行说之极怪诞而有组织者，始见于《吕氏春秋》之十二览。其后《小戴礼记》采之，即《月令篇），《淮南子》又采之，其说略如下：</p>\n<p>​\t“孟春之月……其日甲乙，其帝太皞，其神句芒，其虫鳞，其音角……其味酸，其臭，其祀户，祭先脾。……天子居青阳左个，驾苍龙，载青旂，衣青衣，服青玉，食麦与羊。……“</p>\n<p>​\t如此将一年四季分配五行：春木、夏火、秋金，冬水，所余之土无可归，则于夏秋交界时为拓一位置。于是五方之东、西、、北、中，五色之青、赤、黄、白、黑，五声之宫、商、角、、羽，五味之酸、苦、咸、甘，五虫之毛、介、鳞、羽、倮，五祀之井、灶、行，户、中，五谷之黍、稷、稻、麦、，五畜之马、牛、羊、犬、豕，五脏之心、肝、肺、脾、肾，五帝之太皞（hào）、炎帝、黄帝、少昊、颛顼，五神之句芒、祝融、后上、蓐收、玄冥，皆一一如法分配。《洪范》五事抑未编入。<strong>乃至如十天、六律、六吕等数目不与五符者，亦割裂以隶<sup class=\"footnote-ref\"><a href=\"#fn21\" id=\"fnref21\">[21]</a></sup>之。如是将宇宙间无量无数之物象事理<sup class=\"footnote-ref\"><a href=\"#fn22\" id=\"fnref22\">[22]</a></sup>，皆硬分为五类，而以纳诸所谓五行者之中，此种诡异之组织遂<sup class=\"footnote-ref\"><a href=\"#fn23\" id=\"fnref23\">[23]</a></sup>二千年蟠据全国人之心理，且支配全国人之行事。嘻！吾辈死生关系之医药，皆此种观念之产物，吾辈最爱敬之中华民国国旗，实为此种观念最显著之表象，他更何论也。</strong></p>\n<h2 id=\"阴阳家之成立及阴阳五行说之传播\"><a class=\"markdownIt-Anchor\" href=\"#阴阳家之成立及阴阳五行说之传播\"></a> 阴阳家之成立及阴阳五行说之传播</h2>\n<p>​\t<strong>由此观之，春秋战国以前，所谓阴阳，所谓五行，其语甚希见，其义极平淡，且此二事从未尝并为一谈。 请经及孔、老、墨、孟、韩诸大哲皆未尝齿及。</strong> 然则造此邪说以惑世诬民者谁耶？其始起于燕、齐方士<sup class=\"footnote-ref\"><a href=\"#fn24\" id=\"fnref24\">[24]</a></sup>。而其建设之，传播之，宜负罪责者三人焉：日邹衍，曰董仲舒，曰刘向。</p>\n<p>​\t《史记·孟子荀卿列传》云：“邹衍乃深观阴阳消息而作迁怪之变，《终始》、《大圣》之篇十余万言。”  又云：“ 称引天地剖判以来，五德转移，治各有宜，而符应若兹。”   又《封禅书》云：“齐威、宣之时，驺子<sup class=\"footnote-ref\"><a href=\"#fn25\" id=\"fnref25\">[25]</a></sup>之徒，论著终始五德之运，及秦帝，齐人奏<sup class=\"footnote-ref\"><a href=\"#fn26\" id=\"fnref26\">[26]</a></sup>之。” 《文选·魏都赋》注引《七略》云：“邹子有终始五德，从所不胜，土德后木德继之，金德次之，火德次之，水德次之。”  邹衍之书，见于《汉书·艺文志》者，有《邹子》四十九篇、《邹子终始》五十六篇，今虽已佚，然据《史记》及《七略》所说，可知其概。<strong>妖言之作俑者，实此人也。</strong></p>\n<p>​\t**衍倡此妖言，乘秦、汉间学术颓废之隙，遂以万斛<sup class=\"footnote-ref\"><a href=\"#fn27\" id=\"fnref27\">[27]</a></sup>狂澜之势，横领思想界之全部。**司马谈<sup class=\"footnote-ref\"><a href=\"#fn28\" id=\"fnref28\">[28]</a></sup>作《六家要旨》，以阴阳家与儒、道、墨、名、法并列，其势力可想。今将《汉书·艺文志》所著录此类书，照录如下：书目下括中文字皆《汉书》原注：</p>\n<p>《宋司星子韦》三篇（景公之史）</p>\n<p>《公生终始》十四篇（传邹爽终始书）</p>\n<p>《公孙发》二十二篇（六国时）</p>\n<p>《子》四十九篇（名衍，齐人，为燕昭王师居稷下，号“谈天衍”）《邹子终始》五十六篇</p>\n<p>《乘丘子》五篇（六国时）</p>\n<p>《杜文公》五篇（六国时）</p>\n<p>《黄帝秦素》二十篇（六国时，韩请公子所作）</p>\n<p>《南公》三十一篇（六国时）</p>\n<p>《容成子》十四篇</p>\n<p>《张苍》十六篇（承相北平侯）</p>\n<p>《邹爽子》十二篇（齐人，号曰“雕龙爽”）</p>\n<p>《间丘子》十三篇（名快，魏人，在南公前）</p>\n<p>《冯促》十三篇（郑人）</p>\n<p>《将巨子》五（六国时，先南公，南公称之）</p>\n<p>《五曹官制》五篇（汉制，似贾谊所条）</p>\n<p>《周伯》十一篇（齐人，六国时）</p>\n<p>《卫侯官》十二篇（近世，不知作者）</p>\n<p>《于长天下忠臣）九篇（平阴人，近世）</p>\n<p>《公孙浑邪》十五篇（平）</p>\n<p>《阴阳》三十八篇（不知作者）</p>\n<p>《公孙浑邪》十五（平曲侯）</p>\n<p>《杂阴阳》三十八篇（不知作者）</p>\n<p>右《诸子略》阴阳家二十一家三百大十九篇   《大壹兵法》一篇<sup class=\"footnote-ref\"><a href=\"#fn29\" id=\"fnref29\">[29]</a></sup></p>\n<p>《天一兵法》三十五篇</p>\n<p>《神农兵法》一篇</p>\n<p>《黄帝》十六篇（图三卷）</p>\n<p>《封胡》五篇（黄帝臣，依讬也）</p>\n<p>《风后》十三篇（图二卷黄帝臣，依讬也）</p>\n<p>《力牧》十五篇（黄帝臣，依讬也）</p>\n<p>《冶子》一篇（图一卷）</p>\n<p>《鬼容区》三篇（图一卷，黄帝臣，依讬也）</p>\n<p>《地典》六篇</p>\n<p>《孟子》一篇</p>\n<p>《东父》三十一篇</p>\n<p>《师旷》八篇（晋平公臣）</p>\n<p>《弘》十五篇（周史）</p>\n<p>《别成子望军气》六篇（图三卷）</p>\n<p>《辟兵威胜方》七十篇</p>\n<p>右《兵书略》阴阳家十六家二百四十九篇《泰一阴阳》二十三卷</p>\n<p>《黄帝阴阳》二十五卷</p>\n<p>《诸王子论阴阳》二十五卷</p>\n<p>《大元阴阳》二十六卷</p>\n<p>《三典阴阳谈论》二十七卷</p>\n<p>《神农大幽五行》二十七卷</p>\n<p>《四时五行经》二十六卷</p>\n<p>《猛子昭》二十五卷</p>\n<p>《阴阳五行时令》十九卷</p>\n<p>《堪舆金》四卷</p>\n<p>《务成子灾异应》十四卷</p>\n<p>《十二典灾异应》十二卷</p>\n<p>《钟律灾异》二十六卷</p>\n<p>《钟律丛辰日苑》二十三卷</p>\n<p>《钟律消息》二十九卷</p>\n<p>《黄钟》七卷</p>\n<p>《天一》六卷</p>\n<p>《泰一》二十九卷</p>\n<p>《刑德》七卷</p>\n<p>《风鼓六甲》二十四卷</p>\n<p>《风后孤虚》二十卷</p>\n<p>《六合随典》二十五卷</p>\n<p>《转位十二神》二十五卷</p>\n<p>《羡门式法》二十卷</p>\n<p>《门式》二十卷</p>\n<p>《文解六甲》十八卷</p>\n<p>《文解二十八宿》二十八卷</p>\n<p>《五音奇腋用兵》二十三卷</p>\n<p>《五音奇胲刑德》二十一卷</p>\n<p>《五音定名》十五卷</p>\n<p>右《数术略）五行家三十一家六百五十二卷 【上面所列的总结】</p>\n<p>​\t此外，如《数术略》医经、房中<sup class=\"footnote-ref\"><a href=\"#fn30\" id=\"fnref30\">[30]</a></sup>两门，亦大抵属此类，观今所传《黄帝内经》可知也。即以此三门论，为书一千三百余篇，对于《艺文志》总数万三千二百六十九卷，已占十分一而强。其实细绎全志目录，揣度其与此等书同性质者，恐占四分之一乃至三分之一。嘻！学术界之耻辱，莫此为甚矣。</p>\n<p>​\t邹衍书及他诸书皆不可见，可见者有董仲舒之《春秋繁露》，仲舒二千年来受醇儒之徽号<sup class=\"footnote-ref\"><a href=\"#fn31\" id=\"fnref31\">[31]</a></sup>，然其书祖述<sup class=\"footnote-ref\"><a href=\"#fn32\" id=\"fnref32\">[32]</a></sup>阴阳家言者几居半。今无暇一一胪列内容，但举其篇目：</p>\n<p>《五行对》第三十八</p>\n<p>《五行之义》第四十二</p>\n<p>《阴尊阳卑》第四十三</p>\n<p>《王道通三》第四十四</p>\n<p>《天辨在人》第四十六</p>\n<p>《阴阳位》第四十七</p>\n<p>《阴阳终始》第四十八</p>\n<p>《阴阳义》第四十九</p>\n<p>《阴阳出入》第五十</p>\n<p>《天道无二》第五十</p>\n<p>《暖敦多》第五十二</p>\n<p>《基义》第五十三</p>\n<p>《同类相动》第五十七</p>\n<p>《五行相胜》第五十九</p>\n<p>《五行逆顺》第六十</p>\n<p>《治水五行》第六十一</p>\n<p>《治乱五行》第六十二</p>\n<p>《五行变救》第六十三</p>\n<p>《五行五事》第六十四</p>\n<p>《天地之行》第七十八</p>\n<p>《如天之为》第八十</p>\n<p>《天地阴阳》第八十一</p>\n<p>​\t以上二十三篇，皆言阴阳五行，殆占全书之半。其中，所含精深之哲理固甚多，要之半袭阴阳家言，最少亦受其影响，而绝非孔、孟、荀以来之学术，则可断言也。**仲舒以儒家大师，而态度如此，故一时经学家皆从风而靡。**仲舒自以此术治《春秋》，京房、焦赣之徒以此术治《易》，夏侯胜、李寻之徒以此术治《书》，翼奉、孟之徒以此术治《诗》，王史氏之徒以此术治《礼》。于是庄严纯洁之六经被邹衍余毒所蹂躏，无复完肤矣。《艺文志·六艺略》所著录之书，其属于此类者以吾所推度，最少有如下之各种：</p>\n<p>《易》：</p>\n<p>《古五子》十八篇（自甲子至壬子说《易》阴阳）</p>\n<p>《淮南道训》二篇（淮南王安聘明《易》者九人，号九师说）《杂灾异》三十五篇</p>\n<p>《神输》五篇（师古曰，刘向《别录》云，神输者，王道失则灾害生得则四海输之祥瑞）</p>\n<p>《孟氏京房》十一篇</p>\n<p>《灾异孟氏京房》六十六篇</p>\n<p>《京氏段嘉》十二篇</p>\n<p>《书》：</p>\n<p>刘向《五行传记》十一卷</p>\n<p>许商《五行传记》一卷</p>\n<p>《诗》：</p>\n<p>《齐后氏传》三十九卷</p>\n<p>《齐孙氏传》二十八卷</p>\n<p>《齐杂记》十八卷</p>\n<p>《礼》：</p>\n<p>《明堂阴阳》三十三篇</p>\n<p>《王史氏》二十一篇（？）</p>\n<p>《明堂阴阳说》五篇</p>\n<p>《古封群祀》二十二篇</p>\n<p>《封禅议对》十九篇</p>\n<p>《汉封样群祀》三十六篇</p>\n<p>《春秋》：</p>\n<p>《公羊外传》五十篇（？）</p>\n<p>《谷梁外传》二十篇（？）</p>\n<p>《公羊杂记》八十三篇（？）</p>\n<p>《诸子略》儒家</p>\n<p>《董仲舒》百二十三篇（？）</p>\n<p>​\t右诸书虽什九<sup class=\"footnote-ref\"><a href=\"#fn33\" id=\"fnref33\">[33]</a></sup>已佚，然经近人辑出，尚多能得其梗概。要之，两汉所谓今文家经说，其能脱阴阳五行臭味者，什无二三，大率自仲舒启之。</p>\n<p>​\t《汉书·五行志》云：“汉兴，承秦灭学之后，景武之世，董仲舒治《公羊春秋》，始推阴阳，为儒者宗。宣、元之世，刘向治《谷梁春秋》，数其祸福，傅以《洪范》，与仲舒错<sup class=\"footnote-ref\"><a href=\"#fn34\" id=\"fnref34\">[34]</a></sup>。至向子歆，……言《五行传》，又颇不同。是以揽仲舒、别向、歆……所陈行事，……著于篇。”  <strong>据此知汉儒阴阳五行之学，开于仲舒而成于向、歆父子。</strong>《五行志》所载，大抵即刘向《洪范·五行传》之言也。吾侪试一籀<sup class=\"footnote-ref\"><a href=\"#fn35\" id=\"fnref35\">[35]</a></sup>读，当审其内容为何如。<strong>而后此所谓正史者，大率皆列此一篇，千余年莫之易呜呼！ 禨<sup class=\"footnote-ref\"><a href=\"#fn36\" id=\"fnref36\">[36]</a></sup>祥灾之迷信，深中于士大夫，智日以昏，而志日以偷，谁之咎也。吾故略疏证其来历如右，俾诵法<sup class=\"footnote-ref\"><a href=\"#fn37\" id=\"fnref37\">[37]</a></sup>孔子之君子得省览焉。</strong></p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>说明：梁启超写于1921年，由知 <a href=\"https://www.zhihu.com/people/JackZhouMine/activities\" target=\"_blank\" rel=\"noopener\">乎用户Jack Lei</a> 校对，批注。 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>侌：yīn，古同阴。 <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>阜旁：耳朵旁。 <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p>孳乳后起：派生而来。 <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn5\" class=\"footnote-item\"><p>外：原文没有外，认为作者笔误。 <a href=\"#fnref5\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn6\" class=\"footnote-item\"><p>卦辞爻辞：卦辞，说明《易经》六十四卦要义的文字，即占卜是解释卦象的文字。爻（yaó）辞，占卜时用以解释爻的文字，一卦有六爻。阳爻称之为九，阴爻称为六。从上到下，初九（六），九二（六二），九三（六三），九四（六四），九五（六五），上九（上六）。 <a href=\"#fnref6\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn7\" class=\"footnote-item\"><p>虺虺：拼音（huǐ huǐ ） , 表雷声。 <a href=\"#fnref7\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn8\" class=\"footnote-item\"><p>《易》：《易经》的简称，下同。 <a href=\"#fnref8\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn9\" class=\"footnote-item\"><p>阳阳：今作“扬扬”。 <a href=\"#fnref9\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn10\" class=\"footnote-item\"><p>中医因此说中医起源于道。 <a href=\"#fnref10\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn11\" class=\"footnote-item\"><p>断言:可以肯定地说。 <a href=\"#fnref11\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn12\" class=\"footnote-item\"><p>抑：语气词，在句首，无义。 <a href=\"#fnref12\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn13\" class=\"footnote-item\"><p>几于：几乎。 <a href=\"#fnref13\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn14\" class=\"footnote-item\"><p>翕辟：开合。 <a href=\"#fnref14\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn15\" class=\"footnote-item\"><p>母宁：毋宁，作者笔误。 <a href=\"#fnref15\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn16\" class=\"footnote-item\"><p>矫诬：故弄玄虚。 <a href=\"#fnref16\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn17\" class=\"footnote-item\"><p>承：奉也，受也，接受。 <a href=\"#fnref17\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn18\" class=\"footnote-item\"><p>五味：五行配五味出现了。 <a href=\"#fnref18\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn19\" class=\"footnote-item\"><p>五常：五常配五行，有别于儒家的五德。 <a href=\"#fnref19\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn20\" class=\"footnote-item\"><p>五声：五声配五行。 <a href=\"#fnref20\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn21\" class=\"footnote-item\"><p>隶：通 “离”，动词，使之离，离开，废弃之意。 <a href=\"#fnref21\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn22\" class=\"footnote-item\"><p>物象事理：事物的现象，事物的原理，指自然运行的原理。 <a href=\"#fnref22\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn23\" class=\"footnote-item\"><p>遂：竟然。 <a href=\"#fnref23\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn24\" class=\"footnote-item\"><p>方士：术士，修习方术的人，包括占卜、预言、法术、气功、炼丹等，达到趋吉避凶、<a href=\"https://www.wikiwand.com/zh-hans/%E9%80%9A%E9%9D%88\" target=\"_blank\" rel=\"noopener\">通灵</a>、<a href=\"https://www.wikiwand.com/zh-hans/%E9%95%B7%E7%94%9F%E4%B8%8D%E8%80%81\" target=\"_blank\" rel=\"noopener\">长生不老</a>、<a href=\"https://www.wikiwand.com/zh-hans/%E7%BE%BD%E5%8C%96\" target=\"_blank\" rel=\"noopener\">羽化飞升</a>等目的。 <a href=\"#fnref24\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn25\" class=\"footnote-item\"><p>驺子：邹衍的尊称。 <a href=\"#fnref25\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn26\" class=\"footnote-item\"><p>奏：奉上，上奏。 <a href=\"#fnref26\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn27\" class=\"footnote-item\"><p>万斛（hú）: 容量之多。斛，体积单位，十斗或五斗为一斛。 <a href=\"#fnref27\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn28\" class=\"footnote-item\"><p>司马谈：司马迁的父亲。 <a href=\"#fnref28\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn29\" class=\"footnote-item\"><p>上面所列的总结，下同。 <a href=\"#fnref29\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn30\" class=\"footnote-item\"><p>房中：房中术，包括优学、性学和性保健，御女之术，多由男性对女性实施。女性对男性实施的，又叫媚术。 <a href=\"#fnref30\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn31\" class=\"footnote-item\"><p>醇儒之徽号：醇儒，纯在的儒生。徽号，尊号。 <a href=\"#fnref31\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn32\" class=\"footnote-item\"><p>祖述：效法前人。 <a href=\"#fnref32\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn33\" class=\"footnote-item\"><p>什九：十之九。 <a href=\"#fnref33\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn34\" class=\"footnote-item\"><p>错：打磨。 <a href=\"#fnref34\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn35\" class=\"footnote-item\"><p>籀（zhòu）：读书。 <a href=\"#fnref35\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn36\" class=\"footnote-item\"><p>禨（jī）：迷信鬼神，向鬼神求福。 <a href=\"#fnref36\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn37\" class=\"footnote-item\"><p>诵法：称颂并效法。 <a href=\"#fnref37\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n","site":{"data":{"recommended_posts":{"https://jackzhoumine.github.io/2019/05/18/hexo搭建博客/":[{"title":"Hexo与阿里云虚拟主机搭建博客","permalink":"https://zymin.cn/arcticle/hexo-vps.html"}],"https://jackzhoumine.github.io/2019/05/18/NPM-使用教程/":[{"title":"如何使用 npm 打包发布 nodejs 程序包","permalink":"http://linfuyan.com/publish_your_module_to_npm/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/":[{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"},{"title":"vue 路由进阶","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/"}],"https://jackzhoumine.github.io/2019/05/25/vue 路由进阶/":[{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"},{"title":"vue 路由基础","permalink":"https://jackzhoumine.github.io/2019/05/25/vue 路由基础/"}]}}},"excerpt":"<p>因为谭秦东被鸿茅药酒“跨省抓捕”事件，开始注意到中药，然后了解到中医，才发现中医的荒谬。这篇文章是梁启超1921年批判阴阳五行的，然作为中医的基本理论，有必要了解它的来历。我在360图书馆找到，<a href=\"http://www.360doc.com/showwebdoc/0/0/882999442.aspx\" target=\"_blank\" rel=\"noopener\">梁启超：阴阳五行说之来历</a>, 识图软件扫描提取文字，批注一些生涩的词语，可能有误，欢迎指正。格式可能乱了，<a href=\"https://pan.baidu.com/s/1XWbZ-z5CgtogYcipwP2Vkg\" target=\"_blank\" rel=\"noopener\">百度网盘获取原文</a> 提取码：wpf6</p>","more":"<hr>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E9%98%B4%E9%98%B3%E4%BA%8C%E5%AD%97%E8%AF%AD%E6%84%8F%E4%B9%8B%E5%8F%98%E8%BF%81\">阴阳二字语意之变迁</a></li>\n<li><a href=\"#%E4%BA%94%E8%A1%8C%E4%BA%8C%E5%AD%97%E8%AF%AD%E6%84%8F%E4%B9%8B%E5%8F%98%E8%BF%81\">五行二字语意之变迁</a></li>\n<li><a href=\"#%E9%98%B4%E9%98%B3%E5%AE%B6%E4%B9%8B%E6%88%90%E7%AB%8B%E5%8F%8A%E9%98%B4%E9%98%B3%E4%BA%94%E8%A1%8C%E8%AF%B4%E4%B9%8B%E4%BC%A0%E6%92%AD\">阴阳家之成立及阴阳五行说之传播</a></li>\n</ul>\n</p>\n<h1 id=\"阴阳五行说之来历\"><a class=\"markdownIt-Anchor\" href=\"#阴阳五行说之来历\"></a> 阴阳五行说之来历<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></h1>\n<p><img src=\"https://raw.githubusercontent.com/JackZhouMine/jack-picture/master/%E9%98%B4%E9%98%B3%E4%BA%94%E8%A1%8C.jpg\" alt=\"阴阳五行\"></p>\n<p>​\t<strong>阴阳五行说，为二千年来迷信之大本营，直至今日，在社会上犹有莫大势力今当辞而辟之，故考其来历如次。</strong></p>\n<h2 id=\"阴阳二字语意之变迁\"><a class=\"markdownIt-Anchor\" href=\"#阴阳二字语意之变迁\"></a> 阴阳二字语意之变迁</h2>\n<p>​\t阴阳两字义之见于《说文》者，《阜部》云：“陰，阖也。水之南，山之北也。从月，侌<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>声。”，“陽，高明也。从日，昜声。“  ，然阜（fù）旁<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>乃孳乳后起<sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup>，其原字实为侌昜。《雲部》云：“黔，云覆日也。从雲，今声。侌，古文。”《勿部》云：“昜，开也。从日、一、勿。一曰飞扬，一曰长也，一曰疆者众兒。”  侌字所从之 “云”，即古雲字，侌为云覆日，此其本义。引申为凡覆蔽之义。覆蔽必阖，因又引申为阖义。背日之地必阖，城市多倚北而背日，因又引申为背面、或里面、或北方之义。此  “陰” 字 字义变迁之大凡也。昜，从日从一者，日在地上，即日出之意。从勿者，《说文》云：“勿，州里所建旗象。……”  日出地上而建旗焉，气象极发扬，此其本义。引申以表日之光彩，故日称太阳，朝日称朝阳，夕日称夕阳。日出则暖，故又引申谓和暖之气为阳气。向日乃能见阳光，故又引申为正面、或表面、或南方之义。此 ”陽“ 字字义变迁之大凡也。南北向背相对待，故阴阳二字连用，常以表南北或表里外<sup class=\"footnote-ref\"><a href=\"#fn5\" id=\"fnref5\">[5]</a></sup>之义。</p>\n<p>​\t阴阳两字相连属成一名辞，表示无形无象之两种对待的性质，盖自孔子或老子始。孔、老以前之书确实可信者，一日《诗经》，二曰《书经》，三日《仪礼》，四曰《易经》之卦辞爻辞<sup class=\"footnote-ref\"><a href=\"#fn6\" id=\"fnref6\">[6]</a></sup>。《仪礼》全书中无阴阳二字，可置勿论。其他三经所有阴字、阳字之文句及意义，列举诠释如下：</p>\n<p>《诗经》<br>\n“其阴，虺虺<sup class=\"footnote-ref\"><a href=\"#fn7\" id=\"fnref7\">[7]</a></sup>其雷。”（《卫风·终风）<br>\n“习习谷风，以阴以雨。”（《卫风·谷风》）<br>\n“阴续。”（《秦风·小》）<br>\n“黍苗，阴雨之”（《曹风·下泉》）<br>\n“迨天之未阴雨”（《豳风·鸦》）<br>\n“二之日，纳于凌阴。”（豳风·七月》）<br>\n“又窘阴雨。”（《小雅·正月》）<br>\n“既之阴女，反我赫”（大雅·桑柔））<br>\n“其雷，在南山之阳。”《《周南·殷其需》<br>\n“君子阳阳，左执簧，右招我由房。”（《王风·君子扬扬》）<br>\n“我送舅氏，曰至渭阳。”《秦风·渭阳》）<br>\n“春日载阳。”（《豳风·七月》）<br>\n“载立载黄，我朱孔阳。”（同上）<br>\n“湛湛露斯，匪阳不晞。”（《小雅·湛露》）<br>\n“日归归，岁亦阳止。”（《小雅·采薇》）<br>\n“日月阳止，女心伤止。”（《小雅·杕杜》）<br>\n“在洽之阳。”（《大雅·大明》）<br>\n“居岐之阳。”（《大雅·皇矣》）<br>\n“度其夕阳，豳居允荒。”（《大雅·公刘》）<br>\n“桐梧生矣，于彼朝阳。”（《大雅·卷阿》）<br>\n“龙阳阳。”（《周颂·载见》）<br>\n“居岐之阳。”（《鲁颂·宫》<br>\n“既景乃冈，相其阴阳。”（《大雅·公刘》</p>\n<p>《书经》：<br>\n“阳鸟攸居。”（《禹贡》）<br>\n“华阳黑水惟梁州。”（同上）<br>\n“岷山之阳。”（同上）<br>\n“南至于华阴。”（同上）<br>\n“惟天阴下民。”（《洪范》）<br>\n“乃或亮阴，三年不言。”（《无逸》）</p>\n<p>《易》<sup class=\"footnote-ref\"><a href=\"#fn8\" id=\"fnref8\">[8]</a></sup>爻辞：<br>\n“鹤鸣在阴，其子和之。”（《中孚》九二）</p>\n<pre><code>右[^9]《诗经》言阴者八，阳者十四，言阴阳者一。《书经）言阴言阳各三。最奇者《易经》一书，庄子所谓  “《易》以道阴阳“ 者，卦辞爻辞中，仅有此“中孚[^10]九二[^11]之一条，单举一阴字。\n\n右列诸文中阴字，《谷风》、《下泉》、《鸱》、《正月》之 “阴雨“ 及《终风》之 ”瞪瞪其阴“，皆用“云覆日”之义，即最初本义也《桑柔》之“既之阴女”，孔疏云：“往阴覆汝”。《洪范》之 “惟天阴骘（zhì）[^12]下民”，马注云：“阴，覆也。“  皆用覆蔽之引申义。“阴靷鋈（wù）续”，《毛诗》云：“阴靷（yǐn），掩轨也。”  掩亦覆义。《无逸》之 “亮阴”,《尚书大传》作 “梁阖”，言凶庐之阖也，即《说文》以释阴之义。《七月）之“纳于凌阴”，《毛诗》云：”凌阴，冰室也。”，盖深邃黑暗之室。《中孚》之 “鹤鸣在阴”，谓鹤鸣于其子所不及见之处，而其子能和之也，亦覆蔽之引申义。《禹》之“华阴”，谓华山之背面，亦从阖覆义引申来。凡三经所有阴字，意义尽于此。\n</code></pre>\n<p>​          其阳字，《闷官》之“龙族阳阳”，正昜字从勿之本义，谓在日下飞扬也。“君子阳阳<sup class=\"footnote-ref\"><a href=\"#fn9\" id=\"fnref9\">[9]</a></sup>” 者，《史记·晏子传》：“意气阳阳甚自得”。亦如日下旗，神气飞扬也。此皆最初之义，《湛露》之“匪阳不晞”，《卷阿》之 “于彼朝阳”，《公刘》之“度其夕阳”，皆节彼日在地上之义，直以阳为日。《七月》之“我朱孔阳”，言朱色之光如日，亦同前解。《七月》之“春日载阳”，《采薇》之”岁亦阳止”，《杜》之“日月阳止”，《禹贡》之 “阳鸟攸居”，皆用向日和暖之引申义。《殷其雷》之“南山之阳”，《渭阳》之“曰至渭阳”，《大明》之“在洽之阳”，《皇矣》，《闷官》之 “居岐之阳”，《禹贡》之“华阳”、“岷山之阳”，皆言某山某水之正面、或表面、或南方，盖从向日之一面得名也。凡三经所有阳字，意义尽于此。</p>\n<p>​         阴阳二字连用者，惟《公刘》“既景乃冈，相其阴阳” 一语，谓在山冈上测日影，察其向背云尔，与后世所谓阴阳之义迥别。</p>\n<p>​\t由此观之，**商周以前所谓阴阳者，不过自然界中一种粗浅微末之现象，绝不含有何等深邃之意义。**阴阳二字意义之剧变，盖自老子始。老子曰：“<em>万物负阴而抱阳。</em>”<sup class=\"footnote-ref\"><a href=\"#fn10\" id=\"fnref10\">[10]</a></sup> 此语当作何解，未易断言<sup class=\"footnote-ref\"><a href=\"#fn11\" id=\"fnref11\">[11]</a></sup>，抑<sup class=\"footnote-ref\"><a href=\"#fn12\" id=\"fnref12\">[12]</a></sup>固有以异于古所云矣。虽然，五千言中言阴阳者只此一句，且亦非书中重要语。故谓老子与阴阳说有何等关系，吾未敢承。</p>\n<p>​\t庄子言“《易》以道阴阳”，《易》卦辞、爻辞皆未尝言阴阳，既如前述。然则此语只能作孔子所赞之《易》解耳。今所传《十翼》，其确出孔子手著最可信者，莫如《彖传》、《象传》，然此两传中，惟《乾》初九《象传》云：“潜龙勿用，阳在下也。”《坤》初六《象传》云：“履霜坚冰，阴始凝也。”《彖》、《象》两传中，刚柔、内外、上下、大小等对待名词，几于<sup class=\"footnote-ref\"><a href=\"#fn13\" id=\"fnref13\">[13]</a></sup>无卦不有，独阴阳二字仅于此两卦各一见，可谓大奇。至《系辞》、《说卦》、《文言》诸传，则言之较多。今列举其文如下：</p>\n<p>​\t“一阴一阳之谓道。”</p>\n<p>​\t“阳卦多阴，阴卦多阳。其故何也？阳卦奇，阴卦偶。”</p>\n<p>​\t“乾，阳物也；坤，阴物也。阴阳合德，而刚柔有体。”</p>\n<p>​\t“阴阳之义配日月，易简之善配至德。”（以上《系辞传》）</p>\n<p>​\t“观变于阴阳而立卦。”</p>\n<p>​\t“立天之道，曰阴与阳。立地之道，曰柔与刚。立人之道，曰仁与义。”（以上《说卦传》）</p>\n<p>​\t“潜龙勿用，阳气潜藏。”</p>\n<p>​\t“阴虽有美含之。”</p>\n<p>​\t“阴疑于阳必战，为其嫌于无阳也，故称龙焉。”（以上《文言传》）</p>\n<p>​\t<a href=\"https://baike.baidu.com/item/%E7%B3%BB%E8%BE%9E\" target=\"_blank\" rel=\"noopener\">《系辞》</a>、<a href=\"https://baike.baidu.com/item/%E6%96%87%E8%A8%80%E4%BC%A0\" target=\"_blank\" rel=\"noopener\">《文言》</a>诸传，不敢遂认为直接出孔子手。因传中多有“子曰”字样，论体例应为七十子后学者所记也。姑置不论，即将以上诸条全认为孔子学说，其所谓阴阳者亦不过如此。盖孔子之哲学，谓宇宙间有两种力相对待，相摩荡，如电气之有正负，斯为万有之缘起。此两种力难于表示，故以种种对待名辞形容之，如刚柔、动静、消息、屈伸、往来、进退、翕辟<sup class=\"footnote-ref\"><a href=\"#fn14\" id=\"fnref14\">[14]</a></sup>等皆是，而阴阳亦其一也。就中言阴阳者，远不如言刚柔、消息、往来者之多。与其谓《易》以道阴阳，母宁<sup class=\"footnote-ref\"><a href=\"#fn15\" id=\"fnref15\">[15]</a></sup>谓《易》以道刚柔，道消息也。**要之阴阳两字，不过孔子“二元哲学”之一种符号，而其所用符号，又并不止此一种，其中并不含有何等神秘意味，与矫诬<sup class=\"footnote-ref\"><a href=\"#fn16\" id=\"fnref16\">[16]</a></sup>之术数更相远。**故谓后世之阴阳说导源于孔子，吾亦未敢承<sup class=\"footnote-ref\"><a href=\"#fn17\" id=\"fnref17\">[17]</a></sup>。</p>\n<h2 id=\"五行二字语意之变迁\"><a class=\"markdownIt-Anchor\" href=\"#五行二字语意之变迁\"></a> 五行二字语意之变迁</h2>\n<pre><code>五行二字最初见于经典者，则《尚书·甘誓》，云：“有扈氏威侮五行，怠弃三正。”[^22]此语作何解，颇难臆断。后世注家，多指五行为金、木、水、火、土，三正为建子、建丑、建寅。然据彼辈所信，子、丑、寅建，分配周、商、夏。《甘誓》为夏书，则时无子、丑二建，何得云三正？且金、木、水、火、土之五行，何得言威侮，又何从而威侮者？窃疑此文应解为威侮五种应行之道[^23]，怠弃三种正义。其何者为五，何者为三，固无可考。然与后世五行说绝不相蒙，盖无疑。\n</code></pre>\n<p>​\t次则为《洪范》。自汉人作《洪范五行传》后，于是言五行者必联想《洪范》，此两名词几成不可离之关系。虽然，实际上《洪范》所谓五行果有何等神秘意味否耶？请勘视原文：</p>\n<p>​\t“我闻在昔，鲧（gǔn）堙（yīn）洪水，汩陈其五行。”</p>\n<p>​\t“一五行：一曰水，二曰火，三曰木，四曰金，五曰土。水曰润下，火曰炎上，木曰曲直，金曰从革，土爱稼稿。润下作咸，炎上作苦，曲直作酸，从革作辛，稼作甘。“<sup class=\"footnote-ref\"><a href=\"#fn18\" id=\"fnref18\">[18]</a></sup></p>\n<p>​\t此不过将物质区分为五类，言其功用及性质耳，何尝有丝毫哲学的或术数的意味？ &quot; 鲧湮洪水，汩陈其五行 ” 者，言因湮水之故，致一切物质不能供人用。若谓汩乱五行原理，则与堙水何关耶？<strong>《洪范》本为政治书，其九畴先列五行者，因其为物质的要素，人与经济所攸命耳。</strong>《左传》所谓 **“天生五材，民并用之”，即此义也。然则《洪范》本意，并非以此一畴统贯生八畴甚明，后世愚儒，欲取凡百事物皆纳入五行中，于是首将第二畴之五事貌、言、视、听、思分配水、火、木、金、土。**试问，第四畴之五纪，第九畴之五福，数固同为五，然有法分配否？ 第三畴之八政，第六畴之三德，数不止五，或不及五者，又有法分配否？ 第五畴之皇极，第七畴之稽疑，第八畴之庶，并无数目者，又有法分配否？以一贯八，而所贯者亦仅一而止。愚儒之心劳日拙，大可怜也。</p>\n<p>​\t  除《书经》此两文外，《诗经》、《仪礼》、《易》经传乃至《老子》、《论语》、《孟子》皆不见有以五行二字连文者。（此凭吾记忆所及耳，读者如有所发见望指正） 惟《墨子·经下》及《经说下》云：“五行毋常胜，说在宜。”   “五合，水火土，火离然。火烁金，火多也。金靡炭，金多也。合之府水，木离木。……”  此确与《洪范》所言五行为同物，且其言“无常胜”之义，注家或以后世五行生说解之。实则胜训贵，意谓此五种物质无常贵，但适宜应需则为贵，其说甚平实，不待穿凿也。</p>\n<p>​\t《荀子·非十二子篇》，其非子思、孟轲也，有颇奇异之数语。曰：“案往旧造说，谓之<strong>五行</strong>，甚僻违而无类，幽隐而无说，闭约而无解。案饰其辞而衹敬之，曰：此真先君子之言也。子思唱之，孟轲和之。”</p>\n<p>​\t此五行不知作何解，若谓即《洪范》之五行耶？子思、孟轲书中只字未尝道及。《中庸》以君臣、父子、兄弟、夫妇、朋友五者为天下之达道，道有行义，五行或指此耶？然此为儒家常言，非思、轲所创，且无所谓“僻违、幽隐、闭约”。杨倞注释为仁、义、礼、智、信之五常<sup class=\"footnote-ref\"><a href=\"#fn19\" id=\"fnref19\">[19]</a></sup>，或者近是然子思说虽无可考，或《中庸》外尚有著述。孟子则恒言仁义礼智，未尝以信与之并列也。此文何指，姑勿深论但决非如后世之五行说，则可断言耳。</p>\n<p>​\t古籍中可信者，其言五行之说，以吾记忆所及，尽于是矣。此外，尚有应怀疑者一段，则《左传》昭二十五年记郑子大叔与晋赵简子问答语：</p>\n<p>​\t“吉也闻诸先大夫子产日：天地之经，而民实则之…用其五行气为五味，发为五色，章为五声。……”<sup class=\"footnote-ref\"><a href=\"#fn20\" id=\"fnref20\">[20]</a></sup></p>\n<p>​\t此与后世所谓“《洪范》五行”者甚相类。此文如可信，则是孔子之先辈子产时已有此说矣。然《左传》真伪，在学界久成问题，藉日非全伪，然其作者最早应为战国时人，且最少有一部分为汉人窜乱，此殆无可讳者。谓子产有是言，吾以当时所有学说旁证之，不能置信也。</p>\n<p>​\t五行说之极怪诞而有组织者，始见于《吕氏春秋》之十二览。其后《小戴礼记》采之，即《月令篇），《淮南子》又采之，其说略如下：</p>\n<p>​\t“孟春之月……其日甲乙，其帝太皞，其神句芒，其虫鳞，其音角……其味酸，其臭，其祀户，祭先脾。……天子居青阳左个，驾苍龙，载青旂，衣青衣，服青玉，食麦与羊。……“</p>\n<p>​\t如此将一年四季分配五行：春木、夏火、秋金，冬水，所余之土无可归，则于夏秋交界时为拓一位置。于是五方之东、西、、北、中，五色之青、赤、黄、白、黑，五声之宫、商、角、、羽，五味之酸、苦、咸、甘，五虫之毛、介、鳞、羽、倮，五祀之井、灶、行，户、中，五谷之黍、稷、稻、麦、，五畜之马、牛、羊、犬、豕，五脏之心、肝、肺、脾、肾，五帝之太皞（hào）、炎帝、黄帝、少昊、颛顼，五神之句芒、祝融、后上、蓐收、玄冥，皆一一如法分配。《洪范》五事抑未编入。<strong>乃至如十天、六律、六吕等数目不与五符者，亦割裂以隶<sup class=\"footnote-ref\"><a href=\"#fn21\" id=\"fnref21\">[21]</a></sup>之。如是将宇宙间无量无数之物象事理<sup class=\"footnote-ref\"><a href=\"#fn22\" id=\"fnref22\">[22]</a></sup>，皆硬分为五类，而以纳诸所谓五行者之中，此种诡异之组织遂<sup class=\"footnote-ref\"><a href=\"#fn23\" id=\"fnref23\">[23]</a></sup>二千年蟠据全国人之心理，且支配全国人之行事。嘻！吾辈死生关系之医药，皆此种观念之产物，吾辈最爱敬之中华民国国旗，实为此种观念最显著之表象，他更何论也。</strong></p>\n<h2 id=\"阴阳家之成立及阴阳五行说之传播\"><a class=\"markdownIt-Anchor\" href=\"#阴阳家之成立及阴阳五行说之传播\"></a> 阴阳家之成立及阴阳五行说之传播</h2>\n<p>​\t<strong>由此观之，春秋战国以前，所谓阴阳，所谓五行，其语甚希见，其义极平淡，且此二事从未尝并为一谈。 请经及孔、老、墨、孟、韩诸大哲皆未尝齿及。</strong> 然则造此邪说以惑世诬民者谁耶？其始起于燕、齐方士<sup class=\"footnote-ref\"><a href=\"#fn24\" id=\"fnref24\">[24]</a></sup>。而其建设之，传播之，宜负罪责者三人焉：日邹衍，曰董仲舒，曰刘向。</p>\n<p>​\t《史记·孟子荀卿列传》云：“邹衍乃深观阴阳消息而作迁怪之变，《终始》、《大圣》之篇十余万言。”  又云：“ 称引天地剖判以来，五德转移，治各有宜，而符应若兹。”   又《封禅书》云：“齐威、宣之时，驺子<sup class=\"footnote-ref\"><a href=\"#fn25\" id=\"fnref25\">[25]</a></sup>之徒，论著终始五德之运，及秦帝，齐人奏<sup class=\"footnote-ref\"><a href=\"#fn26\" id=\"fnref26\">[26]</a></sup>之。” 《文选·魏都赋》注引《七略》云：“邹子有终始五德，从所不胜，土德后木德继之，金德次之，火德次之，水德次之。”  邹衍之书，见于《汉书·艺文志》者，有《邹子》四十九篇、《邹子终始》五十六篇，今虽已佚，然据《史记》及《七略》所说，可知其概。<strong>妖言之作俑者，实此人也。</strong></p>\n<p>​\t**衍倡此妖言，乘秦、汉间学术颓废之隙，遂以万斛<sup class=\"footnote-ref\"><a href=\"#fn27\" id=\"fnref27\">[27]</a></sup>狂澜之势，横领思想界之全部。**司马谈<sup class=\"footnote-ref\"><a href=\"#fn28\" id=\"fnref28\">[28]</a></sup>作《六家要旨》，以阴阳家与儒、道、墨、名、法并列，其势力可想。今将《汉书·艺文志》所著录此类书，照录如下：书目下括中文字皆《汉书》原注：</p>\n<p>《宋司星子韦》三篇（景公之史）</p>\n<p>《公生终始》十四篇（传邹爽终始书）</p>\n<p>《公孙发》二十二篇（六国时）</p>\n<p>《子》四十九篇（名衍，齐人，为燕昭王师居稷下，号“谈天衍”）《邹子终始》五十六篇</p>\n<p>《乘丘子》五篇（六国时）</p>\n<p>《杜文公》五篇（六国时）</p>\n<p>《黄帝秦素》二十篇（六国时，韩请公子所作）</p>\n<p>《南公》三十一篇（六国时）</p>\n<p>《容成子》十四篇</p>\n<p>《张苍》十六篇（承相北平侯）</p>\n<p>《邹爽子》十二篇（齐人，号曰“雕龙爽”）</p>\n<p>《间丘子》十三篇（名快，魏人，在南公前）</p>\n<p>《冯促》十三篇（郑人）</p>\n<p>《将巨子》五（六国时，先南公，南公称之）</p>\n<p>《五曹官制》五篇（汉制，似贾谊所条）</p>\n<p>《周伯》十一篇（齐人，六国时）</p>\n<p>《卫侯官》十二篇（近世，不知作者）</p>\n<p>《于长天下忠臣）九篇（平阴人，近世）</p>\n<p>《公孙浑邪》十五篇（平）</p>\n<p>《阴阳》三十八篇（不知作者）</p>\n<p>《公孙浑邪》十五（平曲侯）</p>\n<p>《杂阴阳》三十八篇（不知作者）</p>\n<p>右《诸子略》阴阳家二十一家三百大十九篇   《大壹兵法》一篇<sup class=\"footnote-ref\"><a href=\"#fn29\" id=\"fnref29\">[29]</a></sup></p>\n<p>《天一兵法》三十五篇</p>\n<p>《神农兵法》一篇</p>\n<p>《黄帝》十六篇（图三卷）</p>\n<p>《封胡》五篇（黄帝臣，依讬也）</p>\n<p>《风后》十三篇（图二卷黄帝臣，依讬也）</p>\n<p>《力牧》十五篇（黄帝臣，依讬也）</p>\n<p>《冶子》一篇（图一卷）</p>\n<p>《鬼容区》三篇（图一卷，黄帝臣，依讬也）</p>\n<p>《地典》六篇</p>\n<p>《孟子》一篇</p>\n<p>《东父》三十一篇</p>\n<p>《师旷》八篇（晋平公臣）</p>\n<p>《弘》十五篇（周史）</p>\n<p>《别成子望军气》六篇（图三卷）</p>\n<p>《辟兵威胜方》七十篇</p>\n<p>右《兵书略》阴阳家十六家二百四十九篇《泰一阴阳》二十三卷</p>\n<p>《黄帝阴阳》二十五卷</p>\n<p>《诸王子论阴阳》二十五卷</p>\n<p>《大元阴阳》二十六卷</p>\n<p>《三典阴阳谈论》二十七卷</p>\n<p>《神农大幽五行》二十七卷</p>\n<p>《四时五行经》二十六卷</p>\n<p>《猛子昭》二十五卷</p>\n<p>《阴阳五行时令》十九卷</p>\n<p>《堪舆金》四卷</p>\n<p>《务成子灾异应》十四卷</p>\n<p>《十二典灾异应》十二卷</p>\n<p>《钟律灾异》二十六卷</p>\n<p>《钟律丛辰日苑》二十三卷</p>\n<p>《钟律消息》二十九卷</p>\n<p>《黄钟》七卷</p>\n<p>《天一》六卷</p>\n<p>《泰一》二十九卷</p>\n<p>《刑德》七卷</p>\n<p>《风鼓六甲》二十四卷</p>\n<p>《风后孤虚》二十卷</p>\n<p>《六合随典》二十五卷</p>\n<p>《转位十二神》二十五卷</p>\n<p>《羡门式法》二十卷</p>\n<p>《门式》二十卷</p>\n<p>《文解六甲》十八卷</p>\n<p>《文解二十八宿》二十八卷</p>\n<p>《五音奇腋用兵》二十三卷</p>\n<p>《五音奇胲刑德》二十一卷</p>\n<p>《五音定名》十五卷</p>\n<p>右《数术略）五行家三十一家六百五十二卷 【上面所列的总结】</p>\n<p>​\t此外，如《数术略》医经、房中<sup class=\"footnote-ref\"><a href=\"#fn30\" id=\"fnref30\">[30]</a></sup>两门，亦大抵属此类，观今所传《黄帝内经》可知也。即以此三门论，为书一千三百余篇，对于《艺文志》总数万三千二百六十九卷，已占十分一而强。其实细绎全志目录，揣度其与此等书同性质者，恐占四分之一乃至三分之一。嘻！学术界之耻辱，莫此为甚矣。</p>\n<p>​\t邹衍书及他诸书皆不可见，可见者有董仲舒之《春秋繁露》，仲舒二千年来受醇儒之徽号<sup class=\"footnote-ref\"><a href=\"#fn31\" id=\"fnref31\">[31]</a></sup>，然其书祖述<sup class=\"footnote-ref\"><a href=\"#fn32\" id=\"fnref32\">[32]</a></sup>阴阳家言者几居半。今无暇一一胪列内容，但举其篇目：</p>\n<p>《五行对》第三十八</p>\n<p>《五行之义》第四十二</p>\n<p>《阴尊阳卑》第四十三</p>\n<p>《王道通三》第四十四</p>\n<p>《天辨在人》第四十六</p>\n<p>《阴阳位》第四十七</p>\n<p>《阴阳终始》第四十八</p>\n<p>《阴阳义》第四十九</p>\n<p>《阴阳出入》第五十</p>\n<p>《天道无二》第五十</p>\n<p>《暖敦多》第五十二</p>\n<p>《基义》第五十三</p>\n<p>《同类相动》第五十七</p>\n<p>《五行相胜》第五十九</p>\n<p>《五行逆顺》第六十</p>\n<p>《治水五行》第六十一</p>\n<p>《治乱五行》第六十二</p>\n<p>《五行变救》第六十三</p>\n<p>《五行五事》第六十四</p>\n<p>《天地之行》第七十八</p>\n<p>《如天之为》第八十</p>\n<p>《天地阴阳》第八十一</p>\n<p>​\t以上二十三篇，皆言阴阳五行，殆占全书之半。其中，所含精深之哲理固甚多，要之半袭阴阳家言，最少亦受其影响，而绝非孔、孟、荀以来之学术，则可断言也。**仲舒以儒家大师，而态度如此，故一时经学家皆从风而靡。**仲舒自以此术治《春秋》，京房、焦赣之徒以此术治《易》，夏侯胜、李寻之徒以此术治《书》，翼奉、孟之徒以此术治《诗》，王史氏之徒以此术治《礼》。于是庄严纯洁之六经被邹衍余毒所蹂躏，无复完肤矣。《艺文志·六艺略》所著录之书，其属于此类者以吾所推度，最少有如下之各种：</p>\n<p>《易》：</p>\n<p>《古五子》十八篇（自甲子至壬子说《易》阴阳）</p>\n<p>《淮南道训》二篇（淮南王安聘明《易》者九人，号九师说）《杂灾异》三十五篇</p>\n<p>《神输》五篇（师古曰，刘向《别录》云，神输者，王道失则灾害生得则四海输之祥瑞）</p>\n<p>《孟氏京房》十一篇</p>\n<p>《灾异孟氏京房》六十六篇</p>\n<p>《京氏段嘉》十二篇</p>\n<p>《书》：</p>\n<p>刘向《五行传记》十一卷</p>\n<p>许商《五行传记》一卷</p>\n<p>《诗》：</p>\n<p>《齐后氏传》三十九卷</p>\n<p>《齐孙氏传》二十八卷</p>\n<p>《齐杂记》十八卷</p>\n<p>《礼》：</p>\n<p>《明堂阴阳》三十三篇</p>\n<p>《王史氏》二十一篇（？）</p>\n<p>《明堂阴阳说》五篇</p>\n<p>《古封群祀》二十二篇</p>\n<p>《封禅议对》十九篇</p>\n<p>《汉封样群祀》三十六篇</p>\n<p>《春秋》：</p>\n<p>《公羊外传》五十篇（？）</p>\n<p>《谷梁外传》二十篇（？）</p>\n<p>《公羊杂记》八十三篇（？）</p>\n<p>《诸子略》儒家</p>\n<p>《董仲舒》百二十三篇（？）</p>\n<p>​\t右诸书虽什九<sup class=\"footnote-ref\"><a href=\"#fn33\" id=\"fnref33\">[33]</a></sup>已佚，然经近人辑出，尚多能得其梗概。要之，两汉所谓今文家经说，其能脱阴阳五行臭味者，什无二三，大率自仲舒启之。</p>\n<p>​\t《汉书·五行志》云：“汉兴，承秦灭学之后，景武之世，董仲舒治《公羊春秋》，始推阴阳，为儒者宗。宣、元之世，刘向治《谷梁春秋》，数其祸福，傅以《洪范》，与仲舒错<sup class=\"footnote-ref\"><a href=\"#fn34\" id=\"fnref34\">[34]</a></sup>。至向子歆，……言《五行传》，又颇不同。是以揽仲舒、别向、歆……所陈行事，……著于篇。”  <strong>据此知汉儒阴阳五行之学，开于仲舒而成于向、歆父子。</strong>《五行志》所载，大抵即刘向《洪范·五行传》之言也。吾侪试一籀<sup class=\"footnote-ref\"><a href=\"#fn35\" id=\"fnref35\">[35]</a></sup>读，当审其内容为何如。<strong>而后此所谓正史者，大率皆列此一篇，千余年莫之易呜呼！ 禨<sup class=\"footnote-ref\"><a href=\"#fn36\" id=\"fnref36\">[36]</a></sup>祥灾之迷信，深中于士大夫，智日以昏，而志日以偷，谁之咎也。吾故略疏证其来历如右，俾诵法<sup class=\"footnote-ref\"><a href=\"#fn37\" id=\"fnref37\">[37]</a></sup>孔子之君子得省览焉。</strong></p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>说明：梁启超写于1921年，由知 <a href=\"https://www.zhihu.com/people/JackZhouMine/activities\" target=\"_blank\" rel=\"noopener\">乎用户Jack Lei</a> 校对，批注。 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>侌：yīn，古同阴。 <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>阜旁：耳朵旁。 <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p>孳乳后起：派生而来。 <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn5\" class=\"footnote-item\"><p>外：原文没有外，认为作者笔误。 <a href=\"#fnref5\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn6\" class=\"footnote-item\"><p>卦辞爻辞：卦辞，说明《易经》六十四卦要义的文字，即占卜是解释卦象的文字。爻（yaó）辞，占卜时用以解释爻的文字，一卦有六爻。阳爻称之为九，阴爻称为六。从上到下，初九（六），九二（六二），九三（六三），九四（六四），九五（六五），上九（上六）。 <a href=\"#fnref6\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn7\" class=\"footnote-item\"><p>虺虺：拼音（huǐ huǐ ） , 表雷声。 <a href=\"#fnref7\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn8\" class=\"footnote-item\"><p>《易》：《易经》的简称，下同。 <a href=\"#fnref8\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn9\" class=\"footnote-item\"><p>阳阳：今作“扬扬”。 <a href=\"#fnref9\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn10\" class=\"footnote-item\"><p>中医因此说中医起源于道。 <a href=\"#fnref10\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn11\" class=\"footnote-item\"><p>断言:可以肯定地说。 <a href=\"#fnref11\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn12\" class=\"footnote-item\"><p>抑：语气词，在句首，无义。 <a href=\"#fnref12\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn13\" class=\"footnote-item\"><p>几于：几乎。 <a href=\"#fnref13\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn14\" class=\"footnote-item\"><p>翕辟：开合。 <a href=\"#fnref14\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn15\" class=\"footnote-item\"><p>母宁：毋宁，作者笔误。 <a href=\"#fnref15\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn16\" class=\"footnote-item\"><p>矫诬：故弄玄虚。 <a href=\"#fnref16\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn17\" class=\"footnote-item\"><p>承：奉也，受也，接受。 <a href=\"#fnref17\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn18\" class=\"footnote-item\"><p>五味：五行配五味出现了。 <a href=\"#fnref18\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn19\" class=\"footnote-item\"><p>五常：五常配五行，有别于儒家的五德。 <a href=\"#fnref19\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn20\" class=\"footnote-item\"><p>五声：五声配五行。 <a href=\"#fnref20\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn21\" class=\"footnote-item\"><p>隶：通 “离”，动词，使之离，离开，废弃之意。 <a href=\"#fnref21\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn22\" class=\"footnote-item\"><p>物象事理：事物的现象，事物的原理，指自然运行的原理。 <a href=\"#fnref22\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn23\" class=\"footnote-item\"><p>遂：竟然。 <a href=\"#fnref23\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn24\" class=\"footnote-item\"><p>方士：术士，修习方术的人，包括占卜、预言、法术、气功、炼丹等，达到趋吉避凶、<a href=\"https://www.wikiwand.com/zh-hans/%E9%80%9A%E9%9D%88\" target=\"_blank\" rel=\"noopener\">通灵</a>、<a href=\"https://www.wikiwand.com/zh-hans/%E9%95%B7%E7%94%9F%E4%B8%8D%E8%80%81\" target=\"_blank\" rel=\"noopener\">长生不老</a>、<a href=\"https://www.wikiwand.com/zh-hans/%E7%BE%BD%E5%8C%96\" target=\"_blank\" rel=\"noopener\">羽化飞升</a>等目的。 <a href=\"#fnref24\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn25\" class=\"footnote-item\"><p>驺子：邹衍的尊称。 <a href=\"#fnref25\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn26\" class=\"footnote-item\"><p>奏：奉上，上奏。 <a href=\"#fnref26\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn27\" class=\"footnote-item\"><p>万斛（hú）: 容量之多。斛，体积单位，十斗或五斗为一斛。 <a href=\"#fnref27\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn28\" class=\"footnote-item\"><p>司马谈：司马迁的父亲。 <a href=\"#fnref28\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn29\" class=\"footnote-item\"><p>上面所列的总结，下同。 <a href=\"#fnref29\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn30\" class=\"footnote-item\"><p>房中：房中术，包括优学、性学和性保健，御女之术，多由男性对女性实施。女性对男性实施的，又叫媚术。 <a href=\"#fnref30\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn31\" class=\"footnote-item\"><p>醇儒之徽号：醇儒，纯在的儒生。徽号，尊号。 <a href=\"#fnref31\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn32\" class=\"footnote-item\"><p>祖述：效法前人。 <a href=\"#fnref32\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn33\" class=\"footnote-item\"><p>什九：十之九。 <a href=\"#fnref33\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn34\" class=\"footnote-item\"><p>错：打磨。 <a href=\"#fnref34\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn35\" class=\"footnote-item\"><p>籀（zhòu）：读书。 <a href=\"#fnref35\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn36\" class=\"footnote-item\"><p>禨（jī）：迷信鬼神，向鬼神求福。 <a href=\"#fnref36\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn37\" class=\"footnote-item\"><p>诵法：称颂并效法。 <a href=\"#fnref37\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckd7cccdp0005jwrndu5cpa9h","category_id":"ckd7cccdn0004jwrnxcu4yxim","_id":"ckd7cccea000fjwrnuuwichyd"},{"post_id":"ckd7cccd90000jwrne09u3luh","category_id":"ckd7cccdn0004jwrnxcu4yxim","_id":"ckd7cccef000ijwrnrleb7iks"},{"post_id":"ckd7cccdi0001jwrn85xr62do","category_id":"ckd7cccdn0004jwrnxcu4yxim","_id":"ckd7cccem000mjwrncdhpr8pb"},{"post_id":"ckd7cccdr0006jwrn8ea2cvke","category_id":"ckd7ccce6000cjwrnabnetspg","_id":"ckd7cccev000sjwrnltaeat9l"},{"post_id":"ckd7cccdx000ajwrn2aleedag","category_id":"ckd7ccceh000kjwrnyo7x6kb6","_id":"ckd7cccf3000xjwrny3sy6hhu"},{"post_id":"ckd7ccce5000bjwrn9hpx5p6b","category_id":"ckd7ccceq000qjwrn220qsnao","_id":"ckd7cccf90015jwrndk1ysrea"},{"post_id":"ckd7cccf0000vjwrnnigw8kyr","category_id":"ckd7ccceq000qjwrn220qsnao","_id":"ckd7cccff0019jwrnbqjxv5j1"},{"post_id":"ckd7cccf3000zjwrn50ffq034","category_id":"ckd7cccf2000wjwrnewt9tbrb","_id":"ckd7cccfj001ejwrnu8bzgloq"},{"post_id":"ckd7cccf50011jwrnbyf1flma","category_id":"ckd7ccceq000qjwrn220qsnao","_id":"ckd7cccfl001gjwrnbuulhe9e"},{"post_id":"ckd7ccceb000hjwrnyczpk94v","category_id":"ckd7cccf2000wjwrnewt9tbrb","_id":"ckd7cccfo001kjwrnxmkfxyzt"},{"post_id":"ckd7cccfd0018jwrnbb4aehlg","category_id":"ckd7ccceq000qjwrn220qsnao","_id":"ckd7cccfq001njwrnhukevjr5"},{"post_id":"ckd7cccej000ljwrnopdx4y42","category_id":"ckd7ccceq000qjwrn220qsnao","_id":"ckd7cccfw001sjwrnoq680oi5"},{"post_id":"ckd7cccfp001mjwrn2x5d73su","category_id":"ckd7ccce6000cjwrnabnetspg","_id":"ckd7cccg80024jwrnpducwb3d"},{"post_id":"ckd7cccfp001mjwrn2x5d73su","category_id":"ckd7cccft001pjwrnc4nmo76h","_id":"ckd7cccga0027jwrnu90unrmt"},{"post_id":"ckd7ccceo000ojwrnvv1o6vv1","category_id":"ckd7ccce6000cjwrnabnetspg","_id":"ckd7cccgc0029jwrn8vkq8sdr"},{"post_id":"ckd7ccceo000ojwrnvv1o6vv1","category_id":"ckd7cccft001pjwrnc4nmo76h","_id":"ckd7cccge002ejwrn04j4uisu"},{"post_id":"ckd7cccfy001ujwrnm4u42wod","category_id":"ckd7ccceq000qjwrn220qsnao","_id":"ckd7cccgf002gjwrn9sdayzja"},{"post_id":"ckd7cccg2001xjwrnglozfd0w","category_id":"ckd7cccf2000wjwrnewt9tbrb","_id":"ckd7cccgj002kjwrnnlf42ucm"},{"post_id":"ckd7cccew000tjwrndbodlkbn","category_id":"ckd7cccg1001wjwrn2b6jcbzl","_id":"ckd7cccgj002mjwrnvl6rgamz"},{"post_id":"ckd7cccg50020jwrnftz5l8es","category_id":"ckd7cccf2000wjwrnewt9tbrb","_id":"ckd7cccgm002qjwrny3l1xprc"},{"post_id":"ckd7cccg90026jwrnkgqil9v3","category_id":"ckd7cccf2000wjwrnewt9tbrb","_id":"ckd7cccgn002rjwrncvqltmpr"},{"post_id":"ckd7ccce8000ejwrn8pndqjbz","category_id":"ckd7cccf2000wjwrnewt9tbrb","_id":"ckd7cccgp002tjwrnoyuj2d7m"},{"post_id":"ckd7ccce8000ejwrn8pndqjbz","category_id":"ckd7cccg80023jwrnplwambc1","_id":"ckd7cccgs002wjwrn8pn40m8l"},{"post_id":"ckd7cccfa0016jwrnevypmdhi","category_id":"ckd7ccce6000cjwrnabnetspg","_id":"ckd7cccgu002zjwrnbk3m3nge"},{"post_id":"ckd7cccfa0016jwrnevypmdhi","category_id":"ckd7cccft001pjwrnc4nmo76h","_id":"ckd7cccgv0031jwrnglg83qsu"},{"post_id":"ckd7cccfi001djwrnrd9n8vjv","category_id":"ckd7ccce6000cjwrnabnetspg","_id":"ckd7cccgx0034jwrnc7r8xpg0"},{"post_id":"ckd7cccfi001djwrnrd9n8vjv","category_id":"ckd7cccft001pjwrnc4nmo76h","_id":"ckd7cccgy0036jwrn6kvhjvq7"},{"post_id":"ckd7cccfk001fjwrny8cht8fy","category_id":"ckd7ccce6000cjwrnabnetspg","_id":"ckd7cccgz0039jwrno6sp3vxf"},{"post_id":"ckd7cccfk001fjwrny8cht8fy","category_id":"ckd7cccft001pjwrnc4nmo76h","_id":"ckd7ccch2003bjwrn61ghok0e"},{"post_id":"ckd7cccfn001jjwrnsyq3fbcl","category_id":"ckd7ccce6000cjwrnabnetspg","_id":"ckd7ccch5003ejwrnx977juyq"},{"post_id":"ckd7cccfn001jjwrnsyq3fbcl","category_id":"ckd7cccft001pjwrnc4nmo76h","_id":"ckd7ccch6003hjwrnvcf8m3u8"},{"post_id":"ckd7cccer000rjwrnax9puo0h","category_id":"ckd7cccfm001hjwrn6dzc57om","_id":"ckd7ccch9003kjwrn1v75kcf8"},{"post_id":"ckd7cccer000rjwrnax9puo0h","category_id":"ckd7cccgs002xjwrnblysi2zn","_id":"ckd7cccha003mjwrntzybsmro"},{"post_id":"ckd7cccfu001rjwrn8kocc11o","category_id":"ckd7cccg80023jwrnplwambc1","_id":"ckd7ccchb003ojwrnirycs3b9"},{"post_id":"ckd7cccg70022jwrnexulyt2q","category_id":"ckd7cccgz0037jwrn9q0f8m9f","_id":"ckd7ccchb003qjwrnofypxey6"},{"post_id":"ckd7cccgb0028jwrn55z8j9mz","category_id":"ckd7ccch3003cjwrn9epjfmdl","_id":"ckd7ccchd003tjwrnmwbw66bj"},{"post_id":"ckd7cccgd002djwrnnwmvdmzx","category_id":"ckd7ccch7003jjwrnx0b0ntuu","_id":"ckd7ccchd003vjwrnvfzur9g8"}],"PostTag":[{"post_id":"ckd7cccd90000jwrne09u3luh","tag_id":"ckd7cccdl0002jwrn9oj0oofq","_id":"ckd7cccdw0009jwrnh0j0ocvu"},{"post_id":"ckd7cccdi0001jwrn85xr62do","tag_id":"ckd7cccdt0007jwrnr6lft71f","_id":"ckd7ccceb000gjwrn795j7vkd"},{"post_id":"ckd7cccdp0005jwrndu5cpa9h","tag_id":"ckd7cccdt0007jwrnr6lft71f","_id":"ckd7cccen000njwrnsomuia0a"},{"post_id":"ckd7cccdr0006jwrn8ea2cvke","tag_id":"ckd7ccceg000jjwrn60xfrvks","_id":"ckd7cccf3000yjwrnkpoo0my7"},{"post_id":"ckd7cccdr0006jwrn8ea2cvke","tag_id":"ckd7cccep000pjwrn4k80t9bm","_id":"ckd7cccf50010jwrnvus3tes6"},{"post_id":"ckd7cccf3000zjwrn50ffq034","tag_id":"ckd7cccdl0002jwrn9oj0oofq","_id":"ckd7cccf90014jwrnxk7jbj0a"},{"post_id":"ckd7cccdx000ajwrn2aleedag","tag_id":"ckd7cccez000ujwrnz6jfn53w","_id":"ckd7cccfd0017jwrnmn57sdbs"},{"post_id":"ckd7cccf50011jwrnbyf1flma","tag_id":"ckd7cccep000pjwrn4k80t9bm","_id":"ckd7cccfi001cjwrn920gue6w"},{"post_id":"ckd7ccce5000bjwrn9hpx5p6b","tag_id":"ckd7cccf70012jwrncmugflrz","_id":"ckd7cccfp001ljwrnkbt1wzfx"},{"post_id":"ckd7ccce5000bjwrn9hpx5p6b","tag_id":"ckd7cccfh001bjwrnliq9a4q4","_id":"ckd7cccfr001ojwrnni8o97ge"},{"post_id":"ckd7ccce8000ejwrn8pndqjbz","tag_id":"ckd7cccfm001ijwrnhl6gwa7a","_id":"ckd7cccfx001tjwrnv0h7lrz7"},{"post_id":"ckd7ccce8000ejwrn8pndqjbz","tag_id":"ckd7cccdl0002jwrn9oj0oofq","_id":"ckd7cccg0001vjwrnkyvco5e6"},{"post_id":"ckd7cccfu001rjwrn8kocc11o","tag_id":"ckd7cccdl0002jwrn9oj0oofq","_id":"ckd7cccg5001zjwrn0zdcjfxc"},{"post_id":"ckd7ccceb000hjwrnyczpk94v","tag_id":"ckd7cccfu001qjwrn9ldtza0z","_id":"ckd7cccg60021jwrn38ewc7rh"},{"post_id":"ckd7cccg90026jwrnkgqil9v3","tag_id":"ckd7cccfu001qjwrn9ldtza0z","_id":"ckd7cccgd002cjwrnauaz9scx"},{"post_id":"ckd7cccej000ljwrnopdx4y42","tag_id":"ckd7cccg4001yjwrnheyidznk","_id":"ckd7cccgf002fjwrno9id8gq5"},{"post_id":"ckd7cccej000ljwrnopdx4y42","tag_id":"ckd7cccg80025jwrn63hc3nuw","_id":"ckd7cccgh002ijwrnjqivis0v"},{"post_id":"ckd7ccceo000ojwrnvv1o6vv1","tag_id":"ckd7ccceg000jjwrn60xfrvks","_id":"ckd7cccgj002ljwrnivoa45b9"},{"post_id":"ckd7ccceo000ojwrnvv1o6vv1","tag_id":"ckd7cccgd002bjwrnn5qtmydj","_id":"ckd7cccgl002ojwrn75fkh8ki"},{"post_id":"ckd7cccer000rjwrnax9puo0h","tag_id":"ckd7cccgi002jjwrnd8qcebdi","_id":"ckd7cccgr002vjwrn1q5e1sth"},{"post_id":"ckd7cccer000rjwrnax9puo0h","tag_id":"ckd7cccgm002pjwrnj9cfy9xk","_id":"ckd7cccgt002yjwrnon5w5l29"},{"post_id":"ckd7cccew000tjwrndbodlkbn","tag_id":"ckd7cccgq002ujwrnbq990wwy","_id":"ckd7cccgv0032jwrns8wt4hmn"},{"post_id":"ckd7cccf0000vjwrnnigw8kyr","tag_id":"ckd7cccgu0030jwrne11egyko","_id":"ckd7cccgz0038jwrnnipvhcxk"},{"post_id":"ckd7cccfa0016jwrnevypmdhi","tag_id":"ckd7ccceg000jjwrn60xfrvks","_id":"ckd7ccch4003djwrnqojt234b"},{"post_id":"ckd7cccfa0016jwrnevypmdhi","tag_id":"ckd7cccgx0035jwrnb188fwlg","_id":"ckd7ccch5003fjwrnfdhs92bc"},{"post_id":"ckd7cccfd0018jwrnbb4aehlg","tag_id":"ckd7cccg4001yjwrnheyidznk","_id":"ckd7ccch7003ijwrnw2gzfozt"},{"post_id":"ckd7cccfi001djwrnrd9n8vjv","tag_id":"ckd7ccceg000jjwrn60xfrvks","_id":"ckd7cccha003njwrnehpqdr92"},{"post_id":"ckd7cccfi001djwrnrd9n8vjv","tag_id":"ckd7cccgx0035jwrnb188fwlg","_id":"ckd7ccchb003pjwrniesgmequ"},{"post_id":"ckd7cccfk001fjwrny8cht8fy","tag_id":"ckd7ccceg000jjwrn60xfrvks","_id":"ckd7ccchc003sjwrnwbjk80ff"},{"post_id":"ckd7cccfk001fjwrny8cht8fy","tag_id":"ckd7cccha003ljwrndzfmzvn9","_id":"ckd7ccchd003ujwrnzdpu9xea"},{"post_id":"ckd7cccfn001jjwrnsyq3fbcl","tag_id":"ckd7ccceg000jjwrn60xfrvks","_id":"ckd7ccchf003xjwrnhfk90m9d"},{"post_id":"ckd7cccfn001jjwrnsyq3fbcl","tag_id":"ckd7cccha003ljwrndzfmzvn9","_id":"ckd7ccchf003yjwrnhk43wj4m"},{"post_id":"ckd7cccfp001mjwrn2x5d73su","tag_id":"ckd7ccceg000jjwrn60xfrvks","_id":"ckd7ccchg0040jwrnk3r70rvv"},{"post_id":"ckd7cccfp001mjwrn2x5d73su","tag_id":"ckd7cccha003ljwrndzfmzvn9","_id":"ckd7ccchg0041jwrn12g1v34y"},{"post_id":"ckd7cccfy001ujwrnm4u42wod","tag_id":"ckd7ccchf003zjwrnt8an8lrk","_id":"ckd7ccchh0043jwrnj9ru6gpg"},{"post_id":"ckd7cccg2001xjwrnglozfd0w","tag_id":"ckd7ccchg0042jwrnifq1cpx5","_id":"ckd7ccchh0045jwrntkwe45er"},{"post_id":"ckd7cccg50020jwrnftz5l8es","tag_id":"ckd7ccchh0044jwrnbzxcsiv7","_id":"ckd7ccchj0047jwrnzoec761c"},{"post_id":"ckd7cccg70022jwrnexulyt2q","tag_id":"ckd7cccgq002ujwrnbq990wwy","_id":"ckd7ccchk0049jwrn0lw6dbf5"},{"post_id":"ckd7cccgb0028jwrn55z8j9mz","tag_id":"ckd7ccchk0048jwrnq90k1grr","_id":"ckd7ccchl004bjwrn1fuuxvma"},{"post_id":"ckd7cccgd002djwrnnwmvdmzx","tag_id":"ckd7ccchl004ajwrnny2ku0iy","_id":"ckd7cccho004ejwrngpe9pu93"},{"post_id":"ckd7cccgd002djwrnnwmvdmzx","tag_id":"ckd7ccchm004cjwrnqvoa9d1s","_id":"ckd7cccho004fjwrnnpjq435j"},{"post_id":"ckd7cccgd002djwrnnwmvdmzx","tag_id":"ckd7ccchn004djwrnaau1dqzf","_id":"ckd7cccho004gjwrnuk173h71"}],"Tag":[{"name":"html5","_id":"ckd7cccdl0002jwrn9oj0oofq"},{"name":"html","_id":"ckd7cccdt0007jwrnr6lft71f"},{"name":"vue","_id":"ckd7ccceg000jjwrn60xfrvks"},{"name":"es6","_id":"ckd7cccep000pjwrn4k80t9bm"},{"name":"工作","_id":"ckd7cccez000ujwrnz6jfn53w"},{"name":"模块化","_id":"ckd7cccf70012jwrncmugflrz"},{"name":"commonJS","_id":"ckd7cccfh001bjwrnliq9a4q4"},{"name":"fetch","_id":"ckd7cccfm001ijwrnhl6gwa7a"},{"name":"http","_id":"ckd7cccfu001qjwrn9ldtza0z"},{"name":"npm","_id":"ckd7cccg4001yjwrnheyidznk"},{"name":"node","_id":"ckd7cccg80025jwrn63hc3nuw"},{"name":"前端框架","_id":"ckd7cccgd002bjwrnn5qtmydj"},{"name":"git","_id":"ckd7cccgi002jjwrnd8qcebdi"},{"name":"github","_id":"ckd7cccgm002pjwrnj9cfy9xk"},{"name":"数码产品","_id":"ckd7cccgq002ujwrnbq990wwy"},{"name":"hexo","_id":"ckd7cccgu0030jwrne11egyko"},{"name":"vue-router","_id":"ckd7cccgx0035jwrnb188fwlg"},{"name":"vuex","_id":"ckd7cccha003ljwrndzfmzvn9"},{"name":"yarn","_id":"ckd7ccchf003zjwrnt8an8lrk"},{"name":"xhr","_id":"ckd7ccchg0042jwrnifq1cpx5"},{"name":"网络","_id":"ckd7ccchh0044jwrnbzxcsiv7"},{"name":"js","_id":"ckd7ccchk0048jwrnq90k1grr"},{"name":"中医","_id":"ckd7ccchl004ajwrnny2ku0iy"},{"name":"阴阳五行","_id":"ckd7ccchm004cjwrnqvoa9d1s"},{"name":"伪科学","_id":"ckd7ccchn004djwrnaau1dqzf"}]}}